
/home/noah/.cache/arduino/sketches/E7A643FC64B2773803B21EA345A1F641/main.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__ctors_end>
       4:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
       8:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
       c:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      10:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      14:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      18:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      1c:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      20:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      24:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      28:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      2c:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__vector_11>
      30:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      34:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      38:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      3c:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      40:	0c 94 92 24 	jmp	0x4924	; 0x4924 <__vector_16>
      44:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      48:	0c 94 02 25 	jmp	0x4a04	; 0x4a04 <__vector_18>
      4c:	0c 94 dc 24 	jmp	0x49b8	; 0x49b8 <__vector_19>
      50:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      54:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      58:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      5c:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      60:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      64:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <lcd_font+0x408>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	07 63       	ori	r16, 0x37	; 55
      c4:	42 36       	cpi	r20, 0x62	; 98
      c6:	b7 9b       	sbis	0x16, 7	; 22
      c8:	d8 a7       	std	Y+40, r29	; 0x28
      ca:	1a 39       	cpi	r17, 0x9A	; 154
      cc:	68 56       	subi	r22, 0x68	; 104
      ce:	18 ae       	std	Y+56, r1	; 0x38
      d0:	ba ab       	std	Y+50, r27	; 0x32
      d2:	55 8c       	ldd	r5, Z+29	; 0x1d
      d4:	1d 3c       	cpi	r17, 0xCD	; 205
      d6:	b7 cc       	rjmp	.-1682   	; 0xfffffa46 <__eeprom_end+0xff7efa46>
      d8:	57 63       	ori	r21, 0x37	; 55
      da:	bd 6d       	ori	r27, 0xDD	; 221
      dc:	ed fd       	.word	0xfded	; ????
      de:	75 3e       	cpi	r23, 0xE5	; 229
      e0:	f6 17       	cp	r31, r22
      e2:	72 31       	cpi	r23, 0x12	; 18
      e4:	bf 00       	.word	0x00bf	; ????
      e6:	00 00       	nop
      e8:	80 3f       	cpi	r24, 0xF0	; 240

000000ea <__trampolines_end>:
__trampolines_start():
      ea:	8d 00       	.word	0x008d	; ????
      ec:	10 00       	.word	0x0010	; ????
      ee:	ae 00       	.word	0x00ae	; ????
      f0:	02 00       	.word	0x0002	; ????
      f2:	10 00       	.word	0x0010	; ????
      f4:	40 00       	.word	0x0040	; ????
      f6:	81 00       	.word	0x0081	; ????
      f8:	cf 00       	.word	0x00cf	; ????
      fa:	a1 00       	.word	0x00a1	; ????
      fc:	c8 00       	.word	0x00c8	; ????
      fe:	a6 00       	.word	0x00a6	; ????
     100:	a8 00       	.word	0x00a8	; ????
     102:	3f 00       	.word	0x003f	; ????
     104:	d3 00       	.word	0x00d3	; ????
     106:	00 00       	nop
     108:	d5 00       	.word	0x00d5	; ????
     10a:	80 00       	.word	0x0080	; ????
     10c:	d9 00       	.word	0x00d9	; ????
     10e:	f1 00       	.word	0x00f1	; ????
     110:	da 00       	.word	0x00da	; ????
     112:	12 00       	.word	0x0012	; ????
     114:	db 00       	.word	0x00db	; ????
     116:	40 00       	.word	0x0040	; ????
     118:	20 00       	.word	0x0020	; ????
     11a:	02 00       	.word	0x0002	; ????
     11c:	8d 00       	.word	0x008d	; ????
     11e:	14 00       	.word	0x0014	; ????
     120:	a4 00       	.word	0x00a4	; ????
     122:	a6 00       	.word	0x00a6	; ????
     124:	af 00       	.word	0x00af	; ????

00000126 <LCDWIKI_SPI::start(unsigned int)::SSD1283A_regValues>:
     126:	10 00 8e 2f 11 00 0c 00 07 00 21 00 28 00 06 00     .../......!.(...
     136:	28 00 05 00 27 00 7f 05 29 00 a1 89 00 00 01 00     (...'...).......
     146:	ff ff 64 00 29 00 b0 80 ff ff 1e 00 29 00 fe ff     ..d.).......)...
     156:	07 00 23 02 ff ff 1e 00 07 00 33 02 01 00 83 21     ..#.......3....!
     166:	03 00 30 68 2f 00 ff ff 2c 00 00 80 27 00 70 05     ..0h/...,...'.p.
     176:	02 00 00 03 0b 00 0c 58 12 00 09 06 13 00 00 31     .......X.......1

00000186 <LCDWIKI_SPI::start(unsigned int)::ST7735S_regValues>:
     186:	11 00 7f 78 b1 03 05 3c 3c b2 03 05 3c 3c b3 06     ...x...<<...<<..
     196:	05 3c 3c 05 3c 3c b4 01 03 c0 03 28 08 04 c1 01     .<<.<<.....(....
     1a6:	c0 c2 02 0d 00 c3 02 8d 2a c4 02 8d ee c5 01 1a     ........*.......
     1b6:	17 01 05 36 01 08 e0 10 03 22 07 0a 2e 30 25 2a     ...6....."...0%*
     1c6:	28 26 2e 3a 00 01 03 13 e1 10 04 16 06 0d 2d 26     (&.:..........-&
     1d6:	23 27 27 25 2d 3b 00 01 04 13 3a 01 05 29 00        #''%-;....:..).

000001e5 <LCDWIKI_SPI::start(unsigned int)::ILI9488_regValues>:
     1e5:	f7 04 a9 51 2c 82 c0 02 11 09 c1 01 41 c5 03 00     ...Q,.......A...
     1f5:	0a 80 b1 02 b0 11 b4 01 02 b6 02 02 22 b7 01 c6     ............"...
     205:	be 02 00 04 e9 01 00 36 01 08 e0 0f 00 07 10 09     .......6........
     215:	17 0b 41 89 4b 0a 0c 0e 18 1b 0f e1 0f 00 17 1a     ..A.K...........
     225:	04 0e 06 2f 45 43 02 0a 09 32 36 0f 11 00 7f 78     .../EC...26....x
     235:	29 00                                               ).

00000237 <LCDWIKI_SPI::start(unsigned int)::ILI9488_IPF>:
     237:	3a 01 55                                            :.U

0000023a <LCDWIKI_SPI::start(unsigned int)::ILI9488_IPF>:
     23a:	3a 01 66                                            :.f

0000023d <LCDWIKI_SPI::start(unsigned int)::ILI9486_regValues>:
     23d:	f7 04 a9 51 2c 82 c0 02 11 09 c1 01 41 c5 03 00     ...Q,.......A...
     24d:	0a 80 b1 02 b0 11 b4 01 02 b6 02 02 22 b7 01 c6     ............"...
     25d:	be 02 00 04 e9 01 00 36 01 08 3a 01 55 e0 0f 00     .......6..:.U...
     26d:	07 10 09 17 0b 41 89 4b 0a 0c 0e 18 1b 0f e1 0f     .....A.K........
     27d:	00 17 1a 04 0e 06 2f 45 43 02 0a 09 32 36 0f 11     ....../EC...26..
     28d:	00 7f 78 29 00                                      ..x).

00000292 <LCDWIKI_SPI::start(unsigned int)::HX8347G_regValues>:
     292:	2e 01 89 29 01 8f 2b 01 02 e2 01 00 e4 01 01 e5     ...)..+.........
     2a2:	01 10 e6 01 01 e7 01 10 e8 01 70 f2 01 00 ea 01     ..........p.....
     2b2:	00 eb 01 20 ec 01 3c ed 01 c8 e9 01 38 f1 01 01     ... ..<.....8...
     2c2:	1b 01 1a 1a 01 01 24 01 61 25 01 5c 23 01 88 18     ......$.a%.\#...
     2d2:	01 36 19 01 01 1f 01 88 7f 05 1f 01 80 7f 05 1f     .6..............
     2e2:	01 90 7f 05 1f 01 d4 7f 05 17 01 05 36 01 00 28     ............6..(
     2f2:	01 38 7f 28 28 01 3c 02 01 00 03 01 00 04 01 00     .8.((.<.........
     302:	05 01 ef 06 01 00 07 01 00 08 01 01 09 01 3f        ..............?

00000311 <LCDWIKI_SPI::start(unsigned int)::HX8357D_regValues>:
     311:	01 00 b9 03 ff 83 57 7f fa b3 04 00 00 06 06 b6     ......W.........
     321:	01 25 b0 01 68 cc 01 05 b1 06 00 15 1c 1c 83 aa     .%..h...........
     331:	c0 06 50 50 01 3c 1e 08 b4 07 02 40 00 2a 2a 0d     ..PP.<.....@.**.
     341:	78 3a 01 55 36 01 c0 35 01 00 44 02 00 02 11 00     x:.U6..5..D.....
     351:	7f 96 29 00 7f 32                                   ..)..2

00000357 <LCDWIKI_SPI::start(unsigned int)::ILI9341_regValues>:
     357:	01 00 7f 32 28 00 f6 03 01 01 00 cf 03 00 81 30     ...2(..........0
     367:	ed 04 64 03 12 81 e8 03 85 10 78 cb 05 39 2c 00     ..d.......x..9,.
     377:	34 02 f7 01 20 ea 02 00 00 b0 01 00 b4 01 00 c0     4... ...........
     387:	01 21 c1 01 11 c5 02 3f 3c c7 01 b5 36 01 88 3a     .!.....?<...6..:
     397:	01 55 b1 02 00 1b 36 01 48 f2 01 00 26 01 01 e0     .U....6.H...&...
     3a7:	0f 0f 26 24 0b 0e 09 54 a8 46 0c 17 09 0f 07 00     ..&$...T.F......
     3b7:	e1 0f 00 19 1b 04 10 07 2a 47 39 03 06 06 30 38     ........*G9...08
     3c7:	0f b7 01 07 11 00 7f 96 29 00                       ........).

000003d1 <LCDWIKI_SPI::start(unsigned int)::ILI932x_regValues>:
     3d1:	00 00 01 00 ff ff 32 00 01 00 00 01 02 00 00 07     ......2.........
     3e1:	03 00 30 10 04 00 00 00 08 00 02 02 09 00 00 00     ..0.............
     3f1:	0a 00 00 00 0c 00 00 00 0d 00 00 00 0f 00 00 00     ................
     401:	10 00 00 00 11 00 07 00 12 00 00 00 13 00 00 00     ................
     411:	ff ff c8 00 10 00 90 16 11 00 27 02 ff ff 32 00     ..........'...2.
     421:	12 00 1a 00 ff ff 32 00 13 00 00 18 29 00 2a 00     ......2.....).*.
     431:	ff ff 32 00 30 00 00 00 31 00 00 00 32 00 00 00     ..2.0...1...2...
     441:	35 00 06 02 36 00 08 08 37 00 07 00 38 00 01 02     5...6...7...8...
     451:	39 00 00 00 3c 00 00 00 3d 00 00 00 20 00 00 00     9...<...=... ...
     461:	21 00 00 00 50 00 00 00 51 00 ef 00 52 00 00 00     !...P...Q...R...
     471:	53 00 3f 01 60 00 00 a7 61 00 03 00 6a 00 00 00     S.?.`...a...j...
     481:	90 00 10 00 92 00 00 00 93 00 03 00 95 00 00 11     ................
     491:	97 00 00 00 98 00 00 00 07 00 33 01                 ..........3.

0000049d <digital_pin_to_timer_PGM>:
     49d:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     4ad:	00 00 00 00 00 00 00                                .......

000004b4 <lcd_font>:
     4b4:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     4c4:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     4d4:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     4e4:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     4f4:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     504:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     514:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     524:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     534:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     544:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     554:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     564:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     574:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     584:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     594:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     5a4:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     5b4:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     5c4:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     5d4:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     5e4:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     5f4:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     604:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     614:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     624:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     634:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     644:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     654:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     664:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     674:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     684:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     694:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     6a4:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     6b4:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     6c4:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     6d4:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     6e4:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     6f4:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     704:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     714:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     724:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     734:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     744:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     754:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     764:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     774:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     784:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     794:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     7a4:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     7b4:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     7c4:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     7d4:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     7e4:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     7f4:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     804:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     814:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     824:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     834:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     844:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     854:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     864:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     874:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     884:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     894:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     8a4:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     8b4:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     8c4:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     8d4:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     8e4:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     8f4:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     904:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     914:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     924:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     934:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     944:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     954:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     964:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     974:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     984:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     994:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     9a4:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

000009af <port_to_mode_PGM>:
     9af:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000009b9 <digital_pin_to_bit_mask_PGM>:
     9b9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     9c9:	04 08 10 20 40 80 40                                ... @.@

000009d0 <port_to_output_PGM>:
     9d0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000009da <digital_pin_to_port_PGM>:
     9da:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     9ea:	03 03 03 03 02 02 03 00                             ........

000009f2 <__ctors_start>:
__ctors_start():
     9f2:	56 25       	eor	r21, r6

000009f4 <__ctors_end>:
__dtors_end():
     9f4:	11 24       	eor	r1, r1
     9f6:	1f be       	out	0x3f, r1	; 63
     9f8:	cf ef       	ldi	r28, 0xFF	; 255
     9fa:	d8 e0       	ldi	r29, 0x08	; 8
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	cd bf       	out	0x3d, r28	; 61

00000a00 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     a00:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     a02:	a4 e2       	ldi	r26, 0x24	; 36
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     a04:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <.do_clear_bss_start>

00000a08 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     a08:	1d 92       	st	X+, r1

00000a0a <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     a0a:	a7 34       	cpi	r26, 0x47	; 71
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     a0c:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <.do_clear_bss_loop>

00000a10 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     a10:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     a12:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     a14:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     a16:	ee ef       	ldi	r30, 0xFE	; 254
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     a18:	fe e6       	ldi	r31, 0x6E	; 110
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     a1c:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     a1e:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     a20:	a4 32       	cpi	r26, 0x24	; 36
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     a22:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     a24:	d9 f7       	brne	.-10     	; 0xa1c <__do_copy_data+0xc>

00000a26 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     a26:	14 e0       	ldi	r17, 0x04	; 4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     a28:	ca ef       	ldi	r28, 0xFA	; 250
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     a2a:	d4 e0       	ldi	r29, 0x04	; 4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     a2c:	04 c0       	rjmp	.+8      	; 0xa36 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     a2e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     a30:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     a32:	0e 94 54 35 	call	0x6aa8	; 0x6aa8 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     a36:	c9 3f       	cpi	r28, 0xF9	; 249
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     a38:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     a3a:	c9 f7       	brne	.-14     	; 0xa2e <__do_global_ctors+0x8>
     a3c:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <main>
     a40:	0c 94 7d 37 	jmp	0x6efa	; 0x6efa <_exit>

00000a44 <__bad_interrupt>:
__vector_22():
     a44:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a48 <toggle(unsigned char) [clone .constprop.56]>:
_Z6toggleh.constprop.56():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:125

void toggle(uint8_t pin) {
  volatile uint8_t *port = get_port_address(pin);
  uint8_t pin_mod = pin % 10;

  *port ^= 0x01 << pin_mod;
     a48:	85 b1       	in	r24, 0x05	; 5
     a4a:	80 58       	subi	r24, 0x80	; 128
     a4c:	85 b9       	out	0x05, r24	; 5
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:126
}
     a4e:	08 95       	ret

00000a50 <LCDWIKI_SPI::Get_Width() const>:
_ZNK11LCDWIKI_SPI9Get_WidthEv():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1111

//get lcd width
int16_t LCDWIKI_SPI::Get_Width(void) const
{
	return width;
}
     a50:	fc 01       	movw	r30, r24
     a52:	84 89       	ldd	r24, Z+20	; 0x14
     a54:	95 89       	ldd	r25, Z+21	; 0x15
     a56:	08 95       	ret

00000a58 <LCDWIKI_SPI::Get_Height() const>:
_ZNK11LCDWIKI_SPI10Get_HeightEv():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1117

//get lcd height
int16_t LCDWIKI_SPI::Get_Height(void) const
{
	return height;
}
     a58:	fc 01       	movw	r30, r24
     a5a:	86 89       	ldd	r24, Z+22	; 0x16
     a5c:	97 89       	ldd	r25, Z+23	; 0x17
     a5e:	08 95       	ret

00000a60 <pinMode.constprop.23>:
pinMode.constprop.23():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit = digitalPinToBitMask(pin);
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	fc 01       	movw	r30, r24
     a64:	e7 54       	subi	r30, 0x47	; 71
     a66:	f6 4f       	sbci	r31, 0xF6	; 246
     a68:	24 91       	lpm	r18, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     a6a:	86 52       	subi	r24, 0x26	; 38
     a6c:	96 4f       	sbci	r25, 0xF6	; 246
     a6e:	fc 01       	movw	r30, r24
     a70:	84 91       	lpm	r24, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     a72:	88 23       	and	r24, r24
     a74:	99 f0       	breq	.+38     	; 0xa9c <pinMode.constprop.23+0x3c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	fc 01       	movw	r30, r24
     a7e:	e1 55       	subi	r30, 0x51	; 81
     a80:	f6 4f       	sbci	r31, 0xF6	; 246
     a82:	a5 91       	lpm	r26, Z+
     a84:	b4 91       	lpm	r27, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     a86:	fc 01       	movw	r30, r24
     a88:	e0 53       	subi	r30, 0x30	; 48
     a8a:	f6 4f       	sbci	r31, 0xF6	; 246
     a8c:	85 91       	lpm	r24, Z+
     a8e:	94 91       	lpm	r25, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     a90:	8f b7       	in	r24, 0x3f	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
     a92:	f8 94       	cli
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     a94:	ec 91       	ld	r30, X
     a96:	e2 2b       	or	r30, r18
     a98:	ec 93       	st	X, r30
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     a9a:	8f bf       	out	0x3f, r24	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:59
  }
}
     a9c:	08 95       	ret

00000a9e <digitalWrite>:
digitalWrite():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	fc 01       	movw	r30, r24
     aa2:	e3 56       	subi	r30, 0x63	; 99
     aa4:	fb 4f       	sbci	r31, 0xFB	; 251
     aa6:	24 91       	lpm	r18, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     aa8:	fc 01       	movw	r30, r24
     aaa:	e7 54       	subi	r30, 0x47	; 71
     aac:	f6 4f       	sbci	r31, 0xF6	; 246
     aae:	34 91       	lpm	r19, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     ab0:	fc 01       	movw	r30, r24
     ab2:	e6 52       	subi	r30, 0x26	; 38
     ab4:	f6 4f       	sbci	r31, 0xF6	; 246
     ab6:	e4 91       	lpm	r30, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     ab8:	ee 23       	and	r30, r30
     aba:	c9 f0       	breq	.+50     	; 0xaee <digitalWrite+0x50>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     abc:	22 23       	and	r18, r18
     abe:	39 f0       	breq	.+14     	; 0xace <digitalWrite+0x30>
turnOffPWM():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     ac0:	24 30       	cpi	r18, 0x04	; 4
     ac2:	01 f1       	breq	.+64     	; 0xb04 <digitalWrite+0x66>
     ac4:	a8 f4       	brcc	.+42     	; 0xaf0 <digitalWrite+0x52>
     ac6:	22 30       	cpi	r18, 0x02	; 2
     ac8:	69 f1       	breq	.+90     	; 0xb24 <digitalWrite+0x86>
     aca:	23 30       	cpi	r18, 0x03	; 3
     acc:	79 f1       	breq	.+94     	; 0xb2c <digitalWrite+0x8e>
digitalWrite():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	e0 53       	subi	r30, 0x30	; 48
     ad6:	f6 4f       	sbci	r31, 0xF6	; 246
     ad8:	a5 91       	lpm	r26, Z+
     ada:	b4 91       	lpm	r27, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     adc:	8f b7       	in	r24, 0x3f	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
     ade:	f8 94       	cli
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     ae0:	ec 91       	ld	r30, X
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     ae2:	61 11       	cpse	r22, r1
     ae4:	26 c0       	rjmp	.+76     	; 0xb32 <digitalWrite+0x94>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     ae6:	30 95       	com	r19
     ae8:	3e 23       	and	r19, r30
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     aea:	3c 93       	st	X, r19
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     aec:	8f bf       	out	0x3f, r24	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:212
}
     aee:	08 95       	ret
turnOffPWM():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     af0:	28 30       	cpi	r18, 0x08	; 8
     af2:	71 f0       	breq	.+28     	; 0xb10 <digitalWrite+0x72>
     af4:	29 30       	cpi	r18, 0x09	; 9
     af6:	91 f0       	breq	.+36     	; 0xb1c <digitalWrite+0x7e>
     af8:	25 30       	cpi	r18, 0x05	; 5
     afa:	49 f7       	brne	.-46     	; 0xace <digitalWrite+0x30>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     afc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     b00:	8f 7d       	andi	r24, 0xDF	; 223
     b02:	03 c0       	rjmp	.+6      	; 0xb0a <digitalWrite+0x6c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     b04:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     b08:	8f 77       	andi	r24, 0x7F	; 127
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     b0a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     b0e:	df cf       	rjmp	.-66     	; 0xace <digitalWrite+0x30>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     b10:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     b14:	8f 77       	andi	r24, 0x7F	; 127
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     b16:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     b1a:	d9 cf       	rjmp	.-78     	; 0xace <digitalWrite+0x30>
     b1c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     b20:	8f 7d       	andi	r24, 0xDF	; 223
     b22:	f9 cf       	rjmp	.-14     	; 0xb16 <digitalWrite+0x78>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     b24:	84 b5       	in	r24, 0x24	; 36
     b26:	8f 77       	andi	r24, 0x7F	; 127
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     b28:	84 bd       	out	0x24, r24	; 36
     b2a:	d1 cf       	rjmp	.-94     	; 0xace <digitalWrite+0x30>
     b2c:	84 b5       	in	r24, 0x24	; 36
     b2e:	8f 7d       	andi	r24, 0xDF	; 223
     b30:	fb cf       	rjmp	.-10     	; 0xb28 <digitalWrite+0x8a>
digitalWrite():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     b32:	3e 2b       	or	r19, r30
     b34:	da cf       	rjmp	.-76     	; 0xaea <digitalWrite+0x4c>

00000b36 <micros>:
micros():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     b36:	3f b7       	in	r19, 0x3f	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     b38:	f8 94       	cli
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     b3a:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <timer0_overflow_count>
     b3e:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <timer0_overflow_count+0x1>
     b42:	a0 91 51 02 	lds	r26, 0x0251	; 0x800251 <timer0_overflow_count+0x2>
     b46:	b0 91 52 02 	lds	r27, 0x0252	; 0x800252 <timer0_overflow_count+0x3>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     b4a:	26 b5       	in	r18, 0x26	; 38
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     b4c:	a8 9b       	sbis	0x15, 0	; 21
     b4e:	05 c0       	rjmp	.+10     	; 0xb5a <micros+0x24>
     b50:	2f 3f       	cpi	r18, 0xFF	; 255
     b52:	19 f0       	breq	.+6      	; 0xb5a <micros+0x24>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	a1 1d       	adc	r26, r1
     b58:	b1 1d       	adc	r27, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     b5a:	3f bf       	out	0x3f, r19	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     b5c:	ba 2f       	mov	r27, r26
     b5e:	a9 2f       	mov	r26, r25
     b60:	98 2f       	mov	r25, r24
     b62:	88 27       	eor	r24, r24
     b64:	bc 01       	movw	r22, r24
     b66:	cd 01       	movw	r24, r26
     b68:	62 0f       	add	r22, r18
     b6a:	71 1d       	adc	r23, r1
     b6c:	81 1d       	adc	r24, r1
     b6e:	91 1d       	adc	r25, r1
     b70:	43 e0       	ldi	r20, 0x03	; 3
     b72:	66 0f       	add	r22, r22
     b74:	77 1f       	adc	r23, r23
     b76:	88 1f       	adc	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	4a 95       	dec	r20
     b7c:	d1 f7       	brne	.-12     	; 0xb72 <micros+0x3c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     b7e:	08 95       	ret

00000b80 <delay>:
delay():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     b80:	8f 92       	push	r8
     b82:	9f 92       	push	r9
     b84:	af 92       	push	r10
     b86:	bf 92       	push	r11
     b88:	cf 92       	push	r12
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	6b 01       	movw	r12, r22
     b92:	7c 01       	movw	r14, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     b94:	0e 94 9b 05 	call	0xb36	; 0xb36 <micros>
     b98:	4b 01       	movw	r8, r22
     b9a:	5c 01       	movw	r10, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     b9c:	c1 14       	cp	r12, r1
     b9e:	d1 04       	cpc	r13, r1
     ba0:	e1 04       	cpc	r14, r1
     ba2:	f1 04       	cpc	r15, r1
     ba4:	b9 f0       	breq	.+46     	; 0xbd4 <delay+0x54>
     ba6:	0e 94 9b 05 	call	0xb36	; 0xb36 <micros>
     baa:	68 19       	sub	r22, r8
     bac:	79 09       	sbc	r23, r9
     bae:	8a 09       	sbc	r24, r10
     bb0:	9b 09       	sbc	r25, r11
     bb2:	68 3e       	cpi	r22, 0xE8	; 232
     bb4:	73 40       	sbci	r23, 0x03	; 3
     bb6:	81 05       	cpc	r24, r1
     bb8:	91 05       	cpc	r25, r1
     bba:	80 f3       	brcs	.-32     	; 0xb9c <delay+0x1c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:402
      ms--;
     bbc:	21 e0       	ldi	r18, 0x01	; 1
     bbe:	c2 1a       	sub	r12, r18
     bc0:	d1 08       	sbc	r13, r1
     bc2:	e1 08       	sbc	r14, r1
     bc4:	f1 08       	sbc	r15, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     bc6:	88 ee       	ldi	r24, 0xE8	; 232
     bc8:	88 0e       	add	r8, r24
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	98 1e       	adc	r9, r24
     bce:	a1 1c       	adc	r10, r1
     bd0:	b1 1c       	adc	r11, r1
     bd2:	e4 cf       	rjmp	.-56     	; 0xb9c <delay+0x1c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:406
    }
  }
}
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	df 90       	pop	r13
     bda:	cf 90       	pop	r12
     bdc:	bf 90       	pop	r11
     bde:	af 90       	pop	r10
     be0:	9f 90       	pop	r9
     be2:	8f 90       	pop	r8
     be4:	08 95       	ret

00000be6 <LCDWIKI_SPI::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_SPI12Color_To_565Ehhh():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:803
}

//Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t LCDWIKI_SPI::Color_To_565(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r& 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
     be6:	38 e0       	ldi	r19, 0x08	; 8
     be8:	43 9f       	mul	r20, r19
     bea:	c0 01       	movw	r24, r0
     bec:	11 24       	eor	r1, r1
     bee:	80 7e       	andi	r24, 0xE0	; 224
     bf0:	97 70       	andi	r25, 0x07	; 7
     bf2:	26 95       	lsr	r18
     bf4:	26 95       	lsr	r18
     bf6:	26 95       	lsr	r18
     bf8:	82 2b       	or	r24, r18
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	76 2f       	mov	r23, r22
     bfe:	66 27       	eor	r22, r22
     c00:	66 27       	eor	r22, r22
     c02:	78 7f       	andi	r23, 0xF8	; 248
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:804
}
     c04:	86 2b       	or	r24, r22
     c06:	97 2b       	or	r25, r23
     c08:	08 95       	ret

00000c0a <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     c0a:	af 92       	push	r10
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	6c 01       	movw	r12, r24
     c20:	7b 01       	movw	r14, r22
     c22:	8b 01       	movw	r16, r22
     c24:	04 0f       	add	r16, r20
     c26:	15 1f       	adc	r17, r21
     c28:	eb 01       	movw	r28, r22
     c2a:	5e 01       	movw	r10, r28
     c2c:	ae 18       	sub	r10, r14
     c2e:	bf 08       	sbc	r11, r15
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     c30:	c0 17       	cp	r28, r16
     c32:	d1 07       	cpc	r29, r17
     c34:	59 f0       	breq	.+22     	; 0xc4c <Print::write(unsigned char const*, unsigned int)+0x42>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     c36:	69 91       	ld	r22, Y+
     c38:	d6 01       	movw	r26, r12
     c3a:	ed 91       	ld	r30, X+
     c3c:	fc 91       	ld	r31, X
     c3e:	01 90       	ld	r0, Z+
     c40:	f0 81       	ld	r31, Z
     c42:	e0 2d       	mov	r30, r0
     c44:	c6 01       	movw	r24, r12
     c46:	09 95       	icall
     c48:	89 2b       	or	r24, r25
     c4a:	79 f7       	brne	.-34     	; 0xc2a <Print::write(unsigned char const*, unsigned int)+0x20>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     c4c:	c5 01       	movw	r24, r10
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	08 95       	ret

00000c64 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     c64:	fc 01       	movw	r30, r24
     c66:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     c68:	44 8d       	ldd	r20, Z+28	; 0x1c
     c6a:	25 2f       	mov	r18, r21
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	84 2f       	mov	r24, r20
     c70:	90 e0       	ldi	r25, 0x00	; 0
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     c72:	82 1b       	sub	r24, r18
     c74:	93 0b       	sbc	r25, r19
     c76:	54 17       	cp	r21, r20
     c78:	10 f0       	brcs	.+4      	; 0xc7e <HardwareSerial::availableForWrite()+0x1a>
     c7a:	cf 96       	adiw	r24, 0x3f	; 63
     c7c:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     c7e:	01 97       	sbiw	r24, 0x01	; 1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
     c80:	08 95       	ret

00000c82 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     c82:	fc 01       	movw	r30, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     c84:	91 8d       	ldd	r25, Z+25	; 0x19
     c86:	82 8d       	ldd	r24, Z+26	; 0x1a
     c88:	98 17       	cp	r25, r24
     c8a:	61 f0       	breq	.+24     	; 0xca4 <HardwareSerial::read()+0x22>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     c8c:	a2 8d       	ldd	r26, Z+26	; 0x1a
     c8e:	ae 0f       	add	r26, r30
     c90:	bf 2f       	mov	r27, r31
     c92:	b1 1d       	adc	r27, r1
     c94:	5d 96       	adiw	r26, 0x1d	; 29
     c96:	8c 91       	ld	r24, X
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     c98:	92 8d       	ldd	r25, Z+26	; 0x1a
     c9a:	9f 5f       	subi	r25, 0xFF	; 255
     c9c:	9f 73       	andi	r25, 0x3F	; 63
     c9e:	92 8f       	std	Z+26, r25	; 0x1a
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	9f ef       	ldi	r25, 0xFF	; 255
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     ca8:	08 95       	ret

00000caa <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     caa:	fc 01       	movw	r30, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     cac:	91 8d       	ldd	r25, Z+25	; 0x19
     cae:	82 8d       	ldd	r24, Z+26	; 0x1a
     cb0:	98 17       	cp	r25, r24
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <HardwareSerial::peek()+0x16>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     cb4:	82 8d       	ldd	r24, Z+26	; 0x1a
     cb6:	e8 0f       	add	r30, r24
     cb8:	f1 1d       	adc	r31, r1
     cba:	85 8d       	ldd	r24, Z+29	; 0x1d
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	9f ef       	ldi	r25, 0xFF	; 255
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     cc4:	08 95       	ret

00000cc6 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     cc6:	fc 01       	movw	r30, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     cc8:	91 8d       	ldd	r25, Z+25	; 0x19
     cca:	22 8d       	ldd	r18, Z+26	; 0x1a
     ccc:	89 2f       	mov	r24, r25
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	80 5c       	subi	r24, 0xC0	; 192
     cd2:	9f 4f       	sbci	r25, 0xFF	; 255
     cd4:	82 1b       	sub	r24, r18
     cd6:	91 09       	sbc	r25, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
     cd8:	8f 73       	andi	r24, 0x3F	; 63
     cda:	99 27       	eor	r25, r25
     cdc:	08 95       	ret

00000cde <Serial0_available()>:
_Z17Serial0_availablev():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     cde:	83 e5       	ldi	r24, 0x53	; 83
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <HardwareSerial::available()>
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	89 2b       	or	r24, r25
     cea:	09 f4       	brne	.+2      	; 0xcee <Serial0_available()+0x10>
     cec:	20 e0       	ldi	r18, 0x00	; 0
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
     cee:	82 2f       	mov	r24, r18
     cf0:	08 95       	ret

00000cf2 <serialEventRun()>:
_Z14serialEventRunv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	89 2b       	or	r24, r25
     cf8:	29 f0       	breq	.+10     	; 0xd04 <serialEventRun()+0x12>
     cfa:	0e 94 6f 06 	call	0xcde	; 0xcde <Serial0_available()>
     cfe:	81 11       	cpse	r24, r1
     d00:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     d04:	08 95       	ret

00000d06 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     d06:	fc 01       	movw	r30, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     d08:	a4 8d       	ldd	r26, Z+28	; 0x1c
     d0a:	a8 0f       	add	r26, r24
     d0c:	b9 2f       	mov	r27, r25
     d0e:	b1 1d       	adc	r27, r1
     d10:	a3 5a       	subi	r26, 0xA3	; 163
     d12:	bf 4f       	sbci	r27, 0xFF	; 255
     d14:	2c 91       	ld	r18, X
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     d16:	84 8d       	ldd	r24, Z+28	; 0x1c
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	8f 73       	andi	r24, 0x3F	; 63
     d1e:	99 27       	eor	r25, r25
     d20:	84 8f       	std	Z+28, r24	; 0x1c
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     d22:	a6 89       	ldd	r26, Z+22	; 0x16
     d24:	b7 89       	ldd	r27, Z+23	; 0x17
     d26:	2c 93       	st	X, r18
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     d28:	a0 89       	ldd	r26, Z+16	; 0x10
     d2a:	b1 89       	ldd	r27, Z+17	; 0x11
     d2c:	8c 91       	ld	r24, X
     d2e:	83 70       	andi	r24, 0x03	; 3
     d30:	80 64       	ori	r24, 0x40	; 64
     d32:	8c 93       	st	X, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     d34:	93 8d       	ldd	r25, Z+27	; 0x1b
     d36:	84 8d       	ldd	r24, Z+28	; 0x1c
     d38:	98 13       	cpse	r25, r24
     d3a:	06 c0       	rjmp	.+12     	; 0xd48 <HardwareSerial::_tx_udr_empty_irq()+0x42>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     d3c:	02 88       	ldd	r0, Z+18	; 0x12
     d3e:	f3 89       	ldd	r31, Z+19	; 0x13
     d40:	e0 2d       	mov	r30, r0
     d42:	80 81       	ld	r24, Z
     d44:	8f 7d       	andi	r24, 0xDF	; 223
     d46:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     d48:	08 95       	ret

00000d4a <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	ec 01       	movw	r28, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	88 8f       	std	Y+24, r24	; 0x18
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     d5c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d60:	98 13       	cpse	r25, r24
     d62:	1a c0       	rjmp	.+52     	; 0xd98 <HardwareSerial::write(unsigned char)+0x4e>
     d64:	e8 89       	ldd	r30, Y+16	; 0x10
     d66:	f9 89       	ldd	r31, Y+17	; 0x11
     d68:	80 81       	ld	r24, Z
     d6a:	85 ff       	sbrs	r24, 5
     d6c:	15 c0       	rjmp	.+42     	; 0xd98 <HardwareSerial::write(unsigned char)+0x4e>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     d6e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/noah/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d70:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     d72:	ee 89       	ldd	r30, Y+22	; 0x16
     d74:	ff 89       	ldd	r31, Y+23	; 0x17
     d76:	60 83       	st	Z, r22
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     d78:	e8 89       	ldd	r30, Y+16	; 0x10
     d7a:	f9 89       	ldd	r31, Y+17	; 0x11
     d7c:	80 81       	ld	r24, Z
     d7e:	83 70       	andi	r24, 0x03	; 3
     d80:	80 64       	ori	r24, 0x40	; 64
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     d82:	80 83       	st	Z, r24
__iRestore():
/home/noah/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d84:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	08 95       	ret
     d98:	f6 2e       	mov	r15, r22
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     d9a:	0b 8d       	ldd	r16, Y+27	; 0x1b
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	0f 5f       	subi	r16, 0xFF	; 255
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
     da2:	0f 73       	andi	r16, 0x3F	; 63
     da4:	11 27       	eor	r17, r17
     da6:	e0 2e       	mov	r14, r16
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     da8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     daa:	8e 11       	cpse	r24, r14
     dac:	0c c0       	rjmp	.+24     	; 0xdc6 <HardwareSerial::write(unsigned char)+0x7c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	07 fc       	sbrc	r0, 7
     db2:	fa cf       	rjmp	.-12     	; 0xda8 <HardwareSerial::write(unsigned char)+0x5e>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     db4:	e8 89       	ldd	r30, Y+16	; 0x10
     db6:	f9 89       	ldd	r31, Y+17	; 0x11
     db8:	80 81       	ld	r24, Z
     dba:	85 ff       	sbrs	r24, 5
     dbc:	f5 cf       	rjmp	.-22     	; 0xda8 <HardwareSerial::write(unsigned char)+0x5e>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 83 06 	call	0xd06	; 0xd06 <HardwareSerial::_tx_udr_empty_irq()>
     dc4:	f1 cf       	rjmp	.-30     	; 0xda8 <HardwareSerial::write(unsigned char)+0x5e>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     dc6:	eb 8d       	ldd	r30, Y+27	; 0x1b
     dc8:	ec 0f       	add	r30, r28
     dca:	fd 2f       	mov	r31, r29
     dcc:	f1 1d       	adc	r31, r1
     dce:	e3 5a       	subi	r30, 0xA3	; 163
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	f0 82       	st	Z, r15
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     dd4:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/noah/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     dd6:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     dd8:	0b 8f       	std	Y+27, r16	; 0x1b
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     dda:	ea 89       	ldd	r30, Y+18	; 0x12
     ddc:	fb 89       	ldd	r31, Y+19	; 0x13
     dde:	80 81       	ld	r24, Z
     de0:	80 62       	ori	r24, 0x20	; 32
     de2:	cf cf       	rjmp	.-98     	; 0xd82 <HardwareSerial::write(unsigned char)+0x38>

00000de4 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	ec 01       	movw	r28, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     dea:	88 8d       	ldd	r24, Y+24	; 0x18
     dec:	88 23       	and	r24, r24
     dee:	b9 f0       	breq	.+46     	; 0xe1e <HardwareSerial::flush()+0x3a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     df0:	aa 89       	ldd	r26, Y+18	; 0x12
     df2:	bb 89       	ldd	r27, Y+19	; 0x13
     df4:	e8 89       	ldd	r30, Y+16	; 0x10
     df6:	f9 89       	ldd	r31, Y+17	; 0x11
     df8:	8c 91       	ld	r24, X
     dfa:	85 fd       	sbrc	r24, 5
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <HardwareSerial::flush()+0x20>
     dfe:	80 81       	ld	r24, Z
     e00:	86 fd       	sbrc	r24, 6
     e02:	0d c0       	rjmp	.+26     	; 0xe1e <HardwareSerial::flush()+0x3a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	07 fc       	sbrc	r0, 7
     e08:	f7 cf       	rjmp	.-18     	; 0xdf8 <HardwareSerial::flush()+0x14>
     e0a:	8c 91       	ld	r24, X
     e0c:	85 ff       	sbrs	r24, 5
     e0e:	f2 cf       	rjmp	.-28     	; 0xdf4 <HardwareSerial::flush()+0x10>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     e10:	80 81       	ld	r24, Z
     e12:	85 ff       	sbrs	r24, 5
     e14:	ed cf       	rjmp	.-38     	; 0xdf0 <HardwareSerial::flush()+0xc>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     e16:	ce 01       	movw	r24, r28
     e18:	0e 94 83 06 	call	0xd06	; 0xd06 <HardwareSerial::_tx_udr_empty_irq()>
     e1c:	e9 cf       	rjmp	.-46     	; 0xdf0 <HardwareSerial::flush()+0xc>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <char_to_int(char)>:
_Z11char_to_intc():
/home/noah/Documents/basteln/ofen_v2/main/utils.cpp:12
    return count_decimals(num / 10) + 1;
  }
}

uint8_t char_to_int(char character) { // ascii character to digit conversion
  if(character < 48) {return 10;}
     e24:	90 ed       	ldi	r25, 0xD0	; 208
     e26:	98 0f       	add	r25, r24
     e28:	9a 30       	cpi	r25, 0x0A	; 10
     e2a:	10 f4       	brcc	.+4      	; 0xe30 <char_to_int(char)+0xc>
/home/noah/Documents/basteln/ofen_v2/main/utils.cpp:14
  if(character > 57) {return 10;}
  return character & 0x0F;
     e2c:	8f 70       	andi	r24, 0x0F	; 15
     e2e:	08 95       	ret
/home/noah/Documents/basteln/ofen_v2/main/utils.cpp:12
    return count_decimals(num / 10) + 1;
  }
}

uint8_t char_to_int(char character) { // ascii character to digit conversion
  if(character < 48) {return 10;}
     e30:	8a e0       	ldi	r24, 0x0A	; 10
/home/noah/Documents/basteln/ofen_v2/main/utils.cpp:15
  if(character > 57) {return 10;}
  return character & 0x0F;
     e32:	08 95       	ret

00000e34 <is_valid_time_str(char*)>:
_Z17is_valid_time_strPc():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:118
// fill all the fields with their value and background color
void fill_table(struct temp_table *temp_table) {
  fill_table_section(temp_table, 0, temp_table->temp_table.rows - 1);
}

uint8_t is_valid_time_str(char *time_str) {
     e34:	ac 01       	movw	r20, r24
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:119
  for(uint8_t i = 0; time_str[i] != '\0'; i++) { // iterate over time string and check for spaces
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	fa 01       	movw	r30, r20
     e3a:	e9 0f       	add	r30, r25
     e3c:	f1 1d       	adc	r31, r1
     e3e:	20 81       	ld	r18, Z
     e40:	22 23       	and	r18, r18
     e42:	21 f0       	breq	.+8      	; 0xe4c <is_valid_time_str(char*)+0x18>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:120
    if(time_str[i] == ' ') {
     e44:	20 32       	cpi	r18, 0x20	; 32
     e46:	21 f0       	breq	.+8      	; 0xe50 <is_valid_time_str(char*)+0x1c>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:119
void fill_table(struct temp_table *temp_table) {
  fill_table_section(temp_table, 0, temp_table->temp_table.rows - 1);
}

uint8_t is_valid_time_str(char *time_str) {
  for(uint8_t i = 0; time_str[i] != '\0'; i++) { // iterate over time string and check for spaces
     e48:	9f 5f       	subi	r25, 0xFF	; 255
     e4a:	f6 cf       	rjmp	.-20     	; 0xe38 <is_valid_time_str(char*)+0x4>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:124
    if(time_str[i] == ' ') {
      return 0;
    }
  }
  return 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	08 95       	ret
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:121
}

uint8_t is_valid_time_str(char *time_str) {
  for(uint8_t i = 0; time_str[i] != '\0'; i++) { // iterate over time string and check for spaces
    if(time_str[i] == ' ') {
      return 0;
     e50:	80 e0       	ldi	r24, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:125
    }
  }
  return 1;
}
     e52:	08 95       	ret

00000e54 <get_table_entry_position(table*, unsigned int, unsigned int)>:
_Z24get_table_entry_positionP5tablejj():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:51

    display.Draw_Fast_HLine(table->pos.x, table->pos.y + (table->hlines)[i], table->width + 1);
  }
}

position get_table_entry_position(table *table, uint16_t column, uint16_t row) {
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	8c 01       	movw	r16, r24
     e66:	7a 01       	movw	r14, r20
     e68:	fc 01       	movw	r30, r24
     e6a:	c0 81       	ld	r28, Z
     e6c:	d1 81       	ldd	r29, Z+1	; 0x01
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:52
  uint16_t x = column < table->columns ? table->pos.x + table->vlines[column] : table->pos.x + table->width + 1;
     e6e:	81 85       	ldd	r24, Z+9	; 0x09
     e70:	86 17       	cp	r24, r22
     e72:	17 06       	cpc	r1, r23
     e74:	09 f0       	breq	.+2      	; 0xe78 <get_table_entry_position(table*, unsigned int, unsigned int)+0x24>
     e76:	08 f4       	brcc	.+2      	; 0xe7a <get_table_entry_position(table*, unsigned int, unsigned int)+0x26>
     e78:	40 c0       	rjmp	.+128    	; 0xefa <get_table_entry_position(table*, unsigned int, unsigned int)+0xa6>
     e7a:	66 0f       	add	r22, r22
     e7c:	77 1f       	adc	r23, r23
     e7e:	66 0f       	add	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	c4 84       	ldd	r12, Z+12	; 0x0c
     e84:	d5 84       	ldd	r13, Z+13	; 0x0d
     e86:	c6 0e       	add	r12, r22
     e88:	d7 1e       	adc	r13, r23
     e8a:	be 01       	movw	r22, r28
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
     e94:	f6 01       	movw	r30, r12
     e96:	20 81       	ld	r18, Z
     e98:	31 81       	ldd	r19, Z+1	; 0x01
     e9a:	42 81       	ldd	r20, Z+2	; 0x02
     e9c:	53 81       	ldd	r21, Z+3	; 0x03
     e9e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__addsf3>
     ea2:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
     ea6:	eb 01       	movw	r28, r22
     ea8:	f8 01       	movw	r30, r16
     eaa:	62 81       	ldd	r22, Z+2	; 0x02
     eac:	73 81       	ldd	r23, Z+3	; 0x03
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:53
  uint16_t y = row < table->rows ? table->pos.y + table->hlines[row] : table->pos.y + table->height + 1;
     eae:	80 85       	ldd	r24, Z+8	; 0x08
     eb0:	8e 15       	cp	r24, r14
     eb2:	1f 04       	cpc	r1, r15
     eb4:	41 f1       	breq	.+80     	; 0xf06 <get_table_entry_position(table*, unsigned int, unsigned int)+0xb2>
     eb6:	38 f1       	brcs	.+78     	; 0xf06 <get_table_entry_position(table*, unsigned int, unsigned int)+0xb2>
     eb8:	ee 0c       	add	r14, r14
     eba:	ff 1c       	adc	r15, r15
     ebc:	ee 0c       	add	r14, r14
     ebe:	ff 1c       	adc	r15, r15
     ec0:	82 85       	ldd	r24, Z+10	; 0x0a
     ec2:	93 85       	ldd	r25, Z+11	; 0x0b
     ec4:	e8 0e       	add	r14, r24
     ec6:	f9 1e       	adc	r15, r25
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
     ed0:	f7 01       	movw	r30, r14
     ed2:	20 81       	ld	r18, Z
     ed4:	31 81       	ldd	r19, Z+1	; 0x01
     ed6:	42 81       	ldd	r20, Z+2	; 0x02
     ed8:	53 81       	ldd	r21, Z+3	; 0x03
     eda:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__addsf3>
     ede:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
     ee2:	9b 01       	movw	r18, r22
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:55
    
  return {x,y};
     ee4:	be 01       	movw	r22, r28
     ee6:	c9 01       	movw	r24, r18
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:56
}
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	df 90       	pop	r13
     ef6:	cf 90       	pop	r12
     ef8:	08 95       	ret
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:52
    display.Draw_Fast_HLine(table->pos.x, table->pos.y + (table->hlines)[i], table->width + 1);
  }
}

position get_table_entry_position(table *table, uint16_t column, uint16_t row) {
  uint16_t x = column < table->columns ? table->pos.x + table->vlines[column] : table->pos.x + table->width + 1;
     efa:	64 81       	ldd	r22, Z+4	; 0x04
     efc:	75 81       	ldd	r23, Z+5	; 0x05
     efe:	c6 0f       	add	r28, r22
     f00:	d7 1f       	adc	r29, r23
     f02:	21 96       	adiw	r28, 0x01	; 1
     f04:	d1 cf       	rjmp	.-94     	; 0xea8 <get_table_entry_position(table*, unsigned int, unsigned int)+0x54>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:53
  uint16_t y = row < table->rows ? table->pos.y + table->hlines[row] : table->pos.y + table->height + 1;
     f06:	86 81       	ldd	r24, Z+6	; 0x06
     f08:	97 81       	ldd	r25, Z+7	; 0x07
     f0a:	68 0f       	add	r22, r24
     f0c:	79 1f       	adc	r23, r25
     f0e:	9b 01       	movw	r18, r22
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	e7 cf       	rjmp	.-50     	; 0xee4 <get_table_entry_position(table*, unsigned int, unsigned int)+0x90>

00000f16 <time_str_to_min(char*)>:
_Z15time_str_to_minPc():
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:6
#include "setpoint.h"
#include "list.h"
#include "utils.h"
#include <stdio.h>

uint16_t time_str_to_min(char time_str[6]) {
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	8c 01       	movw	r16, r24
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:7
  return char_to_int(time_str[0]) * 600 + char_to_int(time_str[1]) * 60 + char_to_int(time_str[3]) * 10 + char_to_int(time_str[4]);
     f22:	fc 01       	movw	r30, r24
     f24:	80 81       	ld	r24, Z
     f26:	0e 94 12 07 	call	0xe24	; 0xe24 <char_to_int(char)>
     f2a:	f8 2e       	mov	r15, r24
     f2c:	f8 01       	movw	r30, r16
     f2e:	81 81       	ldd	r24, Z+1	; 0x01
     f30:	0e 94 12 07 	call	0xe24	; 0xe24 <char_to_int(char)>
     f34:	28 e5       	ldi	r18, 0x58	; 88
     f36:	32 e0       	ldi	r19, 0x02	; 2
     f38:	f2 9e       	mul	r15, r18
     f3a:	e0 01       	movw	r28, r0
     f3c:	f3 9e       	mul	r15, r19
     f3e:	d0 0d       	add	r29, r0
     f40:	11 24       	eor	r1, r1
     f42:	fc e3       	ldi	r31, 0x3C	; 60
     f44:	8f 9f       	mul	r24, r31
     f46:	c0 0d       	add	r28, r0
     f48:	d1 1d       	adc	r29, r1
     f4a:	11 24       	eor	r1, r1
     f4c:	f8 01       	movw	r30, r16
     f4e:	83 81       	ldd	r24, Z+3	; 0x03
     f50:	0e 94 12 07 	call	0xe24	; 0xe24 <char_to_int(char)>
     f54:	fa e0       	ldi	r31, 0x0A	; 10
     f56:	8f 9f       	mul	r24, r31
     f58:	c0 0d       	add	r28, r0
     f5a:	d1 1d       	adc	r29, r1
     f5c:	11 24       	eor	r1, r1
     f5e:	f8 01       	movw	r30, r16
     f60:	84 81       	ldd	r24, Z+4	; 0x04
     f62:	0e 94 12 07 	call	0xe24	; 0xe24 <char_to_int(char)>
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:8
}
     f66:	8c 0f       	add	r24, r28
     f68:	9d 2f       	mov	r25, r29
     f6a:	91 1d       	adc	r25, r1
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	08 95       	ret

00000f78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>:
_Z9get_indexI8setpointEP4listIT_ES4_j():
/home/noah/Documents/basteln/ofen_v2/main/list.h:69
}

template<typename T>
struct list<T> *get_index(struct list<T> *list, uint16_t index) {
  struct list<T> *list_iter = list;
  for(uint16_t i = 0; i < index; i++) {
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	26 17       	cp	r18, r22
     f7e:	37 07       	cpc	r19, r23
     f80:	41 f0       	breq	.+16     	; 0xf92 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)+0x1a>
/home/noah/Documents/basteln/ofen_v2/main/list.h:70
    list_iter = list_iter->next;
     f82:	fc 01       	movw	r30, r24
     f84:	80 85       	ldd	r24, Z+8	; 0x08
     f86:	91 85       	ldd	r25, Z+9	; 0x09
/home/noah/Documents/basteln/ofen_v2/main/list.h:71
    if(!list_iter) return nullptr;
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	19 f0       	breq	.+6      	; 0xf92 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)+0x1a>
/home/noah/Documents/basteln/ofen_v2/main/list.h:69
}

template<typename T>
struct list<T> *get_index(struct list<T> *list, uint16_t index) {
  struct list<T> *list_iter = list;
  for(uint16_t i = 0; i < index; i++) {
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	f5 cf       	rjmp	.-22     	; 0xf7c <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)+0x4>
/home/noah/Documents/basteln/ofen_v2/main/list.h:74
    list_iter = list_iter->next;
    if(!list_iter) return nullptr;
  }
  return list_iter;
}
     f92:	08 95       	ret

00000f94 <point_to_position(graph*, unsigned int, unsigned int)>:
_Z17point_to_positionP5graphjj():
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:4
#include "graph.h"
#include "utils.h"

position point_to_position(graph *graph, uint16_t x, uint16_t y) {
     f94:	2f 92       	push	r2
     f96:	3f 92       	push	r3
     f98:	4f 92       	push	r4
     f9a:	5f 92       	push	r5
     f9c:	6f 92       	push	r6
     f9e:	7f 92       	push	r7
     fa0:	8f 92       	push	r8
     fa2:	9f 92       	push	r9
     fa4:	af 92       	push	r10
     fa6:	bf 92       	push	r11
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	8c 01       	movw	r16, r24
     fba:	6b 01       	movw	r12, r22
     fbc:	3a 01       	movw	r6, r20
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:5
  uint16_t x_axis_length = graph->width - 2 * graph->padding;
     fbe:	fc 01       	movw	r30, r24
     fc0:	c0 8d       	ldd	r28, Z+24	; 0x18
     fc2:	d0 e0       	ldi	r29, 0x00	; 0
     fc4:	1e 01       	movw	r2, r28
     fc6:	22 0c       	add	r2, r2
     fc8:	33 1c       	adc	r3, r3
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:7
  float x_interval = graph->x_max - graph->x_min;
  uint16_t y_axis_length = graph->height - 2 * graph->padding;
     fca:	e6 80       	ldd	r14, Z+6	; 0x06
     fcc:	f7 80       	ldd	r15, Z+7	; 0x07
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:10
  float y_interval = graph->y_max - graph->y_min;

  position origin = {graph->pos.x + graph->padding, graph->pos.y + graph->height - graph->padding};
     fce:	62 81       	ldd	r22, Z+2	; 0x02
     fd0:	73 81       	ldd	r23, Z+3	; 0x03
     fd2:	6e 0d       	add	r22, r14
     fd4:	7f 1d       	adc	r23, r15
     fd6:	6c 1b       	sub	r22, r28
     fd8:	7d 0b       	sbc	r23, r29
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:11
  position point = {origin.x + x / x_interval * x_axis_length, origin.y - y / y_interval * y_axis_length};
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
     fe2:	4b 01       	movw	r8, r22
     fe4:	5c 01       	movw	r10, r24
     fe6:	b3 01       	movw	r22, r6
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
     ff0:	2b 01       	movw	r4, r22
     ff2:	3c 01       	movw	r6, r24
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:8

position point_to_position(graph *graph, uint16_t x, uint16_t y) {
  uint16_t x_axis_length = graph->width - 2 * graph->padding;
  float x_interval = graph->x_max - graph->x_min;
  uint16_t y_axis_length = graph->height - 2 * graph->padding;
  float y_interval = graph->y_max - graph->y_min;
     ff4:	f8 01       	movw	r30, r16
     ff6:	20 89       	ldd	r18, Z+16	; 0x10
     ff8:	31 89       	ldd	r19, Z+17	; 0x11
     ffa:	42 89       	ldd	r20, Z+18	; 0x12
     ffc:	53 89       	ldd	r21, Z+19	; 0x13
     ffe:	64 89       	ldd	r22, Z+20	; 0x14
    1000:	75 89       	ldd	r23, Z+21	; 0x15
    1002:	86 89       	ldd	r24, Z+22	; 0x16
    1004:	97 89       	ldd	r25, Z+23	; 0x17
    1006:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__subsf3>
    100a:	9b 01       	movw	r18, r22
    100c:	ac 01       	movw	r20, r24
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:11

  position origin = {graph->pos.x + graph->padding, graph->pos.y + graph->height - graph->padding};
  position point = {origin.x + x / x_interval * x_axis_length, origin.y - y / y_interval * y_axis_length};
    100e:	c3 01       	movw	r24, r6
    1010:	b2 01       	movw	r22, r4
    1012:	0e 94 bf 32 	call	0x657e	; 0x657e <__divsf3>
    1016:	2b 01       	movw	r4, r22
    1018:	3c 01       	movw	r6, r24
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:7
#include "utils.h"

position point_to_position(graph *graph, uint16_t x, uint16_t y) {
  uint16_t x_axis_length = graph->width - 2 * graph->padding;
  float x_interval = graph->x_max - graph->x_min;
  uint16_t y_axis_length = graph->height - 2 * graph->padding;
    101a:	e2 18       	sub	r14, r2
    101c:	f3 08       	sbc	r15, r3
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:11
  float y_interval = graph->y_max - graph->y_min;

  position origin = {graph->pos.x + graph->padding, graph->pos.y + graph->height - graph->padding};
  position point = {origin.x + x / x_interval * x_axis_length, origin.y - y / y_interval * y_axis_length};
    101e:	b7 01       	movw	r22, r14
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1028:	9b 01       	movw	r18, r22
    102a:	ac 01       	movw	r20, r24
    102c:	c3 01       	movw	r24, r6
    102e:	b2 01       	movw	r22, r4
    1030:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulsf3>
    1034:	9b 01       	movw	r18, r22
    1036:	ac 01       	movw	r20, r24
    1038:	c5 01       	movw	r24, r10
    103a:	b4 01       	movw	r22, r8
    103c:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__subsf3>
    1040:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
    1044:	4b 01       	movw	r8, r22
    1046:	b6 01       	movw	r22, r12
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1050:	6b 01       	movw	r12, r22
    1052:	7c 01       	movw	r14, r24
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:6
#include "graph.h"
#include "utils.h"

position point_to_position(graph *graph, uint16_t x, uint16_t y) {
  uint16_t x_axis_length = graph->width - 2 * graph->padding;
  float x_interval = graph->x_max - graph->x_min;
    1054:	f8 01       	movw	r30, r16
    1056:	20 85       	ldd	r18, Z+8	; 0x08
    1058:	31 85       	ldd	r19, Z+9	; 0x09
    105a:	42 85       	ldd	r20, Z+10	; 0x0a
    105c:	53 85       	ldd	r21, Z+11	; 0x0b
    105e:	64 85       	ldd	r22, Z+12	; 0x0c
    1060:	75 85       	ldd	r23, Z+13	; 0x0d
    1062:	86 85       	ldd	r24, Z+14	; 0x0e
    1064:	97 85       	ldd	r25, Z+15	; 0x0f
    1066:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__subsf3>
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:11
  uint16_t y_axis_length = graph->height - 2 * graph->padding;
  float y_interval = graph->y_max - graph->y_min;

  position origin = {graph->pos.x + graph->padding, graph->pos.y + graph->height - graph->padding};
  position point = {origin.x + x / x_interval * x_axis_length, origin.y - y / y_interval * y_axis_length};
    106e:	c7 01       	movw	r24, r14
    1070:	b6 01       	movw	r22, r12
    1072:	0e 94 bf 32 	call	0x657e	; 0x657e <__divsf3>
    1076:	6b 01       	movw	r12, r22
    1078:	7c 01       	movw	r14, r24
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:5
#include "graph.h"
#include "utils.h"

position point_to_position(graph *graph, uint16_t x, uint16_t y) {
  uint16_t x_axis_length = graph->width - 2 * graph->padding;
    107a:	f8 01       	movw	r30, r16
    107c:	64 81       	ldd	r22, Z+4	; 0x04
    107e:	75 81       	ldd	r23, Z+5	; 0x05
    1080:	62 19       	sub	r22, r2
    1082:	73 09       	sbc	r23, r3
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:11
  float x_interval = graph->x_max - graph->x_min;
  uint16_t y_axis_length = graph->height - 2 * graph->padding;
  float y_interval = graph->y_max - graph->y_min;

  position origin = {graph->pos.x + graph->padding, graph->pos.y + graph->height - graph->padding};
  position point = {origin.x + x / x_interval * x_axis_length, origin.y - y / y_interval * y_axis_length};
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    108c:	9b 01       	movw	r18, r22
    108e:	ac 01       	movw	r20, r24
    1090:	c7 01       	movw	r24, r14
    1092:	b6 01       	movw	r22, r12
    1094:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulsf3>
    1098:	6b 01       	movw	r12, r22
    109a:	7c 01       	movw	r14, r24
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:10
  uint16_t x_axis_length = graph->width - 2 * graph->padding;
  float x_interval = graph->x_max - graph->x_min;
  uint16_t y_axis_length = graph->height - 2 * graph->padding;
  float y_interval = graph->y_max - graph->y_min;

  position origin = {graph->pos.x + graph->padding, graph->pos.y + graph->height - graph->padding};
    109c:	f8 01       	movw	r30, r16
    109e:	60 81       	ld	r22, Z
    10a0:	71 81       	ldd	r23, Z+1	; 0x01
    10a2:	6c 0f       	add	r22, r28
    10a4:	7d 1f       	adc	r23, r29
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:11
  position point = {origin.x + x / x_interval * x_axis_length, origin.y - y / y_interval * y_axis_length};
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	c7 01       	movw	r24, r14
    10b4:	b6 01       	movw	r22, r12
    10b6:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__addsf3>
    10ba:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:13

  return point;
    10be:	c4 01       	movw	r24, r8
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:14
}
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	bf 90       	pop	r11
    10d2:	af 90       	pop	r10
    10d4:	9f 90       	pop	r9
    10d6:	8f 90       	pop	r8
    10d8:	7f 90       	pop	r7
    10da:	6f 90       	pop	r6
    10dc:	5f 90       	pop	r5
    10de:	4f 90       	pop	r4
    10e0:	3f 90       	pop	r3
    10e2:	2f 90       	pop	r2
    10e4:	08 95       	ret

000010e6 <write(unsigned char, char)>:
_Z5writehc():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:112
}


// WRITING to pins

void write(uint8_t pin, char value) {
    10e6:	cf 93       	push	r28
    10e8:	28 2f       	mov	r18, r24
    10ea:	36 2f       	mov	r19, r22
get_port_address():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:44


// REGISTERS

volatile uint8_t* get_port_address(uint8_t pin) { // convert unique integer port id to port address
  uint8_t pin_mod = pin % 10;
    10ec:	6a e0       	ldi	r22, 0x0A	; 10
    10ee:	0e 94 f6 34 	call	0x69ec	; 0x69ec <__udivmodqi4>
    10f2:	c9 2f       	mov	r28, r25
    10f4:	49 2f       	mov	r20, r25
    10f6:	50 e0       	ldi	r21, 0x00	; 0
is_valid_pin():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:10
// HELPER functions

char is_valid_pin(uint8_t pin) {
  return
    pin > 9 &&      // no port A on 328p
    pin < 38 &&     // PD7 is highest pin
    10f8:	98 30       	cpi	r25, 0x08	; 8
    10fa:	70 f5       	brcc	.+92     	; 0x1158 <write(unsigned char, char)+0x72>
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:11
    pin % 10 < 8 && // Pin numbers range from 0 to 7
    10fc:	2b 31       	cpi	r18, 0x1B	; 27
    10fe:	61 f1       	breq	.+88     	; 0x1158 <write(unsigned char, char)+0x72>
get_port_address():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:50

  if(!is_valid_pin(pin)) {
    return 0;
  }

  switch((pin - pin_mod) / 10) {
    1100:	82 2f       	mov	r24, r18
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	84 1b       	sub	r24, r20
    1106:	95 0b       	sbc	r25, r21
    1108:	6a e0       	ldi	r22, 0x0A	; 10
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <__divmodhi4>
    1110:	61 50       	subi	r22, 0x01	; 1
    1112:	71 09       	sbc	r23, r1
    1114:	63 30       	cpi	r22, 0x03	; 3
    1116:	71 05       	cpc	r23, r1
    1118:	f8 f4       	brcc	.+62     	; 0x1158 <write(unsigned char, char)+0x72>
    111a:	66 0f       	add	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	fb 01       	movw	r30, r22
    1120:	e7 55       	subi	r30, 0x57	; 87
    1122:	fe 4f       	sbci	r31, 0xFE	; 254
    1124:	01 90       	ld	r0, Z+
    1126:	f0 81       	ld	r31, Z
    1128:	e0 2d       	mov	r30, r0
_Z5writehc():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:118
  volatile uint8_t *port = get_port_address(pin);
  uint8_t pin_mod = pin % 10;

  if(value) {value = 0xFF;}

  *port = (value & (*port | (0x01 << pin_mod))) | (~value & (*port & ~(0x01 << pin_mod)));
    112a:	80 81       	ld	r24, Z
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <write(unsigned char, char)+0x4e>
    1132:	44 0f       	add	r20, r20
    1134:	ca 95       	dec	r28
    1136:	ea f7       	brpl	.-6      	; 0x1132 <write(unsigned char, char)+0x4c>
    1138:	20 81       	ld	r18, Z
    113a:	94 2f       	mov	r25, r20
    113c:	90 95       	com	r25
    113e:	92 23       	and	r25, r18
    1140:	84 2b       	or	r24, r20
    1142:	89 27       	eor	r24, r25
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:116

void write(uint8_t pin, char value) {
  volatile uint8_t *port = get_port_address(pin);
  uint8_t pin_mod = pin % 10;

  if(value) {value = 0xFF;}
    1144:	21 e0       	ldi	r18, 0x01	; 1
    1146:	31 11       	cpse	r19, r1
    1148:	01 c0       	rjmp	.+2      	; 0x114c <write(unsigned char, char)+0x66>
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	21 95       	neg	r18
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:118

  *port = (value & (*port | (0x01 << pin_mod))) | (~value & (*port & ~(0x01 << pin_mod)));
    114e:	82 23       	and	r24, r18
    1150:	89 27       	eor	r24, r25
    1152:	80 83       	st	Z, r24
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:119
}
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:47

volatile uint8_t* get_port_address(uint8_t pin) { // convert unique integer port id to port address
  uint8_t pin_mod = pin % 10;

  if(!is_valid_pin(pin)) {
    return 0;
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	e0 e0       	ldi	r30, 0x00	; 0
    115c:	e6 cf       	rjmp	.-52     	; 0x112a <write(unsigned char, char)+0x44>

0000115e <select_mux_channel_delay(unsigned char, unsigned int) [clone .part.0]>:
_Z24select_mux_channel_delayhj.part.0():
/home/noah/Documents/basteln/ofen_v2/main/mux.cpp:7
#include "adc.h"
#include "pins.h"
#include "avrio.h"
#include <Arduino.h>

void select_mux_channel_delay(uint8_t channel, uint16_t wait_ms) {
    115e:	cf 93       	push	r28
    1160:	c8 2f       	mov	r28, r24
/home/noah/Documents/basteln/ofen_v2/main/mux.cpp:12
  if(channel > 7) { // CD4097 only has 8 Channels
    return;
  }

  write(MUX_A_PIN, (channel >> 0) & 0x01); // bitwise AND 0b00000001 to get 1st bit
    1162:	68 2f       	mov	r22, r24
    1164:	61 70       	andi	r22, 0x01	; 1
    1166:	88 e1       	ldi	r24, 0x18	; 24
    1168:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
/home/noah/Documents/basteln/ofen_v2/main/mux.cpp:13
  write(MUX_B_PIN, (channel >> 1) & 0x01); // bitwise AND 0b00000010 and right shift 1 to get 2nd bit
    116c:	6c 2f       	mov	r22, r28
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	75 95       	asr	r23
    1172:	67 95       	ror	r22
    1174:	87 e1       	ldi	r24, 0x17	; 23
    1176:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
/home/noah/Documents/basteln/ofen_v2/main/mux.cpp:14
  write(MUX_C_PIN, (channel >> 2) & 0x01); // bitwise AND 0b00000100 and right shift 2 to get 3rd bit
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	85 e1       	ldi	r24, 0x15	; 21
/home/noah/Documents/basteln/ofen_v2/main/mux.cpp:18
  
  // convert();      // a dummy convert and a delay helps in minimizing cross-channel influence
  // delay(wait_ms);
}
    117e:	cf 91       	pop	r28
/home/noah/Documents/basteln/ofen_v2/main/mux.cpp:14
    return;
  }

  write(MUX_A_PIN, (channel >> 0) & 0x01); // bitwise AND 0b00000001 to get 1st bit
  write(MUX_B_PIN, (channel >> 1) & 0x01); // bitwise AND 0b00000010 and right shift 1 to get 2nd bit
  write(MUX_C_PIN, (channel >> 2) & 0x01); // bitwise AND 0b00000100 and right shift 2 to get 3rd bit
    1180:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <write(unsigned char, char)>

00001184 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    1184:	8e bd       	out	0x2e, r24	; 46
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    1186:	00 00       	nop
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
    1188:	0d b4       	in	r0, 0x2d	; 45
    118a:	07 fe       	sbrs	r0, 7
    118c:	fd cf       	rjmp	.-6      	; 0x1188 <SPIClass::transfer(unsigned char)+0x4>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:221
    return SPDR;
    118e:	8e b5       	in	r24, 0x2e	; 46
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:222
  }
    1190:	08 95       	ret

00001192 <LCDWIKI_SPI::Spi_Read()>:
_ZN11LCDWIKI_SPI8Spi_ReadEv():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:513
	}
}

//spi read for hardware and software
uint8_t LCDWIKI_SPI::Spi_Read(void)
{
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	fc 01       	movw	r30, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:514
	if(hw_spi)
    1198:	86 8d       	ldd	r24, Z+30	; 0x1e
    119a:	88 23       	and	r24, r24
    119c:	29 f0       	breq	.+10     	; 0x11a8 <LCDWIKI_SPI::Spi_Read()+0x16>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:516
	{
		return SPI.transfer(0xFF);
    119e:	8f ef       	ldi	r24, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:534
				val |= 0x01;
			}
		}
		return val;
	}
}
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:516
//spi read for hardware and software
uint8_t LCDWIKI_SPI::Spi_Read(void)
{
	if(hw_spi)
	{
		return SPI.transfer(0xFF);
    11a4:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:514
}

//spi read for hardware and software
uint8_t LCDWIKI_SPI::Spi_Read(void)
{
	if(hw_spi)
    11a8:	88 e0       	ldi	r24, 0x08	; 8
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:523
	else
	{
		uint8_t val,i,d;
		for(i = 0;i<8; i++)
		{
			CLK_LOW; 
    11aa:	bf 01       	movw	r22, r30
    11ac:	6a 5b       	subi	r22, 0xBA	; 186
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:524
			CLK_HIGH;
    11b0:	af 01       	movw	r20, r30
    11b2:	4f 5b       	subi	r20, 0xBF	; 191
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:523
	else
	{
		uint8_t val,i,d;
		for(i = 0;i<8; i++)
		{
			CLK_LOW; 
    11b6:	a3 ad       	ldd	r26, Z+59	; 0x3b
    11b8:	b4 ad       	ldd	r27, Z+60	; 0x3c
    11ba:	9c 91       	ld	r25, X
    11bc:	eb 01       	movw	r28, r22
    11be:	38 81       	ld	r19, Y
    11c0:	93 23       	and	r25, r19
    11c2:	9c 93       	st	X, r25
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:524
			CLK_HIGH;
    11c4:	a3 ad       	ldd	r26, Z+59	; 0x3b
    11c6:	b4 ad       	ldd	r27, Z+60	; 0x3c
    11c8:	9c 91       	ld	r25, X
    11ca:	ea 01       	movw	r28, r20
    11cc:	38 81       	ld	r19, Y
    11ce:	93 2b       	or	r25, r19
    11d0:	9c 93       	st	X, r25
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:525
			val <<= 1;
    11d2:	22 0f       	add	r18, r18
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:526
			MISO_STATE(d);
    11d4:	a7 a9       	ldd	r26, Z+55	; 0x37
    11d6:	b0 ad       	ldd	r27, Z+56	; 0x38
    11d8:	9c 91       	ld	r25, X
    11da:	37 ad       	ldd	r19, Z+63	; 0x3f
    11dc:	93 23       	and	r25, r19
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:527
			if(d)
    11de:	09 f0       	breq	.+2      	; 0x11e2 <LCDWIKI_SPI::Spi_Read()+0x50>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:529
			{
				val |= 0x01;
    11e0:	21 60       	ori	r18, 0x01	; 1
    11e2:	81 50       	subi	r24, 0x01	; 1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:521
		return SPI.transfer(0xFF);
	}
	else
	{
		uint8_t val,i,d;
		for(i = 0;i<8; i++)
    11e4:	41 f7       	brne	.-48     	; 0x11b6 <LCDWIKI_SPI::Spi_Read()+0x24>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:534
				val |= 0x01;
			}
		}
		return val;
	}
}
    11e6:	82 2f       	mov	r24, r18
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <LCDWIKI_SPI::Spi_Write(unsigned char)>:
_ZN11LCDWIKI_SPI9Spi_WriteEh():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:486
	}
}

//spi write for hardware and software
void LCDWIKI_SPI::Spi_Write(uint8_t data)
{
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	fc 01       	movw	r30, r24
    1200:	86 2f       	mov	r24, r22
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:487
	if(hw_spi)
    1202:	96 8d       	ldd	r25, Z+30	; 0x1e
    1204:	99 23       	and	r25, r25
    1206:	51 f0       	breq	.+20     	; 0x121c <LCDWIKI_SPI::Spi_Write(unsigned char)+0x2e>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:509
			CLK_LOW;
			CLK_HIGH;
			val >>= 1;
		}
	}
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	ff 90       	pop	r15
    1212:	ef 90       	pop	r14
    1214:	df 90       	pop	r13
    1216:	cf 90       	pop	r12
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:489
//spi write for hardware and software
void LCDWIKI_SPI::Spi_Write(uint8_t data)
{
	if(hw_spi)
	{
		SPI.transfer(data);
    1218:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:487
}

//spi write for hardware and software
void LCDWIKI_SPI::Spi_Write(uint8_t data)
{
	if(hw_spi)
    121c:	28 e0       	ldi	r18, 0x08	; 8
    121e:	30 e0       	ldi	r19, 0x00	; 0
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:493
	{
		SPI.transfer(data);
	}
	else
	{
		uint8_t val = 0x80;
    1220:	90 e8       	ldi	r25, 0x80	; 128
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:502
			{
				MOSI_HIGH; 
			}
			else
			{
				MOSI_LOW;
    1222:	7f 01       	movw	r14, r30
    1224:	45 e4       	ldi	r20, 0x45	; 69
    1226:	e4 0e       	add	r14, r20
    1228:	f1 1c       	adc	r15, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:498
		uint8_t val = 0x80;
		while(val)
		{
			if(data&val)
			{
				MOSI_HIGH; 
    122a:	6f 01       	movw	r12, r30
    122c:	c0 e4       	ldi	r28, 0x40	; 64
    122e:	cc 0e       	add	r12, r28
    1230:	d1 1c       	adc	r13, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:504
			}
			else
			{
				MOSI_LOW;
			}
			CLK_LOW;
    1232:	8f 01       	movw	r16, r30
    1234:	0a 5b       	subi	r16, 0xBA	; 186
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:505
			CLK_HIGH;
    1238:	bf 01       	movw	r22, r30
    123a:	6f 5b       	subi	r22, 0xBF	; 191
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
    123e:	a1 ad       	ldd	r26, Z+57	; 0x39
    1240:	b2 ad       	ldd	r27, Z+58	; 0x3a
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:496
	else
	{
		uint8_t val = 0x80;
		while(val)
		{
			if(data&val)
    1242:	48 2f       	mov	r20, r24
    1244:	49 23       	and	r20, r25
    1246:	01 f1       	breq	.+64     	; 0x1288 <LCDWIKI_SPI::Spi_Write(unsigned char)+0x9a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:498
			{
				MOSI_HIGH; 
    1248:	4c 91       	ld	r20, X
    124a:	e6 01       	movw	r28, r12
    124c:	58 81       	ld	r21, Y
    124e:	45 2b       	or	r20, r21
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:502
			}
			else
			{
				MOSI_LOW;
    1250:	4c 93       	st	X, r20
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:504
			}
			CLK_LOW;
    1252:	a3 ad       	ldd	r26, Z+59	; 0x3b
    1254:	b4 ad       	ldd	r27, Z+60	; 0x3c
    1256:	4c 91       	ld	r20, X
    1258:	e8 01       	movw	r28, r16
    125a:	58 81       	ld	r21, Y
    125c:	45 23       	and	r20, r21
    125e:	4c 93       	st	X, r20
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:505
			CLK_HIGH;
    1260:	a3 ad       	ldd	r26, Z+59	; 0x3b
    1262:	b4 ad       	ldd	r27, Z+60	; 0x3c
    1264:	4c 91       	ld	r20, X
    1266:	eb 01       	movw	r28, r22
    1268:	58 81       	ld	r21, Y
    126a:	45 2b       	or	r20, r21
    126c:	4c 93       	st	X, r20
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:506
			val >>= 1;
    126e:	96 95       	lsr	r25
    1270:	21 50       	subi	r18, 0x01	; 1
    1272:	31 09       	sbc	r19, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:494
		SPI.transfer(data);
	}
	else
	{
		uint8_t val = 0x80;
		while(val)
    1274:	21 f7       	brne	.-56     	; 0x123e <LCDWIKI_SPI::Spi_Write(unsigned char)+0x50>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:509
			CLK_LOW;
			CLK_HIGH;
			val >>= 1;
		}
	}
}
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	08 95       	ret
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:502
			{
				MOSI_HIGH; 
			}
			else
			{
				MOSI_LOW;
    1288:	4c 91       	ld	r20, X
    128a:	e7 01       	movw	r28, r14
    128c:	58 81       	ld	r21, Y
    128e:	45 23       	and	r20, r21
    1290:	df cf       	rjmp	.-66     	; 0x1250 <LCDWIKI_SPI::Spi_Write(unsigned char)+0x62>

00001292 <LCDWIKI_SPI::Write_Cmd_Data(unsigned int, unsigned int) [clone .constprop.50]>:
_ZN11LCDWIKI_SPI14Write_Cmd_DataEjj.constprop.50():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:550
	CS_ACTIVE;
	writeData16(data);
	CS_IDLE;
}

void LCDWIKI_SPI::Write_Cmd_Data(uint16_t cmd, uint16_t data)
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	f8 2e       	mov	r15, r24
    129e:	16 2f       	mov	r17, r22
    12a0:	07 2f       	mov	r16, r23
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:552
{
	CS_ACTIVE;
    12a2:	c5 ef       	ldi	r28, 0xF5	; 245
    12a4:	d2 e0       	ldi	r29, 0x02	; 2
    12a6:	eb a9       	ldd	r30, Y+51	; 0x33
    12a8:	fc a9       	ldd	r31, Y+52	; 0x34
    12aa:	80 81       	ld	r24, Z
    12ac:	20 91 37 03 	lds	r18, 0x0337	; 0x800337 <display+0x42>
    12b0:	82 23       	and	r24, r18
    12b2:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:553
	writeCmdData16(cmd,data);
    12b4:	ed a9       	ldd	r30, Y+53	; 0x35
    12b6:	fe a9       	ldd	r31, Y+54	; 0x36
    12b8:	80 81       	ld	r24, Z
    12ba:	20 91 38 03 	lds	r18, 0x0338	; 0x800338 <display+0x43>
    12be:	82 23       	and	r24, r18
    12c0:	80 83       	st	Z, r24
    12c2:	69 2f       	mov	r22, r25
    12c4:	ce 01       	movw	r24, r28
    12c6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    12ca:	6f 2d       	mov	r22, r15
    12cc:	ce 01       	movw	r24, r28
    12ce:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    12d2:	ed a9       	ldd	r30, Y+53	; 0x35
    12d4:	fe a9       	ldd	r31, Y+54	; 0x36
    12d6:	80 81       	ld	r24, Z
    12d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12da:	89 2b       	or	r24, r25
    12dc:	80 83       	st	Z, r24
    12de:	60 2f       	mov	r22, r16
    12e0:	ce 01       	movw	r24, r28
    12e2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    12e6:	61 2f       	mov	r22, r17
    12e8:	ce 01       	movw	r24, r28
    12ea:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:554
	CS_IDLE;
    12ee:	eb a9       	ldd	r30, Y+51	; 0x33
    12f0:	fc a9       	ldd	r31, Y+52	; 0x34
    12f2:	80 81       	ld	r24, Z
    12f4:	9d ad       	ldd	r25, Y+61	; 0x3d
    12f6:	89 2b       	or	r24, r25
    12f8:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:555
}
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	08 95       	ret

00001306 <LCDWIKI_SPI::init_table16(void const*, int) [clone .constprop.45]>:
_ZN11LCDWIKI_SPI12init_table16EPKvi.constprop.45():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1414
        }
        size -= len + 2;
    }
}

void LCDWIKI_SPI:: init_table16(const void *table, int16_t size)
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	ec 01       	movw	r28, r24
    1310:	8b 01       	movw	r16, r22
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1419
{
    uint16_t *p = (uint16_t *) table;
    while (size > 0) 
	{
        uint16_t cmd = pgm_read_word(p++);
    1312:	fe 01       	movw	r30, r28
    1314:	85 91       	lpm	r24, Z+
    1316:	94 91       	lpm	r25, Z
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1420
        uint16_t d = pgm_read_word(p++);
    1318:	fe 01       	movw	r30, r28
    131a:	32 96       	adiw	r30, 0x02	; 2
    131c:	24 96       	adiw	r28, 0x04	; 4
    131e:	65 91       	lpm	r22, Z+
    1320:	74 91       	lpm	r23, Z
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1421
        if (cmd == TFTLCD_DELAY16)
    1322:	8f 3f       	cpi	r24, 0xFF	; 255
    1324:	98 07       	cpc	r25, r24
    1326:	71 f4       	brne	.+28     	; 0x1344 <LCDWIKI_SPI::init_table16(void const*, int) [clone .constprop.45]+0x3e>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1423
        {
            delay(d);
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	0e 94 c0 05 	call	0xb80	; 0xb80 <delay>
    1330:	04 50       	subi	r16, 0x04	; 4
    1332:	11 09       	sbc	r17, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1417
}

void LCDWIKI_SPI:: init_table16(const void *table, int16_t size)
{
    uint16_t *p = (uint16_t *) table;
    while (size > 0) 
    1334:	10 16       	cp	r1, r16
    1336:	11 06       	cpc	r1, r17
    1338:	64 f3       	brlt	.-40     	; 0x1312 <LCDWIKI_SPI::init_table16(void const*, int) [clone .constprop.45]+0xc>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1431
		{
			Write_Cmd_Data(cmd, d);                      //static function
		}
        size -= 2 * sizeof(int16_t);
    }
}
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	08 95       	ret
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1427
        {
            delay(d);
        }
        else 
		{
			Write_Cmd_Data(cmd, d);                      //static function
    1344:	0e 94 49 09 	call	0x1292	; 0x1292 <LCDWIKI_SPI::Write_Cmd_Data(unsigned int, unsigned int) [clone .constprop.50]>
    1348:	f3 cf       	rjmp	.-26     	; 0x1330 <LCDWIKI_SPI::init_table16(void const*, int) [clone .constprop.45]+0x2a>

0000134a <LCDWIKI_SPI::reset() [clone .constprop.44]>:
_ZN11LCDWIKI_SPI5resetEv.constprop.44():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:450
// Initialization common to both shield & breakout configs
void LCDWIKI_SPI::reset(void)
{
//	have_reset = 1;
//    setWriteDir();
    CS_IDLE;
    134a:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <display+0x33>
    134e:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <display+0x34>
    1352:	80 81       	ld	r24, Z
    1354:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <display+0x3d>
    1358:	89 2b       	or	r24, r25
    135a:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:453
    RD_IDLE;
    WR_IDLE;
  if(_reset >=0) 
    135c:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <display+0x4c>
    1360:	87 fd       	sbrc	r24, 7
    1362:	0e c0       	rjmp	.+28     	; 0x1380 <LCDWIKI_SPI::reset() [clone .constprop.44]+0x36>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:455
  {
    digitalWrite(_reset, LOW);
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	0e 94 4f 05 	call	0xa9e	; 0xa9e <digitalWrite>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:456
    delay(2);
    136a:	62 e0       	ldi	r22, 0x02	; 2
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 c0 05 	call	0xb80	; 0xb80 <delay>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:457
    digitalWrite(_reset, HIGH);
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <display+0x4c>
    137c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <digitalWrite>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:459
  }
  CS_ACTIVE;
    1380:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <display+0x33>
    1384:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <display+0x34>
    1388:	80 81       	ld	r24, Z
    138a:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <display+0x42>
    138e:	89 23       	and	r24, r25
    1390:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:460
  CD_COMMAND;
    1392:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    1396:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    139a:	80 81       	ld	r24, Z
    139c:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <display+0x43>
    13a0:	89 23       	and	r24, r25
    13a2:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:461
  write8(0x00);
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	85 ef       	ldi	r24, 0xF5	; 245
    13a8:	92 e0       	ldi	r25, 0x02	; 2
    13aa:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:466
  for(uint8_t i=0; i<3; i++)
  {
  	WR_STROBE; // Three extra 0x00s
  }
  CS_IDLE;
    13ae:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <display+0x33>
    13b2:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <display+0x34>
    13b6:	80 81       	ld	r24, Z
    13b8:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <display+0x3d>
    13bc:	89 2b       	or	r24, r25
    13be:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:467
}
    13c0:	08 95       	ret

000013c2 <LCDWIKI_SPI::Read_Reg(unsigned int, signed char) [clone .constprop.42]>:
_ZN11LCDWIKI_SPI8Read_RegEja.constprop.42():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:807
{
	return ((r& 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
}

//read value from lcd register 
uint16_t LCDWIKI_SPI::Read_Reg(uint16_t reg, int8_t index)
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	d8 2f       	mov	r29, r24
    13c8:	c6 2f       	mov	r28, r22
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:815
    uint8_t low;
//  if (!have_reset)
 // {
 //     reset();
//  }
	CS_ACTIVE;
    13ca:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <display+0x33>
    13ce:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <display+0x34>
    13d2:	80 81       	ld	r24, Z
    13d4:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <display+0x42>
    13d8:	89 23       	and	r24, r25
    13da:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:816
    writeCmd16(reg);
    13dc:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    13e0:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    13e4:	80 81       	ld	r24, Z
    13e6:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <display+0x43>
    13ea:	89 23       	and	r24, r25
    13ec:	80 83       	st	Z, r24
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	85 ef       	ldi	r24, 0xF5	; 245
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    13f8:	6d 2f       	mov	r22, r29
    13fa:	85 ef       	ldi	r24, 0xF5	; 245
    13fc:	92 e0       	ldi	r25, 0x02	; 2
    13fe:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:818
    setReadDir();
    delay(1); 
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 c0 05 	call	0xb80	; 0xb80 <delay>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:824
	do 
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);
    140e:	85 ef       	ldi	r24, 0xF5	; 245
    1410:	92 e0       	ldi	r25, 0x02	; 2
    1412:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
    1416:	d8 2f       	mov	r29, r24
    1418:	85 ef       	ldi	r24, 0xF5	; 245
    141a:	92 e0       	ldi	r25, 0x02	; 2
    141c:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:825
	}while (--index >= 0);  
    1420:	c1 30       	cpi	r28, 0x01	; 1
    1422:	69 f0       	breq	.+26     	; 0x143e <LCDWIKI_SPI::Read_Reg(unsigned int, signed char) [clone .constprop.42]+0x7c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:827
//    RD_IDLE;
    CS_IDLE;
    1424:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <display+0x33>
    1428:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <display+0x34>
    142c:	90 81       	ld	r25, Z
    142e:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <display+0x3d>
    1432:	92 2b       	or	r25, r18
    1434:	90 83       	st	Z, r25
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:830
    setWriteDir();
    return ret;
}
    1436:	9d 2f       	mov	r25, r29
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:825
	{ 
	//ead8(high);
	//ead8(low);
	//et = (high << 8) | lowc
		read16(ret);
	}while (--index >= 0);  
    143e:	c0 e0       	ldi	r28, 0x00	; 0
    1440:	e6 cf       	rjmp	.-52     	; 0x140e <LCDWIKI_SPI::Read_Reg(unsigned int, signed char) [clone .constprop.42]+0x4c>

00001442 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_SPI9Fill_RectEiiiij():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:961
	CS_IDLE;
}

//fill area from x to x+w,y to y+h
void LCDWIKI_SPI::Fill_Rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
    1442:	2f 92       	push	r2
    1444:	3f 92       	push	r3
    1446:	4f 92       	push	r4
    1448:	5f 92       	push	r5
    144a:	6f 92       	push	r6
    144c:	7f 92       	push	r7
    144e:	8f 92       	push	r8
    1450:	9f 92       	push	r9
    1452:	af 92       	push	r10
    1454:	bf 92       	push	r11
    1456:	cf 92       	push	r12
    1458:	df 92       	push	r13
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	ec 01       	movw	r28, r24
    1468:	4a 01       	movw	r8, r20
    146a:	27 01       	movw	r4, r14
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:963
	int16_t end;
	if (w < 0) 
    146c:	37 ff       	sbrs	r19, 7
    146e:	05 c0       	rjmp	.+10     	; 0x147a <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x38>
    1470:	62 0f       	add	r22, r18
    1472:	73 1f       	adc	r23, r19
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:965
	{
        w = -w;
    1474:	31 95       	neg	r19
    1476:	21 95       	neg	r18
    1478:	31 09       	sbc	r19, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:968
        x -= w;
    }                           //+ve w
    end = x + w;
    147a:	7b 01       	movw	r14, r22
    147c:	e2 0e       	add	r14, r18
    147e:	f3 1e       	adc	r15, r19
    1480:	5b 01       	movw	r10, r22
    1482:	77 ff       	sbrs	r23, 7
    1484:	02 c0       	rjmp	.+4      	; 0x148a <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x48>
    1486:	b1 2c       	mov	r11, r1
    1488:	a1 2c       	mov	r10, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:973
    if (x < 0)
    {
        x = 0;
    }
    if (end > Get_Width())
    148a:	e8 81       	ld	r30, Y
    148c:	f9 81       	ldd	r31, Y+1	; 0x01
    148e:	06 84       	ldd	r0, Z+14	; 0x0e
    1490:	f7 85       	ldd	r31, Z+15	; 0x0f
    1492:	e0 2d       	mov	r30, r0
    1494:	ce 01       	movw	r24, r28
    1496:	09 95       	icall
    1498:	8e 15       	cp	r24, r14
    149a:	9f 05       	cpc	r25, r15
    149c:	44 f4       	brge	.+16     	; 0x14ae <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x6c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:975
    {
        end = Get_Width();
    149e:	e8 81       	ld	r30, Y
    14a0:	f9 81       	ldd	r31, Y+1	; 0x01
    14a2:	06 84       	ldd	r0, Z+14	; 0x0e
    14a4:	f7 85       	ldd	r31, Z+15	; 0x0f
    14a6:	e0 2d       	mov	r30, r0
    14a8:	ce 01       	movw	r24, r28
    14aa:	09 95       	icall
    14ac:	7c 01       	movw	r14, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:977
    }
    w = end - x;
    14ae:	67 01       	movw	r12, r14
    14b0:	ca 18       	sub	r12, r10
    14b2:	db 08       	sbc	r13, r11
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:978
    if (h < 0) 
    14b4:	17 ff       	sbrs	r17, 7
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x80>
    14b8:	80 0e       	add	r8, r16
    14ba:	91 1e       	adc	r9, r17
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:980
	{
        h = -h;
    14bc:	11 95       	neg	r17
    14be:	01 95       	neg	r16
    14c0:	11 09       	sbc	r17, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:983
        y -= h;
    }                           //+ve h
    end = y + h;
    14c2:	08 0d       	add	r16, r8
    14c4:	19 1d       	adc	r17, r9
    14c6:	97 fe       	sbrs	r9, 7
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x8c>
    14ca:	91 2c       	mov	r9, r1
    14cc:	81 2c       	mov	r8, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:988
    if (y < 0)
    {
        y = 0;
    }
    if (end > Get_Height())
    14ce:	e8 81       	ld	r30, Y
    14d0:	f9 81       	ldd	r31, Y+1	; 0x01
    14d2:	04 84       	ldd	r0, Z+12	; 0x0c
    14d4:	f5 85       	ldd	r31, Z+13	; 0x0d
    14d6:	e0 2d       	mov	r30, r0
    14d8:	ce 01       	movw	r24, r28
    14da:	09 95       	icall
    14dc:	80 17       	cp	r24, r16
    14de:	91 07       	cpc	r25, r17
    14e0:	44 f4       	brge	.+16     	; 0x14f2 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0xb0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:990
    {
        end = Get_Height();
    14e2:	e8 81       	ld	r30, Y
    14e4:	f9 81       	ldd	r31, Y+1	; 0x01
    14e6:	04 84       	ldd	r0, Z+12	; 0x0c
    14e8:	f5 85       	ldd	r31, Z+13	; 0x0d
    14ea:	e0 2d       	mov	r30, r0
    14ec:	ce 01       	movw	r24, r28
    14ee:	09 95       	icall
    14f0:	8c 01       	movw	r16, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:992
    }
    h = end - y;
    14f2:	38 01       	movw	r6, r16
    14f4:	68 18       	sub	r6, r8
    14f6:	79 08       	sbc	r7, r9
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:993
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    14f8:	01 50       	subi	r16, 0x01	; 1
    14fa:	11 09       	sbc	r17, r1
    14fc:	97 01       	movw	r18, r14
    14fe:	21 50       	subi	r18, 0x01	; 1
    1500:	31 09       	sbc	r19, r1
    1502:	e8 81       	ld	r30, Y
    1504:	f9 81       	ldd	r31, Y+1	; 0x01
    1506:	06 80       	ldd	r0, Z+6	; 0x06
    1508:	f7 81       	ldd	r31, Z+7	; 0x07
    150a:	e0 2d       	mov	r30, r0
    150c:	a4 01       	movw	r20, r8
    150e:	b5 01       	movw	r22, r10
    1510:	ce 01       	movw	r24, r28
    1512:	09 95       	icall
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:994
	CS_ACTIVE;
    1514:	eb a9       	ldd	r30, Y+51	; 0x33
    1516:	fc a9       	ldd	r31, Y+52	; 0x34
    1518:	80 81       	ld	r24, Z
    151a:	1e 01       	movw	r2, r28
    151c:	22 e4       	ldi	r18, 0x42	; 66
    151e:	22 0e       	add	r2, r18
    1520:	31 1c       	adc	r3, r1
    1522:	d1 01       	movw	r26, r2
    1524:	9c 91       	ld	r25, X
    1526:	89 23       	and	r24, r25
    1528:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:995
	if(lcd_driver == ID_1106)
    152a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    152c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    152e:	88 30       	cpi	r24, 0x08	; 8
    1530:	91 05       	cpc	r25, r1
    1532:	01 f5       	brne	.+64     	; 0x1574 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x132>
    1534:	74 01       	movw	r14, r8
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:998
	{
		int16_t i,j;
		for(i=0;i<h;i++)
    1536:	c7 01       	movw	r24, r14
    1538:	88 19       	sub	r24, r8
    153a:	99 09       	sbc	r25, r9
    153c:	86 15       	cp	r24, r6
    153e:	97 05       	cpc	r25, r7
    1540:	0c f0       	brlt	.+2      	; 0x1544 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x102>
    1542:	8c c0       	rjmp	.+280    	; 0x165c <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x21a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1000
		{
			for(j=0;j<w;j++)
    1544:	10 e0       	ldi	r17, 0x00	; 0
    1546:	00 e0       	ldi	r16, 0x00	; 0
    1548:	0c 15       	cp	r16, r12
    154a:	1d 05       	cpc	r17, r13
    154c:	7c f4       	brge	.+30     	; 0x156c <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x12a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1002
			{
				Draw_Pixe(x+j, y+i,color);
    154e:	b5 01       	movw	r22, r10
    1550:	60 0f       	add	r22, r16
    1552:	71 1f       	adc	r23, r17
    1554:	e8 81       	ld	r30, Y
    1556:	f9 81       	ldd	r31, Y+1	; 0x01
    1558:	02 80       	ldd	r0, Z+2	; 0x02
    155a:	f3 81       	ldd	r31, Z+3	; 0x03
    155c:	e0 2d       	mov	r30, r0
    155e:	92 01       	movw	r18, r4
    1560:	a7 01       	movw	r20, r14
    1562:	ce 01       	movw	r24, r28
    1564:	09 95       	icall
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1000
	if(lcd_driver == ID_1106)
	{
		int16_t i,j;
		for(i=0;i<h;i++)
		{
			for(j=0;j<w;j++)
    1566:	0f 5f       	subi	r16, 0xFF	; 255
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	ee cf       	rjmp	.-36     	; 0x1548 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x106>
    156c:	bf ef       	ldi	r27, 0xFF	; 255
    156e:	eb 1a       	sub	r14, r27
    1570:	fb 0a       	sbc	r15, r27
    1572:	e1 cf       	rjmp	.-62     	; 0x1536 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0xf4>
    1574:	8e 01       	movw	r16, r28
    1576:	0d 5b       	subi	r16, 0xBD	; 189
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1008
			}		
		}
		CS_IDLE;
		return;
	}
    else if(lcd_driver == ID_932X)
    157a:	89 2b       	or	r24, r25
    157c:	59 f4       	brne	.+22     	; 0x1594 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x152>
    157e:	ed a9       	ldd	r30, Y+53	; 0x35
    1580:	fe a9       	ldd	r31, Y+54	; 0x36
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1010
	{
		writeCmd8(ILI932X_START_OSC);		
    1582:	80 81       	ld	r24, Z
    1584:	d8 01       	movw	r26, r16
    1586:	9c 91       	ld	r25, X
    1588:	89 23       	and	r24, r25
    158a:	80 83       	st	Z, r24
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	ce 01       	movw	r24, r28
    1590:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1012
	} 		
	writeCmd8(CC);		
    1594:	ed a9       	ldd	r30, Y+53	; 0x35
    1596:	fe a9       	ldd	r31, Y+54	; 0x36
    1598:	80 81       	ld	r24, Z
    159a:	d8 01       	movw	r26, r16
    159c:	9c 91       	ld	r25, X
    159e:	89 23       	and	r24, r25
    15a0:	80 83       	st	Z, r24
    15a2:	6b a1       	ldd	r22, Y+35	; 0x23
    15a4:	ce 01       	movw	r24, r28
    15a6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1013
	if (h > w) 
    15aa:	c6 14       	cp	r12, r6
    15ac:	d7 04       	cpc	r13, r7
    15ae:	2c f0       	brlt	.+10     	; 0x15ba <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x178>
    15b0:	96 2d       	mov	r25, r6
    15b2:	87 2d       	mov	r24, r7
    15b4:	36 01       	movw	r6, r12
    15b6:	c9 2e       	mov	r12, r25
    15b8:	d8 2e       	mov	r13, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1030
			{
				writeData18(color);
			}
			else
			{
   				writeData16(color);
    15ba:	95 2c       	mov	r9, r5
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1026
		end = w;
		do 
		{
			if(MODEL == ILI9488_18)
			{
				writeData18(color);
    15bc:	b5 2d       	mov	r27, r5
    15be:	b8 7f       	andi	r27, 0xF8	; 248
    15c0:	eb 2e       	mov	r14, r27
    15c2:	c2 01       	movw	r24, r4
    15c4:	23 e0       	ldi	r18, 0x03	; 3
    15c6:	96 95       	lsr	r25
    15c8:	87 95       	ror	r24
    15ca:	2a 95       	dec	r18
    15cc:	e1 f7       	brne	.-8      	; 0x15c6 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x184>
    15ce:	28 2f       	mov	r18, r24
    15d0:	2c 7f       	andi	r18, 0xFC	; 252
    15d2:	f2 2e       	mov	r15, r18
    15d4:	84 2c       	mov	r8, r4
    15d6:	44 0c       	add	r4, r4
    15d8:	44 0c       	add	r4, r4
    15da:	44 0c       	add	r4, r4
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1019
	{
        end = h;
        h = w;
        w = end;
    }
	while (h-- > 0) 
    15dc:	1c 14       	cp	r1, r12
    15de:	1d 04       	cpc	r1, r13
    15e0:	34 f5       	brge	.+76     	; 0x162e <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x1ec>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1021
	{
		end = w;
    15e2:	53 01       	movw	r10, r6
    15e4:	ed a9       	ldd	r30, Y+53	; 0x35
    15e6:	fe a9       	ldd	r31, Y+54	; 0x36
    15e8:	9e ad       	ldd	r25, Y+62	; 0x3e
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1024
		do 
		{
			if(MODEL == ILI9488_18)
    15ea:	29 a9       	ldd	r18, Y+49	; 0x31
    15ec:	3a a9       	ldd	r19, Y+50	; 0x32
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1026
			{
				writeData18(color);
    15ee:	80 81       	ld	r24, Z
    15f0:	89 2b       	or	r24, r25
    15f2:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1024
	while (h-- > 0) 
	{
		end = w;
		do 
		{
			if(MODEL == ILI9488_18)
    15f4:	2c 30       	cpi	r18, 0x0C	; 12
    15f6:	31 05       	cpc	r19, r1
    15f8:	a1 f4       	brne	.+40     	; 0x1622 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x1e0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1026
			{
				writeData18(color);
    15fa:	6e 2d       	mov	r22, r14
    15fc:	ce 01       	movw	r24, r28
    15fe:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    1602:	6f 2d       	mov	r22, r15
    1604:	ce 01       	movw	r24, r28
    1606:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    160a:	64 2d       	mov	r22, r4
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1030
			}
			else
			{
   				writeData16(color);
    160c:	ce 01       	movw	r24, r28
    160e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1032
			}
		} while (--end != 0);
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	a8 1a       	sub	r10, r24
    1616:	b1 08       	sbc	r11, r1
    1618:	29 f7       	brne	.-54     	; 0x15e4 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x1a2>
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	c9 1a       	sub	r12, r25
    161e:	d1 08       	sbc	r13, r1
    1620:	dd cf       	rjmp	.-70     	; 0x15dc <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x19a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1030
			{
				writeData18(color);
			}
			else
			{
   				writeData16(color);
    1622:	69 2d       	mov	r22, r9
    1624:	ce 01       	movw	r24, r28
    1626:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    162a:	68 2d       	mov	r22, r8
    162c:	ef cf       	rjmp	.-34     	; 0x160c <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x1ca>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1034
			}
		} while (--end != 0);
	}
	if(lcd_driver == ID_932X)
    162e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1630:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	61 f5       	brne	.+88     	; 0x168e <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x24c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1036
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
    1636:	0e 89       	ldd	r16, Y+22	; 0x16
    1638:	1f 89       	ldd	r17, Y+23	; 0x17
    163a:	01 50       	subi	r16, 0x01	; 1
    163c:	11 09       	sbc	r17, r1
    163e:	2c 89       	ldd	r18, Y+20	; 0x14
    1640:	3d 89       	ldd	r19, Y+21	; 0x15
    1642:	21 50       	subi	r18, 0x01	; 1
    1644:	31 09       	sbc	r19, r1
    1646:	e8 81       	ld	r30, Y
    1648:	f9 81       	ldd	r31, Y+1	; 0x01
    164a:	06 80       	ldd	r0, Z+6	; 0x06
    164c:	f7 81       	ldd	r31, Z+7	; 0x07
    164e:	e0 2d       	mov	r30, r0
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	ce 01       	movw	r24, r28
    165a:	09 95       	icall
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1042
	}
	else if(lcd_driver == ID_7575)
	{
		Set_LR();
	}
	CS_IDLE;
    165c:	eb a9       	ldd	r30, Y+51	; 0x33
    165e:	fc a9       	ldd	r31, Y+52	; 0x34
    1660:	80 81       	ld	r24, Z
    1662:	9d ad       	ldd	r25, Y+61	; 0x3d
    1664:	89 2b       	or	r24, r25
    1666:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1043
}
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	9f 90       	pop	r9
    167e:	8f 90       	pop	r8
    1680:	7f 90       	pop	r7
    1682:	6f 90       	pop	r6
    1684:	5f 90       	pop	r5
    1686:	4f 90       	pop	r4
    1688:	3f 90       	pop	r3
    168a:	2f 90       	pop	r2
    168c:	08 95       	ret
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1038
	}
	if(lcd_driver == ID_932X)
	{
		Set_Addr_Window(0, 0, width - 1, height - 1);
	}
	else if(lcd_driver == ID_7575)
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	29 f7       	brne	.-54     	; 0x165c <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x21a>
    1692:	eb a9       	ldd	r30, Y+51	; 0x33
    1694:	fc a9       	ldd	r31, Y+52	; 0x34
Set_LR():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:710
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void LCDWIKI_SPI::Set_LR(void)
{
	CS_ACTIVE;
    1696:	80 81       	ld	r24, Z
    1698:	d1 01       	movw	r26, r2
    169a:	9c 91       	ld	r25, X
    169c:	89 23       	and	r24, r25
    169e:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:711
	writeCmdData8(HX8347G_COLADDREND_HI,(width -1)>>8);
    16a0:	ed a9       	ldd	r30, Y+53	; 0x35
    16a2:	fe a9       	ldd	r31, Y+54	; 0x36
    16a4:	80 81       	ld	r24, Z
    16a6:	d8 01       	movw	r26, r16
    16a8:	9c 91       	ld	r25, X
    16aa:	89 23       	and	r24, r25
    16ac:	80 83       	st	Z, r24
    16ae:	64 e0       	ldi	r22, 0x04	; 4
    16b0:	ce 01       	movw	r24, r28
    16b2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    16b6:	ed a9       	ldd	r30, Y+53	; 0x35
    16b8:	fe a9       	ldd	r31, Y+54	; 0x36
    16ba:	80 81       	ld	r24, Z
    16bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    16be:	89 2b       	or	r24, r25
    16c0:	80 83       	st	Z, r24
    16c2:	8c 89       	ldd	r24, Y+20	; 0x14
    16c4:	9d 89       	ldd	r25, Y+21	; 0x15
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	69 2f       	mov	r22, r25
    16ca:	ce 01       	movw	r24, r28
    16cc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:712
	writeCmdData8(HX8347G_COLADDREND_LO,width -1);
    16d0:	ed a9       	ldd	r30, Y+53	; 0x35
    16d2:	fe a9       	ldd	r31, Y+54	; 0x36
    16d4:	80 81       	ld	r24, Z
    16d6:	d8 01       	movw	r26, r16
    16d8:	9c 91       	ld	r25, X
    16da:	89 23       	and	r24, r25
    16dc:	80 83       	st	Z, r24
    16de:	65 e0       	ldi	r22, 0x05	; 5
    16e0:	ce 01       	movw	r24, r28
    16e2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    16e6:	ed a9       	ldd	r30, Y+53	; 0x35
    16e8:	fe a9       	ldd	r31, Y+54	; 0x36
    16ea:	80 81       	ld	r24, Z
    16ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ee:	89 2b       	or	r24, r25
    16f0:	80 83       	st	Z, r24
    16f2:	6c 89       	ldd	r22, Y+20	; 0x14
    16f4:	61 50       	subi	r22, 0x01	; 1
    16f6:	ce 01       	movw	r24, r28
    16f8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:713
	writeCmdData8(HX8347G_ROWADDREND_HI,(height -1)>>8);
    16fc:	ed a9       	ldd	r30, Y+53	; 0x35
    16fe:	fe a9       	ldd	r31, Y+54	; 0x36
    1700:	80 81       	ld	r24, Z
    1702:	d8 01       	movw	r26, r16
    1704:	9c 91       	ld	r25, X
    1706:	89 23       	and	r24, r25
    1708:	80 83       	st	Z, r24
    170a:	68 e0       	ldi	r22, 0x08	; 8
    170c:	ce 01       	movw	r24, r28
    170e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    1712:	ed a9       	ldd	r30, Y+53	; 0x35
    1714:	fe a9       	ldd	r31, Y+54	; 0x36
    1716:	80 81       	ld	r24, Z
    1718:	9e ad       	ldd	r25, Y+62	; 0x3e
    171a:	89 2b       	or	r24, r25
    171c:	80 83       	st	Z, r24
    171e:	8e 89       	ldd	r24, Y+22	; 0x16
    1720:	9f 89       	ldd	r25, Y+23	; 0x17
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	69 2f       	mov	r22, r25
    1726:	ce 01       	movw	r24, r28
    1728:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:714
	writeCmdData8(HX8347G_ROWADDREND_LO,height -1);
    172c:	ed a9       	ldd	r30, Y+53	; 0x35
    172e:	fe a9       	ldd	r31, Y+54	; 0x36
    1730:	80 81       	ld	r24, Z
    1732:	d8 01       	movw	r26, r16
    1734:	9c 91       	ld	r25, X
    1736:	89 23       	and	r24, r25
    1738:	80 83       	st	Z, r24
    173a:	69 e0       	ldi	r22, 0x09	; 9
    173c:	ce 01       	movw	r24, r28
    173e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    1742:	ed a9       	ldd	r30, Y+53	; 0x35
    1744:	fe a9       	ldd	r31, Y+54	; 0x36
    1746:	80 81       	ld	r24, Z
    1748:	9e ad       	ldd	r25, Y+62	; 0x3e
    174a:	89 2b       	or	r24, r25
    174c:	80 83       	st	Z, r24
    174e:	6e 89       	ldd	r22, Y+22	; 0x16
    1750:	61 50       	subi	r22, 0x01	; 1
    1752:	ce 01       	movw	r24, r28
    1754:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:715
	CS_IDLE;
    1758:	eb a9       	ldd	r30, Y+51	; 0x33
    175a:	fc a9       	ldd	r31, Y+52	; 0x34
    175c:	80 81       	ld	r24, Z
    175e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1760:	89 2b       	or	r24, r25
    1762:	80 83       	st	Z, r24
    1764:	7b cf       	rjmp	.-266    	; 0x165c <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x21a>

00001766 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.30]>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii.constprop.30():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:93
{
	Fill_Rect(x, y, 1, h, draw_color);
}

//draw a horizontal line
void LCDWIKI_GUI::Draw_Fast_HLine(int16_t x, int16_t y, int16_t w)
    1766:	ef 92       	push	r14
    1768:	ff 92       	push	r15
    176a:	0f 93       	push	r16
    176c:	1f 93       	push	r17
    176e:	9a 01       	movw	r18, r20
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:95
{
	Fill_Rect(x, y, w, 1, draw_color);
    1770:	e0 90 ff 02 	lds	r14, 0x02FF	; 0x8002ff <display+0xa>
    1774:	f0 90 00 03 	lds	r15, 0x0300	; 0x800300 <display+0xb>
    1778:	01 e0       	ldi	r16, 0x01	; 1
    177a:	10 e0       	ldi	r17, 0x00	; 0
    177c:	ab 01       	movw	r20, r22
    177e:	bc 01       	movw	r22, r24
    1780:	85 ef       	ldi	r24, 0xF5	; 245
    1782:	92 e0       	ldi	r25, 0x02	; 2
    1784:	0e 94 21 0a 	call	0x1442	; 0x1442 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:96
}
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	08 95       	ret

00001792 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int) [clone .constprop.29]>:
_ZN11LCDWIKI_GUI15Draw_Fast_VLineEiii.constprop.29():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:87
	}
	Fill_Rect(x1, y1, w, h, draw_color);
}

//draw a vertical line 
void LCDWIKI_GUI::Draw_Fast_VLine(int16_t x, int16_t y, int16_t h)
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:89
{
	Fill_Rect(x, y, 1, h, draw_color);
    179a:	e0 90 ff 02 	lds	r14, 0x02FF	; 0x8002ff <display+0xa>
    179e:	f0 90 00 03 	lds	r15, 0x0300	; 0x800300 <display+0xb>
    17a2:	8a 01       	movw	r16, r20
    17a4:	21 e0       	ldi	r18, 0x01	; 1
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	ab 01       	movw	r20, r22
    17aa:	bc 01       	movw	r22, r24
    17ac:	85 ef       	ldi	r24, 0xF5	; 245
    17ae:	92 e0       	ldi	r25, 0x02	; 2
    17b0:	0e 94 21 0a 	call	0x1442	; 0x1442 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:90
}
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	ff 90       	pop	r15
    17ba:	ef 90       	pop	r14
    17bc:	08 95       	ret

000017be <highlight_field(table*, unsigned int, unsigned int)>:
_Z15highlight_fieldP5tablejj():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:82
  rgb_color color = table->field_colors[row * table->columns + column];

  display.Fill_Rect(entry_position.x+1, entry_position.y+1, rect_width, rect_height, display.Color_To_565(color.r, color.g, color.b));
}

void highlight_field(table *table, uint16_t column, uint16_t row) {
    17be:	8f 92       	push	r8
    17c0:	9f 92       	push	r9
    17c2:	af 92       	push	r10
    17c4:	bf 92       	push	r11
    17c6:	cf 92       	push	r12
    17c8:	df 92       	push	r13
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	8c 01       	movw	r16, r24
    17d8:	eb 01       	movw	r28, r22
    17da:	5a 01       	movw	r10, r20
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:83
  position entry_position = get_table_entry_position(table, column, row);
    17dc:	0e 94 2a 07 	call	0xe54	; 0xe54 <get_table_entry_position(table*, unsigned int, unsigned int)>
    17e0:	6b 01       	movw	r12, r22
    17e2:	7c 01       	movw	r14, r24
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:84
  position next_entry_position = get_table_entry_position(table, column + 1, row + 1);
    17e4:	a5 01       	movw	r20, r10
    17e6:	4f 5f       	subi	r20, 0xFF	; 255
    17e8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ea:	be 01       	movw	r22, r28
    17ec:	6f 5f       	subi	r22, 0xFF	; 255
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	c8 01       	movw	r24, r16
    17f2:	0e 94 2a 07 	call	0xe54	; 0xe54 <get_table_entry_position(table*, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:86

  display.Draw_Rectangle(entry_position.x+1, entry_position.y+1, next_entry_position.x-1, next_entry_position.y-1);
    17f6:	5c 01       	movw	r10, r24
    17f8:	21 e0       	ldi	r18, 0x01	; 1
    17fa:	a2 1a       	sub	r10, r18
    17fc:	b1 08       	sbc	r11, r1
    17fe:	eb 01       	movw	r28, r22
    1800:	21 97       	sbiw	r28, 0x01	; 1
    1802:	87 01       	movw	r16, r14
    1804:	0f 5f       	subi	r16, 0xFF	; 255
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	4f ef       	ldi	r20, 0xFF	; 255
    180a:	c4 1a       	sub	r12, r20
    180c:	d4 0a       	sbc	r13, r20
Draw_Rectangle():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:164
}

//draw a rectangle
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
    180e:	9e 01       	movw	r18, r28
    1810:	2c 19       	sub	r18, r12
    1812:	3d 09       	sbc	r19, r13
    1814:	49 01       	movw	r8, r18
    1816:	8f ef       	ldi	r24, 0xFF	; 255
    1818:	88 1a       	sub	r8, r24
    181a:	98 0a       	sbc	r9, r24
    181c:	c5 01       	movw	r24, r10
    181e:	80 1b       	sub	r24, r16
    1820:	91 0b       	sbc	r25, r17
    1822:	7c 01       	movw	r14, r24
    1824:	4f ef       	ldi	r20, 0xFF	; 255
    1826:	e4 1a       	sub	r14, r20
    1828:	f4 0a       	sbc	r15, r20
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:165
	if (w < 0) 
    182a:	97 fe       	sbrs	r9, 7
    182c:	04 c0       	rjmp	.+8      	; 0x1836 <highlight_field(table*, unsigned int, unsigned int)+0x78>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:168
	{ 
		x1 = x2; 
		w = -w; 
    182e:	49 01       	movw	r8, r18
    1830:	80 94       	com	r8
    1832:	90 94       	com	r9
_Z15highlight_fieldP5tablejj():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:167
void LCDWIKI_GUI::Draw_Rectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{ 
	int16_t w = x2 - x1 + 1, h = y2 - y1 + 1;
	if (w < 0) 
	{ 
		x1 = x2; 
    1834:	6e 01       	movw	r12, r28
Draw_Rectangle():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:170
		w = -w; 
	}
	if (h < 0) 
    1836:	f7 fe       	sbrs	r15, 7
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <highlight_field(table*, unsigned int, unsigned int)+0x84>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:173
	{ 
		y1 = y2; 
		h = -h; 
    183a:	7c 01       	movw	r14, r24
    183c:	e0 94       	com	r14
    183e:	f0 94       	com	r15
_Z15highlight_fieldP5tablejj():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:172
		x1 = x2; 
		w = -w; 
	}
	if (h < 0) 
	{ 
		y1 = y2; 
    1840:	85 01       	movw	r16, r10
Draw_Rectangle():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:175
		h = -h; 
	}
	Draw_Fast_HLine(x1, y1, w);
    1842:	a4 01       	movw	r20, r8
    1844:	b8 01       	movw	r22, r16
    1846:	c6 01       	movw	r24, r12
    1848:	0e 94 b3 0b 	call	0x1766	; 0x1766 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.30]>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:176
  	Draw_Fast_HLine(x1, y2, w);
    184c:	a4 01       	movw	r20, r8
    184e:	b5 01       	movw	r22, r10
    1850:	c6 01       	movw	r24, r12
    1852:	0e 94 b3 0b 	call	0x1766	; 0x1766 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.30]>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:177
	Draw_Fast_VLine(x1, y1, h);
    1856:	a7 01       	movw	r20, r14
    1858:	b8 01       	movw	r22, r16
    185a:	c6 01       	movw	r24, r12
    185c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int) [clone .constprop.29]>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:178
	Draw_Fast_VLine(x2, y1, h);
    1860:	a7 01       	movw	r20, r14
    1862:	b8 01       	movw	r22, r16
    1864:	ce 01       	movw	r24, r28
_Z15highlight_fieldP5tablejj():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:87
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	cf 90       	pop	r12
    1876:	bf 90       	pop	r11
    1878:	af 90       	pop	r10
    187a:	9f 90       	pop	r9
    187c:	8f 90       	pop	r8
Draw_Rectangle():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:178
    187e:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int) [clone .constprop.29]>

00001882 <draw_table(table*)>:
_Z10draw_tableP5table():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:23
  free(my_table->hlines);
  free(my_table->field_colors);
  free(my_table);
}

void draw_table(table *table) {  
    1882:	8f 92       	push	r8
    1884:	9f 92       	push	r9
    1886:	af 92       	push	r10
    1888:	bf 92       	push	r11
    188a:	cf 92       	push	r12
    188c:	df 92       	push	r13
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	ec 01       	movw	r28, r24
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:24
  for(uint16_t i = 0; i < table->columns; i++) {
    189c:	f1 2c       	mov	r15, r1
    189e:	e1 2c       	mov	r14, r1
    18a0:	89 85       	ldd	r24, Y+9	; 0x09
    18a2:	8e 15       	cp	r24, r14
    18a4:	1f 04       	cpc	r1, r15
    18a6:	09 f0       	breq	.+2      	; 0x18aa <draw_table(table*)+0x28>
    18a8:	08 f4       	brcc	.+2      	; 0x18ac <draw_table(table*)+0x2a>
    18aa:	4f c0       	rjmp	.+158    	; 0x194a <draw_table(table*)+0xc8>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:25
    if((table->vlines)[i] < 0) {
    18ac:	0c 85       	ldd	r16, Y+12	; 0x0c
    18ae:	1d 85       	ldd	r17, Y+13	; 0x0d
    18b0:	c7 01       	movw	r24, r14
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	08 0f       	add	r16, r24
    18bc:	19 1f       	adc	r17, r25
    18be:	f8 01       	movw	r30, r16
    18c0:	80 80       	ld	r8, Z
    18c2:	91 80       	ldd	r9, Z+1	; 0x01
    18c4:	a2 80       	ldd	r10, Z+2	; 0x02
    18c6:	b3 80       	ldd	r11, Z+3	; 0x03
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	a9 01       	movw	r20, r18
    18ce:	c5 01       	movw	r24, r10
    18d0:	b4 01       	movw	r22, r8
    18d2:	0e 94 dd 30 	call	0x61ba	; 0x61ba <__cmpsf2>
    18d6:	87 fd       	sbrc	r24, 7
    18d8:	34 c0       	rjmp	.+104    	; 0x1942 <draw_table(table*)+0xc0>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:30
      //(table->vlines)[i] = 0;
      continue;      
    }

    if((table->vlines)[i] <= 1) {
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	c5 01       	movw	r24, r10
    18e4:	b4 01       	movw	r22, r8
    18e6:	0e 94 dd 30 	call	0x61ba	; 0x61ba <__cmpsf2>
    18ea:	18 16       	cp	r1, r24
    18ec:	7c f0       	brlt	.+30     	; 0x190c <draw_table(table*)+0x8a>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:31
      (table->vlines)[i] = (table->vlines)[i] * table->width;
    18ee:	6c 81       	ldd	r22, Y+4	; 0x04
    18f0:	7d 81       	ldd	r23, Y+5	; 0x05
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    18fa:	a5 01       	movw	r20, r10
    18fc:	94 01       	movw	r18, r8
    18fe:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulsf3>
    1902:	f8 01       	movw	r30, r16
    1904:	60 83       	st	Z, r22
    1906:	71 83       	std	Z+1, r23	; 0x01
    1908:	82 83       	std	Z+2, r24	; 0x02
    190a:	93 83       	std	Z+3, r25	; 0x03
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:34
    }

    display.Draw_Fast_VLine(table->pos.x + (table->vlines)[i], table->pos.y, table->height + 1);
    190c:	ce 80       	ldd	r12, Y+6	; 0x06
    190e:	df 80       	ldd	r13, Y+7	; 0x07
    1910:	ff ef       	ldi	r31, 0xFF	; 255
    1912:	cf 1a       	sub	r12, r31
    1914:	df 0a       	sbc	r13, r31
    1916:	aa 80       	ldd	r10, Y+2	; 0x02
    1918:	bb 80       	ldd	r11, Y+3	; 0x03
    191a:	68 81       	ld	r22, Y
    191c:	79 81       	ldd	r23, Y+1	; 0x01
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1926:	f8 01       	movw	r30, r16
    1928:	20 81       	ld	r18, Z
    192a:	31 81       	ldd	r19, Z+1	; 0x01
    192c:	42 81       	ldd	r20, Z+2	; 0x02
    192e:	53 81       	ldd	r21, Z+3	; 0x03
    1930:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__addsf3>
    1934:	0e 94 31 33 	call	0x6662	; 0x6662 <__fixsfsi>
    1938:	cb 01       	movw	r24, r22
    193a:	a6 01       	movw	r20, r12
    193c:	b5 01       	movw	r22, r10
    193e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int) [clone .constprop.29]>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:24
  free(my_table->field_colors);
  free(my_table);
}

void draw_table(table *table) {  
  for(uint16_t i = 0; i < table->columns; i++) {
    1942:	ff ef       	ldi	r31, 0xFF	; 255
    1944:	ef 1a       	sub	r14, r31
    1946:	ff 0a       	sbc	r15, r31
    1948:	ab cf       	rjmp	.-170    	; 0x18a0 <draw_table(table*)+0x1e>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:37
    }

    display.Draw_Fast_VLine(table->pos.x + (table->vlines)[i], table->pos.y, table->height + 1);
  }

  for(uint16_t i = 0; i < table->rows; i++) {
    194a:	f1 2c       	mov	r15, r1
    194c:	e1 2c       	mov	r14, r1
    194e:	88 85       	ldd	r24, Y+8	; 0x08
    1950:	8e 15       	cp	r24, r14
    1952:	1f 04       	cpc	r1, r15
    1954:	09 f0       	breq	.+2      	; 0x1958 <draw_table(table*)+0xd6>
    1956:	08 f4       	brcc	.+2      	; 0x195a <draw_table(table*)+0xd8>
    1958:	4d c0       	rjmp	.+154    	; 0x19f4 <draw_table(table*)+0x172>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:38
    if((table->hlines)[i] < 0) {
    195a:	0a 85       	ldd	r16, Y+10	; 0x0a
    195c:	1b 85       	ldd	r17, Y+11	; 0x0b
    195e:	c7 01       	movw	r24, r14
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	08 0f       	add	r16, r24
    196a:	19 1f       	adc	r17, r25
    196c:	f8 01       	movw	r30, r16
    196e:	80 80       	ld	r8, Z
    1970:	91 80       	ldd	r9, Z+1	; 0x01
    1972:	a2 80       	ldd	r10, Z+2	; 0x02
    1974:	b3 80       	ldd	r11, Z+3	; 0x03
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	a9 01       	movw	r20, r18
    197c:	c5 01       	movw	r24, r10
    197e:	b4 01       	movw	r22, r8
    1980:	0e 94 dd 30 	call	0x61ba	; 0x61ba <__cmpsf2>
    1984:	87 fd       	sbrc	r24, 7
    1986:	32 c0       	rjmp	.+100    	; 0x19ec <draw_table(table*)+0x16a>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:43
      //(table->hlines)[i] = 0;
      continue;
    }

    if((table->hlines)[i] <= 1) {
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	c5 01       	movw	r24, r10
    1992:	b4 01       	movw	r22, r8
    1994:	0e 94 dd 30 	call	0x61ba	; 0x61ba <__cmpsf2>
    1998:	18 16       	cp	r1, r24
    199a:	7c f0       	brlt	.+30     	; 0x19ba <draw_table(table*)+0x138>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:44
      (table->hlines)[i] = (table->hlines)[i] * table->height;
    199c:	6e 81       	ldd	r22, Y+6	; 0x06
    199e:	7f 81       	ldd	r23, Y+7	; 0x07
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    19a8:	a5 01       	movw	r20, r10
    19aa:	94 01       	movw	r18, r8
    19ac:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulsf3>
    19b0:	f8 01       	movw	r30, r16
    19b2:	60 83       	st	Z, r22
    19b4:	71 83       	std	Z+1, r23	; 0x01
    19b6:	82 83       	std	Z+2, r24	; 0x02
    19b8:	93 83       	std	Z+3, r25	; 0x03
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:47
    }

    display.Draw_Fast_HLine(table->pos.x, table->pos.y + (table->hlines)[i], table->width + 1);
    19ba:	cc 80       	ldd	r12, Y+4	; 0x04
    19bc:	dd 80       	ldd	r13, Y+5	; 0x05
    19be:	ff ef       	ldi	r31, 0xFF	; 255
    19c0:	cf 1a       	sub	r12, r31
    19c2:	df 0a       	sbc	r13, r31
    19c4:	6a 81       	ldd	r22, Y+2	; 0x02
    19c6:	7b 81       	ldd	r23, Y+3	; 0x03
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    19d0:	f8 01       	movw	r30, r16
    19d2:	20 81       	ld	r18, Z
    19d4:	31 81       	ldd	r19, Z+1	; 0x01
    19d6:	42 81       	ldd	r20, Z+2	; 0x02
    19d8:	53 81       	ldd	r21, Z+3	; 0x03
    19da:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__addsf3>
    19de:	0e 94 31 33 	call	0x6662	; 0x6662 <__fixsfsi>
    19e2:	a6 01       	movw	r20, r12
    19e4:	88 81       	ld	r24, Y
    19e6:	99 81       	ldd	r25, Y+1	; 0x01
    19e8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.30]>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:37
    }

    display.Draw_Fast_VLine(table->pos.x + (table->vlines)[i], table->pos.y, table->height + 1);
  }

  for(uint16_t i = 0; i < table->rows; i++) {
    19ec:	ff ef       	ldi	r31, 0xFF	; 255
    19ee:	ef 1a       	sub	r14, r31
    19f0:	ff 0a       	sbc	r15, r31
    19f2:	ad cf       	rjmp	.-166    	; 0x194e <draw_table(table*)+0xcc>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:49
      (table->hlines)[i] = (table->hlines)[i] * table->height;
    }

    display.Draw_Fast_HLine(table->pos.x, table->pos.y + (table->hlines)[i], table->width + 1);
  }
}
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	bf 90       	pop	r11
    1a06:	af 90       	pop	r10
    1a08:	9f 90       	pop	r9
    1a0a:	8f 90       	pop	r8
    1a0c:	08 95       	ret

00001a0e <change_field_color(table*, unsigned int, unsigned int, rgb_color)>:
_Z18change_field_colorP5tablejj9rgb_color():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:65
  display.Set_Text_Size((table->hlines[row + 1] - table->hlines[row]) / 8);
  position entry_position = get_table_entry_position(table, column, row);
  display.Print_String(text, entry_position.x+4, entry_position.y+4);
}

void change_field_color(table *table, uint16_t column, uint16_t row, rgb_color color) {
    1a0e:	4f 92       	push	r4
    1a10:	5f 92       	push	r5
    1a12:	6f 92       	push	r6
    1a14:	7f 92       	push	r7
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	5c 01       	movw	r10, r24
    1a2c:	7b 01       	movw	r14, r22
    1a2e:	6a 01       	movw	r12, r20
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:66
  table->field_colors[row * table->columns + column] = color;
    1a30:	fc 01       	movw	r30, r24
    1a32:	81 85       	ldd	r24, Z+9	; 0x09
    1a34:	84 9f       	mul	r24, r20
    1a36:	e0 01       	movw	r28, r0
    1a38:	85 9f       	mul	r24, r21
    1a3a:	d0 0d       	add	r29, r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	c6 0f       	add	r28, r22
    1a40:	d7 1f       	adc	r29, r23
    1a42:	ce 01       	movw	r24, r28
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	c8 0f       	add	r28, r24
    1a4a:	d9 1f       	adc	r29, r25
    1a4c:	86 85       	ldd	r24, Z+14	; 0x0e
    1a4e:	97 85       	ldd	r25, Z+15	; 0x0f
    1a50:	c8 0f       	add	r28, r24
    1a52:	d9 1f       	adc	r29, r25
    1a54:	08 83       	st	Y, r16
    1a56:	19 83       	std	Y+1, r17	; 0x01
    1a58:	2a 83       	std	Y+2, r18	; 0x02
erase_field():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:71
  erase_field(table, column, row);
}

void erase_field(table *table, uint16_t column, uint16_t row) {
  position entry_position = get_table_entry_position(table, column, row);
    1a5a:	c5 01       	movw	r24, r10
    1a5c:	0e 94 2a 07 	call	0xe54	; 0xe54 <get_table_entry_position(table*, unsigned int, unsigned int)>
    1a60:	2b 01       	movw	r4, r22
    1a62:	3c 01       	movw	r6, r24
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:72
  position next_entry_position = get_table_entry_position(table, column + 1, row + 1);
    1a64:	a6 01       	movw	r20, r12
    1a66:	4f 5f       	subi	r20, 0xFF	; 255
    1a68:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6a:	b7 01       	movw	r22, r14
    1a6c:	6f 5f       	subi	r22, 0xFF	; 255
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	c5 01       	movw	r24, r10
    1a72:	0e 94 2a 07 	call	0xe54	; 0xe54 <get_table_entry_position(table*, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:74
  
  uint16_t rect_width = next_entry_position.x - entry_position.x - 1;
    1a76:	6b 01       	movw	r12, r22
    1a78:	f1 e0       	ldi	r31, 0x01	; 1
    1a7a:	cf 1a       	sub	r12, r31
    1a7c:	d1 08       	sbc	r13, r1
    1a7e:	c4 18       	sub	r12, r4
    1a80:	d5 08       	sbc	r13, r5
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:75
  uint16_t rect_height = next_entry_position.y - entry_position.y - 1;
    1a82:	8c 01       	movw	r16, r24
    1a84:	01 50       	subi	r16, 0x01	; 1
    1a86:	11 09       	sbc	r17, r1
    1a88:	06 19       	sub	r16, r6
    1a8a:	17 09       	sbc	r17, r7
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:79

  rgb_color color = table->field_colors[row * table->columns + column];

  display.Fill_Rect(entry_position.x+1, entry_position.y+1, rect_width, rect_height, display.Color_To_565(color.r, color.g, color.b));
    1a8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a8e:	49 81       	ldd	r20, Y+1	; 0x01
    1a90:	68 81       	ld	r22, Y
    1a92:	85 ef       	ldi	r24, 0xF5	; 245
    1a94:	92 e0       	ldi	r25, 0x02	; 2
    1a96:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LCDWIKI_SPI::Color_To_565(unsigned char, unsigned char, unsigned char)>
    1a9a:	a3 01       	movw	r20, r6
    1a9c:	4f 5f       	subi	r20, 0xFF	; 255
    1a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa0:	b2 01       	movw	r22, r4
    1aa2:	6f 5f       	subi	r22, 0xFF	; 255
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	7c 01       	movw	r14, r24
    1aa8:	96 01       	movw	r18, r12
    1aaa:	85 ef       	ldi	r24, 0xF5	; 245
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	0e 94 21 0a 	call	0x1442	; 0x1442 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)>
_Z18change_field_colorP5tablejj9rgb_color():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:68
}

void change_field_color(table *table, uint16_t column, uint16_t row, rgb_color color) {
  table->field_colors[row * table->columns + column] = color;
  erase_field(table, column, row);
}
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	df 90       	pop	r13
    1ac0:	cf 90       	pop	r12
    1ac2:	bf 90       	pop	r11
    1ac4:	af 90       	pop	r10
    1ac6:	7f 90       	pop	r7
    1ac8:	6f 90       	pop	r6
    1aca:	5f 90       	pop	r5
    1acc:	4f 90       	pop	r4
    1ace:	08 95       	ret

00001ad0 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_SPI9Draw_PixeEiij():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:922
	}
}

//set x,y  coordinate and color to draw a pixel point 
void LCDWIKI_SPI::Draw_Pixe(int16_t x, int16_t y, uint16_t color)
{
    1ad0:	af 92       	push	r10
    1ad2:	bf 92       	push	r11
    1ad4:	cf 92       	push	r12
    1ad6:	df 92       	push	r13
    1ad8:	ef 92       	push	r14
    1ada:	ff 92       	push	r15
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:923
	if((x < 0) || (y < 0) || (x > Get_Width()) || (y > Get_Height()))
    1ae4:	77 fd       	sbrc	r23, 7
    1ae6:	76 c0       	rjmp	.+236    	; 0x1bd4 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x104>
    1ae8:	57 fd       	sbrc	r21, 7
    1aea:	74 c0       	rjmp	.+232    	; 0x1bd4 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x104>
    1aec:	79 01       	movw	r14, r18
    1aee:	5a 01       	movw	r10, r20
    1af0:	6b 01       	movw	r12, r22
    1af2:	ec 01       	movw	r28, r24
    1af4:	e8 81       	ld	r30, Y
    1af6:	f9 81       	ldd	r31, Y+1	; 0x01
    1af8:	06 84       	ldd	r0, Z+14	; 0x0e
    1afa:	f7 85       	ldd	r31, Z+15	; 0x0f
    1afc:	e0 2d       	mov	r30, r0
    1afe:	09 95       	icall
    1b00:	8c 15       	cp	r24, r12
    1b02:	9d 05       	cpc	r25, r13
    1b04:	0c f4       	brge	.+2      	; 0x1b08 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x38>
    1b06:	66 c0       	rjmp	.+204    	; 0x1bd4 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x104>
    1b08:	e8 81       	ld	r30, Y
    1b0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b0c:	04 84       	ldd	r0, Z+12	; 0x0c
    1b0e:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b10:	e0 2d       	mov	r30, r0
    1b12:	ce 01       	movw	r24, r28
    1b14:	09 95       	icall
    1b16:	8a 15       	cp	r24, r10
    1b18:	9b 05       	cpc	r25, r11
    1b1a:	0c f4       	brge	.+2      	; 0x1b1e <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x4e>
    1b1c:	5b c0       	rjmp	.+182    	; 0x1bd4 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x104>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:927
	{
		return;
	}
	Set_Addr_Window(x, y, x, y);
    1b1e:	e8 81       	ld	r30, Y
    1b20:	f9 81       	ldd	r31, Y+1	; 0x01
    1b22:	06 80       	ldd	r0, Z+6	; 0x06
    1b24:	f7 81       	ldd	r31, Z+7	; 0x07
    1b26:	e0 2d       	mov	r30, r0
    1b28:	85 01       	movw	r16, r10
    1b2a:	96 01       	movw	r18, r12
    1b2c:	a5 01       	movw	r20, r10
    1b2e:	b6 01       	movw	r22, r12
    1b30:	ce 01       	movw	r24, r28
    1b32:	09 95       	icall
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:928
	CS_ACTIVE;
    1b34:	eb a9       	ldd	r30, Y+51	; 0x33
    1b36:	fc a9       	ldd	r31, Y+52	; 0x34
    1b38:	80 81       	ld	r24, Z
    1b3a:	de 01       	movw	r26, r28
    1b3c:	ae 5b       	subi	r26, 0xBE	; 190
    1b3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b40:	9c 91       	ld	r25, X
    1b42:	89 23       	and	r24, r25
    1b44:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:929
	if(lcd_driver == ID_1283A)
    1b46:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b48:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b4a:	87 30       	cpi	r24, 0x07	; 7
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	61 f4       	brne	.+24     	; 0x1b68 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x98>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:953
			writeCmd8(CC);
			writeData18(color);
		}
		else
		{
			writeCmdData16(CC, color);
    1b50:	ed a9       	ldd	r30, Y+53	; 0x35
    1b52:	fe a9       	ldd	r31, Y+54	; 0x36
    1b54:	80 81       	ld	r24, Z
    1b56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b58:	89 2b       	or	r24, r25
    1b5a:	80 83       	st	Z, r24
    1b5c:	6f 2d       	mov	r22, r15
    1b5e:	ce 01       	movw	r24, r28
    1b60:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    1b64:	6e 2d       	mov	r22, r14
    1b66:	2d c0       	rjmp	.+90     	; 0x1bc2 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xf2>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:933
	CS_ACTIVE;
	if(lcd_driver == ID_1283A)
	{
		writeData16(color);
	}
	else if(lcd_driver == ID_1106)
    1b68:	08 97       	sbiw	r24, 0x08	; 8
    1b6a:	71 f1       	breq	.+92     	; 0x1bc8 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xf8>
    1b6c:	ed a9       	ldd	r30, Y+53	; 0x35
    1b6e:	fe a9       	ldd	r31, Y+54	; 0x36
    1b70:	de 01       	movw	r26, r28
    1b72:	ad 5b       	subi	r26, 0xBD	; 189
    1b74:	bf 4f       	sbci	r27, 0xFF	; 255
    1b76:	9c 91       	ld	r25, X
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:946
			//SH1106_buffer[(y/8)*WIDTH+x]&= ~((1<<(y%8))&0xff);
		}
	}
	else
	{
		if(MODEL == ILI9488_18)
    1b78:	29 a9       	ldd	r18, Y+49	; 0x31
    1b7a:	3a a9       	ldd	r19, Y+50	; 0x32
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:948
		{
			writeCmd8(CC);
    1b7c:	80 81       	ld	r24, Z
    1b7e:	89 23       	and	r24, r25
    1b80:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:946
			//SH1106_buffer[(y/8)*WIDTH+x]&= ~((1<<(y%8))&0xff);
		}
	}
	else
	{
		if(MODEL == ILI9488_18)
    1b82:	2c 30       	cpi	r18, 0x0C	; 12
    1b84:	31 05       	cpc	r19, r1
    1b86:	89 f5       	brne	.+98     	; 0x1bea <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x11a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:948
		{
			writeCmd8(CC);
    1b88:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:949
			writeData18(color);
    1b90:	ed a9       	ldd	r30, Y+53	; 0x35
    1b92:	fe a9       	ldd	r31, Y+54	; 0x36
    1b94:	80 81       	ld	r24, Z
    1b96:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b98:	89 2b       	or	r24, r25
    1b9a:	80 83       	st	Z, r24
    1b9c:	6f 2d       	mov	r22, r15
    1b9e:	68 7f       	andi	r22, 0xF8	; 248
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    1ba6:	b7 01       	movw	r22, r14
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	76 95       	lsr	r23
    1bac:	67 95       	ror	r22
    1bae:	8a 95       	dec	r24
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xda>
    1bb2:	6c 7f       	andi	r22, 0xFC	; 252
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    1bba:	6e 2d       	mov	r22, r14
    1bbc:	66 0f       	add	r22, r22
    1bbe:	66 0f       	add	r22, r22
    1bc0:	66 0f       	add	r22, r22
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:953
		}
		else
		{
			writeCmdData16(CC, color);
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:956
		}
	}
	CS_IDLE;
    1bc8:	eb a9       	ldd	r30, Y+51	; 0x33
    1bca:	fc a9       	ldd	r31, Y+52	; 0x34
    1bcc:	80 81       	ld	r24, Z
    1bce:	9d ad       	ldd	r25, Y+61	; 0x3d
    1bd0:	89 2b       	or	r24, r25
    1bd2:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:957
}
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	df 90       	pop	r13
    1be2:	cf 90       	pop	r12
    1be4:	bf 90       	pop	r11
    1be6:	af 90       	pop	r10
    1be8:	08 95       	ret
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:953
			writeCmd8(CC);
			writeData18(color);
		}
		else
		{
			writeCmdData16(CC, color);
    1bea:	6c a1       	ldd	r22, Y+36	; 0x24
    1bec:	ce 01       	movw	r24, r28
    1bee:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    1bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    1bfa:	aa cf       	rjmp	.-172    	; 0x1b50 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x80>

00001bfc <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]>:
_ZN11LCDWIKI_GUI9Draw_LineEiiii.constprop.27():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:112
	uint16_t color = Color_To_565(r, g, b);
	Fill_Rect(0, 0, Get_Width(), Get_Height(), color);
}

//draw an arbitrary line from (x1,y1) to (x2,y2)
void LCDWIKI_GUI::Draw_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
    1bfc:	2f 92       	push	r2
    1bfe:	3f 92       	push	r3
    1c00:	4f 92       	push	r4
    1c02:	5f 92       	push	r5
    1c04:	6f 92       	push	r6
    1c06:	7f 92       	push	r7
    1c08:	8f 92       	push	r8
    1c0a:	9f 92       	push	r9
    1c0c:	af 92       	push	r10
    1c0e:	bf 92       	push	r11
    1c10:	cf 92       	push	r12
    1c12:	df 92       	push	r13
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	7b 01       	movw	r14, r22
    1c22:	8a 01       	movw	r16, r20
    1c24:	e9 01       	movw	r28, r18
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:114
{
	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
    1c26:	59 01       	movw	r10, r18
    1c28:	a6 1a       	sub	r10, r22
    1c2a:	b7 0a       	sbc	r11, r23
    1c2c:	b7 fe       	sbrs	r11, 7
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0x3a>
    1c30:	b1 94       	neg	r11
    1c32:	a1 94       	neg	r10
    1c34:	b1 08       	sbc	r11, r1
    1c36:	48 01       	movw	r8, r16
    1c38:	88 1a       	sub	r8, r24
    1c3a:	99 0a       	sbc	r9, r25
    1c3c:	97 fe       	sbrs	r9, 7
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0x4a>
    1c40:	91 94       	neg	r9
    1c42:	81 94       	neg	r8
    1c44:	91 08       	sbc	r9, r1
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:115
  	if (steep) 
    1c46:	8a 14       	cp	r8, r10
    1c48:	9b 04       	cpc	r9, r11
    1c4a:	54 f0       	brlt	.+20     	; 0x1c60 <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0x64>
    1c4c:	3c 2f       	mov	r19, r28
    1c4e:	2d 2f       	mov	r18, r29
    1c50:	e8 01       	movw	r28, r16
    1c52:	03 2f       	mov	r16, r19
    1c54:	12 2f       	mov	r17, r18
    1c56:	3e 2d       	mov	r19, r14
    1c58:	2f 2d       	mov	r18, r15
    1c5a:	7c 01       	movw	r14, r24
    1c5c:	83 2f       	mov	r24, r19
    1c5e:	92 2f       	mov	r25, r18
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:120
	{
    	swap(x1, y1);
    	swap(x2, y2);
	}
	if (x1 > x2) 
    1c60:	ce 15       	cp	r28, r14
    1c62:	df 05       	cpc	r29, r15
    1c64:	54 f0       	brlt	.+20     	; 0x1c7a <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0x7e>
    1c66:	30 2f       	mov	r19, r16
    1c68:	21 2f       	mov	r18, r17
    1c6a:	8c 01       	movw	r16, r24
    1c6c:	83 2f       	mov	r24, r19
    1c6e:	92 2f       	mov	r25, r18
    1c70:	3c 2f       	mov	r19, r28
    1c72:	2d 2f       	mov	r18, r29
    1c74:	e7 01       	movw	r28, r14
    1c76:	e3 2e       	mov	r14, r19
    1c78:	f2 2e       	mov	r15, r18
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:127
    	swap(x1, x2);
    	swap(y1, y2);
  	}
	
  	int16_t dx, dy;
  	dx = x2 - x1;
    1c7a:	27 01       	movw	r4, r14
    1c7c:	4c 1a       	sub	r4, r28
    1c7e:	5d 0a       	sbc	r5, r29
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:128
  	dy = abs(y2 - y1);
    1c80:	3c 01       	movw	r6, r24
    1c82:	60 1a       	sub	r6, r16
    1c84:	71 0a       	sbc	r7, r17
    1c86:	77 fe       	sbrs	r7, 7
    1c88:	03 c0       	rjmp	.+6      	; 0x1c90 <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0x94>
    1c8a:	71 94       	neg	r7
    1c8c:	61 94       	neg	r6
    1c8e:	71 08       	sbc	r7, r1
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:130

	int16_t err = dx / 2;
    1c90:	62 01       	movw	r12, r4
    1c92:	57 fe       	sbrs	r5, 7
    1c94:	03 c0       	rjmp	.+6      	; 0x1c9c <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0xa0>
    1c96:	2f ef       	ldi	r18, 0xFF	; 255
    1c98:	c2 1a       	sub	r12, r18
    1c9a:	d2 0a       	sbc	r13, r18
    1c9c:	d5 94       	asr	r13
    1c9e:	c7 94       	ror	r12
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:133
	int16_t ystep;

	if (y1 < y2) 
    1ca0:	08 17       	cp	r16, r24
    1ca2:	19 07       	cpc	r17, r25
    1ca4:	fc f4       	brge	.+62     	; 0x1ce4 <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0xe8>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:135
	{
    	ystep = 1;
    1ca6:	22 24       	eor	r2, r2
    1ca8:	23 94       	inc	r2
    1caa:	31 2c       	mov	r3, r1
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:142
	else 
	{
    	ystep = -1;
	}

	for (; x1<=x2; x1++) 
    1cac:	ec 16       	cp	r14, r28
    1cae:	fd 06       	cpc	r15, r29
    1cb0:	ec f0       	brlt	.+58     	; 0x1cec <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0xf0>
    1cb2:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <display+0xa>
    1cb6:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <display+0xb>
Draw_Pixel():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:58
}

//draw a pixel point
void LCDWIKI_GUI::Draw_Pixel(int16_t x, int16_t y)
{
	Draw_Pixe(x, y, draw_color);
    1cba:	ae 01       	movw	r20, r28
    1cbc:	b8 01       	movw	r22, r16
_ZN11LCDWIKI_GUI9Draw_LineEiiii.constprop.27():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:144
    	ystep = -1;
	}

	for (; x1<=x2; x1++) 
	{
    	if (steep) 
    1cbe:	8a 14       	cp	r8, r10
    1cc0:	9b 04       	cpc	r9, r11
    1cc2:	14 f0       	brlt	.+4      	; 0x1cc8 <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0xcc>
Draw_Pixel():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:58
}

//draw a pixel point
void LCDWIKI_GUI::Draw_Pixel(int16_t x, int16_t y)
{
	Draw_Pixe(x, y, draw_color);
    1cc4:	a8 01       	movw	r20, r16
    1cc6:	be 01       	movw	r22, r28
    1cc8:	85 ef       	ldi	r24, 0xF5	; 245
    1cca:	92 e0       	ldi	r25, 0x02	; 2
    1ccc:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)>
_ZN11LCDWIKI_GUI9Draw_LineEiiii.constprop.27():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:152
    	} 
		else 
		{
      		Draw_Pixel(x1, y1);
    	}
    	err -= dy;
    1cd0:	c6 18       	sub	r12, r6
    1cd2:	d7 08       	sbc	r13, r7
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:153
    	if (err < 0) 
    1cd4:	d7 fe       	sbrs	r13, 7
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0xe4>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:155
		{
			y1 += ystep;
    1cd8:	02 0d       	add	r16, r2
    1cda:	13 1d       	adc	r17, r3
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:156
			err += dx;
    1cdc:	c4 0c       	add	r12, r4
    1cde:	d5 1c       	adc	r13, r5
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:142
	else 
	{
    	ystep = -1;
	}

	for (; x1<=x2; x1++) 
    1ce0:	21 96       	adiw	r28, 0x01	; 1
    1ce2:	e4 cf       	rjmp	.-56     	; 0x1cac <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0xb0>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:139
	{
    	ystep = 1;
  	} 
	else 
	{
    	ystep = -1;
    1ce4:	22 24       	eor	r2, r2
    1ce6:	2a 94       	dec	r2
    1ce8:	32 2c       	mov	r3, r2
    1cea:	e0 cf       	rjmp	.-64     	; 0x1cac <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]+0xb0>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:159
		{
			y1 += ystep;
			err += dx;
    	}
  	}
}
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	ff 90       	pop	r15
    1cf6:	ef 90       	pop	r14
    1cf8:	df 90       	pop	r13
    1cfa:	cf 90       	pop	r12
    1cfc:	bf 90       	pop	r11
    1cfe:	af 90       	pop	r10
    1d00:	9f 90       	pop	r9
    1d02:	8f 90       	pop	r8
    1d04:	7f 90       	pop	r7
    1d06:	6f 90       	pop	r6
    1d08:	5f 90       	pop	r5
    1d0a:	4f 90       	pop	r4
    1d0c:	3f 90       	pop	r3
    1d0e:	2f 90       	pop	r2
    1d10:	08 95       	ret

00001d12 <add_line(graph*, float, float, float, float)>:
_Z8add_lineP5graphffff():
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:75

  display.Draw_Fast_VLine(mark_pos.x, mark_pos.y - 2, 5);
  display.Print_Number_Int(x, mark_pos.x - text_offset, mark_pos.y + 2, 1, ' ', 10);
}

void add_line(graph *graph, float x1, float y1, float x2, float y2) {
    1d12:	2f 92       	push	r2
    1d14:	3f 92       	push	r3
    1d16:	4f 92       	push	r4
    1d18:	5f 92       	push	r5
    1d1a:	6f 92       	push	r6
    1d1c:	7f 92       	push	r7
    1d1e:	8f 92       	push	r8
    1d20:	9f 92       	push	r9
    1d22:	af 92       	push	r10
    1d24:	bf 92       	push	r11
    1d26:	cf 92       	push	r12
    1d28:	df 92       	push	r13
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <add_line(graph*, float, float, float, float)+0x26>
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <add_line(graph*, float, float, float, float)+0x28>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	1c 01       	movw	r2, r24
    1d40:	2a 01       	movw	r4, r20
    1d42:	3b 01       	movw	r6, r22
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:76
  position point_1 = point_to_position(graph, x1, y1);
    1d44:	c9 01       	movw	r24, r18
    1d46:	b8 01       	movw	r22, r16
    1d48:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
    1d4c:	69 83       	std	Y+1, r22	; 0x01
    1d4e:	7a 83       	std	Y+2, r23	; 0x02
    1d50:	8b 83       	std	Y+3, r24	; 0x03
    1d52:	9c 83       	std	Y+4, r25	; 0x04
    1d54:	c3 01       	movw	r24, r6
    1d56:	b2 01       	movw	r22, r4
    1d58:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
    1d5c:	49 81       	ldd	r20, Y+1	; 0x01
    1d5e:	5a 81       	ldd	r21, Y+2	; 0x02
    1d60:	c1 01       	movw	r24, r2
    1d62:	0e 94 ca 07 	call	0xf94	; 0xf94 <point_to_position(graph*, unsigned int, unsigned int)>
    1d66:	2b 01       	movw	r4, r22
    1d68:	3c 01       	movw	r6, r24
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:77
  position point_2 = point_to_position(graph, x2, y2);
    1d6a:	c5 01       	movw	r24, r10
    1d6c:	b4 01       	movw	r22, r8
    1d6e:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
    1d72:	4b 01       	movw	r8, r22
    1d74:	c7 01       	movw	r24, r14
    1d76:	b6 01       	movw	r22, r12
    1d78:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
    1d7c:	a4 01       	movw	r20, r8
    1d7e:	c1 01       	movw	r24, r2
    1d80:	0e 94 ca 07 	call	0xf94	; 0xf94 <point_to_position(graph*, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:79

  display.Draw_Line(point_1.x, point_1.y, point_2.x, point_2.y);
    1d84:	9c 01       	movw	r18, r24
    1d86:	ab 01       	movw	r20, r22
    1d88:	b3 01       	movw	r22, r6
    1d8a:	c2 01       	movw	r24, r4
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:80
}
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	ef 90       	pop	r14
    1da0:	df 90       	pop	r13
    1da2:	cf 90       	pop	r12
    1da4:	bf 90       	pop	r11
    1da6:	af 90       	pop	r10
    1da8:	9f 90       	pop	r9
    1daa:	8f 90       	pop	r8
    1dac:	7f 90       	pop	r7
    1dae:	6f 90       	pop	r6
    1db0:	5f 90       	pop	r5
    1db2:	4f 90       	pop	r4
    1db4:	3f 90       	pop	r3
    1db6:	2f 90       	pop	r2
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:79

void add_line(graph *graph, float x1, float y1, float x2, float y2) {
  position point_1 = point_to_position(graph, x1, y1);
  position point_2 = point_to_position(graph, x2, y2);

  display.Draw_Line(point_1.x, point_1.y, point_2.x, point_2.y);
    1db8:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]>

00001dbc <add_point(graph*, list<setpoint>*, unsigned char)>:
_Z9add_pointP5graphP4listI8setpointEh():
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:66

  display.Set_Draw_color(0, 0, 0);
  if(!last) add_line(temperature_graph, time_str_to_min(prev_setpoint->data.time), prev_setpoint->data.temp, time_str_to_min(next_setpoint->data.time), next_setpoint->data.temp);
}

void add_point(graph *temperature_graph, struct list<setpoint> *setpoint_list, uint8_t add_id) {
    1dbc:	2f 92       	push	r2
    1dbe:	3f 92       	push	r3
    1dc0:	4f 92       	push	r4
    1dc2:	5f 92       	push	r5
    1dc4:	6f 92       	push	r6
    1dc6:	7f 92       	push	r7
    1dc8:	8f 92       	push	r8
    1dca:	9f 92       	push	r9
    1dcc:	af 92       	push	r10
    1dce:	bf 92       	push	r11
    1dd0:	cf 92       	push	r12
    1dd2:	df 92       	push	r13
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	2a 97       	sbiw	r28, 0x0a	; 10
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	9c 83       	std	Y+4, r25	; 0x04
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	cb 01       	movw	r24, r22
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:67
  list<setpoint> *prev_setpoint = get_index(setpoint_list, add_id - 1);
    1df6:	24 2f       	mov	r18, r20
    1df8:	21 50       	subi	r18, 0x01	; 1
    1dfa:	33 0b       	sbc	r19, r19
    1dfc:	b9 01       	movw	r22, r18
    1dfe:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    1e02:	1c 01       	movw	r2, r24
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:68
  list<setpoint> *new_setpoint = prev_setpoint->next;
    1e04:	fc 01       	movw	r30, r24
    1e06:	00 84       	ldd	r0, Z+8	; 0x08
    1e08:	f1 85       	ldd	r31, Z+9	; 0x09
    1e0a:	e0 2d       	mov	r30, r0
    1e0c:	fa 87       	std	Y+10, r31	; 0x0a
    1e0e:	e9 87       	std	Y+9, r30	; 0x09
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:69
  list<setpoint> *next_setpoint = new_setpoint->next;
    1e10:	20 85       	ldd	r18, Z+8	; 0x08
    1e12:	31 85       	ldd	r19, Z+9	; 0x09
    1e14:	3a 83       	std	Y+2, r19	; 0x02
    1e16:	29 83       	std	Y+1, r18	; 0x01
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:70
  uint8_t last = !next_setpoint->next;
    1e18:	f9 01       	movw	r30, r18
    1e1a:	00 84       	ldd	r0, Z+8	; 0x08
    1e1c:	f1 85       	ldd	r31, Z+9	; 0x09
    1e1e:	e0 2d       	mov	r30, r0
    1e20:	fe 83       	std	Y+6, r31	; 0x06
    1e22:	ed 83       	std	Y+5, r30	; 0x05
Set_Draw_color():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    1e24:	8f ef       	ldi	r24, 0xFF	; 255
    1e26:	9f ef       	ldi	r25, 0xFF	; 255
    1e28:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <display+0xb>
    1e2c:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <display+0xa>
_Z9add_pointP5graphP4listI8setpointEh():
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:73

  display.Set_Draw_color(BACKGROUND_COLOR);
  if(!last) add_line(temperature_graph, time_str_to_min(prev_setpoint->data.time), prev_setpoint->data.temp, time_str_to_min(next_setpoint->data.time), next_setpoint->data.temp);
    1e30:	ef 2b       	or	r30, r31
    1e32:	79 f1       	breq	.+94     	; 0x1e92 <add_point(graph*, list<setpoint>*, unsigned char)+0xd6>
    1e34:	c9 01       	movw	r24, r18
    1e36:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    1e3a:	7c 01       	movw	r14, r24
    1e3c:	c1 01       	movw	r24, r2
    1e3e:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    1e42:	8c 01       	movw	r16, r24
    1e44:	e9 81       	ldd	r30, Y+1	; 0x01
    1e46:	fa 81       	ldd	r31, Y+2	; 0x02
    1e48:	66 81       	ldd	r22, Z+6	; 0x06
    1e4a:	77 81       	ldd	r23, Z+7	; 0x07
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1e54:	4b 01       	movw	r8, r22
    1e56:	5c 01       	movw	r10, r24
    1e58:	b7 01       	movw	r22, r14
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1e62:	6b 01       	movw	r12, r22
    1e64:	7c 01       	movw	r14, r24
    1e66:	f1 01       	movw	r30, r2
    1e68:	66 81       	ldd	r22, Z+6	; 0x06
    1e6a:	77 81       	ldd	r23, Z+7	; 0x07
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1e74:	2b 01       	movw	r4, r22
    1e76:	3c 01       	movw	r6, r24
    1e78:	b8 01       	movw	r22, r16
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1e82:	ab 01       	movw	r20, r22
    1e84:	bc 01       	movw	r22, r24
    1e86:	93 01       	movw	r18, r6
    1e88:	82 01       	movw	r16, r4
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <add_line(graph*, float, float, float, float)>
Set_Draw_color():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:46
}

//set 8bits r,g,b color
void LCDWIKI_GUI::Set_Draw_color(uint8_t r, uint8_t g, uint8_t b)
{
	draw_color = Color_To_565(r, g, b);
    1e92:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <display+0xb>
    1e96:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <display+0xa>
_Z9add_pointP5graphP4listI8setpointEh():
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:76

  display.Set_Draw_color(0, 0, 0);
  add_line(temperature_graph, time_str_to_min(prev_setpoint->data.time), prev_setpoint->data.temp, time_str_to_min(new_setpoint->data.time), new_setpoint->data.temp);
    1e9a:	89 85       	ldd	r24, Y+9	; 0x09
    1e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9e:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    1ea2:	8c 01       	movw	r16, r24
    1ea4:	c1 01       	movw	r24, r2
    1ea6:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    1eaa:	98 87       	std	Y+8, r25	; 0x08
    1eac:	8f 83       	std	Y+7, r24	; 0x07
    1eae:	e9 85       	ldd	r30, Y+9	; 0x09
    1eb0:	fa 85       	ldd	r31, Y+10	; 0x0a
    1eb2:	66 81       	ldd	r22, Z+6	; 0x06
    1eb4:	77 81       	ldd	r23, Z+7	; 0x07
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1ebe:	4b 01       	movw	r8, r22
    1ec0:	5c 01       	movw	r10, r24
    1ec2:	b8 01       	movw	r22, r16
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1ecc:	6b 01       	movw	r12, r22
    1ece:	7c 01       	movw	r14, r24
    1ed0:	f1 01       	movw	r30, r2
    1ed2:	66 81       	ldd	r22, Z+6	; 0x06
    1ed4:	77 81       	ldd	r23, Z+7	; 0x07
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1ede:	2b 01       	movw	r4, r22
    1ee0:	3c 01       	movw	r6, r24
    1ee2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ee4:	38 85       	ldd	r19, Y+8	; 0x08
    1ee6:	b9 01       	movw	r22, r18
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1ef0:	ab 01       	movw	r20, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	93 01       	movw	r18, r6
    1ef6:	82 01       	movw	r16, r4
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <add_line(graph*, float, float, float, float)>
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:77
  if(!last) add_line(temperature_graph, time_str_to_min(new_setpoint->data.time), new_setpoint->data.temp, time_str_to_min(next_setpoint->data.time), next_setpoint->data.temp);
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	9e 81       	ldd	r25, Y+6	; 0x06
    1f04:	89 2b       	or	r24, r25
    1f06:	91 f1       	breq	.+100    	; 0x1f6c <add_point(graph*, list<setpoint>*, unsigned char)+0x1b0>
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0c:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    1f10:	8c 01       	movw	r16, r24
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    1f1a:	1c 01       	movw	r2, r24
    1f1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f20:	66 81       	ldd	r22, Z+6	; 0x06
    1f22:	77 81       	ldd	r23, Z+7	; 0x07
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1f2c:	4b 01       	movw	r8, r22
    1f2e:	5c 01       	movw	r10, r24
    1f30:	b8 01       	movw	r22, r16
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1f3a:	6b 01       	movw	r12, r22
    1f3c:	7c 01       	movw	r14, r24
    1f3e:	e9 85       	ldd	r30, Y+9	; 0x09
    1f40:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f42:	66 81       	ldd	r22, Z+6	; 0x06
    1f44:	77 81       	ldd	r23, Z+7	; 0x07
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1f4e:	2b 01       	movw	r4, r22
    1f50:	3c 01       	movw	r6, r24
    1f52:	b1 01       	movw	r22, r2
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    1f5c:	ab 01       	movw	r20, r22
    1f5e:	bc 01       	movw	r22, r24
    1f60:	93 01       	movw	r18, r6
    1f62:	82 01       	movw	r16, r4
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <add_line(graph*, float, float, float, float)>
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:78
    1f6c:	2a 96       	adiw	r28, 0x0a	; 10
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	ff 90       	pop	r15
    1f82:	ef 90       	pop	r14
    1f84:	df 90       	pop	r13
    1f86:	cf 90       	pop	r12
    1f88:	bf 90       	pop	r11
    1f8a:	af 90       	pop	r10
    1f8c:	9f 90       	pop	r9
    1f8e:	8f 90       	pop	r8
    1f90:	7f 90       	pop	r7
    1f92:	6f 90       	pop	r6
    1f94:	5f 90       	pop	r5
    1f96:	4f 90       	pop	r4
    1f98:	3f 90       	pop	r3
    1f9a:	2f 90       	pop	r2
    1f9c:	08 95       	ret

00001f9e <remove_point(graph*, list<setpoint>*, unsigned char)>:
_Z12remove_pointP5graphP4listI8setpointEh():
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:52
  if(!first) add_line(temperature_graph, time_str_to_min(prev_setpoint->data.time), prev_setpoint->data.temp, time_str_to_min(new_setpoint->data.time), new_setpoint->data.temp);
  if(!last) add_line(temperature_graph, time_str_to_min(new_setpoint->data.time), new_setpoint->data.temp, time_str_to_min(next_setpoint->data.time), next_setpoint->data.temp);

}

void remove_point(graph *temperature_graph, struct list<setpoint> *setpoint_list, uint8_t remove_id) {
    1f9e:	2f 92       	push	r2
    1fa0:	3f 92       	push	r3
    1fa2:	4f 92       	push	r4
    1fa4:	5f 92       	push	r5
    1fa6:	6f 92       	push	r6
    1fa8:	7f 92       	push	r7
    1faa:	8f 92       	push	r8
    1fac:	9f 92       	push	r9
    1fae:	af 92       	push	r10
    1fb0:	bf 92       	push	r11
    1fb2:	cf 92       	push	r12
    1fb4:	df 92       	push	r13
    1fb6:	ef 92       	push	r14
    1fb8:	ff 92       	push	r15
    1fba:	0f 93       	push	r16
    1fbc:	1f 93       	push	r17
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	2a 97       	sbiw	r28, 0x0a	; 10
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
    1fd6:	cb 01       	movw	r24, r22
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:53
  list<setpoint> *prev_setpoint = get_index(setpoint_list, remove_id - 1);
    1fd8:	24 2f       	mov	r18, r20
    1fda:	21 50       	subi	r18, 0x01	; 1
    1fdc:	33 0b       	sbc	r19, r19
    1fde:	b9 01       	movw	r22, r18
    1fe0:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    1fe4:	1c 01       	movw	r2, r24
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:54
  list<setpoint> *old_setpoint = prev_setpoint->next;
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	60 84       	ldd	r6, Z+8	; 0x08
    1fea:	71 84       	ldd	r7, Z+9	; 0x09
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:55
  list<setpoint> *next_setpoint = old_setpoint->next;
    1fec:	f3 01       	movw	r30, r6
    1fee:	00 84       	ldd	r0, Z+8	; 0x08
    1ff0:	f1 85       	ldd	r31, Z+9	; 0x09
    1ff2:	e0 2d       	mov	r30, r0
    1ff4:	fa 87       	std	Y+10, r31	; 0x0a
    1ff6:	e9 87       	std	Y+9, r30	; 0x09
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:56
  uint8_t last = !next_setpoint->next;
    1ff8:	20 85       	ldd	r18, Z+8	; 0x08
    1ffa:	31 85       	ldd	r19, Z+9	; 0x09
    1ffc:	3a 83       	std	Y+2, r19	; 0x02
    1ffe:	29 83       	std	Y+1, r18	; 0x01
Set_Draw_color():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    2000:	8f ef       	ldi	r24, 0xFF	; 255
    2002:	9f ef       	ldi	r25, 0xFF	; 255
    2004:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <display+0xb>
    2008:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <display+0xa>
_Z12remove_pointP5graphP4listI8setpointEh():
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:59

  display.Set_Draw_color(BACKGROUND_COLOR);
  add_line(temperature_graph, time_str_to_min(prev_setpoint->data.time), prev_setpoint->data.temp, time_str_to_min(old_setpoint->data.time), old_setpoint->data.temp);
    200c:	c3 01       	movw	r24, r6
    200e:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    2012:	7c 01       	movw	r14, r24
    2014:	c1 01       	movw	r24, r2
    2016:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    201a:	8c 01       	movw	r16, r24
    201c:	f3 01       	movw	r30, r6
    201e:	66 81       	ldd	r22, Z+6	; 0x06
    2020:	77 81       	ldd	r23, Z+7	; 0x07
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    202a:	4b 01       	movw	r8, r22
    202c:	5c 01       	movw	r10, r24
    202e:	b7 01       	movw	r22, r14
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    2038:	6b 01       	movw	r12, r22
    203a:	7c 01       	movw	r14, r24
    203c:	f1 01       	movw	r30, r2
    203e:	66 81       	ldd	r22, Z+6	; 0x06
    2040:	77 81       	ldd	r23, Z+7	; 0x07
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    204a:	6d 83       	std	Y+5, r22	; 0x05
    204c:	7e 83       	std	Y+6, r23	; 0x06
    204e:	8f 83       	std	Y+7, r24	; 0x07
    2050:	98 87       	std	Y+8, r25	; 0x08
    2052:	b8 01       	movw	r22, r16
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    205c:	ab 01       	movw	r20, r22
    205e:	bc 01       	movw	r22, r24
    2060:	0d 81       	ldd	r16, Y+5	; 0x05
    2062:	1e 81       	ldd	r17, Y+6	; 0x06
    2064:	2f 81       	ldd	r18, Y+7	; 0x07
    2066:	38 85       	ldd	r19, Y+8	; 0x08
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <add_line(graph*, float, float, float, float)>
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:60
  if(!last) add_line(temperature_graph, time_str_to_min(old_setpoint->data.time), old_setpoint->data.temp, time_str_to_min(next_setpoint->data.time), next_setpoint->data.temp);
    2070:	29 81       	ldd	r18, Y+1	; 0x01
    2072:	3a 81       	ldd	r19, Y+2	; 0x02
    2074:	23 2b       	or	r18, r19
    2076:	99 f1       	breq	.+102    	; 0x20de <remove_point(graph*, list<setpoint>*, unsigned char)+0x140>
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    2080:	8c 01       	movw	r16, r24
    2082:	c3 01       	movw	r24, r6
    2084:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	e9 85       	ldd	r30, Y+9	; 0x09
    208e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2090:	66 81       	ldd	r22, Z+6	; 0x06
    2092:	77 81       	ldd	r23, Z+7	; 0x07
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    209c:	4b 01       	movw	r8, r22
    209e:	5c 01       	movw	r10, r24
    20a0:	b8 01       	movw	r22, r16
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    20aa:	6b 01       	movw	r12, r22
    20ac:	7c 01       	movw	r14, r24
    20ae:	f3 01       	movw	r30, r6
    20b0:	66 81       	ldd	r22, Z+6	; 0x06
    20b2:	77 81       	ldd	r23, Z+7	; 0x07
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    20bc:	2b 01       	movw	r4, r22
    20be:	3c 01       	movw	r6, r24
    20c0:	2d 81       	ldd	r18, Y+5	; 0x05
    20c2:	3e 81       	ldd	r19, Y+6	; 0x06
    20c4:	b9 01       	movw	r22, r18
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    20ce:	ab 01       	movw	r20, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	93 01       	movw	r18, r6
    20d4:	82 01       	movw	r16, r4
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	9c 81       	ldd	r25, Y+4	; 0x04
    20da:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <add_line(graph*, float, float, float, float)>
Set_Draw_color():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:46
}

//set 8bits r,g,b color
void LCDWIKI_GUI::Set_Draw_color(uint8_t r, uint8_t g, uint8_t b)
{
	draw_color = Color_To_565(r, g, b);
    20de:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <display+0xb>
    20e2:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <display+0xa>
_Z12remove_pointP5graphP4listI8setpointEh():
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:63

  display.Set_Draw_color(0, 0, 0);
  if(!last) add_line(temperature_graph, time_str_to_min(prev_setpoint->data.time), prev_setpoint->data.temp, time_str_to_min(next_setpoint->data.time), next_setpoint->data.temp);
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	89 2b       	or	r24, r25
    20ec:	99 f1       	breq	.+102    	; 0x2154 <remove_point(graph*, list<setpoint>*, unsigned char)+0x1b6>
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f2:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    20f6:	8c 01       	movw	r16, r24
    20f8:	c1 01       	movw	r24, r2
    20fa:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    20fe:	9a 83       	std	Y+2, r25	; 0x02
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	e9 85       	ldd	r30, Y+9	; 0x09
    2104:	fa 85       	ldd	r31, Y+10	; 0x0a
    2106:	66 81       	ldd	r22, Z+6	; 0x06
    2108:	77 81       	ldd	r23, Z+7	; 0x07
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    2112:	4b 01       	movw	r8, r22
    2114:	5c 01       	movw	r10, r24
    2116:	b8 01       	movw	r22, r16
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    2120:	6b 01       	movw	r12, r22
    2122:	7c 01       	movw	r14, r24
    2124:	f1 01       	movw	r30, r2
    2126:	66 81       	ldd	r22, Z+6	; 0x06
    2128:	77 81       	ldd	r23, Z+7	; 0x07
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    2132:	2b 01       	movw	r4, r22
    2134:	3c 01       	movw	r6, r24
    2136:	29 81       	ldd	r18, Y+1	; 0x01
    2138:	3a 81       	ldd	r19, Y+2	; 0x02
    213a:	b9 01       	movw	r22, r18
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    2144:	ab 01       	movw	r20, r22
    2146:	bc 01       	movw	r22, r24
    2148:	93 01       	movw	r18, r6
    214a:	82 01       	movw	r16, r4
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <add_line(graph*, float, float, float, float)>
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:64
}
    2154:	2a 96       	adiw	r28, 0x0a	; 10
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	ff 90       	pop	r15
    216a:	ef 90       	pop	r14
    216c:	df 90       	pop	r13
    216e:	cf 90       	pop	r12
    2170:	bf 90       	pop	r11
    2172:	af 90       	pop	r10
    2174:	9f 90       	pop	r9
    2176:	8f 90       	pop	r8
    2178:	7f 90       	pop	r7
    217a:	6f 90       	pop	r6
    217c:	5f 90       	pop	r5
    217e:	4f 90       	pop	r4
    2180:	3f 90       	pop	r3
    2182:	2f 90       	pop	r2
    2184:	08 95       	ret

00002186 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_SPI9Read_GRAMEiiPjii():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:834
    return ret;
}

//read graph RAM data
int16_t LCDWIKI_SPI::Read_GRAM(int16_t x, int16_t y, uint16_t *block, int16_t w, int16_t h)
{
    2186:	3f 92       	push	r3
    2188:	4f 92       	push	r4
    218a:	5f 92       	push	r5
    218c:	6f 92       	push	r6
    218e:	7f 92       	push	r7
    2190:	8f 92       	push	r8
    2192:	9f 92       	push	r9
    2194:	af 92       	push	r10
    2196:	bf 92       	push	r11
    2198:	cf 92       	push	r12
    219a:	df 92       	push	r13
    219c:	ef 92       	push	r14
    219e:	ff 92       	push	r15
    21a0:	0f 93       	push	r16
    21a2:	1f 93       	push	r17
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	ec 01       	movw	r28, r24
    21aa:	59 01       	movw	r10, r18
    21ac:	98 01       	movw	r18, r16
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:836
	uint16_t ret, dummy;
    int16_t n = w * h;
    21ae:	0e 9d       	mul	r16, r14
    21b0:	60 01       	movw	r12, r0
    21b2:	0f 9d       	mul	r16, r15
    21b4:	d0 0c       	add	r13, r0
    21b6:	1e 9d       	mul	r17, r14
    21b8:	d0 0c       	add	r13, r0
    21ba:	11 24       	eor	r1, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:838
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    21bc:	87 01       	movw	r16, r14
    21be:	04 0f       	add	r16, r20
    21c0:	15 1f       	adc	r17, r21
    21c2:	01 50       	subi	r16, 0x01	; 1
    21c4:	11 09       	sbc	r17, r1
    21c6:	26 0f       	add	r18, r22
    21c8:	37 1f       	adc	r19, r23
    21ca:	21 50       	subi	r18, 0x01	; 1
    21cc:	31 09       	sbc	r19, r1
    21ce:	e8 81       	ld	r30, Y
    21d0:	f9 81       	ldd	r31, Y+1	; 0x01
    21d2:	06 80       	ldd	r0, Z+6	; 0x06
    21d4:	f7 81       	ldd	r31, Z+7	; 0x07
    21d6:	e0 2d       	mov	r30, r0
    21d8:	09 95       	icall
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:841
    while (n > 0) 
	{
        CS_ACTIVE;
    21da:	2e 01       	movw	r4, r28
    21dc:	82 e4       	ldi	r24, 0x42	; 66
    21de:	48 0e       	add	r4, r24
    21e0:	51 1c       	adc	r5, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:842
		writeCmd16(RC);
    21e2:	3e 01       	movw	r6, r28
    21e4:	a3 e4       	ldi	r26, 0x43	; 67
    21e6:	6a 0e       	add	r6, r26
    21e8:	71 1c       	adc	r7, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:839
{
	uint16_t ret, dummy;
    int16_t n = w * h;
    uint8_t r, g, b, tmp;
    Set_Addr_Window(x, y, x + w - 1, y + h - 1);
    while (n > 0) 
    21ea:	1c 14       	cp	r1, r12
    21ec:	1d 04       	cpc	r1, r13
    21ee:	0c f0       	brlt	.+2      	; 0x21f2 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x6c>
    21f0:	96 c0       	rjmp	.+300    	; 0x231e <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x198>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:841
	{
        CS_ACTIVE;
    21f2:	eb a9       	ldd	r30, Y+51	; 0x33
    21f4:	fc a9       	ldd	r31, Y+52	; 0x34
    21f6:	80 81       	ld	r24, Z
    21f8:	d2 01       	movw	r26, r4
    21fa:	9c 91       	ld	r25, X
    21fc:	89 23       	and	r24, r25
    21fe:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:842
		writeCmd16(RC);
    2200:	ed a9       	ldd	r30, Y+53	; 0x35
    2202:	fe a9       	ldd	r31, Y+54	; 0x36
    2204:	80 81       	ld	r24, Z
    2206:	d3 01       	movw	r26, r6
    2208:	9c 91       	ld	r25, X
    220a:	89 23       	and	r24, r25
    220c:	80 83       	st	Z, r24
    220e:	6e a1       	ldd	r22, Y+38	; 0x26
    2210:	ce 01       	movw	r24, r28
    2212:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2216:	6d a1       	ldd	r22, Y+37	; 0x25
    2218:	ce 01       	movw	r24, r28
    221a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:844
        setReadDir();
		if(lcd_driver == ID_932X)
    221e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2220:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2222:	89 2b       	or	r24, r25
    2224:	09 f0       	breq	.+2      	; 0x2228 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0xa2>
    2226:	43 c0       	rjmp	.+134    	; 0x22ae <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x128>
    2228:	75 01       	movw	r14, r10
    222a:	86 01       	movw	r16, r12
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:850
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
				{
					read8(r);
    222c:	ce 01       	movw	r24, r28
    222e:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:851
					read8(r);
    2232:	ce 01       	movw	r24, r28
    2234:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:852
					read8(r);
    2238:	ce 01       	movw	r24, r28
    223a:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:853
					read8(g);
    223e:	ce 01       	movw	r24, r28
    2240:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:850
		{
			while(n)
			{
				for(int i =0; i< 2; i++)
				{
					read8(r);
    2244:	ce 01       	movw	r24, r28
    2246:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:851
					read8(r);
    224a:	ce 01       	movw	r24, r28
    224c:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:852
					read8(r);
    2250:	ce 01       	movw	r24, r28
    2252:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
    2256:	38 2e       	mov	r3, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:853
					read8(g);
    2258:	ce 01       	movw	r24, r28
    225a:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:855
				}
				*block++ = (r<<8 | g);
    225e:	93 2d       	mov	r25, r3
    2260:	f7 01       	movw	r30, r14
    2262:	81 93       	st	Z+, r24
    2264:	91 93       	st	Z+, r25
    2266:	7f 01       	movw	r14, r30
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:856
				n--;
    2268:	01 50       	subi	r16, 0x01	; 1
    226a:	11 09       	sbc	r17, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:846
        CS_ACTIVE;
		writeCmd16(RC);
        setReadDir();
		if(lcd_driver == ID_932X)
		{
			while(n)
    226c:	f9 f6       	brne	.-66     	; 0x222c <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0xa6>
    226e:	cc 0c       	add	r12, r12
    2270:	dd 1c       	adc	r13, r13
    2272:	ac 0c       	add	r10, r12
    2274:	bd 1c       	adc	r11, r13
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:858
					read8(g);
				}
				*block++ = (r<<8 | g);
				n--;
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
    2276:	0e 89       	ldd	r16, Y+22	; 0x16
    2278:	1f 89       	ldd	r17, Y+23	; 0x17
    227a:	01 50       	subi	r16, 0x01	; 1
    227c:	11 09       	sbc	r17, r1
    227e:	2c 89       	ldd	r18, Y+20	; 0x14
    2280:	3d 89       	ldd	r19, Y+21	; 0x15
    2282:	21 50       	subi	r18, 0x01	; 1
    2284:	31 09       	sbc	r19, r1
    2286:	e8 81       	ld	r30, Y
    2288:	f9 81       	ldd	r31, Y+1	; 0x01
    228a:	06 80       	ldd	r0, Z+6	; 0x06
    228c:	f7 81       	ldd	r31, Z+7	; 0x07
    228e:	e0 2d       	mov	r30, r0
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	ce 01       	movw	r24, r28
    229a:	09 95       	icall
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:881
            	*block++ = ret;
            	n--;
        	}
        }
//        RD_IDLE;
        CS_IDLE;
    229c:	eb a9       	ldd	r30, Y+51	; 0x33
    229e:	fc a9       	ldd	r31, Y+52	; 0x34
    22a0:	80 81       	ld	r24, Z
    22a2:	9d ad       	ldd	r25, Y+61	; 0x3d
    22a4:	89 2b       	or	r24, r25
    22a6:	80 83       	st	Z, r24
    22a8:	d1 2c       	mov	r13, r1
    22aa:	c1 2c       	mov	r12, r1
    22ac:	9e cf       	rjmp	.-196    	; 0x21ea <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x64>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:862
			}
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
    22ae:	ce 01       	movw	r24, r28
    22b0:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
    22b4:	75 01       	movw	r14, r10
    22b6:	86 01       	movw	r16, r12
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:865
        	while (n) 
			{
				if(R24BIT == 1)
    22b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ba:	98 a9       	ldd	r25, Y+48	; 0x30
    22bc:	81 30       	cpi	r24, 0x01	; 1
    22be:	91 05       	cpc	r25, r1
    22c0:	11 f5       	brne	.+68     	; 0x2306 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x180>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:867
				{
        			read8(r);
    22c2:	ce 01       	movw	r24, r28
    22c4:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
    22c8:	98 2e       	mov	r9, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:868
         			read8(g);
    22ca:	ce 01       	movw	r24, r28
    22cc:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
    22d0:	88 2e       	mov	r8, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:869
        			read8(b);
    22d2:	ce 01       	movw	r24, r28
    22d4:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:870
            		ret = Color_To_565(r, g, b);
    22d8:	e8 81       	ld	r30, Y
    22da:	f9 81       	ldd	r31, Y+1	; 0x01
    22dc:	01 90       	ld	r0, Z+
    22de:	f0 81       	ld	r31, Z
    22e0:	e0 2d       	mov	r30, r0
    22e2:	28 2f       	mov	r18, r24
    22e4:	48 2d       	mov	r20, r8
    22e6:	69 2d       	mov	r22, r9
    22e8:	ce 01       	movw	r24, r28
    22ea:	09 95       	icall
    22ec:	4c 01       	movw	r8, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:876
				}
				else if(R24BIT == 0)
				{
					read16(ret);
				}
            	*block++ = ret;
    22ee:	d7 01       	movw	r26, r14
    22f0:	8d 92       	st	X+, r8
    22f2:	9d 92       	st	X+, r9
    22f4:	7d 01       	movw	r14, r26
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:877
            	n--;
    22f6:	01 50       	subi	r16, 0x01	; 1
    22f8:	11 09       	sbc	r17, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:863
			Set_Addr_Window(0, 0, width - 1, height - 1);
		}
		else 
		{
			read8(r);
        	while (n) 
    22fa:	f1 f6       	brne	.-68     	; 0x22b8 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x132>
    22fc:	cc 0c       	add	r12, r12
    22fe:	dd 1c       	adc	r13, r13
    2300:	ac 0c       	add	r10, r12
    2302:	bd 1c       	adc	r11, r13
    2304:	cb cf       	rjmp	.-106    	; 0x229c <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x116>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:872
        			read8(r);
         			read8(g);
        			read8(b);
            		ret = Color_To_565(r, g, b);
				}
				else if(R24BIT == 0)
    2306:	89 2b       	or	r24, r25
    2308:	91 f7       	brne	.-28     	; 0x22ee <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x168>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:874
				{
					read16(ret);
    230a:	ce 01       	movw	r24, r28
    230c:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
    2310:	88 2e       	mov	r8, r24
    2312:	ce 01       	movw	r24, r28
    2314:	0e 94 c9 08 	call	0x1192	; 0x1192 <LCDWIKI_SPI::Spi_Read()>
    2318:	98 2c       	mov	r9, r8
    231a:	88 2e       	mov	r8, r24
    231c:	e8 cf       	rjmp	.-48     	; 0x22ee <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x168>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:885
//        RD_IDLE;
        CS_IDLE;
        setWriteDir();
    }
	return 0;
}
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	bf 90       	pop	r11
    2334:	af 90       	pop	r10
    2336:	9f 90       	pop	r9
    2338:	8f 90       	pop	r8
    233a:	7f 90       	pop	r7
    233c:	6f 90       	pop	r6
    233e:	5f 90       	pop	r5
    2340:	4f 90       	pop	r4
    2342:	3f 90       	pop	r3
    2344:	08 95       	ret

00002346 <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_SPI14Push_Any_ColorEPjibh():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:720
	CS_IDLE;
}

//push color table for 16bits
void LCDWIKI_SPI::Push_Any_Color(uint16_t * block, int16_t n, bool first, uint8_t flags)
{
    2346:	9f 92       	push	r9
    2348:	af 92       	push	r10
    234a:	bf 92       	push	r11
    234c:	cf 92       	push	r12
    234e:	df 92       	push	r13
    2350:	ef 92       	push	r14
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	ec 01       	movw	r28, r24
    235e:	6b 01       	movw	r12, r22
    2360:	94 2e       	mov	r9, r20
    2362:	a5 2e       	mov	r10, r21
    2364:	01 70       	andi	r16, 0x01	; 1
    2366:	b0 2e       	mov	r11, r16
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:725
	uint16_t color;
    uint8_t h, l;
	bool isconst = flags & 1;
//	bool isbigend = (flags & 2) != 0;
    CS_ACTIVE;
    2368:	eb a9       	ldd	r30, Y+51	; 0x33
    236a:	fc a9       	ldd	r31, Y+52	; 0x34
    236c:	80 81       	ld	r24, Z
    236e:	de 01       	movw	r26, r28
    2370:	ae 5b       	subi	r26, 0xBE	; 190
    2372:	bf 4f       	sbci	r27, 0xFF	; 255
    2374:	9c 91       	ld	r25, X
    2376:	89 23       	and	r24, r25
    2378:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:726
    if (first) 
    237a:	22 23       	and	r18, r18
    237c:	e9 f0       	breq	.+58     	; 0x23b8 <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x72>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:728
	{  
		if(lcd_driver == ID_932X)
    237e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2380:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2382:	8e 01       	movw	r16, r28
    2384:	0d 5b       	subi	r16, 0xBD	; 189
    2386:	1f 4f       	sbci	r17, 0xFF	; 255
    2388:	89 2b       	or	r24, r25
    238a:	59 f4       	brne	.+22     	; 0x23a2 <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x5c>
    238c:	ed a9       	ldd	r30, Y+53	; 0x35
    238e:	fe a9       	ldd	r31, Y+54	; 0x36
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:730
		{
			writeCmd8(ILI932X_START_OSC);
    2390:	80 81       	ld	r24, Z
    2392:	d8 01       	movw	r26, r16
    2394:	9c 91       	ld	r25, X
    2396:	89 23       	and	r24, r25
    2398:	80 83       	st	Z, r24
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	ce 01       	movw	r24, r28
    239e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:733
			
		}
		writeCmd8(CC);		
    23a2:	ed a9       	ldd	r30, Y+53	; 0x35
    23a4:	fe a9       	ldd	r31, Y+54	; 0x36
    23a6:	80 81       	ld	r24, Z
    23a8:	d8 01       	movw	r26, r16
    23aa:	9c 91       	ld	r25, X
    23ac:	89 23       	and	r24, r25
    23ae:	80 83       	st	Z, r24
    23b0:	6b a1       	ldd	r22, Y+35	; 0x23
    23b2:	ce 01       	movw	r24, r28
    23b4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    23b8:	76 01       	movw	r14, r12
    23ba:	c9 2c       	mov	r12, r9
    23bc:	da 2c       	mov	r13, r10
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:735
    }
    while (n-- > 0) 
    23be:	1c 14       	cp	r1, r12
    23c0:	1d 04       	cpc	r1, r13
    23c2:	b4 f5       	brge	.+108    	; 0x2430 <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xea>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:737
	{
        if (isconst) 
    23c4:	bb 20       	and	r11, r11
    23c6:	59 f1       	breq	.+86     	; 0x241e <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xd8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:739
		{
			color = pgm_read_word(block++);		
    23c8:	f7 01       	movw	r30, r14
    23ca:	05 91       	lpm	r16, Z+
    23cc:	14 91       	lpm	r17, Z
    23ce:	ed a9       	ldd	r30, Y+53	; 0x35
    23d0:	fe a9       	ldd	r31, Y+54	; 0x36
    23d2:	9e ad       	ldd	r25, Y+62	; 0x3e
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:746
		else 
		{
			color = (*block++);			

		}
		if(MODEL == ILI9488_18)
    23d4:	29 a9       	ldd	r18, Y+49	; 0x31
    23d6:	3a a9       	ldd	r19, Y+50	; 0x32
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:748
		{
			writeData18(color);
    23d8:	80 81       	ld	r24, Z
    23da:	89 2b       	or	r24, r25
    23dc:	80 83       	st	Z, r24
    23de:	61 2f       	mov	r22, r17
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:746
		else 
		{
			color = (*block++);			

		}
		if(MODEL == ILI9488_18)
    23e0:	2c 30       	cpi	r18, 0x0C	; 12
    23e2:	31 05       	cpc	r19, r1
    23e4:	01 f5       	brne	.+64     	; 0x2426 <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xe0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:748
		{
			writeData18(color);
    23e6:	68 7f       	andi	r22, 0xF8	; 248
    23e8:	ce 01       	movw	r24, r28
    23ea:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    23ee:	b8 01       	movw	r22, r16
    23f0:	83 e0       	ldi	r24, 0x03	; 3
    23f2:	76 95       	lsr	r23
    23f4:	67 95       	ror	r22
    23f6:	8a 95       	dec	r24
    23f8:	e1 f7       	brne	.-8      	; 0x23f2 <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xac>
    23fa:	6c 7f       	andi	r22, 0xFC	; 252
    23fc:	ce 01       	movw	r24, r28
    23fe:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2402:	60 2f       	mov	r22, r16
    2404:	66 0f       	add	r22, r22
    2406:	66 0f       	add	r22, r22
    2408:	66 0f       	add	r22, r22
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:752
		}
		else
		{
        	writeData16(color);
    240a:	ce 01       	movw	r24, r28
    240c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2410:	b2 e0       	ldi	r27, 0x02	; 2
    2412:	eb 0e       	add	r14, r27
    2414:	f1 1c       	adc	r15, r1
    2416:	e1 e0       	ldi	r30, 0x01	; 1
    2418:	ce 1a       	sub	r12, r30
    241a:	d1 08       	sbc	r13, r1
    241c:	d0 cf       	rjmp	.-96     	; 0x23be <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x78>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:743
		{
			color = pgm_read_word(block++);		
        } 
		else 
		{
			color = (*block++);			
    241e:	d7 01       	movw	r26, r14
    2420:	0d 91       	ld	r16, X+
    2422:	1c 91       	ld	r17, X
    2424:	d4 cf       	rjmp	.-88     	; 0x23ce <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x88>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:752
		{
			writeData18(color);
		}
		else
		{
        	writeData16(color);
    2426:	ce 01       	movw	r24, r28
    2428:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    242c:	60 2f       	mov	r22, r16
    242e:	ed cf       	rjmp	.-38     	; 0x240a <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xc4>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:755
		}
	}
    CS_IDLE;
    2430:	eb a9       	ldd	r30, Y+51	; 0x33
    2432:	fc a9       	ldd	r31, Y+52	; 0x34
    2434:	80 81       	ld	r24, Z
    2436:	9d ad       	ldd	r25, Y+61	; 0x3d
    2438:	89 2b       	or	r24, r25
    243a:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:756
}
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	ff 90       	pop	r15
    2446:	ef 90       	pop	r14
    2448:	df 90       	pop	r13
    244a:	cf 90       	pop	r12
    244c:	bf 90       	pop	r11
    244e:	af 90       	pop	r10
    2450:	9f 90       	pop	r9
    2452:	08 95       	ret

00002454 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>:
_ZN11LCDWIKI_SPI12Push_CommandEhPha():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:559
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_SPI::Push_Command(uint8_t cmd, uint8_t *block, int8_t N)
{
    2454:	af 92       	push	r10
    2456:	bf 92       	push	r11
    2458:	cf 92       	push	r12
    245a:	df 92       	push	r13
    245c:	ef 92       	push	r14
    245e:	ff 92       	push	r15
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	ec 01       	movw	r28, r24
    246a:	16 2f       	mov	r17, r22
    246c:	b4 2e       	mov	r11, r20
    246e:	a5 2e       	mov	r10, r21
    2470:	02 2f       	mov	r16, r18
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:560
  	CS_ACTIVE;
    2472:	eb a9       	ldd	r30, Y+51	; 0x33
    2474:	fc a9       	ldd	r31, Y+52	; 0x34
    2476:	80 81       	ld	r24, Z
    2478:	de 01       	movw	r26, r28
    247a:	ae 5b       	subi	r26, 0xBE	; 190
    247c:	bf 4f       	sbci	r27, 0xFF	; 255
    247e:	9c 91       	ld	r25, X
    2480:	89 23       	and	r24, r25
    2482:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:561
	if(lcd_driver == ID_1106)
    2484:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2486:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2488:	ed a9       	ldd	r30, Y+53	; 0x35
    248a:	fe a9       	ldd	r31, Y+54	; 0x36
    248c:	9e 01       	movw	r18, r28
    248e:	2d 5b       	subi	r18, 0xBD	; 189
    2490:	3f 4f       	sbci	r19, 0xFF	; 255
    2492:	69 01       	movw	r12, r18
    2494:	08 97       	sbiw	r24, 0x08	; 8
    2496:	a1 f5       	brne	.+104    	; 0x2500 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0xac>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:563
	{
    	writeCmd8(cmd);
    2498:	80 81       	ld	r24, Z
    249a:	d9 01       	movw	r26, r18
    249c:	9c 91       	ld	r25, X
    249e:	89 23       	and	r24, r25
    24a0:	80 83       	st	Z, r24
    24a2:	61 2f       	mov	r22, r17
    24a4:	ce 01       	movw	r24, r28
    24a6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    24aa:	eb 2c       	mov	r14, r11
    24ac:	fa 2c       	mov	r15, r10
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:569
	}
	else
	{
		writeCmd16(cmd);
	}
	while (N-- > 0) 
    24ae:	bb 24       	eor	r11, r11
    24b0:	ba 94       	dec	r11
    24b2:	b0 0e       	add	r11, r16
    24b4:	10 16       	cp	r1, r16
    24b6:	74 f5       	brge	.+92     	; 0x2514 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0xc0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:571
	{
        uint8_t u8 = *block++;
    24b8:	f7 01       	movw	r30, r14
    24ba:	61 91       	ld	r22, Z+
    24bc:	7f 01       	movw	r14, r30
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:572
        writeData8(u8); 
    24be:	ed a9       	ldd	r30, Y+53	; 0x35
    24c0:	fe a9       	ldd	r31, Y+54	; 0x36
    24c2:	80 81       	ld	r24, Z
    24c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    24c6:	89 2b       	or	r24, r25
    24c8:	80 83       	st	Z, r24
    24ca:	ce 01       	movw	r24, r28
    24cc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:573
		if(N && (lcd_driver == ID_7575))
    24d0:	bb 20       	and	r11, r11
    24d2:	a1 f0       	breq	.+40     	; 0x24fc <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0xa8>
    24d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	81 f4       	brne	.+32     	; 0x24fc <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0xa8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:575
		{
			cmd++;
    24dc:	1f 5f       	subi	r17, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:576
			writeCmd16(cmd);
    24de:	ed a9       	ldd	r30, Y+53	; 0x35
    24e0:	fe a9       	ldd	r31, Y+54	; 0x36
    24e2:	80 81       	ld	r24, Z
    24e4:	d6 01       	movw	r26, r12
    24e6:	9c 91       	ld	r25, X
    24e8:	89 23       	and	r24, r25
    24ea:	80 83       	st	Z, r24
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	ce 01       	movw	r24, r28
    24f0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    24f4:	61 2f       	mov	r22, r17
    24f6:	ce 01       	movw	r24, r28
    24f8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:559
	CS_IDLE;
}

//Write a command and N datas
void LCDWIKI_SPI::Push_Command(uint8_t cmd, uint8_t *block, int8_t N)
{
    24fc:	0b 2d       	mov	r16, r11
    24fe:	d7 cf       	rjmp	.-82     	; 0x24ae <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0x5a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:567
	{
    	writeCmd8(cmd);
	}
	else
	{
		writeCmd16(cmd);
    2500:	80 81       	ld	r24, Z
    2502:	d9 01       	movw	r26, r18
    2504:	9c 91       	ld	r25, X
    2506:	89 23       	and	r24, r25
    2508:	80 83       	st	Z, r24
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	ce 01       	movw	r24, r28
    250e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2512:	c7 cf       	rjmp	.-114    	; 0x24a2 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0x4e>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:579
		{
			cmd++;
			writeCmd16(cmd);
		}
    }
    CS_IDLE;
    2514:	eb a9       	ldd	r30, Y+51	; 0x33
    2516:	fc a9       	ldd	r31, Y+52	; 0x34
    2518:	80 81       	ld	r24, Z
    251a:	9d ad       	ldd	r25, Y+61	; 0x3d
    251c:	89 2b       	or	r24, r25
    251e:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:580
}
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	ff 90       	pop	r15
    252a:	ef 90       	pop	r14
    252c:	df 90       	pop	r13
    252e:	cf 90       	pop	r12
    2530:	bf 90       	pop	r11
    2532:	af 90       	pop	r10
    2534:	08 95       	ret

00002536 <LCDWIKI_SPI::init_table8(void const*, int) [clone .constprop.46]>:
_ZN11LCDWIKI_SPI11init_table8EPKvi.constprop.46():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1389
		}
	} 
	CS_IDLE;
}

void LCDWIKI_SPI:: init_table8(const void *table, int16_t size)
    2536:	df 92       	push	r13
    2538:	ef 92       	push	r14
    253a:	ff 92       	push	r15
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	68 97       	sbiw	r28, 0x18	; 24
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	8c 01       	movw	r16, r24
    2556:	7b 01       	movw	r14, r22
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1395
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
	{
        uint8_t cmd = pgm_read_byte(p++);
    2558:	f8 01       	movw	r30, r16
    255a:	64 91       	lpm	r22, Z
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1396
        uint8_t len = pgm_read_byte(p++);
    255c:	31 96       	adiw	r30, 0x01	; 1
    255e:	d4 90       	lpm	r13, Z
    2560:	0e 5f       	subi	r16, 0xFE	; 254
    2562:	1f 4f       	sbci	r17, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1397
        if (cmd == TFTLCD_DELAY8) 
    2564:	6f 37       	cpi	r22, 0x7F	; 127
    2566:	71 f0       	breq	.+28     	; 0x2584 <LCDWIKI_SPI::init_table8(void const*, int) [clone .constprop.46]+0x4e>
    2568:	de 01       	movw	r26, r28
    256a:	11 96       	adiw	r26, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	ad 01       	movw	r20, r26
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1404
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
    2572:	8d 15       	cp	r24, r13
    2574:	20 f5       	brcc	.+72     	; 0x25be <LCDWIKI_SPI::init_table8(void const*, int) [clone .constprop.46]+0x88>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1406
            {
                dat[i] = pgm_read_byte(p++);
    2576:	f8 01       	movw	r30, r16
    2578:	e8 0f       	add	r30, r24
    257a:	f9 1f       	adc	r31, r25
    257c:	e4 91       	lpm	r30, Z
    257e:	ed 93       	st	X+, r30
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	f7 cf       	rjmp	.-18     	; 0x2572 <LCDWIKI_SPI::init_table8(void const*, int) [clone .constprop.46]+0x3c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1399
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
    2584:	6d 2d       	mov	r22, r13
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	0e 94 c0 05 	call	0xb80	; 0xb80 <delay>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1400
            len = 0;
    2590:	d1 2c       	mov	r13, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1410
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
    2592:	ed 2d       	mov	r30, r13
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	32 96       	adiw	r30, 0x02	; 2
    2598:	ee 1a       	sub	r14, r30
    259a:	ff 0a       	sbc	r15, r31
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1393

void LCDWIKI_SPI:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
    259c:	1e 14       	cp	r1, r14
    259e:	1f 04       	cpc	r1, r15
    25a0:	dc f2       	brlt	.-74     	; 0x2558 <LCDWIKI_SPI::init_table8(void const*, int) [clone .constprop.46]+0x22>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1412
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
    }
}
    25a2:	68 96       	adiw	r28, 0x18	; 24
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	df 91       	pop	r29
    25b0:	cf 91       	pop	r28
    25b2:	1f 91       	pop	r17
    25b4:	0f 91       	pop	r16
    25b6:	ff 90       	pop	r15
    25b8:	ef 90       	pop	r14
    25ba:	df 90       	pop	r13
    25bc:	08 95       	ret
    25be:	0d 0d       	add	r16, r13
    25c0:	11 1d       	adc	r17, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1408
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
    25c2:	2d 2d       	mov	r18, r13
    25c4:	85 ef       	ldi	r24, 0xF5	; 245
    25c6:	92 e0       	ldi	r25, 0x02	; 2
    25c8:	0e 94 2a 12 	call	0x2454	; 0x2454 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
    25cc:	e2 cf       	rjmp	.-60     	; 0x2592 <LCDWIKI_SPI::init_table8(void const*, int) [clone .constprop.46]+0x5c>

000025ce <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_SPI15Set_Addr_WindowEiiii():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:584
    CS_IDLE;
}

// Sets the LCD address window 
void LCDWIKI_SPI::Set_Addr_Window(int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
    25ce:	2f 92       	push	r2
    25d0:	3f 92       	push	r3
    25d2:	4f 92       	push	r4
    25d4:	5f 92       	push	r5
    25d6:	6f 92       	push	r6
    25d8:	7f 92       	push	r7
    25da:	8f 92       	push	r8
    25dc:	9f 92       	push	r9
    25de:	af 92       	push	r10
    25e0:	bf 92       	push	r11
    25e2:	cf 92       	push	r12
    25e4:	df 92       	push	r13
    25e6:	ef 92       	push	r14
    25e8:	ff 92       	push	r15
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	28 97       	sbiw	r28, 0x08	; 8
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	7c 01       	movw	r14, r24
    2604:	5b 01       	movw	r10, r22
    2606:	6a 01       	movw	r12, r20
    2608:	49 01       	movw	r8, r18
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:585
	CS_ACTIVE;
    260a:	dc 01       	movw	r26, r24
    260c:	d3 96       	adiw	r26, 0x33	; 51
    260e:	ed 91       	ld	r30, X+
    2610:	fc 91       	ld	r31, X
    2612:	d4 97       	sbiw	r26, 0x34	; 52
    2614:	80 81       	ld	r24, Z
    2616:	ae 5b       	subi	r26, 0xBE	; 190
    2618:	bf 4f       	sbci	r27, 0xFF	; 255
    261a:	9c 91       	ld	r25, X
    261c:	89 23       	and	r24, r25
    261e:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:586
	if(lcd_driver == ID_932X) 
    2620:	f7 01       	movw	r30, r14
    2622:	82 8d       	ldd	r24, Z+26	; 0x1a
    2624:	93 8d       	ldd	r25, Z+27	; 0x1b
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	09 f0       	breq	.+2      	; 0x262c <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x5e>
    262a:	46 c1       	rjmp	.+652    	; 0x28b8 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x2ea>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:597
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    262c:	80 8d       	ldd	r24, Z+24	; 0x18
    262e:	91 8d       	ldd	r25, Z+25	; 0x19
    2630:	82 30       	cpi	r24, 0x02	; 2
    2632:	91 05       	cpc	r25, r1
    2634:	09 f4       	brne	.+2      	; 0x2638 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x6a>
    2636:	12 c1       	rjmp	.+548    	; 0x285c <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x28e>
    2638:	83 30       	cpi	r24, 0x03	; 3
    263a:	91 05       	cpc	r25, r1
    263c:	09 f4       	brne	.+2      	; 0x2640 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x72>
    263e:	2a c1       	rjmp	.+596    	; 0x2894 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x2c6>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:601
		{
		     default:
			      x  = x1;
			      y  = y1;
    2640:	2a 01       	movw	r4, r20
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:600
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
		{
		     default:
			      x  = x1;
    2642:	3b 01       	movw	r6, r22
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:597
	    // set to the top-left corner -- although fill operations can be
	    // done in any direction, the current screen rotation is applied
	    // because some users find it disconcerting when a fill does not
	    // occur top-to-bottom.
	    int x, y, t;
	    switch(rotation) 
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	89 f4       	brne	.+34     	; 0x266a <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x9c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:606
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
    2648:	80 89       	ldd	r24, Z+16	; 0x10
    264a:	91 89       	ldd	r25, Z+17	; 0x11
    264c:	98 01       	movw	r18, r16
    264e:	20 95       	com	r18
    2650:	30 95       	com	r19
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:608
			      y2 = x2;
			      x2 = WIDTH  - 1 - t;
    2652:	c0 94       	com	r12
    2654:	d0 94       	com	r13
    2656:	36 01       	movw	r6, r12
    2658:	68 0e       	add	r6, r24
    265a:	79 1e       	adc	r7, r25
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:610
			      x  = x2;
			      y  = y1;
    265c:	2b 01       	movw	r4, r22
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:607
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
			      x1 = WIDTH  - 1 - y2;
			      y2 = x2;
    265e:	84 01       	movw	r16, r8
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:608
			      x2 = WIDTH  - 1 - t;
    2660:	43 01       	movw	r8, r6
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:605
			      x  = x1;
			      y  = y1;
			      break;
		     case 1:
			      t  = y1;
			      y1 = x1;
    2662:	65 01       	movw	r12, r10
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:606
			      x1 = WIDTH  - 1 - y2;
    2664:	59 01       	movw	r10, r18
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:614
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    2666:	a8 0e       	add	r10, r24
    2668:	b9 1e       	adc	r11, r25
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:632
			      y2 = HEIGHT - 1 - t;
			      x  = x1;
			      y  = y2;
			      break;
    	}
    writeCmdData16(ILI932X_HOR_START_AD, x1); // Set address window
    266a:	d7 01       	movw	r26, r14
    266c:	d5 96       	adiw	r26, 0x35	; 53
    266e:	ed 91       	ld	r30, X+
    2670:	fc 91       	ld	r31, X
    2672:	80 81       	ld	r24, Z
    2674:	17 01       	movw	r2, r14
    2676:	b3 e4       	ldi	r27, 0x43	; 67
    2678:	2b 0e       	add	r2, r27
    267a:	31 1c       	adc	r3, r1
    267c:	d1 01       	movw	r26, r2
    267e:	9c 91       	ld	r25, X
    2680:	89 23       	and	r24, r25
    2682:	80 83       	st	Z, r24
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	c7 01       	movw	r24, r14
    2688:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    268c:	60 e5       	ldi	r22, 0x50	; 80
    268e:	c7 01       	movw	r24, r14
    2690:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2694:	d7 01       	movw	r26, r14
    2696:	d5 96       	adiw	r26, 0x35	; 53
    2698:	ed 91       	ld	r30, X+
    269a:	fc 91       	ld	r31, X
    269c:	d6 97       	sbiw	r26, 0x36	; 54
    269e:	80 81       	ld	r24, Z
    26a0:	de 96       	adiw	r26, 0x3e	; 62
    26a2:	9c 91       	ld	r25, X
    26a4:	89 2b       	or	r24, r25
    26a6:	80 83       	st	Z, r24
    26a8:	6b 2d       	mov	r22, r11
    26aa:	c7 01       	movw	r24, r14
    26ac:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    26b0:	6a 2d       	mov	r22, r10
    26b2:	c7 01       	movw	r24, r14
    26b4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:633
    writeCmdData16(ILI932X_HOR_END_AD, x2);
    26b8:	d7 01       	movw	r26, r14
    26ba:	d5 96       	adiw	r26, 0x35	; 53
    26bc:	ed 91       	ld	r30, X+
    26be:	fc 91       	ld	r31, X
    26c0:	80 81       	ld	r24, Z
    26c2:	d1 01       	movw	r26, r2
    26c4:	9c 91       	ld	r25, X
    26c6:	89 23       	and	r24, r25
    26c8:	80 83       	st	Z, r24
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	c7 01       	movw	r24, r14
    26ce:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    26d2:	61 e5       	ldi	r22, 0x51	; 81
    26d4:	c7 01       	movw	r24, r14
    26d6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    26da:	d7 01       	movw	r26, r14
    26dc:	d5 96       	adiw	r26, 0x35	; 53
    26de:	ed 91       	ld	r30, X+
    26e0:	fc 91       	ld	r31, X
    26e2:	d6 97       	sbiw	r26, 0x36	; 54
    26e4:	80 81       	ld	r24, Z
    26e6:	de 96       	adiw	r26, 0x3e	; 62
    26e8:	9c 91       	ld	r25, X
    26ea:	89 2b       	or	r24, r25
    26ec:	80 83       	st	Z, r24
    26ee:	69 2d       	mov	r22, r9
    26f0:	c7 01       	movw	r24, r14
    26f2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    26f6:	68 2d       	mov	r22, r8
    26f8:	c7 01       	movw	r24, r14
    26fa:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:634
    writeCmdData16(ILI932X_VER_START_AD, y1);
    26fe:	d7 01       	movw	r26, r14
    2700:	d5 96       	adiw	r26, 0x35	; 53
    2702:	ed 91       	ld	r30, X+
    2704:	fc 91       	ld	r31, X
    2706:	80 81       	ld	r24, Z
    2708:	d1 01       	movw	r26, r2
    270a:	9c 91       	ld	r25, X
    270c:	89 23       	and	r24, r25
    270e:	80 83       	st	Z, r24
    2710:	60 e0       	ldi	r22, 0x00	; 0
    2712:	c7 01       	movw	r24, r14
    2714:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2718:	62 e5       	ldi	r22, 0x52	; 82
    271a:	c7 01       	movw	r24, r14
    271c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2720:	d7 01       	movw	r26, r14
    2722:	d5 96       	adiw	r26, 0x35	; 53
    2724:	ed 91       	ld	r30, X+
    2726:	fc 91       	ld	r31, X
    2728:	d6 97       	sbiw	r26, 0x36	; 54
    272a:	80 81       	ld	r24, Z
    272c:	de 96       	adiw	r26, 0x3e	; 62
    272e:	9c 91       	ld	r25, X
    2730:	89 2b       	or	r24, r25
    2732:	80 83       	st	Z, r24
    2734:	6d 2d       	mov	r22, r13
    2736:	c7 01       	movw	r24, r14
    2738:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    273c:	6c 2d       	mov	r22, r12
    273e:	c7 01       	movw	r24, r14
    2740:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:635
    writeCmdData16(ILI932X_VER_END_AD, y2);
    2744:	d7 01       	movw	r26, r14
    2746:	d5 96       	adiw	r26, 0x35	; 53
    2748:	ed 91       	ld	r30, X+
    274a:	fc 91       	ld	r31, X
    274c:	80 81       	ld	r24, Z
    274e:	d1 01       	movw	r26, r2
    2750:	9c 91       	ld	r25, X
    2752:	89 23       	and	r24, r25
    2754:	80 83       	st	Z, r24
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	c7 01       	movw	r24, r14
    275a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    275e:	63 e5       	ldi	r22, 0x53	; 83
    2760:	c7 01       	movw	r24, r14
    2762:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2766:	d7 01       	movw	r26, r14
    2768:	d5 96       	adiw	r26, 0x35	; 53
    276a:	ed 91       	ld	r30, X+
    276c:	fc 91       	ld	r31, X
    276e:	d6 97       	sbiw	r26, 0x36	; 54
    2770:	80 81       	ld	r24, Z
    2772:	de 96       	adiw	r26, 0x3e	; 62
    2774:	9c 91       	ld	r25, X
    2776:	89 2b       	or	r24, r25
    2778:	80 83       	st	Z, r24
    277a:	61 2f       	mov	r22, r17
    277c:	c7 01       	movw	r24, r14
    277e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2782:	60 2f       	mov	r22, r16
    2784:	c7 01       	movw	r24, r14
    2786:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:636
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    278a:	d7 01       	movw	r26, r14
    278c:	d5 96       	adiw	r26, 0x35	; 53
    278e:	ed 91       	ld	r30, X+
    2790:	fc 91       	ld	r31, X
    2792:	80 81       	ld	r24, Z
    2794:	d1 01       	movw	r26, r2
    2796:	9c 91       	ld	r25, X
    2798:	89 23       	and	r24, r25
    279a:	80 83       	st	Z, r24
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	c7 01       	movw	r24, r14
    27a0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    27a4:	60 e2       	ldi	r22, 0x20	; 32
    27a6:	c7 01       	movw	r24, r14
    27a8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    27ac:	d7 01       	movw	r26, r14
    27ae:	d5 96       	adiw	r26, 0x35	; 53
    27b0:	ed 91       	ld	r30, X+
    27b2:	fc 91       	ld	r31, X
    27b4:	d6 97       	sbiw	r26, 0x36	; 54
    27b6:	80 81       	ld	r24, Z
    27b8:	de 96       	adiw	r26, 0x3e	; 62
    27ba:	9c 91       	ld	r25, X
    27bc:	89 2b       	or	r24, r25
    27be:	80 83       	st	Z, r24
    27c0:	67 2d       	mov	r22, r7
    27c2:	c7 01       	movw	r24, r14
    27c4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    27c8:	66 2d       	mov	r22, r6
    27ca:	c7 01       	movw	r24, r14
    27cc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:637
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
    27d0:	d7 01       	movw	r26, r14
    27d2:	d5 96       	adiw	r26, 0x35	; 53
    27d4:	ed 91       	ld	r30, X+
    27d6:	fc 91       	ld	r31, X
    27d8:	80 81       	ld	r24, Z
    27da:	d1 01       	movw	r26, r2
    27dc:	9c 91       	ld	r25, X
    27de:	89 23       	and	r24, r25
    27e0:	80 83       	st	Z, r24
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	c7 01       	movw	r24, r14
    27e6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    27ea:	61 e2       	ldi	r22, 0x21	; 33
    27ec:	c7 01       	movw	r24, r14
    27ee:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    27f2:	d7 01       	movw	r26, r14
    27f4:	d5 96       	adiw	r26, 0x35	; 53
    27f6:	ed 91       	ld	r30, X+
    27f8:	fc 91       	ld	r31, X
    27fa:	d6 97       	sbiw	r26, 0x36	; 54
    27fc:	80 81       	ld	r24, Z
    27fe:	de 96       	adiw	r26, 0x3e	; 62
    2800:	9c 91       	ld	r25, X
    2802:	89 2b       	or	r24, r25
    2804:	80 83       	st	Z, r24
    2806:	65 2d       	mov	r22, r5
    2808:	c7 01       	movw	r24, r14
    280a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    280e:	64 2d       	mov	r22, r4
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:648
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    2810:	c7 01       	movw	r24, r14
    2812:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:699
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF};
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF};
		Push_Command(XC, x_buf, 4);
		Push_Command(YC, y_buf, 4);
	}
	CS_IDLE;		
    2816:	d7 01       	movw	r26, r14
    2818:	d3 96       	adiw	r26, 0x33	; 51
    281a:	ed 91       	ld	r30, X+
    281c:	fc 91       	ld	r31, X
    281e:	d4 97       	sbiw	r26, 0x34	; 52
    2820:	80 81       	ld	r24, Z
    2822:	dd 96       	adiw	r26, 0x3d	; 61
    2824:	9c 91       	ld	r25, X
    2826:	89 2b       	or	r24, r25
    2828:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:700
}
    282a:	28 96       	adiw	r28, 0x08	; 8
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	ff 90       	pop	r15
    2840:	ef 90       	pop	r14
    2842:	df 90       	pop	r13
    2844:	cf 90       	pop	r12
    2846:	bf 90       	pop	r11
    2848:	af 90       	pop	r10
    284a:	9f 90       	pop	r9
    284c:	8f 90       	pop	r8
    284e:	7f 90       	pop	r7
    2850:	6f 90       	pop	r6
    2852:	5f 90       	pop	r5
    2854:	4f 90       	pop	r4
    2856:	3f 90       	pop	r3
    2858:	2f 90       	pop	r2
    285a:	08 95       	ret
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:614
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    285c:	80 89       	ldd	r24, Z+16	; 0x10
    285e:	91 89       	ldd	r25, Z+17	; 0x11
    2860:	a9 01       	movw	r20, r18
    2862:	40 95       	com	r20
    2864:	50 95       	com	r21
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:615
			      x2 = WIDTH  - 1 - t;
    2866:	4c 01       	movw	r8, r24
    2868:	86 1a       	sub	r8, r22
    286a:	97 0a       	sbc	r9, r23
    286c:	b1 e0       	ldi	r27, 0x01	; 1
    286e:	8b 1a       	sub	r8, r27
    2870:	91 08       	sbc	r9, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:617
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    2872:	22 89       	ldd	r18, Z+18	; 0x12
    2874:	33 89       	ldd	r19, Z+19	; 0x13
    2876:	b8 01       	movw	r22, r16
    2878:	60 95       	com	r22
    287a:	70 95       	com	r23
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:618
			      y2 = HEIGHT - 1 - t;
    287c:	86 01       	movw	r16, r12
    287e:	00 95       	com	r16
    2880:	10 95       	com	r17
    2882:	02 0f       	add	r16, r18
    2884:	13 1f       	adc	r17, r19
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:620
			      x  = x2;
			      y  = y2;
    2886:	28 01       	movw	r4, r16
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:619
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
			      y2 = HEIGHT - 1 - t;
			      x  = x2;
    2888:	34 01       	movw	r6, r8
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:617
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
			      x2 = WIDTH  - 1 - t;
			      t  = y1;
			      y1 = HEIGHT - 1 - y2;
    288a:	6b 01       	movw	r12, r22
    288c:	c2 0e       	add	r12, r18
    288e:	d3 1e       	adc	r13, r19
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:614
			      x  = x2;
			      y  = y1;
		      	  break;
		     case 2:
			      t  = x1;
			      x1 = WIDTH  - 1 - x2;
    2890:	5a 01       	movw	r10, r20
    2892:	e9 ce       	rjmp	.-558    	; 0x2666 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x98>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:625
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
    2894:	82 89       	ldd	r24, Z+18	; 0x12
    2896:	93 89       	ldd	r25, Z+19	; 0x13
    2898:	20 95       	com	r18
    289a:	30 95       	com	r19
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:627
			      x2 = y2;
			      y2 = HEIGHT - 1 - t;
    289c:	2c 01       	movw	r4, r24
    289e:	46 1a       	sub	r4, r22
    28a0:	57 0a       	sbc	r5, r23
    28a2:	b1 e0       	ldi	r27, 0x01	; 1
    28a4:	4b 1a       	sub	r4, r27
    28a6:	51 08       	sbc	r5, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:628
			      x  = x1;
    28a8:	3a 01       	movw	r6, r20
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:626
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
			      y1 = HEIGHT - 1 - x2;
			      x2 = y2;
    28aa:	48 01       	movw	r8, r16
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:627
			      y2 = HEIGHT - 1 - t;
    28ac:	82 01       	movw	r16, r4
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:624
			      x  = x2;
			      y  = y2;
			      break;
		     case 3:
			      t  = x1;
			      x1 = y1;
    28ae:	56 01       	movw	r10, r12
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:625
			      y1 = HEIGHT - 1 - x2;
    28b0:	69 01       	movw	r12, r18
    28b2:	c8 0e       	add	r12, r24
    28b4:	d9 1e       	adc	r13, r25
    28b6:	d9 ce       	rjmp	.-590    	; 0x266a <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x9c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:639
    writeCmdData16(ILI932X_VER_START_AD, y1);
    writeCmdData16(ILI932X_VER_END_AD, y2);
    writeCmdData16(ILI932X_GRAM_HOR_AD, x ); // Set address counter to top left
    writeCmdData16(ILI932X_GRAM_VER_AD, y );
 	} 
	else if(lcd_driver == ID_7575)
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	91 05       	cpc	r25, r1
    28bc:	09 f0       	breq	.+2      	; 0x28c0 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x2f2>
    28be:	d9 c0       	rjmp	.+434    	; 0x2a72 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4a4>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:641
	{
		writeCmdData8(HX8347G_COLADDRSTART_HI,x1>>8);
    28c0:	05 a8       	ldd	r0, Z+53	; 0x35
    28c2:	f6 a9       	ldd	r31, Z+54	; 0x36
    28c4:	e0 2d       	mov	r30, r0
    28c6:	80 81       	ld	r24, Z
    28c8:	37 01       	movw	r6, r14
    28ca:	b3 e4       	ldi	r27, 0x43	; 67
    28cc:	6b 0e       	add	r6, r27
    28ce:	71 1c       	adc	r7, r1
    28d0:	d3 01       	movw	r26, r6
    28d2:	9c 91       	ld	r25, X
    28d4:	89 23       	and	r24, r25
    28d6:	80 83       	st	Z, r24
    28d8:	62 e0       	ldi	r22, 0x02	; 2
    28da:	c7 01       	movw	r24, r14
    28dc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    28e0:	d7 01       	movw	r26, r14
    28e2:	d5 96       	adiw	r26, 0x35	; 53
    28e4:	ed 91       	ld	r30, X+
    28e6:	fc 91       	ld	r31, X
    28e8:	d6 97       	sbiw	r26, 0x36	; 54
    28ea:	80 81       	ld	r24, Z
    28ec:	de 96       	adiw	r26, 0x3e	; 62
    28ee:	9c 91       	ld	r25, X
    28f0:	89 2b       	or	r24, r25
    28f2:	80 83       	st	Z, r24
    28f4:	6b 2d       	mov	r22, r11
    28f6:	c7 01       	movw	r24, r14
    28f8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:642
		writeCmdData8(HX8347G_COLADDRSTART_LO,x1);
    28fc:	d7 01       	movw	r26, r14
    28fe:	d5 96       	adiw	r26, 0x35	; 53
    2900:	ed 91       	ld	r30, X+
    2902:	fc 91       	ld	r31, X
    2904:	80 81       	ld	r24, Z
    2906:	d3 01       	movw	r26, r6
    2908:	9c 91       	ld	r25, X
    290a:	89 23       	and	r24, r25
    290c:	80 83       	st	Z, r24
    290e:	63 e0       	ldi	r22, 0x03	; 3
    2910:	c7 01       	movw	r24, r14
    2912:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2916:	d7 01       	movw	r26, r14
    2918:	d5 96       	adiw	r26, 0x35	; 53
    291a:	ed 91       	ld	r30, X+
    291c:	fc 91       	ld	r31, X
    291e:	d6 97       	sbiw	r26, 0x36	; 54
    2920:	80 81       	ld	r24, Z
    2922:	de 96       	adiw	r26, 0x3e	; 62
    2924:	9c 91       	ld	r25, X
    2926:	89 2b       	or	r24, r25
    2928:	80 83       	st	Z, r24
    292a:	6a 2d       	mov	r22, r10
    292c:	c7 01       	movw	r24, r14
    292e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:643
		writeCmdData8(HX8347G_ROWADDRSTART_HI,y1>>8);
    2932:	d7 01       	movw	r26, r14
    2934:	d5 96       	adiw	r26, 0x35	; 53
    2936:	ed 91       	ld	r30, X+
    2938:	fc 91       	ld	r31, X
    293a:	80 81       	ld	r24, Z
    293c:	d3 01       	movw	r26, r6
    293e:	9c 91       	ld	r25, X
    2940:	89 23       	and	r24, r25
    2942:	80 83       	st	Z, r24
    2944:	66 e0       	ldi	r22, 0x06	; 6
    2946:	c7 01       	movw	r24, r14
    2948:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    294c:	d7 01       	movw	r26, r14
    294e:	d5 96       	adiw	r26, 0x35	; 53
    2950:	ed 91       	ld	r30, X+
    2952:	fc 91       	ld	r31, X
    2954:	d6 97       	sbiw	r26, 0x36	; 54
    2956:	80 81       	ld	r24, Z
    2958:	de 96       	adiw	r26, 0x3e	; 62
    295a:	9c 91       	ld	r25, X
    295c:	89 2b       	or	r24, r25
    295e:	80 83       	st	Z, r24
    2960:	6d 2d       	mov	r22, r13
    2962:	c7 01       	movw	r24, r14
    2964:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:644
		writeCmdData8(HX8347G_ROWADDRSTART_LO,y1);
    2968:	d7 01       	movw	r26, r14
    296a:	d5 96       	adiw	r26, 0x35	; 53
    296c:	ed 91       	ld	r30, X+
    296e:	fc 91       	ld	r31, X
    2970:	80 81       	ld	r24, Z
    2972:	d3 01       	movw	r26, r6
    2974:	9c 91       	ld	r25, X
    2976:	89 23       	and	r24, r25
    2978:	80 83       	st	Z, r24
    297a:	67 e0       	ldi	r22, 0x07	; 7
    297c:	c7 01       	movw	r24, r14
    297e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2982:	d7 01       	movw	r26, r14
    2984:	d5 96       	adiw	r26, 0x35	; 53
    2986:	ed 91       	ld	r30, X+
    2988:	fc 91       	ld	r31, X
    298a:	d6 97       	sbiw	r26, 0x36	; 54
    298c:	80 81       	ld	r24, Z
    298e:	de 96       	adiw	r26, 0x3e	; 62
    2990:	9c 91       	ld	r25, X
    2992:	89 2b       	or	r24, r25
    2994:	80 83       	st	Z, r24
    2996:	6c 2d       	mov	r22, r12
    2998:	c7 01       	movw	r24, r14
    299a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:645
		writeCmdData8(HX8347G_COLADDREND_HI,x2>>8);
    299e:	d7 01       	movw	r26, r14
    29a0:	d5 96       	adiw	r26, 0x35	; 53
    29a2:	ed 91       	ld	r30, X+
    29a4:	fc 91       	ld	r31, X
    29a6:	80 81       	ld	r24, Z
    29a8:	d3 01       	movw	r26, r6
    29aa:	9c 91       	ld	r25, X
    29ac:	89 23       	and	r24, r25
    29ae:	80 83       	st	Z, r24
    29b0:	64 e0       	ldi	r22, 0x04	; 4
    29b2:	c7 01       	movw	r24, r14
    29b4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    29b8:	d7 01       	movw	r26, r14
    29ba:	d5 96       	adiw	r26, 0x35	; 53
    29bc:	ed 91       	ld	r30, X+
    29be:	fc 91       	ld	r31, X
    29c0:	d6 97       	sbiw	r26, 0x36	; 54
    29c2:	80 81       	ld	r24, Z
    29c4:	de 96       	adiw	r26, 0x3e	; 62
    29c6:	9c 91       	ld	r25, X
    29c8:	89 2b       	or	r24, r25
    29ca:	80 83       	st	Z, r24
    29cc:	69 2d       	mov	r22, r9
    29ce:	c7 01       	movw	r24, r14
    29d0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:646
		writeCmdData8(HX8347G_COLADDREND_LO,x2);
    29d4:	d7 01       	movw	r26, r14
    29d6:	d5 96       	adiw	r26, 0x35	; 53
    29d8:	ed 91       	ld	r30, X+
    29da:	fc 91       	ld	r31, X
    29dc:	80 81       	ld	r24, Z
    29de:	d3 01       	movw	r26, r6
    29e0:	9c 91       	ld	r25, X
    29e2:	89 23       	and	r24, r25
    29e4:	80 83       	st	Z, r24
    29e6:	65 e0       	ldi	r22, 0x05	; 5
    29e8:	c7 01       	movw	r24, r14
    29ea:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    29ee:	d7 01       	movw	r26, r14
    29f0:	d5 96       	adiw	r26, 0x35	; 53
    29f2:	ed 91       	ld	r30, X+
    29f4:	fc 91       	ld	r31, X
    29f6:	d6 97       	sbiw	r26, 0x36	; 54
    29f8:	80 81       	ld	r24, Z
    29fa:	de 96       	adiw	r26, 0x3e	; 62
    29fc:	9c 91       	ld	r25, X
    29fe:	89 2b       	or	r24, r25
    2a00:	80 83       	st	Z, r24
    2a02:	68 2d       	mov	r22, r8
    2a04:	c7 01       	movw	r24, r14
    2a06:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:647
		writeCmdData8(HX8347G_ROWADDREND_HI,y2>>8);
    2a0a:	d7 01       	movw	r26, r14
    2a0c:	d5 96       	adiw	r26, 0x35	; 53
    2a0e:	ed 91       	ld	r30, X+
    2a10:	fc 91       	ld	r31, X
    2a12:	80 81       	ld	r24, Z
    2a14:	d3 01       	movw	r26, r6
    2a16:	9c 91       	ld	r25, X
    2a18:	89 23       	and	r24, r25
    2a1a:	80 83       	st	Z, r24
    2a1c:	68 e0       	ldi	r22, 0x08	; 8
    2a1e:	c7 01       	movw	r24, r14
    2a20:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2a24:	d7 01       	movw	r26, r14
    2a26:	d5 96       	adiw	r26, 0x35	; 53
    2a28:	ed 91       	ld	r30, X+
    2a2a:	fc 91       	ld	r31, X
    2a2c:	d6 97       	sbiw	r26, 0x36	; 54
    2a2e:	80 81       	ld	r24, Z
    2a30:	de 96       	adiw	r26, 0x3e	; 62
    2a32:	9c 91       	ld	r25, X
    2a34:	89 2b       	or	r24, r25
    2a36:	80 83       	st	Z, r24
    2a38:	61 2f       	mov	r22, r17
    2a3a:	c7 01       	movw	r24, r14
    2a3c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:648
		writeCmdData8(HX8347G_ROWADDREND_LO,y2);
    2a40:	d7 01       	movw	r26, r14
    2a42:	d5 96       	adiw	r26, 0x35	; 53
    2a44:	ed 91       	ld	r30, X+
    2a46:	fc 91       	ld	r31, X
    2a48:	80 81       	ld	r24, Z
    2a4a:	d3 01       	movw	r26, r6
    2a4c:	9c 91       	ld	r25, X
    2a4e:	89 23       	and	r24, r25
    2a50:	80 83       	st	Z, r24
    2a52:	69 e0       	ldi	r22, 0x09	; 9
    2a54:	c7 01       	movw	r24, r14
    2a56:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2a5a:	d7 01       	movw	r26, r14
    2a5c:	d5 96       	adiw	r26, 0x35	; 53
    2a5e:	ed 91       	ld	r30, X+
    2a60:	fc 91       	ld	r31, X
    2a62:	d6 97       	sbiw	r26, 0x36	; 54
    2a64:	80 81       	ld	r24, Z
    2a66:	de 96       	adiw	r26, 0x3e	; 62
    2a68:	9c 91       	ld	r25, X
    2a6a:	89 2b       	or	r24, r25
    2a6c:	80 83       	st	Z, r24
    2a6e:	60 2f       	mov	r22, r16
    2a70:	cf ce       	rjmp	.-610    	; 0x2810 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x242>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:650
	}
	else if(lcd_driver == ID_1283A)
    2a72:	87 30       	cpi	r24, 0x07	; 7
    2a74:	91 05       	cpc	r25, r1
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4ac>
    2a78:	ac c0       	rjmp	.+344    	; 0x2bd2 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x604>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:653
	{
		int16_t t1,t2;
		switch(rotation)
    2a7a:	80 8d       	ldd	r24, Z+24	; 0x18
    2a7c:	91 8d       	ldd	r25, Z+25	; 0x19
    2a7e:	81 30       	cpi	r24, 0x01	; 1
    2a80:	91 05       	cpc	r25, r1
    2a82:	31 f0       	breq	.+12     	; 0x2a90 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4c2>
    2a84:	58 f0       	brcs	.+22     	; 0x2a9c <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4ce>
    2a86:	82 30       	cpi	r24, 0x02	; 2
    2a88:	91 05       	cpc	r25, r1
    2a8a:	41 f0       	breq	.+16     	; 0x2a9c <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4ce>
    2a8c:	03 97       	sbiw	r24, 0x03	; 3
    2a8e:	a1 f4       	brne	.+40     	; 0x2ab8 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4ea>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:666
				y1=t1+2;
				y2=t2+2;
				break;				
			case 1:
			case 3:			
				y1=y1+2;
    2a90:	22 e0       	ldi	r18, 0x02	; 2
    2a92:	c2 0e       	add	r12, r18
    2a94:	d1 1c       	adc	r13, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:667
				y2=y2+2;
    2a96:	0e 5f       	subi	r16, 0xFE	; 254
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	0e c0       	rjmp	.+28     	; 0x2ab8 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4ea>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:659
		{
			case 0:
			case 2:
				t1=x1;
				t2=x2;
				x1=y1+2;
    2a9c:	c6 01       	movw	r24, r12
    2a9e:	02 96       	adiw	r24, 0x02	; 2
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:660
				x2=y2+2;
    2aa0:	98 01       	movw	r18, r16
    2aa2:	2e 5f       	subi	r18, 0xFE	; 254
    2aa4:	3f 4f       	sbci	r19, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:661
				y1=t1+2;
    2aa6:	65 01       	movw	r12, r10
    2aa8:	f2 e0       	ldi	r31, 0x02	; 2
    2aaa:	cf 0e       	add	r12, r31
    2aac:	d1 1c       	adc	r13, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:662
				y2=t2+2;
    2aae:	84 01       	movw	r16, r8
    2ab0:	0e 5f       	subi	r16, 0xFE	; 254
    2ab2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:660
			case 0:
			case 2:
				t1=x1;
				t2=x2;
				x1=y1+2;
				x2=y2+2;
    2ab4:	49 01       	movw	r8, r18
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:659
		{
			case 0:
			case 2:
				t1=x1;
				t2=x2;
				x1=y1+2;
    2ab6:	5c 01       	movw	r10, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:670
			case 3:			
				y1=y1+2;
				y2=y2+2;
				break;
		}
		writeCmd8(XC);
    2ab8:	d7 01       	movw	r26, r14
    2aba:	d5 96       	adiw	r26, 0x35	; 53
    2abc:	ed 91       	ld	r30, X+
    2abe:	fc 91       	ld	r31, X
    2ac0:	80 81       	ld	r24, Z
    2ac2:	37 01       	movw	r6, r14
    2ac4:	b3 e4       	ldi	r27, 0x43	; 67
    2ac6:	6b 0e       	add	r6, r27
    2ac8:	71 1c       	adc	r7, r1
    2aca:	d3 01       	movw	r26, r6
    2acc:	9c 91       	ld	r25, X
    2ace:	89 23       	and	r24, r25
    2ad0:	80 83       	st	Z, r24
    2ad2:	f7 01       	movw	r30, r14
    2ad4:	67 8d       	ldd	r22, Z+31	; 0x1f
    2ad6:	c7 01       	movw	r24, r14
    2ad8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:671
		writeData8(x2);
    2adc:	d7 01       	movw	r26, r14
    2ade:	d5 96       	adiw	r26, 0x35	; 53
    2ae0:	ed 91       	ld	r30, X+
    2ae2:	fc 91       	ld	r31, X
    2ae4:	d6 97       	sbiw	r26, 0x36	; 54
    2ae6:	80 81       	ld	r24, Z
    2ae8:	de 96       	adiw	r26, 0x3e	; 62
    2aea:	9c 91       	ld	r25, X
    2aec:	89 2b       	or	r24, r25
    2aee:	80 83       	st	Z, r24
    2af0:	68 2d       	mov	r22, r8
    2af2:	c7 01       	movw	r24, r14
    2af4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:672
		writeData8(x1);
    2af8:	d7 01       	movw	r26, r14
    2afa:	d5 96       	adiw	r26, 0x35	; 53
    2afc:	ed 91       	ld	r30, X+
    2afe:	fc 91       	ld	r31, X
    2b00:	d6 97       	sbiw	r26, 0x36	; 54
    2b02:	80 81       	ld	r24, Z
    2b04:	de 96       	adiw	r26, 0x3e	; 62
    2b06:	9c 91       	ld	r25, X
    2b08:	89 2b       	or	r24, r25
    2b0a:	80 83       	st	Z, r24
    2b0c:	6a 2d       	mov	r22, r10
    2b0e:	c7 01       	movw	r24, r14
    2b10:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:673
		writeCmd8(YC);
    2b14:	d7 01       	movw	r26, r14
    2b16:	d5 96       	adiw	r26, 0x35	; 53
    2b18:	ed 91       	ld	r30, X+
    2b1a:	fc 91       	ld	r31, X
    2b1c:	80 81       	ld	r24, Z
    2b1e:	d3 01       	movw	r26, r6
    2b20:	9c 91       	ld	r25, X
    2b22:	89 23       	and	r24, r25
    2b24:	80 83       	st	Z, r24
    2b26:	f7 01       	movw	r30, r14
    2b28:	61 a1       	ldd	r22, Z+33	; 0x21
    2b2a:	c7 01       	movw	r24, r14
    2b2c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:674
		writeData8(y2);
    2b30:	d7 01       	movw	r26, r14
    2b32:	d5 96       	adiw	r26, 0x35	; 53
    2b34:	ed 91       	ld	r30, X+
    2b36:	fc 91       	ld	r31, X
    2b38:	d6 97       	sbiw	r26, 0x36	; 54
    2b3a:	80 81       	ld	r24, Z
    2b3c:	de 96       	adiw	r26, 0x3e	; 62
    2b3e:	9c 91       	ld	r25, X
    2b40:	89 2b       	or	r24, r25
    2b42:	80 83       	st	Z, r24
    2b44:	60 2f       	mov	r22, r16
    2b46:	c7 01       	movw	r24, r14
    2b48:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:675
		writeData8(y1);
    2b4c:	d7 01       	movw	r26, r14
    2b4e:	d5 96       	adiw	r26, 0x35	; 53
    2b50:	ed 91       	ld	r30, X+
    2b52:	fc 91       	ld	r31, X
    2b54:	d6 97       	sbiw	r26, 0x36	; 54
    2b56:	80 81       	ld	r24, Z
    2b58:	de 96       	adiw	r26, 0x3e	; 62
    2b5a:	9c 91       	ld	r25, X
    2b5c:	89 2b       	or	r24, r25
    2b5e:	80 83       	st	Z, r24
    2b60:	6c 2d       	mov	r22, r12
    2b62:	c7 01       	movw	r24, r14
    2b64:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:676
		writeCmd8(0x21);
    2b68:	d7 01       	movw	r26, r14
    2b6a:	d5 96       	adiw	r26, 0x35	; 53
    2b6c:	ed 91       	ld	r30, X+
    2b6e:	fc 91       	ld	r31, X
    2b70:	80 81       	ld	r24, Z
    2b72:	d3 01       	movw	r26, r6
    2b74:	9c 91       	ld	r25, X
    2b76:	89 23       	and	r24, r25
    2b78:	80 83       	st	Z, r24
    2b7a:	61 e2       	ldi	r22, 0x21	; 33
    2b7c:	c7 01       	movw	r24, r14
    2b7e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:677
		writeData8(x1);
    2b82:	d7 01       	movw	r26, r14
    2b84:	d5 96       	adiw	r26, 0x35	; 53
    2b86:	ed 91       	ld	r30, X+
    2b88:	fc 91       	ld	r31, X
    2b8a:	d6 97       	sbiw	r26, 0x36	; 54
    2b8c:	80 81       	ld	r24, Z
    2b8e:	de 96       	adiw	r26, 0x3e	; 62
    2b90:	9c 91       	ld	r25, X
    2b92:	89 2b       	or	r24, r25
    2b94:	80 83       	st	Z, r24
    2b96:	6a 2d       	mov	r22, r10
    2b98:	c7 01       	movw	r24, r14
    2b9a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:678
		writeData8(y1);
    2b9e:	d7 01       	movw	r26, r14
    2ba0:	d5 96       	adiw	r26, 0x35	; 53
    2ba2:	ed 91       	ld	r30, X+
    2ba4:	fc 91       	ld	r31, X
    2ba6:	d6 97       	sbiw	r26, 0x36	; 54
    2ba8:	80 81       	ld	r24, Z
    2baa:	de 96       	adiw	r26, 0x3e	; 62
    2bac:	9c 91       	ld	r25, X
    2bae:	89 2b       	or	r24, r25
    2bb0:	80 83       	st	Z, r24
    2bb2:	6c 2d       	mov	r22, r12
    2bb4:	c7 01       	movw	r24, r14
    2bb6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:679
		writeCmd8(CC);
    2bba:	d7 01       	movw	r26, r14
    2bbc:	d5 96       	adiw	r26, 0x35	; 53
    2bbe:	ed 91       	ld	r30, X+
    2bc0:	fc 91       	ld	r31, X
    2bc2:	80 81       	ld	r24, Z
    2bc4:	d3 01       	movw	r26, r6
    2bc6:	9c 91       	ld	r25, X
    2bc8:	89 23       	and	r24, r25
    2bca:	80 83       	st	Z, r24
    2bcc:	f7 01       	movw	r30, r14
    2bce:	63 a1       	ldd	r22, Z+35	; 0x23
    2bd0:	1f ce       	rjmp	.-962    	; 0x2810 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x242>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:681
	}
	else if(lcd_driver == ID_1106)
    2bd2:	88 30       	cpi	r24, 0x08	; 8
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x60c>
    2bd8:	28 ce       	rjmp	.-944    	; 0x282a <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x25c>
    2bda:	67 8d       	ldd	r22, Z+31	; 0x1f
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:685
	{
		return;
	}
	else if(lcd_driver == ID_7735_128)
    2bdc:	09 97       	sbiw	r24, 0x09	; 9
    2bde:	69 f5       	brne	.+90     	; 0x2c3a <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x66c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:687
	{
		uint8_t x_buf[] = {(x1+xoffset)>>8,(x1+xoffset)&0xFF,(x2+xoffset)>>8,(x2+xoffset)&0xFF};
    2be0:	86 85       	ldd	r24, Z+14	; 0x0e
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	a9 01       	movw	r20, r18
    2be8:	4a 0d       	add	r20, r10
    2bea:	5b 1d       	adc	r21, r11
    2bec:	5d 83       	std	Y+5, r21	; 0x05
    2bee:	a8 0e       	add	r10, r24
    2bf0:	ae 82       	std	Y+6, r10	; 0x06
    2bf2:	28 0d       	add	r18, r8
    2bf4:	39 1d       	adc	r19, r9
    2bf6:	3f 83       	std	Y+7, r19	; 0x07
    2bf8:	88 0e       	add	r8, r24
    2bfa:	88 86       	std	Y+8, r8	; 0x08
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:688
		uint8_t y_buf[] = {(y1+yoffset)>>8,(y1+yoffset)&0xFF,(y2+yoffset)>>8,(y2+yoffset)&0xFF};
    2bfc:	87 85       	ldd	r24, Z+15	; 0x0f
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	a9 01       	movw	r20, r18
    2c04:	4c 0d       	add	r20, r12
    2c06:	5d 1d       	adc	r21, r13
    2c08:	59 83       	std	Y+1, r21	; 0x01
    2c0a:	c8 0e       	add	r12, r24
    2c0c:	ca 82       	std	Y+2, r12	; 0x02
    2c0e:	20 0f       	add	r18, r16
    2c10:	31 1f       	adc	r19, r17
    2c12:	3b 83       	std	Y+3, r19	; 0x03
    2c14:	08 0f       	add	r16, r24
    2c16:	0c 83       	std	Y+4, r16	; 0x04
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:689
		Push_Command(XC, x_buf, 4);
    2c18:	24 e0       	ldi	r18, 0x04	; 4
    2c1a:	ae 01       	movw	r20, r28
    2c1c:	4b 5f       	subi	r20, 0xFB	; 251
    2c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c20:	c7 01       	movw	r24, r14
    2c22:	0e 94 2a 12 	call	0x2454	; 0x2454 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:690
		Push_Command(YC, y_buf, 4);
    2c26:	24 e0       	ldi	r18, 0x04	; 4
    2c28:	ae 01       	movw	r20, r28
    2c2a:	4f 5f       	subi	r20, 0xFF	; 255
    2c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c2e:	f7 01       	movw	r30, r14
    2c30:	61 a1       	ldd	r22, Z+33	; 0x21
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:697
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF};
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF};
		Push_Command(XC, x_buf, 4);
		Push_Command(YC, y_buf, 4);
    2c32:	c7 01       	movw	r24, r14
    2c34:	0e 94 2a 12 	call	0x2454	; 0x2454 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
    2c38:	ee cd       	rjmp	.-1060   	; 0x2816 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x248>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:694
		Push_Command(XC, x_buf, 4);
		Push_Command(YC, y_buf, 4);
	}
	else
	{
		uint8_t x_buf[] = {x1>>8,x1&0xFF,x2>>8,x2&0xFF};
    2c3a:	bd 82       	std	Y+5, r11	; 0x05
    2c3c:	ae 82       	std	Y+6, r10	; 0x06
    2c3e:	9f 82       	std	Y+7, r9	; 0x07
    2c40:	28 87       	std	Y+8, r18	; 0x08
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:695
		uint8_t y_buf[] = {y1>>8,y1&0xFF,y2>>8,y2&0xFF};
    2c42:	d9 82       	std	Y+1, r13	; 0x01
    2c44:	4a 83       	std	Y+2, r20	; 0x02
    2c46:	1b 83       	std	Y+3, r17	; 0x03
    2c48:	0c 83       	std	Y+4, r16	; 0x04
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:696
		Push_Command(XC, x_buf, 4);
    2c4a:	24 e0       	ldi	r18, 0x04	; 4
    2c4c:	ae 01       	movw	r20, r28
    2c4e:	4b 5f       	subi	r20, 0xFB	; 251
    2c50:	5f 4f       	sbci	r21, 0xFF	; 255
    2c52:	c7 01       	movw	r24, r14
    2c54:	0e 94 2a 12 	call	0x2454	; 0x2454 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:697
		Push_Command(YC, y_buf, 4);
    2c58:	24 e0       	ldi	r18, 0x04	; 4
    2c5a:	ae 01       	movw	r20, r28
    2c5c:	4f 5f       	subi	r20, 0xFF	; 255
    2c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c60:	d7 01       	movw	r26, r14
    2c62:	91 96       	adiw	r26, 0x21	; 33
    2c64:	6c 91       	ld	r22, X
    2c66:	e5 cf       	rjmp	.-54     	; 0x2c32 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x664>

00002c68 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]>:
_ZN11LCDWIKI_SPI12Set_RotationEh.constprop.48():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1120
{
	return height;
}

//set clockwise rotation
void LCDWIKI_SPI::Set_Rotation(uint8_t r)
    2c68:	cf 92       	push	r12
    2c6a:	df 92       	push	r13
    2c6c:	ef 92       	push	r14
    2c6e:	ff 92       	push	r15
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x12>
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x14>
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x16>
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1122
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    2c82:	28 2f       	mov	r18, r24
    2c84:	23 70       	andi	r18, 0x03	; 3
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	30 93 0e 03 	sts	0x030E, r19	; 0x80030e <display+0x19>
    2c8c:	20 93 0d 03 	sts	0x030D, r18	; 0x80030d <display+0x18>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1123
    width = (rotation & 1) ? HEIGHT : WIDTH;
    2c90:	28 2f       	mov	r18, r24
    2c92:	21 70       	andi	r18, 0x01	; 1
    2c94:	80 ff       	sbrs	r24, 0
    2c96:	a7 c0       	rjmp	.+334    	; 0x2de6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x17e>
    2c98:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <display+0x12>
    2c9c:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <display+0x13>
    2ca0:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <display+0x15>
    2ca4:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <display+0x14>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1124
    height = (rotation & 1) ? WIDTH : HEIGHT;
    2ca8:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <display+0x10>
    2cac:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <display+0x11>
    2cb0:	21 11       	cpse	r18, r1
    2cb2:	04 c0       	rjmp	.+8      	; 0x2cbc <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x54>
    2cb4:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <display+0x12>
    2cb8:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <display+0x13>
    2cbc:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <display+0x17>
    2cc0:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <display+0x16>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1125
	CS_ACTIVE;
    2cc4:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <display+0x33>
    2cc8:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <display+0x34>
    2ccc:	80 81       	ld	r24, Z
    2cce:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <display+0x42>
    2cd2:	89 23       	and	r24, r25
    2cd4:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1126
	if(lcd_driver == ID_932X)
    2cd6:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <display+0x1a>
    2cda:	30 91 10 03 	lds	r19, 0x0310	; 0x800310 <display+0x1b>
    2cde:	21 15       	cp	r18, r1
    2ce0:	31 05       	cpc	r19, r1
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x7e>
    2ce4:	90 c0       	rjmp	.+288    	; 0x2e06 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x19e>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1129
	{
		uint16_t val;
		switch(rotation) 
    2ce6:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <display+0x18>
    2cea:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <display+0x19>
    2cee:	81 30       	cpi	r24, 0x01	; 1
    2cf0:	91 05       	cpc	r25, r1
    2cf2:	09 f4       	brne	.+2      	; 0x2cf6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x8e>
    2cf4:	7d c0       	rjmp	.+250    	; 0x2df0 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x188>
    2cf6:	08 f4       	brcc	.+2      	; 0x2cfa <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x92>
    2cf8:	83 c0       	rjmp	.+262    	; 0x2e00 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x198>
    2cfa:	82 30       	cpi	r24, 0x02	; 2
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x9a>
    2d00:	7a c0       	rjmp	.+244    	; 0x2df6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x18e>
    2d02:	03 97       	sbiw	r24, 0x03	; 3
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xa0>
    2d06:	79 c0       	rjmp	.+242    	; 0x2dfa <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x192>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1144
				break;
		 	case 3: 
				val = 0x1018; //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
    2d08:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2d0c:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2d10:	80 81       	ld	r24, Z
    2d12:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <display+0x43>
    2d16:	89 23       	and	r24, r25
    2d18:	80 83       	st	Z, r24
    2d1a:	60 91 21 03 	lds	r22, 0x0321	; 0x800321 <display+0x2c>
    2d1e:	85 ef       	ldi	r24, 0xF5	; 245
    2d20:	92 e0       	ldi	r25, 0x02	; 2
    2d22:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2d26:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <display+0x2b>
    2d2a:	85 ef       	ldi	r24, 0xF5	; 245
    2d2c:	92 e0       	ldi	r25, 0x02	; 2
    2d2e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2d32:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2d36:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2d3a:	80 81       	ld	r24, Z
    2d3c:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    2d40:	89 2b       	or	r24, r25
    2d42:	80 83       	st	Z, r24
    2d44:	60 e1       	ldi	r22, 0x10	; 16
    2d46:	85 ef       	ldi	r24, 0xF5	; 245
    2d48:	92 e0       	ldi	r25, 0x02	; 2
    2d4a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2d4e:	6c 2d       	mov	r22, r12
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1272
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree 
		     	break;
		 }
		 writeCmdData8(MD, val); 
    2d50:	85 ef       	ldi	r24, 0xF5	; 245
    2d52:	92 e0       	ldi	r25, 0x02	; 2
    2d54:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1274
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
    2d58:	00 91 0b 03 	lds	r16, 0x030B	; 0x80030b <display+0x16>
    2d5c:	10 91 0c 03 	lds	r17, 0x030C	; 0x80030c <display+0x17>
    2d60:	01 50       	subi	r16, 0x01	; 1
    2d62:	11 09       	sbc	r17, r1
    2d64:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <display+0x14>
    2d68:	30 91 0a 03 	lds	r19, 0x030A	; 0x80030a <display+0x15>
    2d6c:	21 50       	subi	r18, 0x01	; 1
    2d6e:	31 09       	sbc	r19, r1
    2d70:	50 e0       	ldi	r21, 0x00	; 0
    2d72:	40 e0       	ldi	r20, 0x00	; 0
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	85 ef       	ldi	r24, 0xF5	; 245
    2d7a:	92 e0       	ldi	r25, 0x02	; 2
    2d7c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)>
Vert_Scroll():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1051
void LCDWIKI_SPI::Vert_Scroll(int16_t top, int16_t scrollines, int16_t offset)
{
    int16_t bfa;
    int16_t vsp;
    int16_t sea = top;
	if(lcd_driver == ID_7735_128)
    2d80:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <display+0x1a>
    2d84:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <display+0x1b>
    2d88:	89 30       	cpi	r24, 0x09	; 9
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x128>
    2d8e:	2b c2       	rjmp	.+1110   	; 0x31e6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x57e>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1069
    if (offset < 0)
    {
        vsp += scrollines;          //keep in unsigned range
    }
    sea = top + scrollines - 1;
	if(lcd_driver == ID_932X)
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x12e>
    2d94:	e9 c1       	rjmp	.+978    	; 0x3168 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x500>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1071
	{
		Write_Cmd_Data(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
    2d96:	63 e0       	ldi	r22, 0x03	; 3
    2d98:	70 e0       	ldi	r23, 0x00	; 0
    2d9a:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <display+0x27>
    2d9e:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <display+0x28>
    2da2:	0e 94 49 09 	call	0x1292	; 0x1292 <LCDWIKI_SPI::Write_Cmd_Data(unsigned int, unsigned int) [clone .constprop.50]>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1072
        Write_Cmd_Data(SC2, vsp);        //VL#
    2da6:	70 e0       	ldi	r23, 0x00	; 0
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <display+0x29>
    2dae:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <display+0x2a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1076
	}
	else if(lcd_driver == ID_1283A)
	{
		Write_Cmd_Data(SC1,vsp);
    2db2:	0e 94 49 09 	call	0x1292	; 0x1292 <LCDWIKI_SPI::Write_Cmd_Data(unsigned int, unsigned int) [clone .constprop.50]>
_ZN11LCDWIKI_SPI12Set_RotationEh.constprop.48():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1276
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
	CS_IDLE;
    2db6:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <display+0x33>
    2dba:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <display+0x34>
    2dbe:	80 81       	ld	r24, Z
    2dc0:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <display+0x3d>
    2dc4:	89 2b       	or	r24, r25
    2dc6:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1277
}
    2dc8:	26 96       	adiw	r28, 0x06	; 6
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	cd bf       	out	0x3d, r28	; 61
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	ff 90       	pop	r15
    2dde:	ef 90       	pop	r14
    2de0:	df 90       	pop	r13
    2de2:	cf 90       	pop	r12
    2de4:	08 95       	ret
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1123

//set clockwise rotation
void LCDWIKI_SPI::Set_Rotation(uint8_t r)
{
    rotation = r & 3;           // just perform the operation ourselves on the protected variables
    width = (rotation & 1) ? HEIGHT : WIDTH;
    2de6:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <display+0x10>
    2dea:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <display+0x11>
    2dee:	58 cf       	rjmp	.-336    	; 0x2ca0 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x38>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1135
		{
			case 0: 
				val = 0x1030; //0 degree 
				break;
		 	case 1: 
				val = 0x1028; //90 degree 
    2df0:	08 e2       	ldi	r16, 0x28	; 40
    2df2:	c0 2e       	mov	r12, r16
    2df4:	89 cf       	rjmp	.-238    	; 0x2d08 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xa0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1138
				break;
		 	case 2: 
				val = 0x1000; //180 degree 
    2df6:	c1 2c       	mov	r12, r1
    2df8:	87 cf       	rjmp	.-242    	; 0x2d08 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xa0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1141
				break;
		 	case 3: 
				val = 0x1018; //270 degree 
    2dfa:	18 e1       	ldi	r17, 0x18	; 24
    2dfc:	c1 2e       	mov	r12, r17
    2dfe:	84 cf       	rjmp	.-248    	; 0x2d08 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xa0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1132
	{
		uint16_t val;
		switch(rotation) 
		{
			case 0: 
				val = 0x1030; //0 degree 
    2e00:	b0 e3       	ldi	r27, 0x30	; 48
    2e02:	cb 2e       	mov	r12, r27
    2e04:	81 cf       	rjmp	.-254    	; 0x2d08 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xa0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1146
				val = 0x1018; //270 degree 
				break;
		}
		writeCmdData16(MD, val); 
	}
	else if(lcd_driver == ID_7735)
    2e06:	26 30       	cpi	r18, 0x06	; 6
    2e08:	31 05       	cpc	r19, r1
    2e0a:	91 f5       	brne	.+100    	; 0x2e70 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x208>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1149
	{
		uint8_t val;
		switch(rotation)
    2e0c:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <display+0x18>
    2e10:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <display+0x19>
    2e14:	81 30       	cpi	r24, 0x01	; 1
    2e16:	91 05       	cpc	r25, r1
    2e18:	01 f1       	breq	.+64     	; 0x2e5a <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x1f2>
    2e1a:	38 f1       	brcs	.+78     	; 0x2e6a <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x202>
    2e1c:	82 30       	cpi	r24, 0x02	; 2
    2e1e:	91 05       	cpc	r25, r1
    2e20:	f9 f0       	breq	.+62     	; 0x2e60 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x1f8>
    2e22:	03 97       	sbiw	r24, 0x03	; 3
    2e24:	f9 f0       	breq	.+62     	; 0x2e64 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x1fc>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1164
				break;
		 	case 3: 
				val = 0x60; //270 degree 
				break;			
		}
		writeCmdData8(MD, val);
    2e26:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2e2a:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2e2e:	80 81       	ld	r24, Z
    2e30:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <display+0x43>
    2e34:	89 23       	and	r24, r25
    2e36:	80 83       	st	Z, r24
    2e38:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <display+0x2b>
    2e3c:	85 ef       	ldi	r24, 0xF5	; 245
    2e3e:	92 e0       	ldi	r25, 0x02	; 2
    2e40:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2e44:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2e48:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2e4c:	80 81       	ld	r24, Z
    2e4e:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    2e52:	89 2b       	or	r24, r25
    2e54:	80 83       	st	Z, r24
    2e56:	6d 2d       	mov	r22, r13
    2e58:	7b cf       	rjmp	.-266    	; 0x2d50 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xe8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1155
		{
			case 0: 
				val = 0xD0; //0 degree
				break;
		 	case 1: 
				val = 0xA0; //90 degree 
    2e5a:	a0 ea       	ldi	r26, 0xA0	; 160
    2e5c:	da 2e       	mov	r13, r26
    2e5e:	e3 cf       	rjmp	.-58     	; 0x2e26 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x1be>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1158
				break;
		 	case 2: 
				val = 0x00; //180 degree 
    2e60:	d1 2c       	mov	r13, r1
    2e62:	e1 cf       	rjmp	.-62     	; 0x2e26 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x1be>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1161
				break;
		 	case 3: 
				val = 0x60; //270 degree 
    2e64:	f0 e6       	ldi	r31, 0x60	; 96
    2e66:	df 2e       	mov	r13, r31
    2e68:	de cf       	rjmp	.-68     	; 0x2e26 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x1be>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1152
	{
		uint8_t val;
		switch(rotation)
		{
			case 0: 
				val = 0xD0; //0 degree
    2e6a:	e0 ed       	ldi	r30, 0xD0	; 208
    2e6c:	de 2e       	mov	r13, r30
    2e6e:	db cf       	rjmp	.-74     	; 0x2e26 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x1be>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1166
				val = 0x60; //270 degree 
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_7735_128)
    2e70:	29 30       	cpi	r18, 0x09	; 9
    2e72:	31 05       	cpc	r19, r1
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x210>
    2e76:	4b c0       	rjmp	.+150    	; 0x2f0e <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x2a6>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1169
	{
		uint8_t val;
		switch(rotation)
    2e78:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <display+0x18>
    2e7c:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <display+0x19>
    2e80:	81 30       	cpi	r24, 0x01	; 1
    2e82:	91 05       	cpc	r25, r1
    2e84:	49 f1       	breq	.+82     	; 0x2ed8 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x270>
    2e86:	f8 f0       	brcs	.+62     	; 0x2ec6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x25e>
    2e88:	82 30       	cpi	r24, 0x02	; 2
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	71 f1       	breq	.+92     	; 0x2eea <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x282>
    2e8e:	03 97       	sbiw	r24, 0x03	; 3
    2e90:	a9 f1       	breq	.+106    	; 0x2efc <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x294>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1192
				val = 0x68; //270 degree 
				xoffset = 1;
				yoffset = 2;
				break;			
		}
		writeCmdData8(MD, val);
    2e92:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2e96:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2e9a:	80 81       	ld	r24, Z
    2e9c:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <display+0x43>
    2ea0:	89 23       	and	r24, r25
    2ea2:	80 83       	st	Z, r24
    2ea4:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <display+0x2b>
    2ea8:	85 ef       	ldi	r24, 0xF5	; 245
    2eaa:	92 e0       	ldi	r25, 0x02	; 2
    2eac:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2eb0:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2eb4:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2eb8:	80 81       	ld	r24, Z
    2eba:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    2ebe:	89 2b       	or	r24, r25
    2ec0:	80 83       	st	Z, r24
    2ec2:	6e 2d       	mov	r22, r14
    2ec4:	45 cf       	rjmp	.-374    	; 0x2d50 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xe8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1173
		uint8_t val;
		switch(rotation)
		{
			case 0: 
				val = 0xD8; //0 degree
				xoffset = 2;
    2ec6:	82 e0       	ldi	r24, 0x02	; 2
    2ec8:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <display+0xe>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1174
				yoffset = 3;
    2ecc:	83 e0       	ldi	r24, 0x03	; 3
    2ece:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <display+0xf>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1172
	{
		uint8_t val;
		switch(rotation)
		{
			case 0: 
				val = 0xD8; //0 degree
    2ed2:	78 ed       	ldi	r23, 0xD8	; 216
    2ed4:	e7 2e       	mov	r14, r23
    2ed6:	dd cf       	rjmp	.-70     	; 0x2e92 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x22a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1178
				xoffset = 2;
				yoffset = 3;
				break;
		 	case 1: 
				val = 0xA8; //90 degree 
				xoffset = 3;
    2ed8:	83 e0       	ldi	r24, 0x03	; 3
    2eda:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <display+0xe>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1179
				yoffset = 2;
    2ede:	82 e0       	ldi	r24, 0x02	; 2
    2ee0:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <display+0xf>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1177
				val = 0xD8; //0 degree
				xoffset = 2;
				yoffset = 3;
				break;
		 	case 1: 
				val = 0xA8; //90 degree 
    2ee4:	68 ea       	ldi	r22, 0xA8	; 168
    2ee6:	e6 2e       	mov	r14, r22
    2ee8:	d4 cf       	rjmp	.-88     	; 0x2e92 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x22a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1183
				xoffset = 3;
				yoffset = 2;
				break;
		 	case 2: 
				val = 0x08; //180 degree 
				xoffset = 2;
    2eea:	82 e0       	ldi	r24, 0x02	; 2
    2eec:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <display+0xe>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1184
				yoffset = 1;
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <display+0xf>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1182
				val = 0xA8; //90 degree 
				xoffset = 3;
				yoffset = 2;
				break;
		 	case 2: 
				val = 0x08; //180 degree 
    2ef6:	58 e0       	ldi	r21, 0x08	; 8
    2ef8:	e5 2e       	mov	r14, r21
    2efa:	cb cf       	rjmp	.-106    	; 0x2e92 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x22a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1188
				xoffset = 2;
				yoffset = 1;
				break;
		 	case 3: 
				val = 0x68; //270 degree 
				xoffset = 1;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <display+0xe>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1189
				yoffset = 2;
    2f02:	82 e0       	ldi	r24, 0x02	; 2
    2f04:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <display+0xf>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1187
				val = 0x08; //180 degree 
				xoffset = 2;
				yoffset = 1;
				break;
		 	case 3: 
				val = 0x68; //270 degree 
    2f08:	48 e6       	ldi	r20, 0x68	; 104
    2f0a:	e4 2e       	mov	r14, r20
    2f0c:	c2 cf       	rjmp	.-124    	; 0x2e92 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x22a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1194
				yoffset = 2;
				break;			
		}
		writeCmdData8(MD, val);
	}
	else if(lcd_driver == ID_1283A)
    2f0e:	27 30       	cpi	r18, 0x07	; 7
    2f10:	31 05       	cpc	r19, r1
    2f12:	09 f0       	breq	.+2      	; 0x2f16 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x2ae>
    2f14:	a2 c0       	rjmp	.+324    	; 0x305a <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x3f2>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1196
	{
		switch(rotation)
    2f16:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <display+0x18>
    2f1a:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <display+0x19>
    2f1e:	81 30       	cpi	r24, 0x01	; 1
    2f20:	91 05       	cpc	r25, r1
    2f22:	49 f0       	breq	.+18     	; 0x2f36 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x2ce>
    2f24:	08 f4       	brcc	.+2      	; 0x2f28 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x2c0>
    2f26:	50 c0       	rjmp	.+160    	; 0x2fc8 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x360>
    2f28:	82 30       	cpi	r24, 0x02	; 2
    2f2a:	91 05       	cpc	r25, r1
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x2c8>
    2f2e:	4c c0       	rjmp	.+152    	; 0x2fc8 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x360>
    2f30:	03 97       	sbiw	r24, 0x03	; 3
    2f32:	09 f0       	breq	.+2      	; 0x2f36 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x2ce>
    2f34:	11 cf       	rjmp	.-478    	; 0x2d58 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xf0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1205
				writeCmdData16(0x01, 0x2183);
				writeCmdData16(0x03, 0x6830);
				break; 				
			case 1:
			case 3:
				writeCmdData16(0x01, 0x2283);
    2f36:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2f3a:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2f3e:	80 81       	ld	r24, Z
    2f40:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <display+0x43>
    2f44:	89 23       	and	r24, r25
    2f46:	80 83       	st	Z, r24
    2f48:	60 e0       	ldi	r22, 0x00	; 0
    2f4a:	85 ef       	ldi	r24, 0xF5	; 245
    2f4c:	92 e0       	ldi	r25, 0x02	; 2
    2f4e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2f52:	61 e0       	ldi	r22, 0x01	; 1
    2f54:	85 ef       	ldi	r24, 0xF5	; 245
    2f56:	92 e0       	ldi	r25, 0x02	; 2
    2f58:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2f5c:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2f60:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2f64:	80 81       	ld	r24, Z
    2f66:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    2f6a:	89 2b       	or	r24, r25
    2f6c:	80 83       	st	Z, r24
    2f6e:	62 e2       	ldi	r22, 0x22	; 34
    2f70:	85 ef       	ldi	r24, 0xF5	; 245
    2f72:	92 e0       	ldi	r25, 0x02	; 2
    2f74:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2f78:	63 e8       	ldi	r22, 0x83	; 131
    2f7a:	85 ef       	ldi	r24, 0xF5	; 245
    2f7c:	92 e0       	ldi	r25, 0x02	; 2
    2f7e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1206
				writeCmdData16(0x03, 0x6838);
    2f82:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2f86:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2f8a:	80 81       	ld	r24, Z
    2f8c:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <display+0x43>
    2f90:	89 23       	and	r24, r25
    2f92:	80 83       	st	Z, r24
    2f94:	60 e0       	ldi	r22, 0x00	; 0
    2f96:	85 ef       	ldi	r24, 0xF5	; 245
    2f98:	92 e0       	ldi	r25, 0x02	; 2
    2f9a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2f9e:	63 e0       	ldi	r22, 0x03	; 3
    2fa0:	85 ef       	ldi	r24, 0xF5	; 245
    2fa2:	92 e0       	ldi	r25, 0x02	; 2
    2fa4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2fa8:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2fac:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2fb0:	80 81       	ld	r24, Z
    2fb2:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    2fb6:	89 2b       	or	r24, r25
    2fb8:	80 83       	st	Z, r24
    2fba:	68 e6       	ldi	r22, 0x68	; 104
    2fbc:	85 ef       	ldi	r24, 0xF5	; 245
    2fbe:	92 e0       	ldi	r25, 0x02	; 2
    2fc0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2fc4:	68 e3       	ldi	r22, 0x38	; 56
    2fc6:	c4 ce       	rjmp	.-632    	; 0x2d50 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xe8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1200
	{
		switch(rotation)
		{
			case 0:
			case 2:
				writeCmdData16(0x01, 0x2183);
    2fc8:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2fcc:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2fd0:	80 81       	ld	r24, Z
    2fd2:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <display+0x43>
    2fd6:	89 23       	and	r24, r25
    2fd8:	80 83       	st	Z, r24
    2fda:	60 e0       	ldi	r22, 0x00	; 0
    2fdc:	85 ef       	ldi	r24, 0xF5	; 245
    2fde:	92 e0       	ldi	r25, 0x02	; 2
    2fe0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2fe4:	61 e0       	ldi	r22, 0x01	; 1
    2fe6:	85 ef       	ldi	r24, 0xF5	; 245
    2fe8:	92 e0       	ldi	r25, 0x02	; 2
    2fea:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2fee:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    2ff2:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    2ff6:	80 81       	ld	r24, Z
    2ff8:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    2ffc:	89 2b       	or	r24, r25
    2ffe:	80 83       	st	Z, r24
    3000:	61 e2       	ldi	r22, 0x21	; 33
    3002:	85 ef       	ldi	r24, 0xF5	; 245
    3004:	92 e0       	ldi	r25, 0x02	; 2
    3006:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    300a:	63 e8       	ldi	r22, 0x83	; 131
    300c:	85 ef       	ldi	r24, 0xF5	; 245
    300e:	92 e0       	ldi	r25, 0x02	; 2
    3010:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1201
				writeCmdData16(0x03, 0x6830);
    3014:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    3018:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    301c:	80 81       	ld	r24, Z
    301e:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <display+0x43>
    3022:	89 23       	and	r24, r25
    3024:	80 83       	st	Z, r24
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	85 ef       	ldi	r24, 0xF5	; 245
    302a:	92 e0       	ldi	r25, 0x02	; 2
    302c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3030:	63 e0       	ldi	r22, 0x03	; 3
    3032:	85 ef       	ldi	r24, 0xF5	; 245
    3034:	92 e0       	ldi	r25, 0x02	; 2
    3036:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    303a:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    303e:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    3042:	80 81       	ld	r24, Z
    3044:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    3048:	89 2b       	or	r24, r25
    304a:	80 83       	st	Z, r24
    304c:	68 e6       	ldi	r22, 0x68	; 104
    304e:	85 ef       	ldi	r24, 0xF5	; 245
    3050:	92 e0       	ldi	r25, 0x02	; 2
    3052:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3056:	60 e3       	ldi	r22, 0x30	; 48
    3058:	7b ce       	rjmp	.-778    	; 0x2d50 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xe8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1210
				writeCmdData16(0x01, 0x2283);
				writeCmdData16(0x03, 0x6838);
			 	break;
		}
	}
	else if(lcd_driver == ID_1106)
    305a:	28 30       	cpi	r18, 0x08	; 8
    305c:	31 05       	cpc	r19, r1
    305e:	09 f4       	brne	.+2      	; 0x3062 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x3fa>
    3060:	b3 ce       	rjmp	.-666    	; 0x2dc8 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x160>
    3062:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <display+0x18>
    3066:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <display+0x19>
    306a:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    306e:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    3072:	40 91 38 03 	lds	r20, 0x0338	; 0x800338 <display+0x43>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1214
	{
		return;
	}
	else if(lcd_driver == ID_9486)
    3076:	25 30       	cpi	r18, 0x05	; 5
    3078:	31 05       	cpc	r19, r1
    307a:	49 f5       	brne	.+82     	; 0x30ce <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x466>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1217
	{
		uint8_t val;
		switch (rotation) 
    307c:	81 30       	cpi	r24, 0x01	; 1
    307e:	91 05       	cpc	r25, r1
    3080:	d1 f0       	breq	.+52     	; 0x30b6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x44e>
    3082:	10 f1       	brcs	.+68     	; 0x30c8 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x460>
    3084:	82 30       	cpi	r24, 0x02	; 2
    3086:	91 05       	cpc	r25, r1
    3088:	c9 f0       	breq	.+50     	; 0x30bc <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x454>
    308a:	03 97       	sbiw	r24, 0x03	; 3
    308c:	d1 f0       	breq	.+52     	; 0x30c2 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x45a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1232
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
    308e:	80 81       	ld	r24, Z
    3090:	84 23       	and	r24, r20
    3092:	80 83       	st	Z, r24
    3094:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <display+0x2b>
    3098:	85 ef       	ldi	r24, 0xF5	; 245
    309a:	92 e0       	ldi	r25, 0x02	; 2
    309c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    30a0:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    30a4:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    30a8:	80 81       	ld	r24, Z
    30aa:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    30ae:	89 2b       	or	r24, r25
    30b0:	80 83       	st	Z, r24
    30b2:	6f 2d       	mov	r22, r15
    30b4:	4d ce       	rjmp	.-870    	; 0x2d50 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xe8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1223
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MV | ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR ; //90 degree 
    30b6:	38 e7       	ldi	r19, 0x78	; 120
    30b8:	f3 2e       	mov	r15, r19
    30ba:	e9 cf       	rjmp	.-46     	; 0x308e <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x426>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1226
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MX |ILI9341_MADCTL_BGR; //180 degree 
    30bc:	28 ec       	ldi	r18, 0xC8	; 200
    30be:	f2 2e       	mov	r15, r18
    30c0:	e6 cf       	rjmp	.-52     	; 0x308e <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x426>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1229
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
    30c2:	98 ea       	ldi	r25, 0xA8	; 168
    30c4:	f9 2e       	mov	r15, r25
    30c6:	e3 cf       	rjmp	.-58     	; 0x308e <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x426>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1220
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_BGR; //0 degree 
    30c8:	88 e0       	ldi	r24, 0x08	; 8
    30ca:	f8 2e       	mov	r15, r24
    30cc:	e0 cf       	rjmp	.-64     	; 0x308e <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x426>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1234
		     	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
	else if(lcd_driver == ID_9488)
    30ce:	2a 30       	cpi	r18, 0x0A	; 10
    30d0:	31 05       	cpc	r19, r1
    30d2:	29 f5       	brne	.+74     	; 0x311e <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4b6>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1237
	{
		uint8_t val;
		switch (rotation) 
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	91 05       	cpc	r25, r1
    30d8:	d1 f0       	breq	.+52     	; 0x310e <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4a6>
    30da:	f8 f0       	brcs	.+62     	; 0x311a <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4b2>
    30dc:	82 30       	cpi	r24, 0x02	; 2
    30de:	91 05       	cpc	r25, r1
    30e0:	c1 f0       	breq	.+48     	; 0x3112 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4aa>
    30e2:	03 97       	sbiw	r24, 0x03	; 3
    30e4:	c1 f0       	breq	.+48     	; 0x3116 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4ae>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1252
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
		     	break;
		 }
		 writeCmdData8(MD, val); 
    30e6:	80 81       	ld	r24, Z
    30e8:	84 23       	and	r24, r20
    30ea:	80 83       	st	Z, r24
    30ec:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <display+0x2b>
    30f0:	85 ef       	ldi	r24, 0xF5	; 245
    30f2:	92 e0       	ldi	r25, 0x02	; 2
    30f4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    30f8:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    30fc:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    3100:	80 81       	ld	r24, Z
    3102:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    3106:	89 2b       	or	r24, r25
    3108:	80 83       	st	Z, r24
    310a:	60 2f       	mov	r22, r16
    310c:	21 ce       	rjmp	.-958    	; 0x2d50 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xe8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1243
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
		     	break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //90 degree 
    310e:	08 ea       	ldi	r16, 0xA8	; 168
    3110:	ea cf       	rjmp	.-44     	; 0x30e6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x47e>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1246
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_ML | ILI9341_MADCTL_BGR; //180 degree 
    3112:	08 e1       	ldi	r16, 0x18	; 24
    3114:	e8 cf       	rjmp	.-48     	; 0x30e6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x47e>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1249
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree
    3116:	08 e7       	ldi	r16, 0x78	; 120
    3118:	e6 cf       	rjmp	.-52     	; 0x30e6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x47e>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1240
	{
		uint8_t val;
		switch (rotation) 
		{			
			case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR ; //0 degree 
    311a:	08 ec       	ldi	r16, 0xC8	; 200
    311c:	e4 cf       	rjmp	.-56     	; 0x30e6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x47e>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1257
		 writeCmdData8(MD, val); 
	}
	else
	{
		uint8_t val;
		switch (rotation) 
    311e:	81 30       	cpi	r24, 0x01	; 1
    3120:	91 05       	cpc	r25, r1
    3122:	d1 f0       	breq	.+52     	; 0x3158 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4f0>
    3124:	f8 f0       	brcs	.+62     	; 0x3164 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4fc>
    3126:	82 30       	cpi	r24, 0x02	; 2
    3128:	91 05       	cpc	r25, r1
    312a:	c1 f0       	breq	.+48     	; 0x315c <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4f4>
    312c:	03 97       	sbiw	r24, 0x03	; 3
    312e:	c1 f0       	breq	.+48     	; 0x3160 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4f8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1272
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree 
		     	break;
		 }
		 writeCmdData8(MD, val); 
    3130:	80 81       	ld	r24, Z
    3132:	84 23       	and	r24, r20
    3134:	80 83       	st	Z, r24
    3136:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <display+0x2b>
    313a:	85 ef       	ldi	r24, 0xF5	; 245
    313c:	92 e0       	ldi	r25, 0x02	; 2
    313e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3142:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    3146:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    314a:	80 81       	ld	r24, Z
    314c:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    3150:	89 2b       	or	r24, r25
    3152:	80 83       	st	Z, r24
    3154:	61 2f       	mov	r22, r17
    3156:	fc cd       	rjmp	.-1032   	; 0x2d50 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0xe8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1263
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
				break;
		   	case 1:
		     	val = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //90 degree 
    3158:	18 e2       	ldi	r17, 0x28	; 40
    315a:	ea cf       	rjmp	.-44     	; 0x3130 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4c8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1266
		     	break;
		 	case 2:
		    	val = ILI9341_MADCTL_MY | ILI9341_MADCTL_ML |ILI9341_MADCTL_BGR; //180 degree 
    315c:	18 e9       	ldi	r17, 0x98	; 152
    315e:	e8 cf       	rjmp	.-48     	; 0x3130 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4c8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1269
		    	break;
		   	case 3:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY| ILI9341_MADCTL_ML | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR; //270 degree 
    3160:	18 ef       	ldi	r17, 0xF8	; 248
    3162:	e6 cf       	rjmp	.-52     	; 0x3130 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4c8>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1260
	{
		uint8_t val;
		switch (rotation) 
		{
		   	case 0:
		     	val = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR; //0 degree 
    3164:	18 e4       	ldi	r17, 0x48	; 72
    3166:	e4 cf       	rjmp	.-56     	; 0x3130 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x4c8>
Vert_Scroll():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1074
	if(lcd_driver == ID_932X)
	{
		Write_Cmd_Data(SC1, (1 << 1) | 0x1);        //!NDL, VLE, REV
        Write_Cmd_Data(SC2, vsp);        //VL#
	}
	else if(lcd_driver == ID_1283A)
    3168:	87 30       	cpi	r24, 0x07	; 7
    316a:	91 05       	cpc	r25, r1
    316c:	39 f4       	brne	.+14     	; 0x317c <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x514>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1076
	{
		Write_Cmd_Data(SC1,vsp);
    316e:	70 e0       	ldi	r23, 0x00	; 0
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <display+0x27>
    3176:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <display+0x28>
    317a:	1b ce       	rjmp	.-970    	; 0x2db2 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x14a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1078
	}
	else if(lcd_driver == ID_1106)
    317c:	08 97       	sbiw	r24, 0x08	; 8
    317e:	09 f4       	brne	.+2      	; 0x3182 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x51a>
    3180:	1a ce       	rjmp	.-972    	; 0x2db6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x14e>
_ZN11LCDWIKI_SPI12Set_RotationEh.constprop.48():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1057
	{
		bfa = HEIGHT - top - scrollines+4; 
	}
	else
	{
		bfa = HEIGHT - top - scrollines; 
    3182:	80 e0       	ldi	r24, 0x00	; 0
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1275
		     	break;
		 }
		 writeCmdData8(MD, val); 
	}
 	Set_Addr_Window(0, 0, width - 1, height - 1);
	Vert_Scroll(0, HEIGHT, 0);
    3184:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <display+0x12>
    3188:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <display+0x13>
Vert_Scroll():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1085
		return;
	}
	else
	{
  		uint8_t d[6];           // for multi-byte parameters
  		d[0] = top >> 8;        //TFA
    318c:	19 82       	std	Y+1, r1	; 0x01
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1086
  		d[1] = top;
    318e:	1a 82       	std	Y+2, r1	; 0x02
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1087
  		d[2] = scrollines >> 8; //VSA
    3190:	2b 83       	std	Y+3, r18	; 0x03
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1088
  		d[3] = scrollines;
    3192:	9c 83       	std	Y+4, r25	; 0x04
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1089
  		d[4] = bfa >> 8;        //BFA
    3194:	1d 82       	std	Y+5, r1	; 0x05
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1090
  		d[5] = bfa;
    3196:	8e 83       	std	Y+6, r24	; 0x06
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1091
		Push_Command(SC1, d, 6);
    3198:	26 e0       	ldi	r18, 0x06	; 6
    319a:	ae 01       	movw	r20, r28
    319c:	4f 5f       	subi	r20, 0xFF	; 255
    319e:	5f 4f       	sbci	r21, 0xFF	; 255
    31a0:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <display+0x27>
    31a4:	85 ef       	ldi	r24, 0xF5	; 245
    31a6:	92 e0       	ldi	r25, 0x02	; 2
    31a8:	0e 94 2a 12 	call	0x2454	; 0x2454 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1092
		d[0] = vsp >> 8;        //VSP
    31ac:	19 82       	std	Y+1, r1	; 0x01
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1093
  		d[1] = vsp;
    31ae:	1a 82       	std	Y+2, r1	; 0x02
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1094
		Push_Command(SC2, d, 2);
    31b0:	22 e0       	ldi	r18, 0x02	; 2
    31b2:	ae 01       	movw	r20, r28
    31b4:	4f 5f       	subi	r20, 0xFF	; 255
    31b6:	5f 4f       	sbci	r21, 0xFF	; 255
    31b8:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <display+0x29>
    31bc:	85 ef       	ldi	r24, 0xF5	; 245
    31be:	92 e0       	ldi	r25, 0x02	; 2
    31c0:	0e 94 2a 12 	call	0x2454	; 0x2454 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1095
		if(lcd_driver == ID_7575)
    31c4:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <display+0x1a>
    31c8:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <display+0x1b>
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	69 f4       	brne	.+26     	; 0x31ea <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x582>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1097
		{
			d[0] = (offset != 0) ? 0x08:0;
    31d0:	19 82       	std	Y+1, r1	; 0x01
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1098
			Push_Command(0x01, d, 1);
    31d2:	21 e0       	ldi	r18, 0x01	; 1
    31d4:	ae 01       	movw	r20, r28
    31d6:	4f 5f       	subi	r20, 0xFF	; 255
    31d8:	5f 4f       	sbci	r21, 0xFF	; 255
    31da:	61 e0       	ldi	r22, 0x01	; 1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1102
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
    31dc:	85 ef       	ldi	r24, 0xF5	; 245
    31de:	92 e0       	ldi	r25, 0x02	; 2
    31e0:	0e 94 2a 12 	call	0x2454	; 0x2454 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
    31e4:	e8 cd       	rjmp	.-1072   	; 0x2db6 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x14e>
_ZN11LCDWIKI_SPI12Set_RotationEh.constprop.48():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1053
    int16_t bfa;
    int16_t vsp;
    int16_t sea = top;
	if(lcd_driver == ID_7735_128)
	{
		bfa = HEIGHT - top - scrollines+4; 
    31e6:	84 e0       	ldi	r24, 0x04	; 4
    31e8:	cd cf       	rjmp	.-102    	; 0x3184 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x51c>
Vert_Scroll():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1102
			d[0] = (offset != 0) ? 0x08:0;
			Push_Command(0x01, d, 1);
		}
		else if (offset == 0) 
		{
			Push_Command(0x13, NULL, 0);
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	50 e0       	ldi	r21, 0x00	; 0
    31ee:	40 e0       	ldi	r20, 0x00	; 0
    31f0:	63 e1       	ldi	r22, 0x13	; 19
    31f2:	f4 cf       	rjmp	.-24     	; 0x31dc <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]+0x574>

000031f4 <convert()>:
_Z7convertv():
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:39
    print_binary(SPI.transfer(device_address << 6 | 0b00000011));
  }
  write(ADC_CS_PIN, HIGH);
}

int16_t convert() {
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:40
  write(ADC_CS_PIN, LOW);
    31f8:	60 e0       	ldi	r22, 0x00	; 0
    31fa:	85 e1       	ldi	r24, 0x15	; 21
    31fc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:41
  SPI.transfer(DEVICE_ADDRESS << 6 | 0b00101000);
    3200:	88 e6       	ldi	r24, 0x68	; 104
    3202:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:42
  write(ADC_CS_PIN, HIGH);
    3206:	61 e0       	ldi	r22, 0x01	; 1
    3208:	85 e1       	ldi	r24, 0x15	; 21
    320a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:55
  // while(1) {
  //   uint8_t irq = read(ADC_IRQ_PIN);
  //   Serial.print(irq);
  //   if(!irq) break;
  // }
  while(read(ADC_IRQ_PIN) == 0x01); // wait for IRQ pin to go low which signals a finished conversion
    320e:	4b 99       	sbic	0x09, 3	; 9
    3210:	fe cf       	rjmp	.-4      	; 0x320e <convert()+0x1a>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:59
  // Serial.println();
  // write(ADC_CS_PIN, HIGH);

  write(ADC_CS_PIN, LOW);
    3212:	60 e0       	ldi	r22, 0x00	; 0
    3214:	85 e1       	ldi	r24, 0x15	; 21
    3216:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:60
  SPI.transfer(DEVICE_ADDRESS << 6 | 0b00000001);
    321a:	81 e4       	ldi	r24, 0x41	; 65
    321c:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:61
  char val_msb = SPI.transfer(0x00);
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
    3226:	d8 2f       	mov	r29, r24
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:62
  char val_lsb = SPI.transfer(0x00);
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
    322e:	c8 2f       	mov	r28, r24
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:63
  write(ADC_CS_PIN, HIGH);
    3230:	61 e0       	ldi	r22, 0x01	; 1
    3232:	85 e1       	ldi	r24, 0x15	; 21
    3234:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:65
  return (val_msb << 8) | (val_lsb & 0x00FF);
}
    3238:	ce 01       	movw	r24, r28
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	08 95       	ret

00003240 <add_event_listener(void* (*)(unsigned int, void*), unsigned int, unsigned char, void*)>:
_Z18add_event_listenerPFPvjS_EjhS_():
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:21
  uint8_t shift_reg = read_shift_reg();
  return (shift_reg >> 4) & 0b00000111;
}

// register a new event listener to be called when the event specified by event_types (CLICK, LONG_PRESS, MULTI_CLICK) happen to the keys specified by mask
void add_event_listener(event_listener *new_event_listener, uint16_t mask, uint8_t event_types, void *params) {
    3240:	cf 93       	push	r28
    3242:	df 93       	push	r29
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:22
  add_last<struct event_listener_conf>(event_listener_list, {new_event_listener, mask, event_types, params});
    3244:	c0 91 f0 02 	lds	r28, 0x02F0	; 0x8002f0 <event_listener_list>
    3248:	d0 91 f1 02 	lds	r29, 0x02F1	; 0x8002f1 <event_listener_list+0x1>
add_last():
/home/noah/Documents/basteln/ofen_v2/main/list.h:46
}

template <typename T>
void add_last(struct list<T> *list, T data) {
  struct list<T> *last_element = list;
  while(last_element->next) {
    324c:	ef 81       	ldd	r30, Y+7	; 0x07
    324e:	f8 85       	ldd	r31, Y+8	; 0x08
    3250:	30 97       	sbiw	r30, 0x00	; 0
    3252:	99 f4       	brne	.+38     	; 0x327a <add_event_listener(void* (*)(unsigned int, void*), unsigned int, unsigned char, void*)+0x3a>
/home/noah/Documents/basteln/ofen_v2/main/list.h:49
    last_element = last_element->next;
  }
  last_element->data = data;
    3254:	99 83       	std	Y+1, r25	; 0x01
    3256:	88 83       	st	Y, r24
    3258:	7b 83       	std	Y+3, r23	; 0x03
    325a:	6a 83       	std	Y+2, r22	; 0x02
    325c:	4c 83       	std	Y+4, r20	; 0x04
    325e:	3e 83       	std	Y+6, r19	; 0x06
    3260:	2d 83       	std	Y+5, r18	; 0x05
new_helper():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/new.cpp:44
static void * new_helper(std::size_t size) {
  // Even zero-sized allocations should return a unique pointer, but
  // malloc does not guarantee this
  if (size == 0)
    size = 1;
  return malloc(size);
    3262:	89 e0       	ldi	r24, 0x09	; 9
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
new_list():
/home/noah/Documents/basteln/ofen_v2/main/list.h:39

template <typename T>
struct list<T> *new_list() {
  struct list<T> *new_list = new struct list<T>;
  //new_list->data = (T)0;
  new_list->next = 0;
    326a:	fc 01       	movw	r30, r24
    326c:	10 86       	std	Z+8, r1	; 0x08
    326e:	17 82       	std	Z+7, r1	; 0x07
add_last():
/home/noah/Documents/basteln/ofen_v2/main/list.h:50
  struct list<T> *last_element = list;
  while(last_element->next) {
    last_element = last_element->next;
  }
  last_element->data = data;
  last_element->next = new_list<T>();
    3270:	98 87       	std	Y+8, r25	; 0x08
    3272:	8f 83       	std	Y+7, r24	; 0x07
_Z18add_event_listenerPFPvjS_EjhS_():
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:23
}
    3274:	df 91       	pop	r29
    3276:	cf 91       	pop	r28
    3278:	08 95       	ret
add_last():
/home/noah/Documents/basteln/ofen_v2/main/list.h:46
}

template <typename T>
void add_last(struct list<T> *list, T data) {
  struct list<T> *last_element = list;
  while(last_element->next) {
    327a:	ef 01       	movw	r28, r30
    327c:	e7 cf       	rjmp	.-50     	; 0x324c <add_event_listener(void* (*)(unsigned int, void*), unsigned int, unsigned char, void*)+0xc>

0000327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>:
_ZN5Print5writeEPKc.part.2.constprop.67():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    327e:	fc 01       	movw	r30, r24
    3280:	01 90       	ld	r0, Z+
    3282:	00 20       	and	r0, r0
    3284:	e9 f7       	brne	.-6      	; 0x3280 <Print::write(char const*) [clone .part.2] [clone .constprop.67]+0x2>
    3286:	31 97       	sbiw	r30, 0x01	; 1
    3288:	af 01       	movw	r20, r30
    328a:	48 1b       	sub	r20, r24
    328c:	59 0b       	sbc	r21, r25
    328e:	bc 01       	movw	r22, r24
    3290:	83 e5       	ldi	r24, 0x53	; 83
    3292:	92 e0       	ldi	r25, 0x02	; 2
    3294:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <Print::write(unsigned char const*, unsigned int)>

00003298 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.63]>:
_ZN5Print11printNumberEmh.constprop.63():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    3298:	8f 92       	push	r8
    329a:	9f 92       	push	r9
    329c:	af 92       	push	r10
    329e:	bf 92       	push	r11
    32a0:	0f 93       	push	r16
    32a2:	1f 93       	push	r17
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	a1 97       	sbiw	r28, 0x21	; 33
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	f8 94       	cli
    32b2:	de bf       	out	0x3e, r29	; 62
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	cd bf       	out	0x3d, r28	; 61
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    32b8:	19 a2       	std	Y+33, r1	; 0x21
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    32ba:	42 30       	cpi	r20, 0x02	; 2
    32bc:	08 f4       	brcc	.+2      	; 0x32c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.63]+0x28>
    32be:	4a e0       	ldi	r20, 0x0A	; 10
    32c0:	8e 01       	movw	r16, r28
    32c2:	0f 5d       	subi	r16, 0xDF	; 223
    32c4:	1f 4f       	sbci	r17, 0xFF	; 255
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    32c6:	84 2e       	mov	r8, r20
    32c8:	91 2c       	mov	r9, r1
    32ca:	b1 2c       	mov	r11, r1
    32cc:	a1 2c       	mov	r10, r1
    32ce:	a5 01       	movw	r20, r10
    32d0:	94 01       	movw	r18, r8
    32d2:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <__udivmodsi4>
    32d6:	e6 2f       	mov	r30, r22
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
    32d8:	b9 01       	movw	r22, r18
    32da:	ca 01       	movw	r24, r20
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    32dc:	ea 30       	cpi	r30, 0x0A	; 10
    32de:	f4 f4       	brge	.+60     	; 0x331c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.63]+0x84>
    32e0:	e0 5d       	subi	r30, 0xD0	; 208
    32e2:	d8 01       	movw	r26, r16
    32e4:	ee 93       	st	-X, r30
    32e6:	8d 01       	movw	r16, r26
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
    32e8:	23 2b       	or	r18, r19
    32ea:	24 2b       	or	r18, r20
    32ec:	25 2b       	or	r18, r21
    32ee:	79 f7       	brne	.-34     	; 0x32ce <Print::printNumber(unsigned long, unsigned char) [clone .constprop.63]+0x36>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	80 e0       	ldi	r24, 0x00	; 0
write():
    32f4:	10 97       	sbiw	r26, 0x00	; 0
    32f6:	19 f0       	breq	.+6      	; 0x32fe <Print::printNumber(unsigned long, unsigned char) [clone .constprop.63]+0x66>
    32f8:	cd 01       	movw	r24, r26
    32fa:	0e 94 3f 19 	call	0x327e	; 0x327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>
_ZN5Print11printNumberEmh.constprop.63():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    32fe:	a1 96       	adiw	r28, 0x21	; 33
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	df 91       	pop	r29
    330c:	cf 91       	pop	r28
    330e:	1f 91       	pop	r17
    3310:	0f 91       	pop	r16
    3312:	bf 90       	pop	r11
    3314:	af 90       	pop	r10
    3316:	9f 90       	pop	r9
    3318:	8f 90       	pop	r8
    331a:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    331c:	e9 5c       	subi	r30, 0xC9	; 201
    331e:	e1 cf       	rjmp	.-62     	; 0x32e2 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.63]+0x4a>

00003320 <Print::println(long, int) [clone .constprop.59]>:
_ZN5Print7printlnEli.constprop.59():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:173
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(long num, int base)
    3320:	cf 92       	push	r12
    3322:	df 92       	push	r13
    3324:	ef 92       	push	r14
    3326:	ff 92       	push	r15
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	6b 01       	movw	r12, r22
    332e:	7c 01       	movw	r14, r24
print():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    3330:	f7 fe       	sbrs	r15, 7
    3332:	1f c0       	rjmp	.+62     	; 0x3372 <Print::println(long, int) [clone .constprop.59]+0x52>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3334:	6d e2       	ldi	r22, 0x2D	; 45
    3336:	83 e5       	ldi	r24, 0x53	; 83
    3338:	92 e0       	ldi	r25, 0x02	; 2
    333a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <HardwareSerial::write(unsigned char)>
    333e:	ec 01       	movw	r28, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:94
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
    3340:	66 27       	eor	r22, r22
    3342:	77 27       	eor	r23, r23
    3344:	cb 01       	movw	r24, r22
    3346:	6c 19       	sub	r22, r12
    3348:	7d 09       	sbc	r23, r13
    334a:	8e 09       	sbc	r24, r14
    334c:	9f 09       	sbc	r25, r15
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    334e:	4a e0       	ldi	r20, 0x0A	; 10
    3350:	0e 94 4c 19 	call	0x3298	; 0x3298 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.63]>
    3354:	c8 0f       	add	r28, r24
    3356:	d9 1f       	adc	r29, r25
write():
    3358:	85 ed       	ldi	r24, 0xD5	; 213
    335a:	91 e0       	ldi	r25, 0x01	; 1
    335c:	0e 94 3f 19 	call	0x327e	; 0x327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>
_ZN5Print7printlnEli.constprop.59():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3360:	8c 0f       	add	r24, r28
    3362:	9d 1f       	adc	r25, r29
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	ff 90       	pop	r15
    336a:	ef 90       	pop	r14
    336c:	df 90       	pop	r13
    336e:	cf 90       	pop	r12
    3370:	08 95       	ret
print():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3372:	4a e0       	ldi	r20, 0x0A	; 10
    3374:	0e 94 4c 19 	call	0x3298	; 0x3298 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.63]>
    3378:	ec 01       	movw	r28, r24
    337a:	ee cf       	rjmp	.-36     	; 0x3358 <Print::println(long, int) [clone .constprop.59]+0x38>

0000337c <get_voltage(unsigned char) [clone .part.0] [clone .constprop.58]>:
_Z11get_voltageh.part.0.constprop.58():
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:67

float get_voltage(uint8_t channel) {
    337c:	4f 92       	push	r4
    337e:	5f 92       	push	r5
    3380:	6f 92       	push	r6
    3382:	7f 92       	push	r7
    3384:	8f 92       	push	r8
    3386:	9f 92       	push	r9
    3388:	af 92       	push	r10
    338a:	bf 92       	push	r11
    338c:	cf 92       	push	r12
    338e:	df 92       	push	r13
    3390:	ef 92       	push	r14
    3392:	ff 92       	push	r15
select_mux_channel_delay():
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	0e 94 af 08 	call	0x115e	; 0x115e <select_mux_channel_delay(unsigned char, unsigned int) [clone .part.0]>
_Z11get_voltageh.part.0.constprop.58():
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:80

  float voltage = 0;

  select_mux_channel(GND_CH);
  // select_mux_channel(REF_CH);
  min = convert();
    339a:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <convert()>
    339e:	2c 01       	movw	r4, r24
    33a0:	99 0f       	add	r25, r25
    33a2:	66 08       	sbc	r6, r6
    33a4:	77 08       	sbc	r7, r7
select_mux_channel_delay():
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	0e 94 af 08 	call	0x115e	; 0x115e <select_mux_channel_delay(unsigned char, unsigned int) [clone .part.0]>
_Z11get_voltageh.part.0.constprop.58():
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:84
  // min = -346;
  select_mux_channel(REF_CH);
  // select_mux_channel(GND_CH);
  max = convert();
    33ac:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <convert()>
    33b0:	4c 01       	movw	r8, r24
    33b2:	99 0f       	add	r25, r25
    33b4:	aa 08       	sbc	r10, r10
    33b6:	bb 08       	sbc	r11, r11
select_mux_channel_delay():
    33b8:	83 e0       	ldi	r24, 0x03	; 3
    33ba:	0e 94 af 08 	call	0x115e	; 0x115e <select_mux_channel_delay(unsigned char, unsigned int) [clone .part.0]>
_Z11get_voltageh.part.0.constprop.58():
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:88
  // max = 32767;
  // select_mux_channel(channel);
  select_mux_channel(channel); // 2, 3, 6, 7 cause problems
  adc = convert();
    33be:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <convert()>
    33c2:	6c 01       	movw	r12, r24
    33c4:	99 0f       	add	r25, r25
    33c6:	ee 08       	sbc	r14, r14
    33c8:	ff 08       	sbc	r15, r15
write():
    33ca:	88 ed       	ldi	r24, 0xD8	; 216
    33cc:	91 e0       	ldi	r25, 0x01	; 1
    33ce:	0e 94 3f 19 	call	0x327e	; 0x327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>
_Z11get_voltageh.part.0.constprop.58():
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:91
  // adc = 1016;
  Serial.print("min: ");
  Serial.println(min);
    33d2:	c3 01       	movw	r24, r6
    33d4:	b2 01       	movw	r22, r4
    33d6:	0e 94 90 19 	call	0x3320	; 0x3320 <Print::println(long, int) [clone .constprop.59]>
write():
    33da:	8e ed       	ldi	r24, 0xDE	; 222
    33dc:	91 e0       	ldi	r25, 0x01	; 1
    33de:	0e 94 3f 19 	call	0x327e	; 0x327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>
_Z11get_voltageh.part.0.constprop.58():
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:93
  Serial.print("max: ");
  Serial.println(max);
    33e2:	c5 01       	movw	r24, r10
    33e4:	b4 01       	movw	r22, r8
    33e6:	0e 94 90 19 	call	0x3320	; 0x3320 <Print::println(long, int) [clone .constprop.59]>
write():
    33ea:	84 ee       	ldi	r24, 0xE4	; 228
    33ec:	91 e0       	ldi	r25, 0x01	; 1
    33ee:	0e 94 3f 19 	call	0x327e	; 0x327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>
_Z11get_voltageh.part.0.constprop.58():
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:95
  Serial.print("adc: ");
  Serial.println(adc);
    33f2:	c7 01       	movw	r24, r14
    33f4:	b6 01       	movw	r22, r12
    33f6:	0e 94 90 19 	call	0x3320	; 0x3320 <Print::println(long, int) [clone .constprop.59]>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:97

  float slope = U_REF / (max - min);
    33fa:	c5 01       	movw	r24, r10
    33fc:	b4 01       	movw	r22, r8
    33fe:	64 19       	sub	r22, r4
    3400:	75 09       	sbc	r23, r5
    3402:	86 09       	sbc	r24, r6
    3404:	97 09       	sbc	r25, r7
    3406:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__floatsisf>
    340a:	9b 01       	movw	r18, r22
    340c:	ac 01       	movw	r20, r24
    340e:	60 ed       	ldi	r22, 0xD0	; 208
    3410:	73 e8       	ldi	r23, 0x83	; 131
    3412:	85 e5       	ldi	r24, 0x55	; 85
    3414:	9d e3       	ldi	r25, 0x3D	; 61
    3416:	0e 94 bf 32 	call	0x657e	; 0x657e <__divsf3>
    341a:	4b 01       	movw	r8, r22
    341c:	5c 01       	movw	r10, r24
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:98
  voltage = slope * (adc - min);
    341e:	c7 01       	movw	r24, r14
    3420:	b6 01       	movw	r22, r12
    3422:	64 19       	sub	r22, r4
    3424:	75 09       	sbc	r23, r5
    3426:	86 09       	sbc	r24, r6
    3428:	97 09       	sbc	r25, r7
    342a:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__floatsisf>
    342e:	9b 01       	movw	r18, r22
    3430:	ac 01       	movw	r20, r24
    3432:	c5 01       	movw	r24, r10
    3434:	b4 01       	movw	r22, r8
    3436:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulsf3>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:101

  return voltage;
}
    343a:	ff 90       	pop	r15
    343c:	ef 90       	pop	r14
    343e:	df 90       	pop	r13
    3440:	cf 90       	pop	r12
    3442:	bf 90       	pop	r11
    3444:	af 90       	pop	r10
    3446:	9f 90       	pop	r9
    3448:	8f 90       	pop	r8
    344a:	7f 90       	pop	r7
    344c:	6f 90       	pop	r6
    344e:	5f 90       	pop	r5
    3450:	4f 90       	pop	r4
    3452:	08 95       	ret

00003454 <Print::println(char const*) [clone .constprop.17]>:
_ZN5Print7printlnEPKc.constprop.17():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    3454:	cf 93       	push	r28
    3456:	df 93       	push	r29
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.h:53
    3458:	d0 e0       	ldi	r29, 0x00	; 0
    345a:	c0 e0       	ldi	r28, 0x00	; 0
write():
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	19 f0       	breq	.+6      	; 0x3466 <Print::println(char const*) [clone .constprop.17]+0x12>
    3460:	0e 94 3f 19 	call	0x327e	; 0x327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>
    3464:	ec 01       	movw	r28, r24
    3466:	85 ed       	ldi	r24, 0xD5	; 213
    3468:	91 e0       	ldi	r25, 0x01	; 1
    346a:	0e 94 3f 19 	call	0x327e	; 0x327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>
_ZN5Print7printlnEPKc.constprop.17():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
    346e:	8c 0f       	add	r24, r28
    3470:	9d 1f       	adc	r25, r29
    3472:	df 91       	pop	r29
    3474:	cf 91       	pop	r28
    3476:	08 95       	ret

00003478 <Print::printFloat(double, unsigned char) [clone .constprop.10]>:
_ZN5Print10printFloatEdh.constprop.10():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:252
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    3478:	4f 92       	push	r4
    347a:	5f 92       	push	r5
    347c:	6f 92       	push	r6
    347e:	7f 92       	push	r7
    3480:	8f 92       	push	r8
    3482:	9f 92       	push	r9
    3484:	af 92       	push	r10
    3486:	bf 92       	push	r11
    3488:	cf 92       	push	r12
    348a:	df 92       	push	r13
    348c:	ef 92       	push	r14
    348e:	ff 92       	push	r15
    3490:	0f 93       	push	r16
    3492:	1f 93       	push	r17
    3494:	cf 93       	push	r28
    3496:	6b 01       	movw	r12, r22
    3498:	7c 01       	movw	r14, r24
    349a:	74 2e       	mov	r7, r20
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:256
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    349c:	ac 01       	movw	r20, r24
    349e:	9b 01       	movw	r18, r22
    34a0:	0e 94 0c 34 	call	0x6818	; 0x6818 <__unordsf2>
    34a4:	88 23       	and	r24, r24
    34a6:	99 f0       	breq	.+38     	; 0x34ce <Print::printFloat(double, unsigned char) [clone .constprop.10]+0x56>
write():
    34a8:	8a ee       	ldi	r24, 0xEA	; 234
    34aa:	91 e0       	ldi	r25, 0x01	; 1
_ZN5Print10printFloatEdh.constprop.10():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    34ac:	cf 91       	pop	r28
    34ae:	1f 91       	pop	r17
    34b0:	0f 91       	pop	r16
    34b2:	ff 90       	pop	r15
    34b4:	ef 90       	pop	r14
    34b6:	df 90       	pop	r13
    34b8:	cf 90       	pop	r12
    34ba:	bf 90       	pop	r11
    34bc:	af 90       	pop	r10
    34be:	9f 90       	pop	r9
    34c0:	8f 90       	pop	r8
    34c2:	7f 90       	pop	r7
    34c4:	6f 90       	pop	r6
    34c6:	5f 90       	pop	r5
    34c8:	4f 90       	pop	r4
write():
    34ca:	0c 94 3f 19 	jmp	0x327e	; 0x327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>
_ZN5Print10printFloatEdh.constprop.10():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:257
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    34ce:	46 01       	movw	r8, r12
    34d0:	57 01       	movw	r10, r14
    34d2:	e8 94       	clt
    34d4:	b7 f8       	bld	r11, 7
    34d6:	2f ef       	ldi	r18, 0xFF	; 255
    34d8:	3f ef       	ldi	r19, 0xFF	; 255
    34da:	4f e7       	ldi	r20, 0x7F	; 127
    34dc:	5f e7       	ldi	r21, 0x7F	; 127
    34de:	c5 01       	movw	r24, r10
    34e0:	b4 01       	movw	r22, r8
    34e2:	0e 94 0c 34 	call	0x6818	; 0x6818 <__unordsf2>
    34e6:	81 11       	cpse	r24, r1
    34e8:	0d c0       	rjmp	.+26     	; 0x3504 <Print::printFloat(double, unsigned char) [clone .constprop.10]+0x8c>
    34ea:	2f ef       	ldi	r18, 0xFF	; 255
    34ec:	3f ef       	ldi	r19, 0xFF	; 255
    34ee:	4f e7       	ldi	r20, 0x7F	; 127
    34f0:	5f e7       	ldi	r21, 0x7F	; 127
    34f2:	c5 01       	movw	r24, r10
    34f4:	b4 01       	movw	r22, r8
    34f6:	0e 94 dd 30 	call	0x61ba	; 0x61ba <__cmpsf2>
    34fa:	18 16       	cp	r1, r24
    34fc:	1c f4       	brge	.+6      	; 0x3504 <Print::printFloat(double, unsigned char) [clone .constprop.10]+0x8c>
write():
    34fe:	8e ee       	ldi	r24, 0xEE	; 238
    3500:	91 e0       	ldi	r25, 0x01	; 1
    3502:	d4 cf       	rjmp	.-88     	; 0x34ac <Print::printFloat(double, unsigned char) [clone .constprop.10]+0x34>
_ZN5Print10printFloatEdh.constprop.10():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3504:	2f ef       	ldi	r18, 0xFF	; 255
    3506:	3f ef       	ldi	r19, 0xFF	; 255
    3508:	4f e7       	ldi	r20, 0x7F	; 127
    350a:	5f e4       	ldi	r21, 0x4F	; 79
    350c:	c7 01       	movw	r24, r14
    350e:	b6 01       	movw	r22, r12
    3510:	0e 94 67 33 	call	0x66ce	; 0x66ce <__gesf2>
    3514:	18 16       	cp	r1, r24
    3516:	1c f4       	brge	.+6      	; 0x351e <Print::printFloat(double, unsigned char) [clone .constprop.10]+0xa6>
write():
    3518:	82 ef       	ldi	r24, 0xF2	; 242
    351a:	91 e0       	ldi	r25, 0x01	; 1
    351c:	c7 cf       	rjmp	.-114    	; 0x34ac <Print::printFloat(double, unsigned char) [clone .constprop.10]+0x34>
_ZN5Print10printFloatEdh.constprop.10():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:259
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    351e:	2f ef       	ldi	r18, 0xFF	; 255
    3520:	3f ef       	ldi	r19, 0xFF	; 255
    3522:	4f e7       	ldi	r20, 0x7F	; 127
    3524:	5f ec       	ldi	r21, 0xCF	; 207
    3526:	c7 01       	movw	r24, r14
    3528:	b6 01       	movw	r22, r12
    352a:	0e 94 dd 30 	call	0x61ba	; 0x61ba <__cmpsf2>
    352e:	87 fd       	sbrc	r24, 7
    3530:	f3 cf       	rjmp	.-26     	; 0x3518 <Print::printFloat(double, unsigned char) [clone .constprop.10]+0xa0>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	a9 01       	movw	r20, r18
    3538:	c7 01       	movw	r24, r14
    353a:	b6 01       	movw	r22, r12
    353c:	0e 94 dd 30 	call	0x61ba	; 0x61ba <__cmpsf2>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3540:	10 e0       	ldi	r17, 0x00	; 0
    3542:	00 e0       	ldi	r16, 0x00	; 0
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    3544:	87 ff       	sbrs	r24, 7
    3546:	0a c0       	rjmp	.+20     	; 0x355c <Print::printFloat(double, unsigned char) [clone .constprop.10]+0xe4>
print():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    3548:	6d e2       	ldi	r22, 0x2D	; 45
    354a:	83 e5       	ldi	r24, 0x53	; 83
    354c:	92 e0       	ldi	r25, 0x02	; 2
    354e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <HardwareSerial::write(unsigned char)>
    3552:	8c 01       	movw	r16, r24
_ZN5Print10printFloatEdh.constprop.10():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:265
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    3554:	f7 fa       	bst	r15, 7
    3556:	f0 94       	com	r15
    3558:	f7 f8       	bld	r15, 7
    355a:	f0 94       	com	r15
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    355c:	c0 e0       	ldi	r28, 0x00	; 0
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    355e:	60 e0       	ldi	r22, 0x00	; 0
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	9f e3       	ldi	r25, 0x3F	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    3566:	7c 16       	cp	r7, r28
    3568:	41 f0       	breq	.+16     	; 0x357a <Print::printFloat(double, unsigned char) [clone .constprop.10]+0x102>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	40 e2       	ldi	r20, 0x20	; 32
    3570:	51 e4       	ldi	r21, 0x41	; 65
    3572:	0e 94 bf 32 	call	0x657e	; 0x657e <__divsf3>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3576:	cf 5f       	subi	r28, 0xFF	; 255
    3578:	f6 cf       	rjmp	.-20     	; 0x3566 <Print::printFloat(double, unsigned char) [clone .constprop.10]+0xee>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    357a:	a7 01       	movw	r20, r14
    357c:	96 01       	movw	r18, r12
    357e:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__addsf3>
    3582:	2b 01       	movw	r4, r22
    3584:	3c 01       	movw	r6, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3586:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
    358a:	4b 01       	movw	r8, r22
    358c:	5c 01       	movw	r10, r24
print():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    358e:	4a e0       	ldi	r20, 0x0A	; 10
    3590:	0e 94 4c 19 	call	0x3298	; 0x3298 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.63]>
_ZN5Print10printFloatEdh.constprop.10():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3594:	7c 01       	movw	r14, r24
    3596:	e0 0e       	add	r14, r16
    3598:	f1 1e       	adc	r15, r17
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    359a:	cc 23       	and	r28, r28
    359c:	c1 f1       	breq	.+112    	; 0x360e <Print::printFloat(double, unsigned char) [clone .constprop.10]+0x196>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    359e:	c5 01       	movw	r24, r10
    35a0:	b4 01       	movw	r22, r8
    35a2:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    35a6:	9b 01       	movw	r18, r22
    35a8:	ac 01       	movw	r20, r24
    35aa:	c3 01       	movw	r24, r6
    35ac:	b2 01       	movw	r22, r4
    35ae:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__subsf3>
    35b2:	4b 01       	movw	r8, r22
    35b4:	5c 01       	movw	r10, r24
print():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    35b6:	6e e2       	ldi	r22, 0x2E	; 46
    35b8:	83 e5       	ldi	r24, 0x53	; 83
    35ba:	92 e0       	ldi	r25, 0x02	; 2
    35bc:	0e 94 a5 06 	call	0xd4a	; 0xd4a <HardwareSerial::write(unsigned char)>
_ZN5Print10printFloatEdh.constprop.10():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:282
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    35c0:	e8 0e       	add	r14, r24
    35c2:	f9 1e       	adc	r15, r25
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    35c4:	c1 50       	subi	r28, 0x01	; 1
    35c6:	18 f1       	brcs	.+70     	; 0x360e <Print::printFloat(double, unsigned char) [clone .constprop.10]+0x196>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	40 e2       	ldi	r20, 0x20	; 32
    35ce:	51 e4       	ldi	r21, 0x41	; 65
    35d0:	c5 01       	movw	r24, r10
    35d2:	b4 01       	movw	r22, r8
    35d4:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulsf3>
    35d8:	2b 01       	movw	r4, r22
    35da:	3c 01       	movw	r6, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    35dc:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
print():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    35e0:	4b 01       	movw	r8, r22
    35e2:	b1 2c       	mov	r11, r1
    35e4:	a1 2c       	mov	r10, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    35e6:	4a e0       	ldi	r20, 0x0A	; 10
    35e8:	c5 01       	movw	r24, r10
    35ea:	b4 01       	movw	r22, r8
    35ec:	0e 94 4c 19 	call	0x3298	; 0x3298 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.63]>
_ZN5Print10printFloatEdh.constprop.10():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:290
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    35f0:	e8 0e       	add	r14, r24
    35f2:	f9 1e       	adc	r15, r25
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    35f4:	c5 01       	movw	r24, r10
    35f6:	b4 01       	movw	r22, r8
    35f8:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    35fc:	9b 01       	movw	r18, r22
    35fe:	ac 01       	movw	r20, r24
    3600:	c3 01       	movw	r24, r6
    3602:	b2 01       	movw	r22, r4
    3604:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__subsf3>
    3608:	4b 01       	movw	r8, r22
    360a:	5c 01       	movw	r10, r24
    360c:	db cf       	rjmp	.-74     	; 0x35c4 <Print::printFloat(double, unsigned char) [clone .constprop.10]+0x14c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    360e:	c7 01       	movw	r24, r14
    3610:	cf 91       	pop	r28
    3612:	1f 91       	pop	r17
    3614:	0f 91       	pop	r16
    3616:	ff 90       	pop	r15
    3618:	ef 90       	pop	r14
    361a:	df 90       	pop	r13
    361c:	cf 90       	pop	r12
    361e:	bf 90       	pop	r11
    3620:	af 90       	pop	r10
    3622:	9f 90       	pop	r9
    3624:	8f 90       	pop	r8
    3626:	7f 90       	pop	r7
    3628:	6f 90       	pop	r6
    362a:	5f 90       	pop	r5
    362c:	4f 90       	pop	r4
    362e:	08 95       	ret

00003630 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.32():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:657
{
	Print(st, x, y);
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
    3630:	2f 92       	push	r2
    3632:	3f 92       	push	r3
    3634:	4f 92       	push	r4
    3636:	5f 92       	push	r5
    3638:	6f 92       	push	r6
    363a:	7f 92       	push	r7
    363c:	8f 92       	push	r8
    363e:	9f 92       	push	r9
    3640:	af 92       	push	r10
    3642:	bf 92       	push	r11
    3644:	cf 92       	push	r12
    3646:	df 92       	push	r13
    3648:	ef 92       	push	r14
    364a:	ff 92       	push	r15
    364c:	0f 93       	push	r16
    364e:	1f 93       	push	r17
    3650:	cf 93       	push	r28
    3652:	df 93       	push	r29
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	2d 97       	sbiw	r28, 0x0d	; 13
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	fc 01       	movw	r30, r24
    3666:	a0 81       	ld	r26, Z
    3668:	b1 81       	ldd	r27, Z+1	; 0x01
Print():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:611
{
	int16_t pos;
	uint16_t len;
	const char * p = (const char *)st;
	size_t n = 0;
	if (x == CENTER || x == RIGHT) 
    366a:	cb 01       	movw	r24, r22
    366c:	8e 50       	subi	r24, 0x0E	; 14
    366e:	97 42       	sbci	r25, 0x27	; 39
    3670:	02 97       	sbiw	r24, 0x02	; 2
    3672:	20 f5       	brcc	.+72     	; 0x36bc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x8c>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:613
	{
		len = strlen((const char *)st) * 6 * text_size;		
    3674:	fd 01       	movw	r30, r26
    3676:	01 90       	ld	r0, Z+
    3678:	00 20       	and	r0, r0
    367a:	e9 f7       	brne	.-6      	; 0x3676 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x46>
    367c:	31 97       	sbiw	r30, 0x01	; 1
    367e:	ea 1b       	sub	r30, r26
    3680:	fb 0b       	sbc	r31, r27
    3682:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <display+0xc>
    3686:	26 e0       	ldi	r18, 0x06	; 6
    3688:	82 9f       	mul	r24, r18
    368a:	c0 01       	movw	r24, r0
    368c:	11 24       	eor	r1, r1
    368e:	8e 9f       	mul	r24, r30
    3690:	90 01       	movw	r18, r0
    3692:	8f 9f       	mul	r24, r31
    3694:	30 0d       	add	r19, r0
    3696:	9e 9f       	mul	r25, r30
    3698:	30 0d       	add	r19, r0
    369a:	11 24       	eor	r1, r1
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:614
		pos = (Get_Display_Width() - len); 
    369c:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <display+0x14>
    36a0:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <display+0x15>
    36a4:	82 1b       	sub	r24, r18
    36a6:	93 0b       	sbc	r25, r19
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:615
		if (x == CENTER)
    36a8:	6e 30       	cpi	r22, 0x0E	; 14
    36aa:	77 42       	sbci	r23, 0x27	; 39
    36ac:	89 f5       	brne	.+98     	; 0x3710 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0xe0>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:617
		{
			x = pos/2;
    36ae:	bc 01       	movw	r22, r24
    36b0:	97 ff       	sbrs	r25, 7
    36b2:	02 c0       	rjmp	.+4      	; 0x36b8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x88>
    36b4:	6f 5f       	subi	r22, 0xFF	; 255
    36b6:	7f 4f       	sbci	r23, 0xFF	; 255
    36b8:	75 95       	asr	r23
    36ba:	67 95       	ror	r22
Set_Text_Cousur():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:474
}

//set text coordinate
void LCDWIKI_GUI::Set_Text_Cousur(int16_t x, int16_t y)
{
	text_x = x;
    36bc:	70 93 f8 02 	sts	0x02F8, r23	; 0x8002f8 <display+0x3>
    36c0:	60 93 f7 02 	sts	0x02F7, r22	; 0x8002f7 <display+0x2>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:475
	text_y = y;
    36c4:	50 93 fa 02 	sts	0x02FA, r21	; 0x8002fa <display+0x5>
    36c8:	40 93 f9 02 	sts	0x02F9, r20	; 0x8002f9 <display+0x4>
    36cc:	be 83       	std	Y+6, r27	; 0x06
    36ce:	ad 83       	std	Y+5, r26	; 0x05
Print():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:627
		}
	}
    Set_Text_Cousur(x, y);
	while(1)
	{
		unsigned char ch = *(p++);//pgm_read_byte(p++);
    36d0:	ed 81       	ldd	r30, Y+5	; 0x05
    36d2:	fe 81       	ldd	r31, Y+6	; 0x06
    36d4:	91 91       	ld	r25, Z+
    36d6:	fe 83       	std	Y+6, r31	; 0x06
    36d8:	ed 83       	std	Y+5, r30	; 0x05
    36da:	89 2f       	mov	r24, r25
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:628
		if(ch == 0)
    36dc:	99 23       	and	r25, r25
    36de:	09 f4       	brne	.+2      	; 0x36e2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0xb2>
    36e0:	dd c0       	rjmp	.+442    	; 0x389c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x26c>
write():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:792
}

//write a char
size_t LCDWIKI_GUI::write(uint8_t c) 
{
	if (c == '\n') 
    36e2:	9a 30       	cpi	r25, 0x0A	; 10
    36e4:	c9 f4       	brne	.+50     	; 0x3718 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0xe8>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:794
	{
    	text_y += text_size*8;
    36e6:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <display+0xc>
    36ea:	f8 e0       	ldi	r31, 0x08	; 8
    36ec:	8f 9f       	mul	r24, r31
    36ee:	c0 01       	movw	r24, r0
    36f0:	11 24       	eor	r1, r1
    36f2:	20 91 f9 02 	lds	r18, 0x02F9	; 0x8002f9 <display+0x4>
    36f6:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <display+0x5>
    36fa:	82 0f       	add	r24, r18
    36fc:	93 1f       	adc	r25, r19
    36fe:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <display+0x5>
    3702:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <display+0x4>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:795
    	text_x  = 0;
    3706:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <display+0x3>
    370a:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <display+0x2>
    370e:	e0 cf       	rjmp	.-64     	; 0x36d0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0xa0>
Print():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:621
		{
			x = pos/2;
		}
		else
		{
			x = pos - 1;
    3710:	bc 01       	movw	r22, r24
    3712:	61 50       	subi	r22, 0x01	; 1
    3714:	71 09       	sbc	r23, r1
    3716:	d2 cf       	rjmp	.-92     	; 0x36bc <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x8c>
write():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:797
	if (c == '\n') 
	{
    	text_y += text_size*8;
    	text_x  = 0;
 	} 
	else if(c == '\r')
    3718:	9d 30       	cpi	r25, 0x0D	; 13
    371a:	d1 f2       	breq	.-76     	; 0x36d0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0xa0>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    371c:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <display+0x2>
    3720:	30 91 f8 02 	lds	r19, 0x02F8	; 0x8002f8 <display+0x3>
    3724:	39 87       	std	Y+9, r19	; 0x09
    3726:	28 87       	std	Y+8, r18	; 0x08
Draw_Char():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    3728:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <display+0x14>
    372c:	30 91 0a 03 	lds	r19, 0x030A	; 0x80030a <display+0x15>
    3730:	48 85       	ldd	r20, Y+8	; 0x08
    3732:	59 85       	ldd	r21, Y+9	; 0x09
    3734:	42 17       	cp	r20, r18
    3736:	53 07       	cpc	r21, r19
    3738:	0c f0       	brlt	.+2      	; 0x373c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x10c>
    373a:	88 c0       	rjmp	.+272    	; 0x384c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x21c>
write():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    373c:	60 90 f9 02 	lds	r6, 0x02F9	; 0x8002f9 <display+0x4>
    3740:	70 90 fa 02 	lds	r7, 0x02FA	; 0x8002fa <display+0x5>
Draw_Char():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    3744:	20 91 0b 03 	lds	r18, 0x030B	; 0x80030b <display+0x16>
    3748:	30 91 0c 03 	lds	r19, 0x030C	; 0x80030c <display+0x17>
    374c:	62 16       	cp	r6, r18
    374e:	73 06       	cpc	r7, r19
    3750:	0c f0       	brlt	.+2      	; 0x3754 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x124>
    3752:	7c c0       	rjmp	.+248    	; 0x384c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x21c>
write():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    3754:	50 91 01 03 	lds	r21, 0x0301	; 0x800301 <display+0xc>
    3758:	5a 83       	std	Y+2, r21	; 0x02
    375a:	c5 2e       	mov	r12, r21
    375c:	d1 2c       	mov	r13, r1
Draw_Char():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:553
}

//draw a char
void LCDWIKI_GUI::Draw_Char(int16_t x, int16_t y, uint8_t c, uint16_t color,uint16_t bg, uint8_t size, boolean mode)
{
	if((x >= Get_Width()) || (y >= Get_Height()) || ((x + 6 * size - 1) < 0) || ((y + 8 * size - 1) < 0))
    375e:	28 85       	ldd	r18, Y+8	; 0x08
    3760:	39 85       	ldd	r19, Y+9	; 0x09
    3762:	e6 e0       	ldi	r30, 0x06	; 6
    3764:	5e 9f       	mul	r21, r30
    3766:	20 0d       	add	r18, r0
    3768:	31 1d       	adc	r19, r1
    376a:	11 24       	eor	r1, r1
    376c:	12 16       	cp	r1, r18
    376e:	13 06       	cpc	r1, r19
    3770:	0c f0       	brlt	.+2      	; 0x3774 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x144>
    3772:	6c c0       	rjmp	.+216    	; 0x384c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x21c>
    3774:	96 01       	movw	r18, r12
    3776:	93 e0       	ldi	r25, 0x03	; 3
    3778:	22 0f       	add	r18, r18
    377a:	33 1f       	adc	r19, r19
    377c:	9a 95       	dec	r25
    377e:	e1 f7       	brne	.-8      	; 0x3778 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x148>
    3780:	26 0d       	add	r18, r6
    3782:	37 1d       	adc	r19, r7
    3784:	12 16       	cp	r1, r18
    3786:	13 06       	cpc	r1, r19
    3788:	0c f0       	brlt	.+2      	; 0x378c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x15c>
    378a:	60 c0       	rjmp	.+192    	; 0x384c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x21c>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:557
	{
    	return;
	}		
  	if(c >= 176)
    378c:	80 3b       	cpi	r24, 0xB0	; 176
    378e:	08 f0       	brcs	.+2      	; 0x3792 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x162>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:559
  	{
		c++; 
    3790:	8f 5f       	subi	r24, 0xFF	; 255
write():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:802
	else if(c == '\r')
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    3792:	f0 91 02 03 	lds	r31, 0x0302	; 0x800302 <display+0xd>
    3796:	ff 83       	std	Y+7, r31	; 0x07
    3798:	20 90 fd 02 	lds	r2, 0x02FD	; 0x8002fd <display+0x8>
    379c:	30 90 fe 02 	lds	r3, 0x02FE	; 0x8002fe <display+0x9>
    37a0:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <display+0x6>
    37a4:	30 91 fc 02 	lds	r19, 0x02FC	; 0x8002fc <display+0x7>
    37a8:	3c 83       	std	Y+4, r19	; 0x04
    37aa:	2b 83       	std	Y+3, r18	; 0x03
Draw_Char():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    37ac:	48 85       	ldd	r20, Y+8	; 0x08
    37ae:	59 85       	ldd	r21, Y+9	; 0x09
    37b0:	5d 87       	std	Y+13, r21	; 0x0d
    37b2:	4c 87       	std	Y+12, r20	; 0x0c
    37b4:	5a 01       	movw	r10, r20
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.32():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
    37b6:	19 82       	std	Y+1, r1	; 0x01
Draw_Char():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    37b8:	24 eb       	ldi	r18, 0xB4	; 180
    37ba:	34 e0       	ldi	r19, 0x04	; 4
    37bc:	24 1b       	sub	r18, r20
    37be:	35 0b       	sbc	r19, r21
    37c0:	f9 01       	movw	r30, r18
    37c2:	45 e0       	ldi	r20, 0x05	; 5
    37c4:	84 9f       	mul	r24, r20
    37c6:	e0 0d       	add	r30, r0
    37c8:	f1 1d       	adc	r31, r1
    37ca:	11 24       	eor	r1, r1
    37cc:	fb 87       	std	Y+11, r31	; 0x0b
    37ce:	ea 87       	std	Y+10, r30	; 0x0a
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    37d0:	59 81       	ldd	r21, Y+1	; 0x01
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.32():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
    	{
      		line = 0x0;
    37d2:	e0 e0       	ldi	r30, 0x00	; 0
Draw_Char():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:564
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    37d4:	55 30       	cpi	r21, 0x05	; 5
    37d6:	29 f0       	breq	.+10     	; 0x37e2 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x1b2>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:570
    	{
      		line = 0x0;
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    37d8:	ea 85       	ldd	r30, Y+10	; 0x0a
    37da:	fb 85       	ldd	r31, Y+11	; 0x0b
    37dc:	ea 0d       	add	r30, r10
    37de:	fb 1d       	adc	r31, r11
    37e0:	e4 91       	lpm	r30, Z
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.32():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:566
	for (int8_t i=0; i<6; i++) 
	{
    	uint8_t line;
    	if (i == 5)
    	{
      		line = 0x0;
    37e2:	23 01       	movw	r4, r6
    37e4:	91 2c       	mov	r9, r1
    37e6:	81 2c       	mov	r8, r1
Draw_Char():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:574
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
    37e8:	8e 2f       	mov	r24, r30
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	99 87       	std	Y+9, r25	; 0x09
    37ee:	88 87       	std	Y+8, r24	; 0x08
    37f0:	e0 ff       	sbrs	r30, 0
    37f2:	3c c0       	rjmp	.+120    	; 0x386c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x23c>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
			{
        		if (size == 1)
    37f4:	9a 81       	ldd	r25, Y+2	; 0x02
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:578
        		{
        			Draw_Pixe(x+i, y+j, color);
    37f6:	2b 81       	ldd	r18, Y+3	; 0x03
    37f8:	3c 81       	ldd	r19, Y+4	; 0x04
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:582
        		}
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
    37fa:	eb 80       	ldd	r14, Y+3	; 0x03
    37fc:	fc 80       	ldd	r15, Y+4	; 0x04
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:576
    	}
    	for (int8_t j = 0; j<8; j++) 
		{
      		if (line & 0x1) 
			{
        		if (size == 1)
    37fe:	91 30       	cpi	r25, 0x01	; 1
    3800:	09 f0       	breq	.+2      	; 0x3804 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x1d4>
    3802:	42 c0       	rjmp	.+132    	; 0x3888 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x258>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
			{
				if(!mode)
				{
	        		if (size == 1) 
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
    3804:	a3 01       	movw	r20, r6
    3806:	48 0d       	add	r20, r8
    3808:	59 1d       	adc	r21, r9
    380a:	b5 01       	movw	r22, r10
    380c:	85 ef       	ldi	r24, 0xF5	; 245
    380e:	92 e0       	ldi	r25, 0x02	; 2
    3810:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:599
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
					}
				}
			}
      		line >>= 1;
    3814:	e8 85       	ldd	r30, Y+8	; 0x08
    3816:	f9 85       	ldd	r31, Y+9	; 0x09
    3818:	f5 95       	asr	r31
    381a:	e7 95       	ror	r30
    381c:	3f ef       	ldi	r19, 0xFF	; 255
    381e:	83 1a       	sub	r8, r19
    3820:	93 0a       	sbc	r9, r19
    3822:	4c 0c       	add	r4, r12
    3824:	5d 1c       	adc	r5, r13
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:572
    	}
    	else
    	{
      		line = pgm_read_byte(lcd_font+(c*5)+i);
    	}
    	for (int8_t j = 0; j<8; j++) 
    3826:	48 e0       	ldi	r20, 0x08	; 8
    3828:	84 16       	cp	r8, r20
    382a:	91 04       	cpc	r9, r1
    382c:	e9 f6       	brne	.-70     	; 0x37e8 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x1b8>
    382e:	5f ef       	ldi	r21, 0xFF	; 255
    3830:	a5 1a       	sub	r10, r21
    3832:	b5 0a       	sbc	r11, r21
    3834:	8c 85       	ldd	r24, Y+12	; 0x0c
    3836:	9d 85       	ldd	r25, Y+13	; 0x0d
    3838:	8c 0d       	add	r24, r12
    383a:	9d 1d       	adc	r25, r13
    383c:	9d 87       	std	Y+13, r25	; 0x0d
    383e:	8c 87       	std	Y+12, r24	; 0x0c
    3840:	99 81       	ldd	r25, Y+1	; 0x01
    3842:	9f 5f       	subi	r25, 0xFF	; 255
    3844:	99 83       	std	Y+1, r25	; 0x01
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:561
	}		
  	if(c >= 176)
  	{
		c++; 
  	}
	for (int8_t i=0; i<6; i++) 
    3846:	96 30       	cpi	r25, 0x06	; 6
    3848:	09 f0       	breq	.+2      	; 0x384c <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x21c>
    384a:	c2 cf       	rjmp	.-124    	; 0x37d0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x1a0>
write():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:803
	{
	}
	else 
	{
    	Draw_Char(text_x, text_y, c, text_color, text_bgcolor, text_size,text_mode);
    	text_x += text_size*6;		
    384c:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <display+0xc>
    3850:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <display+0x2>
    3854:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <display+0x3>
    3858:	e6 e0       	ldi	r30, 0x06	; 6
    385a:	2e 9f       	mul	r18, r30
    385c:	80 0d       	add	r24, r0
    385e:	91 1d       	adc	r25, r1
    3860:	11 24       	eor	r1, r1
    3862:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <display+0x3>
    3866:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <display+0x2>
    386a:	32 cf       	rjmp	.-412    	; 0x36d0 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0xa0>
Draw_Char():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:585
        		else 
				{  
					Fill_Rect(x+(i*size), y+(j*size), size, size, color);
        		}
        	} 
			else if (bg != color) 				
    386c:	eb 81       	ldd	r30, Y+3	; 0x03
    386e:	fc 81       	ldd	r31, Y+4	; 0x04
    3870:	2e 16       	cp	r2, r30
    3872:	3f 06       	cpc	r3, r31
    3874:	79 f2       	breq	.-98     	; 0x3814 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x1e4>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:587
			{
				if(!mode)
    3876:	ff 81       	ldd	r31, Y+7	; 0x07
    3878:	f1 11       	cpse	r31, r1
    387a:	cc cf       	rjmp	.-104    	; 0x3814 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x1e4>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
				{
	        		if (size == 1) 
    387c:	2a 81       	ldd	r18, Y+2	; 0x02
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
    387e:	71 01       	movw	r14, r2
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:589
        	} 
			else if (bg != color) 				
			{
				if(!mode)
				{
	        		if (size == 1) 
    3880:	21 30       	cpi	r18, 0x01	; 1
    3882:	11 f4       	brne	.+4      	; 0x3888 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x258>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:591
	        		{
	        			Draw_Pixe(x+i, y+j, bg);
    3884:	91 01       	movw	r18, r2
    3886:	be cf       	rjmp	.-132    	; 0x3804 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x1d4>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:595
	        		}
	        		else 
					{  
						Fill_Rect(x+i*size, y+j*size, size, size, bg);
    3888:	86 01       	movw	r16, r12
    388a:	96 01       	movw	r18, r12
    388c:	a2 01       	movw	r20, r4
    388e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3890:	7d 85       	ldd	r23, Y+13	; 0x0d
    3892:	85 ef       	ldi	r24, 0xF5	; 245
    3894:	92 e0       	ldi	r25, 0x02	; 2
    3896:	0e 94 21 0a 	call	0x1442	; 0x1442 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)>
    389a:	bc cf       	rjmp	.-136    	; 0x3814 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]+0x1e4>
_ZN11LCDWIKI_GUI12Print_StringE6Stringii.constprop.32():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:660

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
}
    389c:	2d 96       	adiw	r28, 0x0d	; 13
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	1f 91       	pop	r17
    38ae:	0f 91       	pop	r16
    38b0:	ff 90       	pop	r15
    38b2:	ef 90       	pop	r14
    38b4:	df 90       	pop	r13
    38b6:	cf 90       	pop	r12
    38b8:	bf 90       	pop	r11
    38ba:	af 90       	pop	r10
    38bc:	9f 90       	pop	r9
    38be:	8f 90       	pop	r8
    38c0:	7f 90       	pop	r7
    38c2:	6f 90       	pop	r6
    38c4:	5f 90       	pop	r5
    38c6:	4f 90       	pop	r4
    38c8:	3f 90       	pop	r3
    38ca:	2f 90       	pop	r2
    38cc:	08 95       	ret

000038ce <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/abi.cpp:26
extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

namespace std {
  [[gnu::weak, noreturn]] void terminate() {
    abort();
    38ce:	0e 94 3c 37 	call	0x6e78	; 0x6e78 <abort>

000038d2 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)>:
_Z12add_setpointP4listI8setpointEjjh():
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:15
void min_to_time_str(uint16_t minutes, char *dest) {
  sprintf(dest, "%02d:%02d", minutes/60, minutes%60);
}

// add a new setpoint in a way to keep the setpoint list sorted by time. When there are multiple setpoints with the same timestamp, the offset value determines the position of the new setpoint
uint8_t add_setpoint(struct list<setpoint> *setpoint_list, uint16_t time, uint16_t temp, uint8_t offset) {
    38d2:	8f 92       	push	r8
    38d4:	9f 92       	push	r9
    38d6:	af 92       	push	r10
    38d8:	bf 92       	push	r11
    38da:	cf 92       	push	r12
    38dc:	df 92       	push	r13
    38de:	ef 92       	push	r14
    38e0:	ff 92       	push	r15
    38e2:	0f 93       	push	r16
    38e4:	1f 93       	push	r17
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	60 97       	sbiw	r28, 0x10	; 16
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	de bf       	out	0x3e, r29	; 62
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	cd bf       	out	0x3d, r28	; 61
    38fa:	7c 01       	movw	r14, r24
    38fc:	5b 01       	movw	r10, r22
    38fe:	4a 01       	movw	r8, r20
    3900:	02 2f       	mov	r16, r18
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:17
  struct list<setpoint> *setpoint_iter = setpoint_list;
  uint8_t i = 1;
    3902:	11 e0       	ldi	r17, 0x01	; 1
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:18
  while(setpoint_iter->next && time_str_to_min(setpoint_iter->next->data.time) < time + (offset > i)) { // iterate and check where to put the setpoint
    3904:	d7 01       	movw	r26, r14
    3906:	18 96       	adiw	r26, 0x08	; 8
    3908:	cd 90       	ld	r12, X+
    390a:	dc 90       	ld	r13, X
    390c:	c1 14       	cp	r12, r1
    390e:	d1 04       	cpc	r13, r1
    3910:	89 f0       	breq	.+34     	; 0x3934 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)+0x62>
    3912:	c6 01       	movw	r24, r12
    3914:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    3918:	21 e0       	ldi	r18, 0x01	; 1
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	10 17       	cp	r17, r16
    391e:	10 f0       	brcs	.+4      	; 0x3924 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)+0x52>
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	2a 0d       	add	r18, r10
    3926:	3b 1d       	adc	r19, r11
    3928:	82 17       	cp	r24, r18
    392a:	93 07       	cpc	r25, r19
    392c:	18 f4       	brcc	.+6      	; 0x3934 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)+0x62>
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:20
    setpoint_iter = setpoint_iter->next;
    i++;
    392e:	1f 5f       	subi	r17, 0xFF	; 255
    3930:	76 01       	movw	r14, r12
    3932:	e8 cf       	rjmp	.-48     	; 0x3904 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)+0x32>
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:22
  }
  add_next<setpoint>(setpoint_iter, (setpoint){"", temp});
    3934:	1a 86       	std	Y+10, r1	; 0x0a
    3936:	19 86       	std	Y+9, r1	; 0x09
    3938:	fe 01       	movw	r30, r28
    393a:	3b 96       	adiw	r30, 0x0b	; 11
    393c:	84 e0       	ldi	r24, 0x04	; 4
    393e:	df 01       	movw	r26, r30
    3940:	1d 92       	st	X+, r1
    3942:	8a 95       	dec	r24
    3944:	e9 f7       	brne	.-6      	; 0x3940 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)+0x6e>
    3946:	98 8a       	std	Y+16, r9	; 0x10
    3948:	8f 86       	std	Y+15, r8	; 0x0f
    394a:	88 e0       	ldi	r24, 0x08	; 8
    394c:	32 97       	sbiw	r30, 0x02	; 2
    394e:	de 01       	movw	r26, r28
    3950:	11 96       	adiw	r26, 0x01	; 1
    3952:	01 90       	ld	r0, Z+
    3954:	0d 92       	st	X+, r0
    3956:	8a 95       	dec	r24
    3958:	e1 f7       	brne	.-8      	; 0x3952 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)+0x80>
new_helper():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/new.cpp:44
    395a:	8a e0       	ldi	r24, 0x0A	; 10
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    3962:	9c 01       	movw	r18, r24
new_list():
/home/noah/Documents/basteln/ofen_v2/main/list.h:39

template <typename T>
struct list<T> *new_list() {
  struct list<T> *new_list = new struct list<T>;
  //new_list->data = (T)0;
  new_list->next = 0;
    3964:	fc 01       	movw	r30, r24
    3966:	11 86       	std	Z+9, r1	; 0x09
    3968:	10 86       	std	Z+8, r1	; 0x08
_Z8add_nextI8setpointEvP4listIT_ES2_.isra.3():
/home/noah/Documents/basteln/ofen_v2/main/list.h:56
}

template <typename T>
void add_next(struct list<T> *list, T data) {
  struct list<T> *new_element = new_list<T>();
  new_element->data = data;
    396a:	88 e0       	ldi	r24, 0x08	; 8
    396c:	fe 01       	movw	r30, r28
    396e:	31 96       	adiw	r30, 0x01	; 1
    3970:	d9 01       	movw	r26, r18
    3972:	01 90       	ld	r0, Z+
    3974:	0d 92       	st	X+, r0
    3976:	8a 95       	dec	r24
    3978:	e1 f7       	brne	.-8      	; 0x3972 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)+0xa0>
/home/noah/Documents/basteln/ofen_v2/main/list.h:57
  new_element->next = list->next;
    397a:	d7 01       	movw	r26, r14
    397c:	18 96       	adiw	r26, 0x08	; 8
    397e:	8d 91       	ld	r24, X+
    3980:	9c 91       	ld	r25, X
    3982:	19 97       	sbiw	r26, 0x09	; 9
    3984:	f9 01       	movw	r30, r18
    3986:	91 87       	std	Z+9, r25	; 0x09
    3988:	80 87       	std	Z+8, r24	; 0x08
/home/noah/Documents/basteln/ofen_v2/main/list.h:58
  list->next = new_element;
    398a:	19 96       	adiw	r26, 0x09	; 9
    398c:	3c 93       	st	X, r19
    398e:	2e 93       	st	-X, r18
    3990:	18 97       	sbiw	r26, 0x08	; 8
min_to_time_str():
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:11
uint16_t time_str_to_min(char time_str[6]) {
  return char_to_int(time_str[0]) * 600 + char_to_int(time_str[1]) * 60 + char_to_int(time_str[3]) * 10 + char_to_int(time_str[4]);
}

void min_to_time_str(uint16_t minutes, char *dest) {
  sprintf(dest, "%02d:%02d", minutes/60, minutes%60);
    3992:	c5 01       	movw	r24, r10
    3994:	6c e3       	ldi	r22, 0x3C	; 60
    3996:	70 e0       	ldi	r23, 0x00	; 0
    3998:	0e 94 02 35 	call	0x6a04	; 0x6a04 <__udivmodhi4>
    399c:	9f 93       	push	r25
    399e:	8f 93       	push	r24
    39a0:	7f 93       	push	r23
    39a2:	6f 93       	push	r22
    39a4:	86 ef       	ldi	r24, 0xF6	; 246
    39a6:	91 e0       	ldi	r25, 0x01	; 1
    39a8:	9f 93       	push	r25
    39aa:	8f 93       	push	r24
    39ac:	3f 93       	push	r19
    39ae:	2f 93       	push	r18
    39b0:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <sprintf>
_Z12add_setpointP4listI8setpointEjjh():
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:24
    setpoint_iter = setpoint_iter->next;
    i++;
  }
  add_next<setpoint>(setpoint_iter, (setpoint){"", temp});
  min_to_time_str(time, setpoint_iter->next->data.time);
  return i; // return the final position of the new setpoint
    39b4:	0f b6       	in	r0, 0x3f	; 63
    39b6:	f8 94       	cli
    39b8:	de bf       	out	0x3e, r29	; 62
    39ba:	0f be       	out	0x3f, r0	; 63
    39bc:	cd bf       	out	0x3d, r28	; 61
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:25
}
    39be:	81 2f       	mov	r24, r17
    39c0:	60 96       	adiw	r28, 0x10	; 16
    39c2:	0f b6       	in	r0, 0x3f	; 63
    39c4:	f8 94       	cli
    39c6:	de bf       	out	0x3e, r29	; 62
    39c8:	0f be       	out	0x3f, r0	; 63
    39ca:	cd bf       	out	0x3d, r28	; 61
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	1f 91       	pop	r17
    39d2:	0f 91       	pop	r16
    39d4:	ff 90       	pop	r15
    39d6:	ef 90       	pop	r14
    39d8:	df 90       	pop	r13
    39da:	cf 90       	pop	r12
    39dc:	bf 90       	pop	r11
    39de:	af 90       	pop	r10
    39e0:	9f 90       	pop	r9
    39e2:	8f 90       	pop	r8
    39e4:	08 95       	ret

000039e6 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)>:
_Z10edit_pointP5graphP4listI8setpointES2_h():
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:27
void update_temp_curve(struct list<setpoint> *old_setpoint_list, struct list<setpoint> *new_setpoint_list) {
  display.Set_Draw_color(BACKGROUND_COLOR);
  //draw_temp
}

void edit_point(graph *temperature_graph, struct list<setpoint> *setpoint_list, setpoint old_point, uint8_t old_id) {
    39e6:	2f 92       	push	r2
    39e8:	3f 92       	push	r3
    39ea:	4f 92       	push	r4
    39ec:	5f 92       	push	r5
    39ee:	6f 92       	push	r6
    39f0:	7f 92       	push	r7
    39f2:	8f 92       	push	r8
    39f4:	9f 92       	push	r9
    39f6:	af 92       	push	r10
    39f8:	bf 92       	push	r11
    39fa:	cf 92       	push	r12
    39fc:	df 92       	push	r13
    39fe:	ef 92       	push	r14
    3a00:	ff 92       	push	r15
    3a02:	0f 93       	push	r16
    3a04:	1f 93       	push	r17
    3a06:	cf 93       	push	r28
    3a08:	df 93       	push	r29
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
    3a0e:	64 97       	sbiw	r28, 0x14	; 20
    3a10:	0f b6       	in	r0, 0x3f	; 63
    3a12:	f8 94       	cli
    3a14:	de bf       	out	0x3e, r29	; 62
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	cd bf       	out	0x3d, r28	; 61
    3a1a:	98 8b       	std	Y+16, r25	; 0x10
    3a1c:	8f 87       	std	Y+15, r24	; 0x0f
    3a1e:	cb 01       	movw	r24, r22
    3a20:	e9 82       	std	Y+1, r14	; 0x01
    3a22:	fa 82       	std	Y+2, r15	; 0x02
    3a24:	0b 83       	std	Y+3, r16	; 0x03
    3a26:	1c 83       	std	Y+4, r17	; 0x04
    3a28:	2d 83       	std	Y+5, r18	; 0x05
    3a2a:	3e 83       	std	Y+6, r19	; 0x06
    3a2c:	4f 83       	std	Y+7, r20	; 0x07
    3a2e:	58 87       	std	Y+8, r21	; 0x08
    3a30:	cb 86       	std	Y+11, r12	; 0x0b
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:32
  uint8_t first = !old_id;
  list<setpoint> *prev_setpoint;
  list<setpoint> *new_setpoint;
  list<setpoint> *next_setpoint;
  if(!first) {
    3a32:	cc 20       	and	r12, r12
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)+0x52>
    3a36:	1f c1       	rjmp	.+574    	; 0x3c76 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)+0x290>
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:33
    prev_setpoint = get_index(setpoint_list, old_id - 1);
    3a38:	2c 2d       	mov	r18, r12
    3a3a:	21 50       	subi	r18, 0x01	; 1
    3a3c:	33 0b       	sbc	r19, r19
    3a3e:	b9 01       	movw	r22, r18
    3a40:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    3a44:	9a 87       	std	Y+10, r25	; 0x0a
    3a46:	89 87       	std	Y+9, r24	; 0x09
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:34
    new_setpoint = prev_setpoint->next;
    3a48:	fc 01       	movw	r30, r24
    3a4a:	20 84       	ldd	r2, Z+8	; 0x08
    3a4c:	31 84       	ldd	r3, Z+9	; 0x09
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:38
  } else {
    new_setpoint = get_index(setpoint_list, old_id);
  }
  if(new_setpoint->data.temp == old_point.temp && !strcmp(new_setpoint->data.time, old_point.time)) return;
    3a4e:	cf 80       	ldd	r12, Y+7	; 0x07
    3a50:	d8 84       	ldd	r13, Y+8	; 0x08
    3a52:	f1 01       	movw	r30, r2
    3a54:	86 81       	ldd	r24, Z+6	; 0x06
    3a56:	97 81       	ldd	r25, Z+7	; 0x07
    3a58:	8c 15       	cp	r24, r12
    3a5a:	9d 05       	cpc	r25, r13
    3a5c:	49 f4       	brne	.+18     	; 0x3a70 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)+0x8a>
    3a5e:	be 01       	movw	r22, r28
    3a60:	6f 5f       	subi	r22, 0xFF	; 255
    3a62:	7f 4f       	sbci	r23, 0xFF	; 255
    3a64:	c1 01       	movw	r24, r2
    3a66:	0e 94 4a 37 	call	0x6e94	; 0x6e94 <strcmp>
    3a6a:	89 2b       	or	r24, r25
    3a6c:	09 f4       	brne	.+2      	; 0x3a70 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)+0x8a>
    3a6e:	ea c0       	rjmp	.+468    	; 0x3c44 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)+0x25e>
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:39
  next_setpoint = new_setpoint->next;
    3a70:	f1 01       	movw	r30, r2
    3a72:	00 84       	ldd	r0, Z+8	; 0x08
    3a74:	f1 85       	ldd	r31, Z+9	; 0x09
    3a76:	e0 2d       	mov	r30, r0
    3a78:	fe 87       	std	Y+14, r31	; 0x0e
    3a7a:	ed 87       	std	Y+13, r30	; 0x0d
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:40
  uint8_t last = !next_setpoint->next;
    3a7c:	20 85       	ldd	r18, Z+8	; 0x08
    3a7e:	31 85       	ldd	r19, Z+9	; 0x09
    3a80:	3a 8b       	std	Y+18, r19	; 0x12
    3a82:	29 8b       	std	Y+17, r18	; 0x11
Set_Draw_color():
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    3a84:	8f ef       	ldi	r24, 0xFF	; 255
    3a86:	9f ef       	ldi	r25, 0xFF	; 255
    3a88:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <display+0xb>
    3a8c:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <display+0xa>
_Z10edit_pointP5graphP4listI8setpointES2_h():
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:43

  display.Set_Draw_color(BACKGROUND_COLOR);
  if(!first) add_line(temperature_graph, time_str_to_min(prev_setpoint->data.time), prev_setpoint->data.temp, time_str_to_min(old_point.time), old_point.temp);
    3a90:	3b 85       	ldd	r19, Y+11	; 0x0b
    3a92:	33 23       	and	r19, r19
    3a94:	79 f1       	breq	.+94     	; 0x3af4 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)+0x10e>
    3a96:	ce 01       	movw	r24, r28
    3a98:	01 96       	adiw	r24, 0x01	; 1
    3a9a:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    3a9e:	7c 01       	movw	r14, r24
    3aa0:	89 85       	ldd	r24, Y+9	; 0x09
    3aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa4:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    3aa8:	8c 01       	movw	r16, r24
    3aaa:	b6 01       	movw	r22, r12
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3ab4:	4b 01       	movw	r8, r22
    3ab6:	5c 01       	movw	r10, r24
    3ab8:	b7 01       	movw	r22, r14
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3ac2:	6b 01       	movw	r12, r22
    3ac4:	7c 01       	movw	r14, r24
    3ac6:	e9 85       	ldd	r30, Y+9	; 0x09
    3ac8:	fa 85       	ldd	r31, Y+10	; 0x0a
    3aca:	66 81       	ldd	r22, Z+6	; 0x06
    3acc:	77 81       	ldd	r23, Z+7	; 0x07
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3ad6:	2b 01       	movw	r4, r22
    3ad8:	3c 01       	movw	r6, r24
    3ada:	b8 01       	movw	r22, r16
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3ae4:	ab 01       	movw	r20, r22
    3ae6:	bc 01       	movw	r22, r24
    3ae8:	93 01       	movw	r18, r6
    3aea:	82 01       	movw	r16, r4
    3aec:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aee:	98 89       	ldd	r25, Y+16	; 0x10
    3af0:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <add_line(graph*, float, float, float, float)>
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:44
  if(!last) add_line(temperature_graph, time_str_to_min(old_point.time), old_point.temp, time_str_to_min(next_setpoint->data.time), next_setpoint->data.temp);
    3af4:	29 89       	ldd	r18, Y+17	; 0x11
    3af6:	3a 89       	ldd	r19, Y+18	; 0x12
    3af8:	23 2b       	or	r18, r19
    3afa:	99 f1       	breq	.+102    	; 0x3b62 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)+0x17c>
    3afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b00:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    3b04:	8c 01       	movw	r16, r24
    3b06:	ce 01       	movw	r24, r28
    3b08:	01 96       	adiw	r24, 0x01	; 1
    3b0a:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    3b0e:	9c 8b       	std	Y+20, r25	; 0x14
    3b10:	8b 8b       	std	Y+19, r24	; 0x13
    3b12:	ed 85       	ldd	r30, Y+13	; 0x0d
    3b14:	fe 85       	ldd	r31, Y+14	; 0x0e
    3b16:	66 81       	ldd	r22, Z+6	; 0x06
    3b18:	77 81       	ldd	r23, Z+7	; 0x07
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3b22:	4b 01       	movw	r8, r22
    3b24:	5c 01       	movw	r10, r24
    3b26:	b8 01       	movw	r22, r16
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3b30:	6b 01       	movw	r12, r22
    3b32:	7c 01       	movw	r14, r24
    3b34:	6f 81       	ldd	r22, Y+7	; 0x07
    3b36:	78 85       	ldd	r23, Y+8	; 0x08
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3b40:	2b 01       	movw	r4, r22
    3b42:	3c 01       	movw	r6, r24
    3b44:	2b 89       	ldd	r18, Y+19	; 0x13
    3b46:	3c 89       	ldd	r19, Y+20	; 0x14
    3b48:	b9 01       	movw	r22, r18
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3b52:	ab 01       	movw	r20, r22
    3b54:	bc 01       	movw	r22, r24
    3b56:	93 01       	movw	r18, r6
    3b58:	82 01       	movw	r16, r4
    3b5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b5c:	98 89       	ldd	r25, Y+16	; 0x10
    3b5e:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <add_line(graph*, float, float, float, float)>
Set_Draw_color():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:46
}

//set 8bits r,g,b color
void LCDWIKI_GUI::Set_Draw_color(uint8_t r, uint8_t g, uint8_t b)
{
	draw_color = Color_To_565(r, g, b);
    3b62:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <display+0xb>
    3b66:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <display+0xa>
_Z10edit_pointP5graphP4listI8setpointES2_h():
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:47

  display.Set_Draw_color(0, 0, 0);
  if(!first) add_line(temperature_graph, time_str_to_min(prev_setpoint->data.time), prev_setpoint->data.temp, time_str_to_min(new_setpoint->data.time), new_setpoint->data.temp);
    3b6a:	3b 85       	ldd	r19, Y+11	; 0x0b
    3b6c:	33 23       	and	r19, r19
    3b6e:	99 f1       	breq	.+102    	; 0x3bd6 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)+0x1f0>
    3b70:	c1 01       	movw	r24, r2
    3b72:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    3b76:	8c 01       	movw	r16, r24
    3b78:	89 85       	ldd	r24, Y+9	; 0x09
    3b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7c:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    3b80:	9c 87       	std	Y+12, r25	; 0x0c
    3b82:	8b 87       	std	Y+11, r24	; 0x0b
    3b84:	f1 01       	movw	r30, r2
    3b86:	66 81       	ldd	r22, Z+6	; 0x06
    3b88:	77 81       	ldd	r23, Z+7	; 0x07
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3b92:	4b 01       	movw	r8, r22
    3b94:	5c 01       	movw	r10, r24
    3b96:	b8 01       	movw	r22, r16
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3ba0:	6b 01       	movw	r12, r22
    3ba2:	7c 01       	movw	r14, r24
    3ba4:	e9 85       	ldd	r30, Y+9	; 0x09
    3ba6:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ba8:	66 81       	ldd	r22, Z+6	; 0x06
    3baa:	77 81       	ldd	r23, Z+7	; 0x07
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3bb4:	2b 01       	movw	r4, r22
    3bb6:	3c 01       	movw	r6, r24
    3bb8:	2b 85       	ldd	r18, Y+11	; 0x0b
    3bba:	3c 85       	ldd	r19, Y+12	; 0x0c
    3bbc:	b9 01       	movw	r22, r18
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3bc6:	ab 01       	movw	r20, r22
    3bc8:	bc 01       	movw	r22, r24
    3bca:	93 01       	movw	r18, r6
    3bcc:	82 01       	movw	r16, r4
    3bce:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd0:	98 89       	ldd	r25, Y+16	; 0x10
    3bd2:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <add_line(graph*, float, float, float, float)>
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:48
  if(!last) add_line(temperature_graph, time_str_to_min(new_setpoint->data.time), new_setpoint->data.temp, time_str_to_min(next_setpoint->data.time), next_setpoint->data.temp);
    3bd6:	89 89       	ldd	r24, Y+17	; 0x11
    3bd8:	9a 89       	ldd	r25, Y+18	; 0x12
    3bda:	89 2b       	or	r24, r25
    3bdc:	99 f1       	breq	.+102    	; 0x3c44 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)+0x25e>
    3bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3be2:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    3be6:	8c 01       	movw	r16, r24
    3be8:	c1 01       	movw	r24, r2
    3bea:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    3bee:	9a 87       	std	Y+10, r25	; 0x0a
    3bf0:	89 87       	std	Y+9, r24	; 0x09
    3bf2:	ed 85       	ldd	r30, Y+13	; 0x0d
    3bf4:	fe 85       	ldd	r31, Y+14	; 0x0e
    3bf6:	66 81       	ldd	r22, Z+6	; 0x06
    3bf8:	77 81       	ldd	r23, Z+7	; 0x07
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3c02:	4b 01       	movw	r8, r22
    3c04:	5c 01       	movw	r10, r24
    3c06:	b8 01       	movw	r22, r16
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	80 e0       	ldi	r24, 0x00	; 0
    3c0c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3c10:	6b 01       	movw	r12, r22
    3c12:	7c 01       	movw	r14, r24
    3c14:	f1 01       	movw	r30, r2
    3c16:	66 81       	ldd	r22, Z+6	; 0x06
    3c18:	77 81       	ldd	r23, Z+7	; 0x07
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3c22:	2b 01       	movw	r4, r22
    3c24:	3c 01       	movw	r6, r24
    3c26:	29 85       	ldd	r18, Y+9	; 0x09
    3c28:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c2a:	b9 01       	movw	r22, r18
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	80 e0       	ldi	r24, 0x00	; 0
    3c30:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    3c34:	ab 01       	movw	r20, r22
    3c36:	bc 01       	movw	r22, r24
    3c38:	93 01       	movw	r18, r6
    3c3a:	82 01       	movw	r16, r4
    3c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c3e:	98 89       	ldd	r25, Y+16	; 0x10
    3c40:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <add_line(graph*, float, float, float, float)>
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:50

}
    3c44:	64 96       	adiw	r28, 0x14	; 20
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	de bf       	out	0x3e, r29	; 62
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	cd bf       	out	0x3d, r28	; 61
    3c50:	df 91       	pop	r29
    3c52:	cf 91       	pop	r28
    3c54:	1f 91       	pop	r17
    3c56:	0f 91       	pop	r16
    3c58:	ff 90       	pop	r15
    3c5a:	ef 90       	pop	r14
    3c5c:	df 90       	pop	r13
    3c5e:	cf 90       	pop	r12
    3c60:	bf 90       	pop	r11
    3c62:	af 90       	pop	r10
    3c64:	9f 90       	pop	r9
    3c66:	8f 90       	pop	r8
    3c68:	7f 90       	pop	r7
    3c6a:	6f 90       	pop	r6
    3c6c:	5f 90       	pop	r5
    3c6e:	4f 90       	pop	r4
    3c70:	3f 90       	pop	r3
    3c72:	2f 90       	pop	r2
    3c74:	08 95       	ret
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:36
  list<setpoint> *next_setpoint;
  if(!first) {
    prev_setpoint = get_index(setpoint_list, old_id - 1);
    new_setpoint = prev_setpoint->next;
  } else {
    new_setpoint = get_index(setpoint_list, old_id);
    3c76:	70 e0       	ldi	r23, 0x00	; 0
    3c78:	60 e0       	ldi	r22, 0x00	; 0
    3c7a:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    3c7e:	1c 01       	movw	r2, r24
    3c80:	e6 ce       	rjmp	.-564    	; 0x3a4e <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)+0x68>

00003c82 <remove_setpoint(list<setpoint>*, unsigned char)>:
_Z15remove_setpointP4listI8setpointEh():
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:33
uint8_t add_setpoint(struct list<setpoint> *setpoint_list, uint16_t time, uint16_t temp) {
  add_setpoint(setpoint_list, time, temp, -1);
}

// remove setpoint at given index and return the head of the new list. this is neccessary if the first setpoint should be removed
list<setpoint>* remove_setpoint(struct list<setpoint> *setpoint_list, uint8_t index) {
    3c82:	ef 92       	push	r14
    3c84:	ff 92       	push	r15
    3c86:	0f 93       	push	r16
    3c88:	1f 93       	push	r17
    3c8a:	cf 93       	push	r28
    3c8c:	df 93       	push	r29
    3c8e:	ec 01       	movw	r28, r24
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:34
  if(!index) {
    3c90:	61 11       	cpse	r22, r1
    3c92:	0b c0       	rjmp	.+22     	; 0x3caa <remove_setpoint(list<setpoint>*, unsigned char)+0x28>
    3c94:	08 84       	ldd	r0, Y+8	; 0x08
    3c96:	d9 85       	ldd	r29, Y+9	; 0x09
    3c98:	c0 2d       	mov	r28, r0
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:39
    return remove_first(setpoint_list);
  }
  remove_next(get_index(setpoint_list, index - 1));
  return setpoint_list;
    3c9a:	ce 01       	movw	r24, r28
    3c9c:	df 91       	pop	r29
    3c9e:	cf 91       	pop	r28
    3ca0:	1f 91       	pop	r17
    3ca2:	0f 91       	pop	r16
    3ca4:	ff 90       	pop	r15
    3ca6:	ef 90       	pop	r14
    3ca8:	08 95       	ret
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:37
// remove setpoint at given index and return the head of the new list. this is neccessary if the first setpoint should be removed
list<setpoint>* remove_setpoint(struct list<setpoint> *setpoint_list, uint8_t index) {
  if(!index) {
    return remove_first(setpoint_list);
  }
  remove_next(get_index(setpoint_list, index - 1));
    3caa:	61 50       	subi	r22, 0x01	; 1
    3cac:	77 0b       	sbc	r23, r23
    3cae:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    3cb2:	8c 01       	movw	r16, r24
_Z11remove_nextI8setpointEvP4listIT_E.isra.1():
/home/noah/Documents/basteln/ofen_v2/main/list.h:83
  return list->data;
}

template <typename T>
void remove_next(struct list<T> *list) {
  if(!list->next) {return;}
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	80 85       	ldd	r24, Z+8	; 0x08
    3cb8:	91 85       	ldd	r25, Z+9	; 0x09
    3cba:	00 97       	sbiw	r24, 0x00	; 0
    3cbc:	71 f3       	breq	.-36     	; 0x3c9a <remove_setpoint(list<setpoint>*, unsigned char)+0x18>
/home/noah/Documents/basteln/ofen_v2/main/list.h:84
  struct list<T> *new_next = list->next->next;
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	e0 84       	ldd	r14, Z+8	; 0x08
    3cc2:	f1 84       	ldd	r15, Z+9	; 0x09
operator delete():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/new.cpp:88
void * operator new[](std::size_t size, void *place) noexcept {
  return operator new(size, place);
}

[[gnu::weak]] void operator delete(void * ptr) noexcept {
  free(ptr);
    3cc4:	0e 94 f6 35 	call	0x6bec	; 0x6bec <free>
_Z11remove_nextI8setpointEvP4listIT_E.isra.1():
/home/noah/Documents/basteln/ofen_v2/main/list.h:86
  delete list->next;
  list->next = new_next;
    3cc8:	f8 01       	movw	r30, r16
    3cca:	f1 86       	std	Z+9, r15	; 0x09
    3ccc:	e0 86       	std	Z+8, r14	; 0x08
    3cce:	e5 cf       	rjmp	.-54     	; 0x3c9a <remove_setpoint(list<setpoint>*, unsigned char)+0x18>

00003cd0 <write_string_to_field(table*, unsigned int, unsigned int, char*)>:
_Z21write_string_to_fieldP5tablejjPc():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:58
  uint16_t y = row < table->rows ? table->pos.y + table->hlines[row] : table->pos.y + table->height + 1;
    
  return {x,y};
}

void write_string_to_field(table *table, uint16_t column, uint16_t row, char *text) {
    3cd0:	af 92       	push	r10
    3cd2:	bf 92       	push	r11
    3cd4:	cf 92       	push	r12
    3cd6:	df 92       	push	r13
    3cd8:	ef 92       	push	r14
    3cda:	ff 92       	push	r15
    3cdc:	0f 93       	push	r16
    3cde:	1f 93       	push	r17
    3ce0:	cf 93       	push	r28
    3ce2:	df 93       	push	r29
    3ce4:	00 d0       	rcall	.+0      	; 0x3ce6 <write_string_to_field(table*, unsigned int, unsigned int, char*)+0x16>
    3ce6:	00 d0       	rcall	.+0      	; 0x3ce8 <write_string_to_field(table*, unsigned int, unsigned int, char*)+0x18>
    3ce8:	00 d0       	rcall	.+0      	; 0x3cea <write_string_to_field(table*, unsigned int, unsigned int, char*)+0x1a>
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
    3cee:	8c 01       	movw	r16, r24
    3cf0:	5b 01       	movw	r10, r22
    3cf2:	7a 01       	movw	r14, r20
    3cf4:	69 01       	movw	r12, r18
Set_Text_Mode():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <display+0xd>
_Z21write_string_to_fieldP5tablejjPc():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:60
  display.Set_Text_Mode(1);
  display.Set_Text_Size((table->hlines[row + 1] - table->hlines[row]) / 8);
    3cfc:	d8 01       	movw	r26, r16
    3cfe:	1a 96       	adiw	r26, 0x0a	; 10
    3d00:	ed 91       	ld	r30, X+
    3d02:	fc 91       	ld	r31, X
    3d04:	ca 01       	movw	r24, r20
    3d06:	01 96       	adiw	r24, 0x01	; 1
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	e8 0f       	add	r30, r24
    3d12:	f9 1f       	adc	r31, r25
    3d14:	df 01       	movw	r26, r30
    3d16:	14 97       	sbiw	r26, 0x04	; 4
    3d18:	2d 91       	ld	r18, X+
    3d1a:	3d 91       	ld	r19, X+
    3d1c:	4d 91       	ld	r20, X+
    3d1e:	5c 91       	ld	r21, X
    3d20:	60 81       	ld	r22, Z
    3d22:	71 81       	ldd	r23, Z+1	; 0x01
    3d24:	82 81       	ldd	r24, Z+2	; 0x02
    3d26:	93 81       	ldd	r25, Z+3	; 0x03
    3d28:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__subsf3>
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	40 e0       	ldi	r20, 0x00	; 0
    3d32:	5e e3       	ldi	r21, 0x3E	; 62
    3d34:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulsf3>
    3d38:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
    3d3c:	60 93 01 03 	sts	0x0301, r22	; 0x800301 <display+0xc>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:61
  position entry_position = get_table_entry_position(table, column, row);
    3d40:	a7 01       	movw	r20, r14
    3d42:	b5 01       	movw	r22, r10
    3d44:	c8 01       	movw	r24, r16
    3d46:	0e 94 2a 07 	call	0xe54	; 0xe54 <get_table_entry_position(table*, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:62
  display.Print_String(text, entry_position.x+4, entry_position.y+4);
    3d4a:	5c 01       	movw	r10, r24
    3d4c:	b4 e0       	ldi	r27, 0x04	; 4
    3d4e:	ab 0e       	add	r10, r27
    3d50:	b1 1c       	adc	r11, r1
    3d52:	7b 01       	movw	r14, r22
    3d54:	e4 e0       	ldi	r30, 0x04	; 4
    3d56:	ee 0e       	add	r14, r30
    3d58:	f1 1c       	adc	r15, r1
_ZN6String4initEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    3d5a:	1a 82       	std	Y+2, r1	; 0x02
    3d5c:	19 82       	std	Y+1, r1	; 0x01
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:135
  capacity = 0;
    3d5e:	1c 82       	std	Y+4, r1	; 0x04
    3d60:	1b 82       	std	Y+3, r1	; 0x03
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:136
  len = 0;
    3d62:	1e 82       	std	Y+6, r1	; 0x06
    3d64:	1d 82       	std	Y+5, r1	; 0x05
__base_ctor ():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    3d66:	f6 01       	movw	r30, r12
    3d68:	01 90       	ld	r0, Z+
    3d6a:	00 20       	and	r0, r0
    3d6c:	e9 f7       	brne	.-6      	; 0x3d68 <write_string_to_field(table*, unsigned int, unsigned int, char*)+0x98>
    3d6e:	31 97       	sbiw	r30, 0x01	; 1
    3d70:	8f 01       	movw	r16, r30
    3d72:	0c 19       	sub	r16, r12
    3d74:	1d 09       	sbc	r17, r13
changeBuffer():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:158
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3d76:	b8 01       	movw	r22, r16
    3d78:	6f 5f       	subi	r22, 0xFF	; 255
    3d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <realloc>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
    3d84:	00 97       	sbiw	r24, 0x00	; 0
    3d86:	81 f0       	breq	.+32     	; 0x3da8 <write_string_to_field(table*, unsigned int, unsigned int, char*)+0xd8>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
    3d88:	9a 83       	std	Y+2, r25	; 0x02
    3d8a:	89 83       	std	Y+1, r24	; 0x01
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
    3d8c:	1c 83       	std	Y+4, r17	; 0x04
    3d8e:	0b 83       	std	Y+3, r16	; 0x03
reserve():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:150

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    3d90:	2d 81       	ldd	r18, Y+5	; 0x05
    3d92:	3e 81       	ldd	r19, Y+6	; 0x06
    3d94:	23 2b       	or	r18, r19
    3d96:	11 f4       	brne	.+4      	; 0x3d9c <write_string_to_field(table*, unsigned int, unsigned int, char*)+0xcc>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	1c 92       	st	X, r1
copy():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    3d9c:	1e 83       	std	Y+6, r17	; 0x06
    3d9e:	0d 83       	std	Y+5, r16	; 0x05
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    3da0:	b6 01       	movw	r22, r12
    3da2:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <strcpy>
    3da6:	0c c0       	rjmp	.+24     	; 0x3dc0 <write_string_to_field(table*, unsigned int, unsigned int, char*)+0xf0>
invalidate():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:141
  len = 0;
}

void String::invalidate(void)
{
  if (buffer) free(buffer);
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	9a 81       	ldd	r25, Y+2	; 0x02
    3dac:	00 97       	sbiw	r24, 0x00	; 0
    3dae:	11 f0       	breq	.+4      	; 0x3db4 <write_string_to_field(table*, unsigned int, unsigned int, char*)+0xe4>
    3db0:	0e 94 f6 35 	call	0x6bec	; 0x6bec <free>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    3db4:	1a 82       	std	Y+2, r1	; 0x02
    3db6:	19 82       	std	Y+1, r1	; 0x01
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    3db8:	1e 82       	std	Y+6, r1	; 0x06
    3dba:	1d 82       	std	Y+5, r1	; 0x05
    3dbc:	1c 82       	std	Y+4, r1	; 0x04
    3dbe:	1b 82       	std	Y+3, r1	; 0x03
_Z21write_string_to_fieldP5tablejjPc():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:62
    3dc0:	a5 01       	movw	r20, r10
    3dc2:	b7 01       	movw	r22, r14
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	01 96       	adiw	r24, 0x01	; 1
    3dc8:	0e 94 18 1b 	call	0x3630	; 0x3630 <LCDWIKI_GUI::Print_String(String, int, int) [clone .constprop.32]>
__base_dtor ():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd0:	00 97       	sbiw	r24, 0x00	; 0
    3dd2:	11 f0       	breq	.+4      	; 0x3dd8 <write_string_to_field(table*, unsigned int, unsigned int, char*)+0x108>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/WString.cpp:125
    free(buffer);
    3dd4:	0e 94 f6 35 	call	0x6bec	; 0x6bec <free>
_Z21write_string_to_fieldP5tablejjPc():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:63
}
    3dd8:	26 96       	adiw	r28, 0x06	; 6
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	f8 94       	cli
    3dde:	de bf       	out	0x3e, r29	; 62
    3de0:	0f be       	out	0x3f, r0	; 63
    3de2:	cd bf       	out	0x3d, r28	; 61
    3de4:	df 91       	pop	r29
    3de6:	cf 91       	pop	r28
    3de8:	1f 91       	pop	r17
    3dea:	0f 91       	pop	r16
    3dec:	ff 90       	pop	r15
    3dee:	ef 90       	pop	r14
    3df0:	df 90       	pop	r13
    3df2:	cf 90       	pop	r12
    3df4:	bf 90       	pop	r11
    3df6:	af 90       	pop	r10
    3df8:	08 95       	ret

00003dfa <fill_field(temp_table*, unsigned char, unsigned char)>:
_Z10fill_fieldP10temp_tablehh():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:76

char *get_time(struct temp_table *temp_table, uint8_t row) {
  return get_index(temp_table->setpoint_list, row)->data.time;
}

void fill_field(struct temp_table *temp_table, uint8_t column, uint8_t row) { // fill a field with its value and color
    3dfa:	4f 92       	push	r4
    3dfc:	5f 92       	push	r5
    3dfe:	6f 92       	push	r6
    3e00:	7f 92       	push	r7
    3e02:	9f 92       	push	r9
    3e04:	af 92       	push	r10
    3e06:	bf 92       	push	r11
    3e08:	cf 92       	push	r12
    3e0a:	df 92       	push	r13
    3e0c:	ef 92       	push	r14
    3e0e:	ff 92       	push	r15
    3e10:	0f 93       	push	r16
    3e12:	1f 93       	push	r17
    3e14:	cf 93       	push	r28
    3e16:	df 93       	push	r29
    3e18:	00 d0       	rcall	.+0      	; 0x3e1a <fill_field(temp_table*, unsigned char, unsigned char)+0x20>
    3e1a:	00 d0       	rcall	.+0      	; 0x3e1c <fill_field(temp_table*, unsigned char, unsigned char)+0x22>
    3e1c:	00 d0       	rcall	.+0      	; 0x3e1e <fill_field(temp_table*, unsigned char, unsigned char)+0x24>
    3e1e:	cd b7       	in	r28, 0x3d	; 61
    3e20:	de b7       	in	r29, 0x3e	; 62
    3e22:	7c 01       	movw	r14, r24
    3e24:	96 2e       	mov	r9, r22
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:77
  char field_str[6] = "";
    3e26:	1a 82       	std	Y+2, r1	; 0x02
    3e28:	19 82       	std	Y+1, r1	; 0x01
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	33 96       	adiw	r30, 0x03	; 3
    3e2e:	84 e0       	ldi	r24, 0x04	; 4
    3e30:	df 01       	movw	r26, r30
    3e32:	1d 92       	st	X+, r1
    3e34:	8a 95       	dec	r24
    3e36:	e9 f7       	brne	.-6      	; 0x3e32 <fill_field(temp_table*, unsigned char, unsigned char)+0x38>
    3e38:	64 2f       	mov	r22, r20
    3e3a:	70 e0       	ldi	r23, 0x00	; 0
    3e3c:	f7 01       	movw	r30, r14
    3e3e:	83 89       	ldd	r24, Z+19	; 0x13
    3e40:	94 89       	ldd	r25, Z+20	; 0x14
    3e42:	6b 01       	movw	r12, r22
    3e44:	ff ef       	ldi	r31, 0xFF	; 255
    3e46:	cf 1a       	sub	r12, r31
    3e48:	df 0a       	sbc	r13, r31
    3e4a:	9e 01       	movw	r18, r28
    3e4c:	2f 5f       	subi	r18, 0xFF	; 255
    3e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e50:	59 01       	movw	r10, r18
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:78
  if(column%2) { // selected field is a temperature field
    3e52:	99 20       	and	r9, r9
    3e54:	09 f4       	brne	.+2      	; 0x3e58 <fill_field(temp_table*, unsigned char, unsigned char)+0x5e>
    3e56:	63 c0       	rjmp	.+198    	; 0x3f1e <fill_field(temp_table*, unsigned char, unsigned char)+0x124>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:79
    uint16_t temp = get_index(temp_table->setpoint_list, row)->data.temp;
    3e58:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	16 96       	adiw	r26, 0x06	; 6
    3e60:	0d 91       	ld	r16, X+
    3e62:	1c 91       	ld	r17, X
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:80
    sprintf(field_str, "%4d", temp); // write temperature to field string with right alignment
    3e64:	1f 93       	push	r17
    3e66:	0f 93       	push	r16
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	92 e0       	ldi	r25, 0x02	; 2
    3e6c:	9f 93       	push	r25
    3e6e:	8f 93       	push	r24
    3e70:	bf 92       	push	r11
    3e72:	af 92       	push	r10
    3e74:	0e 94 5a 37 	call	0x6eb4	; 0x6eb4 <sprintf>
    3e78:	28 01       	movw	r4, r16
    3e7a:	71 2c       	mov	r7, r1
    3e7c:	61 2c       	mov	r6, r1
temperature_to_color():
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:14
rgb_color temperature_to_color(uint16_t temp) { // gives a green-yellow-red gradient based on the given temperature
  uint8_t r = 255;
  uint8_t g = 255;
  uint8_t b = 30;

  if(temp * 2 > MAX_TEMP){
    3e7e:	c8 01       	movw	r24, r16
    3e80:	88 0f       	add	r24, r24
    3e82:	99 1f       	adc	r25, r25
    3e84:	0f 90       	pop	r0
    3e86:	0f 90       	pop	r0
    3e88:	0f 90       	pop	r0
    3e8a:	0f 90       	pop	r0
    3e8c:	0f 90       	pop	r0
    3e8e:	0f 90       	pop	r0
    3e90:	85 31       	cpi	r24, 0x15	; 21
    3e92:	95 40       	sbci	r25, 0x05	; 5
    3e94:	90 f1       	brcs	.+100    	; 0x3efa <fill_field(temp_table*, unsigned char, unsigned char)+0x100>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:15
    g = 255 * (MAX_TEMP - (uint32_t)temp) / (uint32_t)temp;
    3e96:	a1 e0       	ldi	r26, 0x01	; 1
    3e98:	bf ef       	ldi	r27, 0xFF	; 255
    3e9a:	a3 01       	movw	r20, r6
    3e9c:	98 01       	movw	r18, r16
    3e9e:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__mulohisi3>
    3ea2:	64 51       	subi	r22, 0x14	; 20
    3ea4:	71 4f       	sbci	r23, 0xF1	; 241
    3ea6:	8a 4f       	sbci	r24, 0xFA	; 250
    3ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eaa:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <__udivmodsi4>
    3eae:	12 2f       	mov	r17, r18
_Z10fill_fieldP10temp_tablehh():
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:10
#include "temperature.h"

LCDWIKI_SPI display(MODEL,CS,CD,RST,LED);

rgb_color temperature_to_color(uint16_t temp) { // gives a green-yellow-red gradient based on the given temperature
  uint8_t r = 255;
    3eb0:	0f ef       	ldi	r16, 0xFF	; 255
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:81
    change_field_color(&temp_table->temp_table, column, row + 1, temperature_to_color(temp));
    3eb2:	2e e1       	ldi	r18, 0x1E	; 30
    3eb4:	a6 01       	movw	r20, r12
    3eb6:	61 e0       	ldi	r22, 0x01	; 1
    3eb8:	70 e0       	ldi	r23, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:84
  } else { // selected field is a time field
    strcpy(field_str, get_index(temp_table->setpoint_list, row)->data.time);
    change_field_color(&temp_table->temp_table, column, row + 1, {200, 200, 200});
    3eba:	c7 01       	movw	r24, r14
    3ebc:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <change_field_color(table*, unsigned int, unsigned int, rgb_color)>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:86
  }
  write_string_to_field(&temp_table->temp_table, column, row + 1, field_str); // update field contents
    3ec0:	69 2d       	mov	r22, r9
    3ec2:	70 e0       	ldi	r23, 0x00	; 0
    3ec4:	95 01       	movw	r18, r10
    3ec6:	a6 01       	movw	r20, r12
    3ec8:	c7 01       	movw	r24, r14
    3eca:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <write_string_to_field(table*, unsigned int, unsigned int, char*)>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:87
}
    3ece:	26 96       	adiw	r28, 0x06	; 6
    3ed0:	0f b6       	in	r0, 0x3f	; 63
    3ed2:	f8 94       	cli
    3ed4:	de bf       	out	0x3e, r29	; 62
    3ed6:	0f be       	out	0x3f, r0	; 63
    3ed8:	cd bf       	out	0x3d, r28	; 61
    3eda:	df 91       	pop	r29
    3edc:	cf 91       	pop	r28
    3ede:	1f 91       	pop	r17
    3ee0:	0f 91       	pop	r16
    3ee2:	ff 90       	pop	r15
    3ee4:	ef 90       	pop	r14
    3ee6:	df 90       	pop	r13
    3ee8:	cf 90       	pop	r12
    3eea:	bf 90       	pop	r11
    3eec:	af 90       	pop	r10
    3eee:	9f 90       	pop	r9
    3ef0:	7f 90       	pop	r7
    3ef2:	6f 90       	pop	r6
    3ef4:	5f 90       	pop	r5
    3ef6:	4f 90       	pop	r4
    3ef8:	08 95       	ret
temperature_to_color():
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:17
  uint8_t b = 30;

  if(temp * 2 > MAX_TEMP){
    g = 255 * (MAX_TEMP - (uint32_t)temp) / (uint32_t)temp;
  } else {
    r = 255 * (uint32_t)temp / (MAX_TEMP - (uint32_t)temp);
    3efa:	98 01       	movw	r18, r16
    3efc:	af ef       	ldi	r26, 0xFF	; 255
    3efe:	b0 e0       	ldi	r27, 0x00	; 0
    3f00:	0e 94 43 32 	call	0x6486	; 0x6486 <__umulhisi3>
    3f04:	24 e1       	ldi	r18, 0x14	; 20
    3f06:	35 e0       	ldi	r19, 0x05	; 5
    3f08:	40 e0       	ldi	r20, 0x00	; 0
    3f0a:	50 e0       	ldi	r21, 0x00	; 0
    3f0c:	24 19       	sub	r18, r4
    3f0e:	35 09       	sbc	r19, r5
    3f10:	46 09       	sbc	r20, r6
    3f12:	57 09       	sbc	r21, r7
    3f14:	0e 94 2a 35 	call	0x6a54	; 0x6a54 <__udivmodsi4>
    3f18:	02 2f       	mov	r16, r18
_Z10fill_fieldP10temp_tablehh():
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:11

LCDWIKI_SPI display(MODEL,CS,CD,RST,LED);

rgb_color temperature_to_color(uint16_t temp) { // gives a green-yellow-red gradient based on the given temperature
  uint8_t r = 255;
  uint8_t g = 255;
    3f1a:	1f ef       	ldi	r17, 0xFF	; 255
    3f1c:	ca cf       	rjmp	.-108    	; 0x3eb2 <fill_field(temp_table*, unsigned char, unsigned char)+0xb8>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:83
  if(column%2) { // selected field is a temperature field
    uint16_t temp = get_index(temp_table->setpoint_list, row)->data.temp;
    sprintf(field_str, "%4d", temp); // write temperature to field string with right alignment
    change_field_color(&temp_table->temp_table, column, row + 1, temperature_to_color(temp));
  } else { // selected field is a time field
    strcpy(field_str, get_index(temp_table->setpoint_list, row)->data.time);
    3f1e:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    3f22:	bc 01       	movw	r22, r24
    3f24:	c5 01       	movw	r24, r10
    3f26:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <strcpy>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:84
    change_field_color(&temp_table->temp_table, column, row + 1, {200, 200, 200});
    3f2a:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <__malloc_margin+0x2>
    3f2e:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <__malloc_margin+0x3>
    3f32:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__malloc_margin+0x4>
    3f36:	a6 01       	movw	r20, r12
    3f38:	70 e0       	ldi	r23, 0x00	; 0
    3f3a:	60 e0       	ldi	r22, 0x00	; 0
    3f3c:	be cf       	rjmp	.-132    	; 0x3eba <fill_field(temp_table*, unsigned char, unsigned char)+0xc0>

00003f3e <fill_table_section(temp_table*, unsigned char, unsigned char)>:
_Z18fill_table_sectionP10temp_tablehh():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:99
void clear_row(struct temp_table *temp_table, uint8_t row) { // fill both fields in a row with a grey color (emptying them)
  change_field_color(&temp_table->temp_table, 0, row, {200, 200, 200});
  change_field_color(&temp_table->temp_table, 1, row, {200, 200, 200});
}

void fill_table_section(struct temp_table *temp_table, uint8_t start_row, uint8_t end_row) {
    3f3e:	6f 92       	push	r6
    3f40:	7f 92       	push	r7
    3f42:	8f 92       	push	r8
    3f44:	bf 92       	push	r11
    3f46:	cf 92       	push	r12
    3f48:	df 92       	push	r13
    3f4a:	ef 92       	push	r14
    3f4c:	ff 92       	push	r15
    3f4e:	0f 93       	push	r16
    3f50:	1f 93       	push	r17
    3f52:	cf 93       	push	r28
    3f54:	df 93       	push	r29
    3f56:	7c 01       	movw	r14, r24
    3f58:	d6 2f       	mov	r29, r22
    3f5a:	b4 2e       	mov	r11, r20
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:100
  struct list<setpoint> *setpoint_iter = get_index(temp_table->setpoint_list, start_row);
    3f5c:	70 e0       	ldi	r23, 0x00	; 0
    3f5e:	fc 01       	movw	r30, r24
    3f60:	83 89       	ldd	r24, Z+19	; 0x13
    3f62:	94 89       	ldd	r25, Z+20	; 0x14
    3f64:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    3f68:	8c 01       	movw	r16, r24
    3f6a:	c1 e0       	ldi	r28, 0x01	; 1
    3f6c:	cd 0f       	add	r28, r29
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:102
  uint8_t i = start_row;
  while(setpoint_iter->next) { // fill fields which get a value
    3f6e:	f8 01       	movw	r30, r16
    3f70:	80 85       	ldd	r24, Z+8	; 0x08
    3f72:	91 85       	ldd	r25, Z+9	; 0x09
    3f74:	89 2b       	or	r24, r25
    3f76:	f9 f4       	brne	.+62     	; 0x3fb6 <fill_table_section(temp_table*, unsigned char, unsigned char)+0x78>
clear_row():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:95
  fill_field(temp_table, 0, row);
  fill_field(temp_table, 1, row);
}

void clear_row(struct temp_table *temp_table, uint8_t row) { // fill both fields in a row with a grey color (emptying them)
  change_field_color(&temp_table->temp_table, 0, row, {200, 200, 200});
    3f78:	60 90 42 01 	lds	r6, 0x0142	; 0x800142 <__malloc_margin+0x2>
    3f7c:	70 90 43 01 	lds	r7, 0x0143	; 0x800143 <__malloc_margin+0x3>
    3f80:	80 90 44 01 	lds	r8, 0x0144	; 0x800144 <__malloc_margin+0x4>
_Z18fill_table_sectionP10temp_tablehh():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:108
    fill_row(temp_table, i);
    i++;
    setpoint_iter = setpoint_iter->next;
  }
  i++;
  for(; i<temp_table->temp_table.rows && i <= end_row; i++) { // fill empty fields
    3f84:	f7 01       	movw	r30, r14
    3f86:	80 85       	ldd	r24, Z+8	; 0x08
    3f88:	c8 17       	cp	r28, r24
    3f8a:	20 f5       	brcc	.+72     	; 0x3fd4 <fill_table_section(temp_table*, unsigned char, unsigned char)+0x96>
    3f8c:	bc 16       	cp	r11, r28
    3f8e:	10 f1       	brcs	.+68     	; 0x3fd4 <fill_table_section(temp_table*, unsigned char, unsigned char)+0x96>
clear_row():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:95
  fill_field(temp_table, 0, row);
  fill_field(temp_table, 1, row);
}

void clear_row(struct temp_table *temp_table, uint8_t row) { // fill both fields in a row with a grey color (emptying them)
  change_field_color(&temp_table->temp_table, 0, row, {200, 200, 200});
    3f90:	cc 2e       	mov	r12, r28
    3f92:	d1 2c       	mov	r13, r1
    3f94:	28 2d       	mov	r18, r8
    3f96:	83 01       	movw	r16, r6
    3f98:	a6 01       	movw	r20, r12
    3f9a:	70 e0       	ldi	r23, 0x00	; 0
    3f9c:	60 e0       	ldi	r22, 0x00	; 0
    3f9e:	c7 01       	movw	r24, r14
    3fa0:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <change_field_color(table*, unsigned int, unsigned int, rgb_color)>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:96
  change_field_color(&temp_table->temp_table, 1, row, {200, 200, 200});
    3fa4:	28 2d       	mov	r18, r8
    3fa6:	a6 01       	movw	r20, r12
    3fa8:	61 e0       	ldi	r22, 0x01	; 1
    3faa:	70 e0       	ldi	r23, 0x00	; 0
    3fac:	c7 01       	movw	r24, r14
    3fae:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <change_field_color(table*, unsigned int, unsigned int, rgb_color)>
_Z18fill_table_sectionP10temp_tablehh():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:108
    fill_row(temp_table, i);
    i++;
    setpoint_iter = setpoint_iter->next;
  }
  i++;
  for(; i<temp_table->temp_table.rows && i <= end_row; i++) { // fill empty fields
    3fb2:	cf 5f       	subi	r28, 0xFF	; 255
    3fb4:	e7 cf       	rjmp	.-50     	; 0x3f84 <fill_table_section(temp_table*, unsigned char, unsigned char)+0x46>
fill_row():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:90
  }
  write_string_to_field(&temp_table->temp_table, column, row + 1, field_str); // update field contents
}

void fill_row(struct temp_table *temp_table, uint8_t row) { // fill both fields in a row with their value and background color
  fill_field(temp_table, 0, row);
    3fb6:	4d 2f       	mov	r20, r29
    3fb8:	60 e0       	ldi	r22, 0x00	; 0
    3fba:	c7 01       	movw	r24, r14
    3fbc:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <fill_field(temp_table*, unsigned char, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:91
  fill_field(temp_table, 1, row);
    3fc0:	4d 2f       	mov	r20, r29
    3fc2:	61 e0       	ldi	r22, 0x01	; 1
    3fc4:	c7 01       	movw	r24, r14
    3fc6:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <fill_field(temp_table*, unsigned char, unsigned char)>
_Z18fill_table_sectionP10temp_tablehh():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:105
  struct list<setpoint> *setpoint_iter = get_index(temp_table->setpoint_list, start_row);
  uint8_t i = start_row;
  while(setpoint_iter->next) { // fill fields which get a value
    fill_row(temp_table, i);
    i++;
    setpoint_iter = setpoint_iter->next;
    3fca:	f8 01       	movw	r30, r16
    3fcc:	00 85       	ldd	r16, Z+8	; 0x08
    3fce:	11 85       	ldd	r17, Z+9	; 0x09
    3fd0:	dc 2f       	mov	r29, r28
    3fd2:	cb cf       	rjmp	.-106    	; 0x3f6a <fill_table_section(temp_table*, unsigned char, unsigned char)+0x2c>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:111
  }
  i++;
  for(; i<temp_table->temp_table.rows && i <= end_row; i++) { // fill empty fields
    clear_row(temp_table, i);
  }
}
    3fd4:	df 91       	pop	r29
    3fd6:	cf 91       	pop	r28
    3fd8:	1f 91       	pop	r17
    3fda:	0f 91       	pop	r16
    3fdc:	ff 90       	pop	r15
    3fde:	ef 90       	pop	r14
    3fe0:	df 90       	pop	r13
    3fe2:	cf 90       	pop	r12
    3fe4:	bf 90       	pop	r11
    3fe6:	8f 90       	pop	r8
    3fe8:	7f 90       	pop	r7
    3fea:	6f 90       	pop	r6
    3fec:	08 95       	ret

00003fee <delete_row_event_listener(unsigned int, temp_table*)>:
_Z25delete_row_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:118
  }
  fill_field(temp_table, col, row); // update the field
  highlight_field(&temp_table->temp_table, col, row + 1);
}

void delete_row_event_listener(uint16_t keys, struct temp_table *temp_table) {
    3fee:	ef 92       	push	r14
    3ff0:	ff 92       	push	r15
    3ff2:	0f 93       	push	r16
    3ff4:	1f 93       	push	r17
    3ff6:	cf 93       	push	r28
    3ff8:	df 93       	push	r29
    3ffa:	db 01       	movw	r26, r22
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:119
  uint8_t rows = list_size<setpoint>(temp_table->setpoint_list); // total number of setpoint list entries
    3ffc:	53 96       	adiw	r26, 0x13	; 19
    3ffe:	6c 91       	ld	r22, X
    4000:	53 97       	sbiw	r26, 0x13	; 19
    4002:	54 96       	adiw	r26, 0x14	; 20
    4004:	7c 91       	ld	r23, X
    4006:	54 97       	sbiw	r26, 0x14	; 20
/home/noah/Documents/basteln/ofen_v2/main/list.h:97
}

template <typename T>
uint16_t list_size(struct list<T> *list) {
  uint16_t size = 0;
  struct list<T> *last_element = list;
    4008:	fb 01       	movw	r30, r22
/home/noah/Documents/basteln/ofen_v2/main/list.h:96
  return list->next;
}

template <typename T>
uint16_t list_size(struct list<T> *list) {
  uint16_t size = 0;
    400a:	f1 2c       	mov	r15, r1
    400c:	e1 2c       	mov	r14, r1
list_size():
/home/noah/Documents/basteln/ofen_v2/main/list.h:98
  struct list<T> *last_element = list;
  while(last_element->next) {
    400e:	00 84       	ldd	r0, Z+8	; 0x08
    4010:	f1 85       	ldd	r31, Z+9	; 0x09
    4012:	e0 2d       	mov	r30, r0
    4014:	30 97       	sbiw	r30, 0x00	; 0
    4016:	21 f0       	breq	.+8      	; 0x4020 <delete_row_event_listener(unsigned int, temp_table*)+0x32>
/home/noah/Documents/basteln/ofen_v2/main/list.h:100
    last_element = last_element->next;
    size++;
    4018:	2f ef       	ldi	r18, 0xFF	; 255
    401a:	e2 1a       	sub	r14, r18
    401c:	f2 0a       	sbc	r15, r18
    401e:	f7 cf       	rjmp	.-18     	; 0x400e <delete_row_event_listener(unsigned int, temp_table*)+0x20>
_Z25delete_row_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:120
  uint8_t col = temp_table->selected_field % 2;
    4020:	50 96       	adiw	r26, 0x10	; 16
    4022:	dc 91       	ld	r29, X
    4024:	50 97       	sbiw	r26, 0x10	; 16
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:121
  uint8_t row = temp_table->selected_field / 2;
    4026:	cd 2f       	mov	r28, r29
    4028:	c6 95       	lsr	r28
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:122
  if(row) { // cannot delete very first row
    402a:	69 f1       	breq	.+90     	; 0x4086 <delete_row_event_listener(unsigned int, temp_table*)+0x98>
    402c:	8d 01       	movw	r16, r26
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:123
    remove_point(temp_table->temp_graph, temp_table->setpoint_list, row); // removes point from graph
    402e:	4c 2f       	mov	r20, r28
    4030:	55 96       	adiw	r26, 0x15	; 21
    4032:	8d 91       	ld	r24, X+
    4034:	9c 91       	ld	r25, X
    4036:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <remove_point(graph*, list<setpoint>*, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:124
    remove_setpoint(temp_table->setpoint_list, row); // removes point from list
    403a:	6c 2f       	mov	r22, r28
    403c:	f8 01       	movw	r30, r16
    403e:	83 89       	ldd	r24, Z+19	; 0x13
    4040:	94 89       	ldd	r25, Z+20	; 0x14
    4042:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <remove_setpoint(list<setpoint>*, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:125
    fill_table_section(temp_table, row, rows); // removes point from table
    4046:	4e 2d       	mov	r20, r14
    4048:	6c 2f       	mov	r22, r28
    404a:	c8 01       	movw	r24, r16
    404c:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <fill_table_section(temp_table*, unsigned char, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:126
    if(row == rows - 1) { // select the previous row if the delted row is the last one
    4050:	2e 2d       	mov	r18, r14
    4052:	21 50       	subi	r18, 0x01	; 1
    4054:	33 0b       	sbc	r19, r19
    4056:	c2 17       	cp	r28, r18
    4058:	13 06       	cpc	r1, r19
    405a:	29 f4       	brne	.+10     	; 0x4066 <delete_row_event_listener(unsigned int, temp_table*)+0x78>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:127
      row--;
    405c:	c1 50       	subi	r28, 0x01	; 1
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:128
      temp_table->selected_field -= 2;
    405e:	f8 01       	movw	r30, r16
    4060:	80 89       	ldd	r24, Z+16	; 0x10
    4062:	82 50       	subi	r24, 0x02	; 2
    4064:	80 8b       	std	Z+16, r24	; 0x10
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:130
    }
    highlight_field(&temp_table->temp_table, col, row + 1);
    4066:	4c 2f       	mov	r20, r28
    4068:	50 e0       	ldi	r21, 0x00	; 0
    406a:	4f 5f       	subi	r20, 0xFF	; 255
    406c:	5f 4f       	sbci	r21, 0xFF	; 255
    406e:	6d 2f       	mov	r22, r29
    4070:	61 70       	andi	r22, 0x01	; 1
    4072:	70 e0       	ldi	r23, 0x00	; 0
    4074:	c8 01       	movw	r24, r16
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:133
    
  }
}
    4076:	df 91       	pop	r29
    4078:	cf 91       	pop	r28
    407a:	1f 91       	pop	r17
    407c:	0f 91       	pop	r16
    407e:	ff 90       	pop	r15
    4080:	ef 90       	pop	r14
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:130
    fill_table_section(temp_table, row, rows); // removes point from table
    if(row == rows - 1) { // select the previous row if the delted row is the last one
      row--;
      temp_table->selected_field -= 2;
    }
    highlight_field(&temp_table->temp_table, col, row + 1);
    4082:	0c 94 df 0b 	jmp	0x17be	; 0x17be <highlight_field(table*, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:133
    
  }
}
    4086:	df 91       	pop	r29
    4088:	cf 91       	pop	r28
    408a:	1f 91       	pop	r17
    408c:	0f 91       	pop	r16
    408e:	ff 90       	pop	r15
    4090:	ef 90       	pop	r14
    4092:	08 95       	ret

00004094 <add_row_event_listener(unsigned int, temp_table*)>:
_Z22add_row_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:135

void add_row_event_listener(uint16_t keys, struct temp_table *temp_table) {
    4094:	af 92       	push	r10
    4096:	bf 92       	push	r11
    4098:	cf 92       	push	r12
    409a:	df 92       	push	r13
    409c:	ef 92       	push	r14
    409e:	ff 92       	push	r15
    40a0:	0f 93       	push	r16
    40a2:	1f 93       	push	r17
    40a4:	cf 93       	push	r28
    40a6:	df 93       	push	r29
    40a8:	eb 01       	movw	r28, r22
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:136
  uint8_t rows = list_size<setpoint>(temp_table->setpoint_list); // total number of setpoint list entries
    40aa:	bb 88       	ldd	r11, Y+19	; 0x13
    40ac:	cc 88       	ldd	r12, Y+20	; 0x14
/home/noah/Documents/basteln/ofen_v2/main/list.h:97
}

template <typename T>
uint16_t list_size(struct list<T> *list) {
  uint16_t size = 0;
  struct list<T> *last_element = list;
    40ae:	eb 2d       	mov	r30, r11
    40b0:	fc 2d       	mov	r31, r12
/home/noah/Documents/basteln/ofen_v2/main/list.h:96
  return list->next;
}

template <typename T>
uint16_t list_size(struct list<T> *list) {
  uint16_t size = 0;
    40b2:	10 e0       	ldi	r17, 0x00	; 0
    40b4:	00 e0       	ldi	r16, 0x00	; 0
list_size():
/home/noah/Documents/basteln/ofen_v2/main/list.h:98
  struct list<T> *last_element = list;
  while(last_element->next) {
    40b6:	00 84       	ldd	r0, Z+8	; 0x08
    40b8:	f1 85       	ldd	r31, Z+9	; 0x09
    40ba:	e0 2d       	mov	r30, r0
    40bc:	30 97       	sbiw	r30, 0x00	; 0
    40be:	19 f0       	breq	.+6      	; 0x40c6 <add_row_event_listener(unsigned int, temp_table*)+0x32>
/home/noah/Documents/basteln/ofen_v2/main/list.h:100
    last_element = last_element->next;
    size++;
    40c0:	0f 5f       	subi	r16, 0xFF	; 255
    40c2:	1f 4f       	sbci	r17, 0xFF	; 255
    40c4:	f8 cf       	rjmp	.-16     	; 0x40b6 <add_row_event_listener(unsigned int, temp_table*)+0x22>
_Z22add_row_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:137
  if(rows >= temp_table->temp_table.rows - 2) return; // dont add row if table is full
    40c6:	88 85       	ldd	r24, Y+8	; 0x08
    40c8:	82 50       	subi	r24, 0x02	; 2
    40ca:	99 0b       	sbc	r25, r25
    40cc:	08 17       	cp	r16, r24
    40ce:	19 06       	cpc	r1, r25
    40d0:	cc f5       	brge	.+114    	; 0x4144 <add_row_event_listener(unsigned int, temp_table*)+0xb0>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:138
  uint8_t col = temp_table->selected_field % 2;
    40d2:	18 89       	ldd	r17, Y+16	; 0x10
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:139
  uint8_t row = temp_table->selected_field / 2;
    40d4:	d1 2e       	mov	r13, r17
    40d6:	d6 94       	lsr	r13
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:140
  struct list<setpoint> *prev_setpoint = get_index(temp_table->setpoint_list, row); // save setpoint that comes before the newly added setpoint
    40d8:	ed 2c       	mov	r14, r13
    40da:	f1 2c       	mov	r15, r1
    40dc:	b7 01       	movw	r22, r14
    40de:	8b 2d       	mov	r24, r11
    40e0:	9c 2d       	mov	r25, r12
    40e2:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:141
  add_setpoint(temp_table->setpoint_list, time_str_to_min(prev_setpoint->data.time), 0, row + 1); // add setpoint with same timestamp as the previous one, directly after the previous one
    40e6:	aa 24       	eor	r10, r10
    40e8:	a3 94       	inc	r10
    40ea:	ad 0c       	add	r10, r13
    40ec:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    40f0:	2a 2d       	mov	r18, r10
    40f2:	50 e0       	ldi	r21, 0x00	; 0
    40f4:	40 e0       	ldi	r20, 0x00	; 0
    40f6:	bc 01       	movw	r22, r24
    40f8:	8b 2d       	mov	r24, r11
    40fa:	9c 2d       	mov	r25, r12
    40fc:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:142
  fill_table_section(temp_table, row, rows);
    4100:	40 2f       	mov	r20, r16
    4102:	6d 2d       	mov	r22, r13
    4104:	ce 01       	movw	r24, r28
    4106:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <fill_table_section(temp_table*, unsigned char, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:143
  temp_table->selected_field += 2; // select and highlight newly created row
    410a:	88 89       	ldd	r24, Y+16	; 0x10
    410c:	8e 5f       	subi	r24, 0xFE	; 254
    410e:	88 8b       	std	Y+16, r24	; 0x10
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:144
  highlight_field(&temp_table->temp_table, col, row + 2);
    4110:	a7 01       	movw	r20, r14
    4112:	4e 5f       	subi	r20, 0xFE	; 254
    4114:	5f 4f       	sbci	r21, 0xFF	; 255
    4116:	61 2f       	mov	r22, r17
    4118:	61 70       	andi	r22, 0x01	; 1
    411a:	70 e0       	ldi	r23, 0x00	; 0
    411c:	ce 01       	movw	r24, r28
    411e:	0e 94 df 0b 	call	0x17be	; 0x17be <highlight_field(table*, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:146

  add_point(temp_table->temp_graph, temp_table->setpoint_list, row + 1);
    4122:	6b 89       	ldd	r22, Y+19	; 0x13
    4124:	7c 89       	ldd	r23, Y+20	; 0x14
    4126:	4a 2d       	mov	r20, r10
    4128:	8d 89       	ldd	r24, Y+21	; 0x15
    412a:	9e 89       	ldd	r25, Y+22	; 0x16
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:147
    412c:	df 91       	pop	r29
    412e:	cf 91       	pop	r28
    4130:	1f 91       	pop	r17
    4132:	0f 91       	pop	r16
    4134:	ff 90       	pop	r15
    4136:	ef 90       	pop	r14
    4138:	df 90       	pop	r13
    413a:	cf 90       	pop	r12
    413c:	bf 90       	pop	r11
    413e:	af 90       	pop	r10
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:146
  add_setpoint(temp_table->setpoint_list, time_str_to_min(prev_setpoint->data.time), 0, row + 1); // add setpoint with same timestamp as the previous one, directly after the previous one
  fill_table_section(temp_table, row, rows);
  temp_table->selected_field += 2; // select and highlight newly created row
  highlight_field(&temp_table->temp_table, col, row + 2);

  add_point(temp_table->temp_graph, temp_table->setpoint_list, row + 1);
    4140:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <add_point(graph*, list<setpoint>*, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:147
    4144:	df 91       	pop	r29
    4146:	cf 91       	pop	r28
    4148:	1f 91       	pop	r17
    414a:	0f 91       	pop	r16
    414c:	ff 90       	pop	r15
    414e:	ef 90       	pop	r14
    4150:	df 90       	pop	r13
    4152:	cf 90       	pop	r12
    4154:	bf 90       	pop	r11
    4156:	af 90       	pop	r10
    4158:	08 95       	ret

0000415a <set_time(temp_table*, unsigned char, char*) [clone .part.1]>:
_Z8set_timeP10temp_tablehPc.part.1():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:30

uint16_t get_temp(struct temp_table *temp_table, uint8_t row) {
  return get_index(temp_table->setpoint_list, row)->data.temp;
}

void set_time(struct temp_table *temp_table, uint8_t row, char *new_time_str) {
    415a:	2f 92       	push	r2
    415c:	3f 92       	push	r3
    415e:	4f 92       	push	r4
    4160:	5f 92       	push	r5
    4162:	6f 92       	push	r6
    4164:	7f 92       	push	r7
    4166:	8f 92       	push	r8
    4168:	9f 92       	push	r9
    416a:	af 92       	push	r10
    416c:	bf 92       	push	r11
    416e:	cf 92       	push	r12
    4170:	ef 92       	push	r14
    4172:	ff 92       	push	r15
    4174:	0f 93       	push	r16
    4176:	1f 93       	push	r17
    4178:	cf 93       	push	r28
    417a:	df 93       	push	r29
    417c:	cd b7       	in	r28, 0x3d	; 61
    417e:	de b7       	in	r29, 0x3e	; 62
    4180:	2c 97       	sbiw	r28, 0x0c	; 12
    4182:	0f b6       	in	r0, 0x3f	; 63
    4184:	f8 94       	cli
    4186:	de bf       	out	0x3e, r29	; 62
    4188:	0f be       	out	0x3f, r0	; 63
    418a:	cd bf       	out	0x3d, r28	; 61
    418c:	5c 01       	movw	r10, r24
    418e:	c6 2e       	mov	r12, r22
    4190:	7a 01       	movw	r14, r20
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:33
  if(!row) return;

  setpoint *edit_setpoint = &get_index(temp_table->setpoint_list, row)->data;
    4192:	46 2e       	mov	r4, r22
    4194:	51 2c       	mov	r5, r1
    4196:	b2 01       	movw	r22, r4
    4198:	fc 01       	movw	r30, r24
    419a:	83 89       	ldd	r24, Z+19	; 0x13
    419c:	94 89       	ldd	r25, Z+20	; 0x14
    419e:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    41a2:	8c 01       	movw	r16, r24
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:35
  char *time_str = edit_setpoint->time;
  if(is_valid_time_str(time_str)) strcpy(temp_table->pre_edit, time_str);
    41a4:	0e 94 1a 07 	call	0xe34	; 0xe34 <is_valid_time_str(char*)>
    41a8:	88 23       	and	r24, r24
    41aa:	31 f0       	breq	.+12     	; 0x41b8 <set_time(temp_table*, unsigned char, char*) [clone .part.1]+0x5e>
    41ac:	b8 01       	movw	r22, r16
    41ae:	f5 01       	movw	r30, r10
    41b0:	81 89       	ldd	r24, Z+17	; 0x11
    41b2:	92 89       	ldd	r25, Z+18	; 0x12
    41b4:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <strcpy>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:37

  if(is_valid_time_str(new_time_str)) { // only sort setpoint_list if the new time string is valid
    41b8:	c7 01       	movw	r24, r14
    41ba:	0e 94 1a 07 	call	0xe34	; 0xe34 <is_valid_time_str(char*)>
    41be:	88 23       	and	r24, r24
    41c0:	09 f4       	brne	.+2      	; 0x41c4 <set_time(temp_table*, unsigned char, char*) [clone .part.1]+0x6a>
    41c2:	a2 c0       	rjmp	.+324    	; 0x4308 <set_time(temp_table*, unsigned char, char*) [clone .part.1]+0x1ae>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:40
    uint8_t new_row = row;
    setpoint old_setpoint;
    old_setpoint.temp = edit_setpoint->temp;
    41c4:	f8 01       	movw	r30, r16
    41c6:	06 80       	ldd	r0, Z+6	; 0x06
    41c8:	f7 81       	ldd	r31, Z+7	; 0x07
    41ca:	e0 2d       	mov	r30, r0
    41cc:	fa 87       	std	Y+10, r31	; 0x0a
    41ce:	e9 87       	std	Y+9, r30	; 0x09
    41d0:	f8 87       	std	Y+8, r31	; 0x08
    41d2:	ef 83       	std	Y+7, r30	; 0x07
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:41
    strcpy(old_setpoint.time, temp_table->pre_edit);
    41d4:	f5 01       	movw	r30, r10
    41d6:	81 88       	ldd	r8, Z+17	; 0x11
    41d8:	92 88       	ldd	r9, Z+18	; 0x12
    41da:	b4 01       	movw	r22, r8
    41dc:	ce 01       	movw	r24, r28
    41de:	01 96       	adiw	r24, 0x01	; 1
    41e0:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <strcpy>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:43

    uint16_t prev_time = time_str_to_min(get_index(temp_table->setpoint_list, row - 1)->data.time);
    41e4:	f5 01       	movw	r30, r10
    41e6:	63 88       	ldd	r6, Z+19	; 0x13
    41e8:	74 88       	ldd	r7, Z+20	; 0x14
    41ea:	b2 01       	movw	r22, r4
    41ec:	61 50       	subi	r22, 0x01	; 1
    41ee:	71 09       	sbc	r23, r1
    41f0:	c3 01       	movw	r24, r6
    41f2:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    41f6:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    41fa:	9c 87       	std	Y+12, r25	; 0x0c
    41fc:	8b 87       	std	Y+11, r24	; 0x0b
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:44
    uint16_t curr_time = time_str_to_min(new_time_str);
    41fe:	c7 01       	movw	r24, r14
    4200:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    4204:	1c 01       	movw	r2, r24
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:45
    uint16_t next_time = time_str_to_min(get_index(temp_table->setpoint_list, row + 1)->data.time);    
    4206:	b2 01       	movw	r22, r4
    4208:	6f 5f       	subi	r22, 0xFF	; 255
    420a:	7f 4f       	sbci	r23, 0xFF	; 255
    420c:	c3 01       	movw	r24, r6
    420e:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    4212:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:47
    
    if(curr_time < prev_time || curr_time > next_time) { // checks whether the list has to be sorted again, i.e. if the new time value is higher/lower than the time value of adjacent rows
    4216:	2b 85       	ldd	r18, Y+11	; 0x0b
    4218:	3c 85       	ldd	r19, Y+12	; 0x0c
    421a:	22 16       	cp	r2, r18
    421c:	33 06       	cpc	r3, r19
    421e:	20 f0       	brcs	.+8      	; 0x4228 <set_time(temp_table*, unsigned char, char*) [clone .part.1]+0xce>
    4220:	82 15       	cp	r24, r2
    4222:	93 05       	cpc	r25, r3
    4224:	08 f0       	brcs	.+2      	; 0x4228 <set_time(temp_table*, unsigned char, char*) [clone .part.1]+0xce>
    4226:	5c c0       	rjmp	.+184    	; 0x42e0 <set_time(temp_table*, unsigned char, char*) [clone .part.1]+0x186>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:50
      uint16_t temp = edit_setpoint->temp; // save temperature value
      
      strcpy(time_str, temp_table->pre_edit);
    4228:	b4 01       	movw	r22, r8
    422a:	c8 01       	movw	r24, r16
    422c:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <strcpy>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:51
      remove_point(temp_table->temp_graph, temp_table->setpoint_list, row); // removes point from graph
    4230:	f5 01       	movw	r30, r10
    4232:	63 89       	ldd	r22, Z+19	; 0x13
    4234:	74 89       	ldd	r23, Z+20	; 0x14
    4236:	4c 2d       	mov	r20, r12
    4238:	85 89       	ldd	r24, Z+21	; 0x15
    423a:	96 89       	ldd	r25, Z+22	; 0x16
    423c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <remove_point(graph*, list<setpoint>*, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:52
      Serial.println(edit_setpoint->time);
    4240:	c8 01       	movw	r24, r16
    4242:	0e 94 2a 1a 	call	0x3454	; 0x3454 <Print::println(char const*) [clone .constprop.17]>
print():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:84
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    4246:	f8 01       	movw	r30, r16
    4248:	66 81       	ldd	r22, Z+6	; 0x06
    424a:	77 81       	ldd	r23, Z+7	; 0x07
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	80 e0       	ldi	r24, 0x00	; 0
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    4250:	4a e0       	ldi	r20, 0x0A	; 10
    4252:	0e 94 4c 19 	call	0x3298	; 0x3298 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.63]>
write():
    4256:	85 ed       	ldi	r24, 0xD5	; 213
    4258:	91 e0       	ldi	r25, 0x01	; 1
    425a:	0e 94 3f 19 	call	0x327e	; 0x327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>
_Z8set_timeP10temp_tablehPc.part.1():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:54
      Serial.println(edit_setpoint->temp);
      remove_setpoint(temp_table->setpoint_list, row); // remove setpoint and add it again so it is inserted in the correct position (sorted in a pre-sorted list)
    425e:	6c 2d       	mov	r22, r12
    4260:	f5 01       	movw	r30, r10
    4262:	83 89       	ldd	r24, Z+19	; 0x13
    4264:	94 89       	ldd	r25, Z+20	; 0x14
    4266:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <remove_setpoint(list<setpoint>*, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:55
      new_row = add_setpoint(temp_table->setpoint_list, time_str_to_min(new_time_str), temp, row); // add setpoint as close as possible to its original position if it has the same timestamp as another setpoint
    426a:	c7 01       	movw	r24, r14
    426c:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    4270:	2c 2d       	mov	r18, r12
    4272:	49 85       	ldd	r20, Y+9	; 0x09
    4274:	5a 85       	ldd	r21, Y+10	; 0x0a
    4276:	bc 01       	movw	r22, r24
    4278:	f5 01       	movw	r30, r10
    427a:	83 89       	ldd	r24, Z+19	; 0x13
    427c:	94 89       	ldd	r25, Z+20	; 0x14
    427e:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)>
    4282:	18 2f       	mov	r17, r24
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:56
      add_point(temp_table->temp_graph, temp_table->setpoint_list, new_row);
    4284:	f5 01       	movw	r30, r10
    4286:	63 89       	ldd	r22, Z+19	; 0x13
    4288:	74 89       	ldd	r23, Z+20	; 0x14
    428a:	48 2f       	mov	r20, r24
    428c:	85 89       	ldd	r24, Z+21	; 0x15
    428e:	96 89       	ldd	r25, Z+22	; 0x16
    4290:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <add_point(graph*, list<setpoint>*, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:58

      fill_table_section(temp_table, min(row, new_row), max(row, new_row)); // redraw the part of the table between the old and the new position of the setpoint
    4294:	4c 2d       	mov	r20, r12
    4296:	c1 16       	cp	r12, r17
    4298:	08 f4       	brcc	.+2      	; 0x429c <set_time(temp_table*, unsigned char, char*) [clone .part.1]+0x142>
    429a:	41 2f       	mov	r20, r17
    429c:	6c 2d       	mov	r22, r12
    429e:	1c 15       	cp	r17, r12
    42a0:	08 f4       	brcc	.+2      	; 0x42a4 <set_time(temp_table*, unsigned char, char*) [clone .part.1]+0x14a>
    42a2:	61 2f       	mov	r22, r17
    42a4:	c5 01       	movw	r24, r10
    42a6:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <fill_table_section(temp_table*, unsigned char, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:60

      temp_table->selected_field = new_row * 2; // select the field where the setpoint is now
    42aa:	11 0f       	add	r17, r17
    42ac:	f5 01       	movw	r30, r10
    42ae:	10 8b       	std	Z+16, r17	; 0x10
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:70

    
  } else {
    strcpy(time_str, new_time_str);
  }
}
    42b0:	2c 96       	adiw	r28, 0x0c	; 12
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	de bf       	out	0x3e, r29	; 62
    42b8:	0f be       	out	0x3f, r0	; 63
    42ba:	cd bf       	out	0x3d, r28	; 61
    42bc:	df 91       	pop	r29
    42be:	cf 91       	pop	r28
    42c0:	1f 91       	pop	r17
    42c2:	0f 91       	pop	r16
    42c4:	ff 90       	pop	r15
    42c6:	ef 90       	pop	r14
    42c8:	cf 90       	pop	r12
    42ca:	bf 90       	pop	r11
    42cc:	af 90       	pop	r10
    42ce:	9f 90       	pop	r9
    42d0:	8f 90       	pop	r8
    42d2:	7f 90       	pop	r7
    42d4:	6f 90       	pop	r6
    42d6:	5f 90       	pop	r5
    42d8:	4f 90       	pop	r4
    42da:	3f 90       	pop	r3
    42dc:	2f 90       	pop	r2
    42de:	08 95       	ret
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:62

      fill_table_section(temp_table, min(row, new_row), max(row, new_row)); // redraw the part of the table between the old and the new position of the setpoint

      temp_table->selected_field = new_row * 2; // select the field where the setpoint is now
    } else { // otherwise, just add the new time string in place
      strcpy(time_str, new_time_str);
    42e0:	b7 01       	movw	r22, r14
    42e2:	c8 01       	movw	r24, r16
    42e4:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <strcpy>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:63
      edit_point(temp_table->temp_graph, temp_table->setpoint_list, old_setpoint, row);
    42e8:	f5 01       	movw	r30, r10
    42ea:	63 89       	ldd	r22, Z+19	; 0x13
    42ec:	74 89       	ldd	r23, Z+20	; 0x14
    42ee:	e9 80       	ldd	r14, Y+1	; 0x01
    42f0:	fa 80       	ldd	r15, Y+2	; 0x02
    42f2:	0b 81       	ldd	r16, Y+3	; 0x03
    42f4:	1c 81       	ldd	r17, Y+4	; 0x04
    42f6:	2d 81       	ldd	r18, Y+5	; 0x05
    42f8:	3e 81       	ldd	r19, Y+6	; 0x06
    42fa:	4f 81       	ldd	r20, Y+7	; 0x07
    42fc:	58 85       	ldd	r21, Y+8	; 0x08
    42fe:	85 89       	ldd	r24, Z+21	; 0x15
    4300:	96 89       	ldd	r25, Z+22	; 0x16
    4302:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)>
    4306:	d4 cf       	rjmp	.-88     	; 0x42b0 <set_time(temp_table*, unsigned char, char*) [clone .part.1]+0x156>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:68
    }

    
  } else {
    strcpy(time_str, new_time_str);
    4308:	b7 01       	movw	r22, r14
    430a:	c8 01       	movw	r24, r16
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:70
  }
}
    430c:	2c 96       	adiw	r28, 0x0c	; 12
    430e:	0f b6       	in	r0, 0x3f	; 63
    4310:	f8 94       	cli
    4312:	de bf       	out	0x3e, r29	; 62
    4314:	0f be       	out	0x3f, r0	; 63
    4316:	cd bf       	out	0x3d, r28	; 61
    4318:	df 91       	pop	r29
    431a:	cf 91       	pop	r28
    431c:	1f 91       	pop	r17
    431e:	0f 91       	pop	r16
    4320:	ff 90       	pop	r15
    4322:	ef 90       	pop	r14
    4324:	cf 90       	pop	r12
    4326:	bf 90       	pop	r11
    4328:	af 90       	pop	r10
    432a:	9f 90       	pop	r9
    432c:	8f 90       	pop	r8
    432e:	7f 90       	pop	r7
    4330:	6f 90       	pop	r6
    4332:	5f 90       	pop	r5
    4334:	4f 90       	pop	r4
    4336:	3f 90       	pop	r3
    4338:	2f 90       	pop	r2
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:68
      edit_point(temp_table->temp_graph, temp_table->setpoint_list, old_setpoint, row);
    }

    
  } else {
    strcpy(time_str, new_time_str);
    433a:	0c 94 53 37 	jmp	0x6ea6	; 0x6ea6 <strcpy>

0000433e <arrow_click_event_listener(unsigned int, temp_table*)>:
_Z26arrow_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:11
#include "utils.h"
#include "temperature.h"
#include "setpoint.h"
#include "temp_graph.h"

void arrow_click_event_listener(uint16_t keys, struct temp_table *temp_table) {
    433e:	3f 92       	push	r3
    4340:	4f 92       	push	r4
    4342:	5f 92       	push	r5
    4344:	6f 92       	push	r6
    4346:	7f 92       	push	r7
    4348:	8f 92       	push	r8
    434a:	9f 92       	push	r9
    434c:	af 92       	push	r10
    434e:	bf 92       	push	r11
    4350:	cf 92       	push	r12
    4352:	df 92       	push	r13
    4354:	ef 92       	push	r14
    4356:	ff 92       	push	r15
    4358:	0f 93       	push	r16
    435a:	1f 93       	push	r17
    435c:	cf 93       	push	r28
    435e:	df 93       	push	r29
    4360:	cd b7       	in	r28, 0x3d	; 61
    4362:	de b7       	in	r29, 0x3e	; 62
    4364:	28 97       	sbiw	r28, 0x08	; 8
    4366:	0f b6       	in	r0, 0x3f	; 63
    4368:	f8 94       	cli
    436a:	de bf       	out	0x3e, r29	; 62
    436c:	0f be       	out	0x3f, r0	; 63
    436e:	cd bf       	out	0x3d, r28	; 61
    4370:	3c 01       	movw	r6, r24
    4372:	5b 01       	movw	r10, r22
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:12
  uint8_t rows = list_size<setpoint>(temp_table->setpoint_list); // total number of setpoint list entries
    4374:	db 01       	movw	r26, r22
    4376:	53 96       	adiw	r26, 0x13	; 19
    4378:	4c 90       	ld	r4, X
    437a:	53 97       	sbiw	r26, 0x13	; 19
    437c:	54 96       	adiw	r26, 0x14	; 20
    437e:	5c 90       	ld	r5, X
/home/noah/Documents/basteln/ofen_v2/main/list.h:97
}

template <typename T>
uint16_t list_size(struct list<T> *list) {
  uint16_t size = 0;
  struct list<T> *last_element = list;
    4380:	f2 01       	movw	r30, r4
/home/noah/Documents/basteln/ofen_v2/main/list.h:96
  return list->next;
}

template <typename T>
uint16_t list_size(struct list<T> *list) {
  uint16_t size = 0;
    4382:	91 2c       	mov	r9, r1
    4384:	81 2c       	mov	r8, r1
list_size():
/home/noah/Documents/basteln/ofen_v2/main/list.h:98
  struct list<T> *last_element = list;
  while(last_element->next) {
    4386:	00 84       	ldd	r0, Z+8	; 0x08
    4388:	f1 85       	ldd	r31, Z+9	; 0x09
    438a:	e0 2d       	mov	r30, r0
    438c:	30 97       	sbiw	r30, 0x00	; 0
    438e:	21 f0       	breq	.+8      	; 0x4398 <arrow_click_event_listener(unsigned int, temp_table*)+0x5a>
/home/noah/Documents/basteln/ofen_v2/main/list.h:100
    last_element = last_element->next;
    size++;
    4390:	bf ef       	ldi	r27, 0xFF	; 255
    4392:	8b 1a       	sub	r8, r27
    4394:	9b 0a       	sbc	r9, r27
    4396:	f7 cf       	rjmp	.-18     	; 0x4386 <arrow_click_event_listener(unsigned int, temp_table*)+0x48>
_Z26arrow_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:13
  uint8_t col = temp_table->selected_field % 2;
    4398:	f5 01       	movw	r30, r10
    439a:	80 89       	ldd	r24, Z+16	; 0x10
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:14
  uint8_t row = temp_table->selected_field / 2;
    439c:	d8 2e       	mov	r13, r24
    439e:	d6 94       	lsr	r13
Set_Draw_color():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:46
}

//set 8bits r,g,b color
void LCDWIKI_GUI::Set_Draw_color(uint8_t r, uint8_t g, uint8_t b)
{
	draw_color = Color_To_565(r, g, b);
    43a0:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <display+0xb>
    43a4:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <display+0xa>
    43a8:	e1 88       	ldd	r14, Z+17	; 0x11
    43aa:	f2 88       	ldd	r15, Z+18	; 0x12
    43ac:	6d 2d       	mov	r22, r13
    43ae:	70 e0       	ldi	r23, 0x00	; 0
_Z26arrow_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:18
  setpoint old_setpoint;
  display.Set_Draw_color(0, 0, 0); // draw color gets manipulated at the end of this function, set it to black

  if(!col) { // previously selected field is a time field, (but not the first one?). those fields may require the table to be sorted (by time) again if the time value has been changed
    43b0:	f8 2f       	mov	r31, r24
    43b2:	f1 70       	andi	r31, 0x01	; 1
    43b4:	3f 2e       	mov	r3, r31
    43b6:	80 fd       	sbrc	r24, 0
    43b8:	25 c0       	rjmp	.+74     	; 0x4404 <arrow_click_event_listener(unsigned int, temp_table*)+0xc6>
get_time():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:73
  }
}

char *get_time(struct temp_table *temp_table, uint8_t row) {
  return get_index(temp_table->setpoint_list, row)->data.time;
    43ba:	c2 01       	movw	r24, r4
    43bc:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    43c0:	8c 01       	movw	r16, r24
validate_time_str():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:130
}

// makes a time string valid again by replacing it with the saved previous value of the time field if the current time field is incomplete, i.e. containing spaces
// also returns if the time string was valid or had to be changed
uint8_t validate_time_str(char *time_str, char *replacement) {
  if(!is_valid_time_str(time_str)) {
    43c2:	0e 94 1a 07 	call	0xe34	; 0xe34 <is_valid_time_str(char*)>
    43c6:	81 11       	cpse	r24, r1
    43c8:	04 c0       	rjmp	.+8      	; 0x43d2 <arrow_click_event_listener(unsigned int, temp_table*)+0x94>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:131
    strcpy(time_str, replacement); // replace time string with previous value
    43ca:	b7 01       	movw	r22, r14
    43cc:	c8 01       	movw	r24, r16
    43ce:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <strcpy>
set_time():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:31
uint16_t get_temp(struct temp_table *temp_table, uint8_t row) {
  return get_index(temp_table->setpoint_list, row)->data.temp;
}

void set_time(struct temp_table *temp_table, uint8_t row, char *new_time_str) {
  if(!row) return;
    43d2:	dd 20       	and	r13, r13
    43d4:	29 f0       	breq	.+10     	; 0x43e0 <arrow_click_event_listener(unsigned int, temp_table*)+0xa2>
    43d6:	a8 01       	movw	r20, r16
    43d8:	6d 2d       	mov	r22, r13
    43da:	c5 01       	movw	r24, r10
    43dc:	0e 94 ad 20 	call	0x415a	; 0x415a <set_time(temp_table*, unsigned char, char*) [clone .part.1]>
_Z26arrow_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:28
    memcpy(&old_setpoint.temp, temp_table->pre_edit, 2);
    strcpy(old_setpoint.time, get_index(temp_table->setpoint_list, row)->data.time);

    edit_point(temp_table->temp_graph, temp_table->setpoint_list, old_setpoint, row);
  }
  fill_field(temp_table, col, row);
    43e0:	4d 2d       	mov	r20, r13
    43e2:	63 2d       	mov	r22, r3
    43e4:	c5 01       	movw	r24, r10
    43e6:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <fill_field(temp_table*, unsigned char, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:31

  // move the selected field according to the pressed arrow key and check whether movement collides with the table border
  uint8_t old_selected_field = temp_table->selected_field;
    43ea:	d5 01       	movw	r26, r10
    43ec:	50 96       	adiw	r26, 0x10	; 16
    43ee:	8c 91       	ld	r24, X
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:32
  if(keys == KEY_LEFT && temp_table->selected_field > 0) { // left
    43f0:	b4 e0       	ldi	r27, 0x04	; 4
    43f2:	6b 16       	cp	r6, r27
    43f4:	71 04       	cpc	r7, r1
    43f6:	19 f5       	brne	.+70     	; 0x443e <arrow_click_event_listener(unsigned int, temp_table*)+0x100>
    43f8:	88 23       	and	r24, r24
    43fa:	99 f1       	breq	.+102    	; 0x4462 <arrow_click_event_listener(unsigned int, temp_table*)+0x124>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:33
    temp_table->selected_field -= 1;
    43fc:	81 50       	subi	r24, 0x01	; 1
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:39
  } else if(keys == KEY_RIGHT && temp_table->selected_field < rows*2 - 1) { // right
    temp_table->selected_field += 1;
  } else if(keys == KEY_DOWN && temp_table->selected_field < rows*2 - 2) { // down
    temp_table->selected_field += 2;
  } else if(keys == KEY_UP && temp_table->selected_field > 1) { // up
    temp_table->selected_field -= 2;
    43fe:	f5 01       	movw	r30, r10
    4400:	80 8b       	std	Z+16, r24	; 0x10
    4402:	2f c0       	rjmp	.+94     	; 0x4462 <arrow_click_event_listener(unsigned int, temp_table*)+0x124>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:23
  if(!col) { // previously selected field is a time field, (but not the first one?). those fields may require the table to be sorted (by time) again if the time value has been changed
    char *new_time_str = get_time(temp_table, row);
    validate_time_str(new_time_str, temp_table->pre_edit);
    set_time(temp_table, row, new_time_str);
  } else {
    memcpy(&old_setpoint.temp, temp_table->pre_edit, 2);
    4404:	d7 01       	movw	r26, r14
    4406:	8d 91       	ld	r24, X+
    4408:	9c 91       	ld	r25, X
    440a:	98 87       	std	Y+8, r25	; 0x08
    440c:	8f 83       	std	Y+7, r24	; 0x07
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:24
    strcpy(old_setpoint.time, get_index(temp_table->setpoint_list, row)->data.time);
    440e:	c2 01       	movw	r24, r4
    4410:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    4414:	bc 01       	movw	r22, r24
    4416:	ce 01       	movw	r24, r28
    4418:	01 96       	adiw	r24, 0x01	; 1
    441a:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <strcpy>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:26

    edit_point(temp_table->temp_graph, temp_table->setpoint_list, old_setpoint, row);
    441e:	cd 2c       	mov	r12, r13
    4420:	e9 80       	ldd	r14, Y+1	; 0x01
    4422:	fa 80       	ldd	r15, Y+2	; 0x02
    4424:	0b 81       	ldd	r16, Y+3	; 0x03
    4426:	1c 81       	ldd	r17, Y+4	; 0x04
    4428:	2d 81       	ldd	r18, Y+5	; 0x05
    442a:	3e 81       	ldd	r19, Y+6	; 0x06
    442c:	4f 81       	ldd	r20, Y+7	; 0x07
    442e:	58 85       	ldd	r21, Y+8	; 0x08
    4430:	b2 01       	movw	r22, r4
    4432:	f5 01       	movw	r30, r10
    4434:	85 89       	ldd	r24, Z+21	; 0x15
    4436:	96 89       	ldd	r25, Z+22	; 0x16
    4438:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <edit_point(graph*, list<setpoint>*, setpoint, unsigned char)>
    443c:	d1 cf       	rjmp	.-94     	; 0x43e0 <arrow_click_event_listener(unsigned int, temp_table*)+0xa2>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:34

  // move the selected field according to the pressed arrow key and check whether movement collides with the table border
  uint8_t old_selected_field = temp_table->selected_field;
  if(keys == KEY_LEFT && temp_table->selected_field > 0) { // left
    temp_table->selected_field -= 1;
  } else if(keys == KEY_RIGHT && temp_table->selected_field < rows*2 - 1) { // right
    443e:	f8 e0       	ldi	r31, 0x08	; 8
    4440:	6f 16       	cp	r6, r31
    4442:	71 04       	cpc	r7, r1
    4444:	09 f0       	breq	.+2      	; 0x4448 <arrow_click_event_listener(unsigned int, temp_table*)+0x10a>
    4446:	4d c0       	rjmp	.+154    	; 0x44e2 <arrow_click_event_listener(unsigned int, temp_table*)+0x1a4>
    4448:	99 24       	eor	r9, r9
    444a:	88 0c       	add	r8, r8
    444c:	99 1c       	adc	r9, r9
    444e:	21 e0       	ldi	r18, 0x01	; 1
    4450:	82 1a       	sub	r8, r18
    4452:	91 08       	sbc	r9, r1
    4454:	88 15       	cp	r24, r8
    4456:	19 04       	cpc	r1, r9
    4458:	24 f4       	brge	.+8      	; 0x4462 <arrow_click_event_listener(unsigned int, temp_table*)+0x124>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:35
    temp_table->selected_field += 1;
    445a:	8f 5f       	subi	r24, 0xFF	; 255
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:37
  } else if(keys == KEY_DOWN && temp_table->selected_field < rows*2 - 2) { // down
    temp_table->selected_field += 2;
    445c:	d5 01       	movw	r26, r10
    445e:	50 96       	adiw	r26, 0x10	; 16
    4460:	8c 93       	st	X, r24
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:42
  } else if(keys == KEY_UP && temp_table->selected_field > 1) { // up
    temp_table->selected_field -= 2;
  }

  col = temp_table->selected_field % 2;
    4462:	d5 01       	movw	r26, r10
    4464:	50 96       	adiw	r26, 0x10	; 16
    4466:	8c 91       	ld	r24, X
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:43
  row = temp_table->selected_field / 2;
    4468:	08 2f       	mov	r16, r24
    446a:	06 95       	lsr	r16
    446c:	10 e0       	ldi	r17, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:45

  if(col) {
    446e:	b8 2f       	mov	r27, r24
    4470:	b1 70       	andi	r27, 0x01	; 1
    4472:	fb 2e       	mov	r15, r27
    4474:	80 ff       	sbrs	r24, 0
    4476:	10 c0       	rjmp	.+32     	; 0x4498 <arrow_click_event_listener(unsigned int, temp_table*)+0x15a>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:46
    memcpy(temp_table->pre_edit, &get_index(temp_table->setpoint_list, row)->data.temp, 2);
    4478:	b8 01       	movw	r22, r16
    447a:	f5 01       	movw	r30, r10
    447c:	83 89       	ldd	r24, Z+19	; 0x13
    447e:	94 89       	ldd	r25, Z+20	; 0x14
    4480:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    4484:	d5 01       	movw	r26, r10
    4486:	51 96       	adiw	r26, 0x11	; 17
    4488:	ed 91       	ld	r30, X+
    448a:	fc 91       	ld	r31, X
    448c:	dc 01       	movw	r26, r24
    448e:	16 96       	adiw	r26, 0x06	; 6
    4490:	8d 91       	ld	r24, X+
    4492:	9c 91       	ld	r25, X
    4494:	91 83       	std	Z+1, r25	; 0x01
    4496:	80 83       	st	Z, r24
Set_Draw_color():
    4498:	8f e9       	ldi	r24, 0x9F	; 159
    449a:	91 e0       	ldi	r25, 0x01	; 1
    449c:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <display+0xb>
    44a0:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <display+0xa>
_Z26arrow_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:53

  //if (old_selected_field != temp_table->selected_field) {
    // highlight new field
    display.Set_Draw_color(0, 50, 255);
    
    highlight_field(&temp_table->temp_table, col, row + 1);
    44a4:	a8 01       	movw	r20, r16
    44a6:	4f 5f       	subi	r20, 0xFF	; 255
    44a8:	5f 4f       	sbci	r21, 0xFF	; 255
    44aa:	6f 2d       	mov	r22, r15
    44ac:	70 e0       	ldi	r23, 0x00	; 0
    44ae:	c5 01       	movw	r24, r10
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:58

    //
  //}
  
}
    44b0:	28 96       	adiw	r28, 0x08	; 8
    44b2:	0f b6       	in	r0, 0x3f	; 63
    44b4:	f8 94       	cli
    44b6:	de bf       	out	0x3e, r29	; 62
    44b8:	0f be       	out	0x3f, r0	; 63
    44ba:	cd bf       	out	0x3d, r28	; 61
    44bc:	df 91       	pop	r29
    44be:	cf 91       	pop	r28
    44c0:	1f 91       	pop	r17
    44c2:	0f 91       	pop	r16
    44c4:	ff 90       	pop	r15
    44c6:	ef 90       	pop	r14
    44c8:	df 90       	pop	r13
    44ca:	cf 90       	pop	r12
    44cc:	bf 90       	pop	r11
    44ce:	af 90       	pop	r10
    44d0:	9f 90       	pop	r9
    44d2:	8f 90       	pop	r8
    44d4:	7f 90       	pop	r7
    44d6:	6f 90       	pop	r6
    44d8:	5f 90       	pop	r5
    44da:	4f 90       	pop	r4
    44dc:	3f 90       	pop	r3
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:53

  //if (old_selected_field != temp_table->selected_field) {
    // highlight new field
    display.Set_Draw_color(0, 50, 255);
    
    highlight_field(&temp_table->temp_table, col, row + 1);
    44de:	0c 94 df 0b 	jmp	0x17be	; 0x17be <highlight_field(table*, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:36
  uint8_t old_selected_field = temp_table->selected_field;
  if(keys == KEY_LEFT && temp_table->selected_field > 0) { // left
    temp_table->selected_field -= 1;
  } else if(keys == KEY_RIGHT && temp_table->selected_field < rows*2 - 1) { // right
    temp_table->selected_field += 1;
  } else if(keys == KEY_DOWN && temp_table->selected_field < rows*2 - 2) { // down
    44e2:	b0 e8       	ldi	r27, 0x80	; 128
    44e4:	6b 16       	cp	r6, r27
    44e6:	71 04       	cpc	r7, r1
    44e8:	61 f4       	brne	.+24     	; 0x4502 <arrow_click_event_listener(unsigned int, temp_table*)+0x1c4>
    44ea:	e8 2d       	mov	r30, r8
    44ec:	e1 50       	subi	r30, 0x01	; 1
    44ee:	ff 0b       	sbc	r31, r31
    44f0:	4f 01       	movw	r8, r30
    44f2:	88 0c       	add	r8, r8
    44f4:	99 1c       	adc	r9, r9
    44f6:	88 15       	cp	r24, r8
    44f8:	19 04       	cpc	r1, r9
    44fa:	0c f0       	brlt	.+2      	; 0x44fe <arrow_click_event_listener(unsigned int, temp_table*)+0x1c0>
    44fc:	b2 cf       	rjmp	.-156    	; 0x4462 <arrow_click_event_listener(unsigned int, temp_table*)+0x124>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:37
    temp_table->selected_field += 2;
    44fe:	8e 5f       	subi	r24, 0xFE	; 254
    4500:	ad cf       	rjmp	.-166    	; 0x445c <arrow_click_event_listener(unsigned int, temp_table*)+0x11e>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:38
  } else if(keys == KEY_UP && temp_table->selected_field > 1) { // up
    4502:	61 14       	cp	r6, r1
    4504:	b8 e0       	ldi	r27, 0x08	; 8
    4506:	7b 06       	cpc	r7, r27
    4508:	09 f0       	breq	.+2      	; 0x450c <arrow_click_event_listener(unsigned int, temp_table*)+0x1ce>
    450a:	ab cf       	rjmp	.-170    	; 0x4462 <arrow_click_event_listener(unsigned int, temp_table*)+0x124>
    450c:	82 30       	cpi	r24, 0x02	; 2
    450e:	08 f4       	brcc	.+2      	; 0x4512 <arrow_click_event_listener(unsigned int, temp_table*)+0x1d4>
    4510:	a8 cf       	rjmp	.-176    	; 0x4462 <arrow_click_event_listener(unsigned int, temp_table*)+0x124>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:39
    temp_table->selected_field -= 2;
    4512:	82 50       	subi	r24, 0x02	; 2
    4514:	74 cf       	rjmp	.-280    	; 0x43fe <arrow_click_event_listener(unsigned int, temp_table*)+0xc0>

00004516 <enter_click_event_listener(unsigned int, temp_table*)>:
_Z26enter_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:105
  }
  fill_field(temp_table, col, row); // redraw field
  highlight_field(&temp_table->temp_table, col, row + 1);
}

void enter_click_event_listener(uint16_t keys, struct temp_table *temp_table) { // enter clears the entry of the corresponding field
    4516:	0f 93       	push	r16
    4518:	1f 93       	push	r17
    451a:	cf 93       	push	r28
    451c:	df 93       	push	r29
    451e:	8b 01       	movw	r16, r22
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:106
  uint8_t col = temp_table->selected_field % 2;
    4520:	fb 01       	movw	r30, r22
    4522:	80 89       	ldd	r24, Z+16	; 0x10
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:107
  uint8_t row = temp_table->selected_field / 2;
    4524:	c8 2f       	mov	r28, r24
    4526:	c6 95       	lsr	r28
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:108
  if(!col && !row) return; // cannot edit the very first timestamp (always 00:00)
    4528:	d8 2f       	mov	r29, r24
    452a:	d1 70       	andi	r29, 0x01	; 1
    452c:	80 fd       	sbrc	r24, 0
    452e:	07 c0       	rjmp	.+14     	; 0x453e <enter_click_event_listener(unsigned int, temp_table*)+0x28>
    4530:	c1 11       	cpse	r28, r1
    4532:	20 c0       	rjmp	.+64     	; 0x4574 <enter_click_event_listener(unsigned int, temp_table*)+0x5e>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:116
  } else { // selected field is time
    set_time(temp_table, row, "  :  ");
  }
  fill_field(temp_table, col, row); // update the field
  highlight_field(&temp_table->temp_table, col, row + 1);
}
    4534:	df 91       	pop	r29
    4536:	cf 91       	pop	r28
    4538:	1f 91       	pop	r17
    453a:	0f 91       	pop	r16
    453c:	08 95       	ret
set_temp():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:15
  if(new_temp > MAX_TEMP) return; // save new temp only if it is smaller than 1300°C

  //struct list<setpoint> *old_setpoint_list = temp_table->setpoint_list;
  // display.Set_Draw_color(BACKGROUND_COLOR);
  // draw_temp_curve(temp_table->temp_graph, temp_table->setpoint_list);
  setpoint *new_setpoint = &get_index(temp_table->setpoint_list, row)->data;
    453e:	6c 2f       	mov	r22, r28
    4540:	70 e0       	ldi	r23, 0x00	; 0
    4542:	83 89       	ldd	r24, Z+19	; 0x13
    4544:	94 89       	ldd	r25, Z+20	; 0x14
    4546:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:18
  // setpoint old_setpoint;
  // memcpy(&old_setpoint, new_setpoint, sizeof(setpoint));
  new_setpoint->temp = new_temp;
    454a:	fc 01       	movw	r30, r24
    454c:	17 82       	std	Z+7, r1	; 0x07
    454e:	16 82       	std	Z+6, r1	; 0x06
_Z26enter_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:114
  if(col) { // selected field is temperature
    set_temp(temp_table, row, 0); // set temperature to 0
  } else { // selected field is time
    set_time(temp_table, row, "  :  ");
  }
  fill_field(temp_table, col, row); // update the field
    4550:	4c 2f       	mov	r20, r28
    4552:	6d 2f       	mov	r22, r29
    4554:	c8 01       	movw	r24, r16
    4556:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <fill_field(temp_table*, unsigned char, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:115
  highlight_field(&temp_table->temp_table, col, row + 1);
    455a:	4c 2f       	mov	r20, r28
    455c:	50 e0       	ldi	r21, 0x00	; 0
    455e:	4f 5f       	subi	r20, 0xFF	; 255
    4560:	5f 4f       	sbci	r21, 0xFF	; 255
    4562:	6d 2f       	mov	r22, r29
    4564:	70 e0       	ldi	r23, 0x00	; 0
    4566:	c8 01       	movw	r24, r16
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:116
}
    4568:	df 91       	pop	r29
    456a:	cf 91       	pop	r28
    456c:	1f 91       	pop	r17
    456e:	0f 91       	pop	r16
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:115
    set_temp(temp_table, row, 0); // set temperature to 0
  } else { // selected field is time
    set_time(temp_table, row, "  :  ");
  }
  fill_field(temp_table, col, row); // update the field
  highlight_field(&temp_table->temp_table, col, row + 1);
    4570:	0c 94 df 0b 	jmp	0x17be	; 0x17be <highlight_field(table*, unsigned int, unsigned int)>
set_time():
    4574:	44 e0       	ldi	r20, 0x04	; 4
    4576:	52 e0       	ldi	r21, 0x02	; 2
    4578:	6c 2f       	mov	r22, r28
    457a:	c8 01       	movw	r24, r16
    457c:	0e 94 ad 20 	call	0x415a	; 0x415a <set_time(temp_table*, unsigned char, char*) [clone .part.1]>
    4580:	e7 cf       	rjmp	.-50     	; 0x4550 <enter_click_event_listener(unsigned int, temp_table*)+0x3a>

00004582 <esc_click_event_listener(unsigned int, temp_table*)>:
_Z24esc_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:83
  col = temp_table->selected_field % 2;
  row = temp_table->selected_field / 2;
  highlight_field(&temp_table->temp_table, col, row + 1);
}

void esc_click_event_listener(uint16_t keys, struct temp_table *temp_table) { // escape deletes the last digit
    4582:	ef 92       	push	r14
    4584:	ff 92       	push	r15
    4586:	0f 93       	push	r16
    4588:	1f 93       	push	r17
    458a:	cf 93       	push	r28
    458c:	df 93       	push	r29
    458e:	00 d0       	rcall	.+0      	; 0x4590 <esc_click_event_listener(unsigned int, temp_table*)+0xe>
    4590:	00 d0       	rcall	.+0      	; 0x4592 <esc_click_event_listener(unsigned int, temp_table*)+0x10>
    4592:	00 d0       	rcall	.+0      	; 0x4594 <esc_click_event_listener(unsigned int, temp_table*)+0x12>
    4594:	cd b7       	in	r28, 0x3d	; 61
    4596:	de b7       	in	r29, 0x3e	; 62
    4598:	7b 01       	movw	r14, r22
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:84
  uint8_t col = temp_table->selected_field % 2;
    459a:	db 01       	movw	r26, r22
    459c:	50 96       	adiw	r26, 0x10	; 16
    459e:	8c 91       	ld	r24, X
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:85
  uint8_t row = temp_table->selected_field / 2;
    45a0:	18 2f       	mov	r17, r24
    45a2:	16 95       	lsr	r17
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:86
  if(!col && !row) return; // cannot edit the very first timestamp (always 00:00)
    45a4:	08 2f       	mov	r16, r24
    45a6:	01 70       	andi	r16, 0x01	; 1
    45a8:	80 fd       	sbrc	r24, 0
    45aa:	0f c0       	rjmp	.+30     	; 0x45ca <esc_click_event_listener(unsigned int, temp_table*)+0x48>
    45ac:	11 11       	cpse	r17, r1
    45ae:	30 c0       	rjmp	.+96     	; 0x4610 <esc_click_event_listener(unsigned int, temp_table*)+0x8e>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:103

    set_time(temp_table, row, time_str);
  }
  fill_field(temp_table, col, row); // redraw field
  highlight_field(&temp_table->temp_table, col, row + 1);
}
    45b0:	26 96       	adiw	r28, 0x06	; 6
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	de bf       	out	0x3e, r29	; 62
    45b8:	0f be       	out	0x3f, r0	; 63
    45ba:	cd bf       	out	0x3d, r28	; 61
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	1f 91       	pop	r17
    45c2:	0f 91       	pop	r16
    45c4:	ff 90       	pop	r15
    45c6:	ef 90       	pop	r14
    45c8:	08 95       	ret
get_temp():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:27

  //edit_point(temp_table->temp_graph, temp_table->setpoint_list, old_setpoint, row, row);
}

uint16_t get_temp(struct temp_table *temp_table, uint8_t row) {
  return get_index(temp_table->setpoint_list, row)->data.temp;
    45ca:	61 2f       	mov	r22, r17
    45cc:	70 e0       	ldi	r23, 0x00	; 0
    45ce:	f7 01       	movw	r30, r14
    45d0:	83 89       	ldd	r24, Z+19	; 0x13
    45d2:	94 89       	ldd	r25, Z+20	; 0x14
    45d4:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    45d8:	fc 01       	movw	r30, r24
_Z24esc_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:88
void esc_click_event_listener(uint16_t keys, struct temp_table *temp_table) { // escape deletes the last digit
  uint8_t col = temp_table->selected_field % 2;
  uint8_t row = temp_table->selected_field / 2;
  if(!col && !row) return; // cannot edit the very first timestamp (always 00:00)
  if(col) { // selected field is temperature
    set_temp(temp_table, row, get_temp(temp_table, row) / 10); // divide temperature by 10, effectively a decimal right shift to delete last digit
    45da:	86 81       	ldd	r24, Z+6	; 0x06
    45dc:	97 81       	ldd	r25, Z+7	; 0x07
    45de:	6a e0       	ldi	r22, 0x0A	; 10
    45e0:	70 e0       	ldi	r23, 0x00	; 0
    45e2:	0e 94 02 35 	call	0x6a04	; 0x6a04 <__udivmodhi4>
set_temp():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:10
#include "setpoint.h"
#include "temp_graph.h"
#include "graphics.h"

void set_temp(struct temp_table *temp_table, uint8_t row, uint16_t new_temp) {
  if(new_temp > MAX_TEMP) return; // save new temp only if it is smaller than 1300°C
    45e6:	65 31       	cpi	r22, 0x15	; 21
    45e8:	85 e0       	ldi	r24, 0x05	; 5
    45ea:	78 07       	cpc	r23, r24
    45ec:	10 f4       	brcc	.+4      	; 0x45f2 <esc_click_event_listener(unsigned int, temp_table*)+0x70>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:18
  // display.Set_Draw_color(BACKGROUND_COLOR);
  // draw_temp_curve(temp_table->temp_graph, temp_table->setpoint_list);
  setpoint *new_setpoint = &get_index(temp_table->setpoint_list, row)->data;
  // setpoint old_setpoint;
  // memcpy(&old_setpoint, new_setpoint, sizeof(setpoint));
  new_setpoint->temp = new_temp;
    45ee:	77 83       	std	Z+7, r23	; 0x07
    45f0:	66 83       	std	Z+6, r22	; 0x06
_Z24esc_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:101
    if(i == 3) time_str[i - 2] = ' '; // if "cursor" is right before the colon, delete the digit left of the colon, not the colon itself
    else if(i) time_str[i - 1] = ' '; // otherwise, delete right most digit

    set_time(temp_table, row, time_str);
  }
  fill_field(temp_table, col, row); // redraw field
    45f2:	41 2f       	mov	r20, r17
    45f4:	60 2f       	mov	r22, r16
    45f6:	c7 01       	movw	r24, r14
    45f8:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <fill_field(temp_table*, unsigned char, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:102
  highlight_field(&temp_table->temp_table, col, row + 1);
    45fc:	41 2f       	mov	r20, r17
    45fe:	50 e0       	ldi	r21, 0x00	; 0
    4600:	4f 5f       	subi	r20, 0xFF	; 255
    4602:	5f 4f       	sbci	r21, 0xFF	; 255
    4604:	60 2f       	mov	r22, r16
    4606:	70 e0       	ldi	r23, 0x00	; 0
    4608:	c7 01       	movw	r24, r14
    460a:	0e 94 df 0b 	call	0x17be	; 0x17be <highlight_field(table*, unsigned int, unsigned int)>
    460e:	d0 cf       	rjmp	.-96     	; 0x45b0 <esc_click_event_listener(unsigned int, temp_table*)+0x2e>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:90
  uint8_t row = temp_table->selected_field / 2;
  if(!col && !row) return; // cannot edit the very first timestamp (always 00:00)
  if(col) { // selected field is temperature
    set_temp(temp_table, row, get_temp(temp_table, row) / 10); // divide temperature by 10, effectively a decimal right shift to delete last digit
  } else { // selected field is time
    char time_str[6] = "";
    4610:	1a 82       	std	Y+2, r1	; 0x02
    4612:	19 82       	std	Y+1, r1	; 0x01
    4614:	fe 01       	movw	r30, r28
    4616:	33 96       	adiw	r30, 0x03	; 3
    4618:	84 e0       	ldi	r24, 0x04	; 4
    461a:	df 01       	movw	r26, r30
    461c:	1d 92       	st	X+, r1
    461e:	8a 95       	dec	r24
    4620:	e9 f7       	brne	.-6      	; 0x461c <esc_click_event_listener(unsigned int, temp_table*)+0x9a>
get_time():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:73
    strcpy(time_str, new_time_str);
  }
}

char *get_time(struct temp_table *temp_table, uint8_t row) {
  return get_index(temp_table->setpoint_list, row)->data.time;
    4622:	61 2f       	mov	r22, r17
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	f7 01       	movw	r30, r14
    4628:	83 89       	ldd	r24, Z+19	; 0x13
    462a:	94 89       	ldd	r25, Z+20	; 0x14
    462c:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
_Z24esc_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:91
    strcpy(time_str, get_time(temp_table, row)); // copy time string
    4630:	bc 01       	movw	r22, r24
    4632:	ce 01       	movw	r24, r28
    4634:	01 96       	adiw	r24, 0x01	; 1
    4636:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <strcpy>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:93

    uint8_t i = 0;
    463a:	80 e0       	ldi	r24, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:94
    while(time_str[i] != ' ' && time_str[i] != '\0') i++; // iterate over the time string up to the first empty digit or up to the end
    463c:	28 2f       	mov	r18, r24
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	e1 e0       	ldi	r30, 0x01	; 1
    4642:	f0 e0       	ldi	r31, 0x00	; 0
    4644:	ec 0f       	add	r30, r28
    4646:	fd 1f       	adc	r31, r29
    4648:	e2 0f       	add	r30, r18
    464a:	f3 1f       	adc	r31, r19
    464c:	90 81       	ld	r25, Z
    464e:	9f 7d       	andi	r25, 0xDF	; 223
    4650:	11 f0       	breq	.+4      	; 0x4656 <esc_click_event_listener(unsigned int, temp_table*)+0xd4>
    4652:	8f 5f       	subi	r24, 0xFF	; 255
    4654:	f3 cf       	rjmp	.-26     	; 0x463c <esc_click_event_listener(unsigned int, temp_table*)+0xba>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:96

    if(i == 3) time_str[i - 2] = ' '; // if "cursor" is right before the colon, delete the digit left of the colon, not the colon itself
    4656:	83 30       	cpi	r24, 0x03	; 3
    4658:	51 f4       	brne	.+20     	; 0x466e <esc_click_event_listener(unsigned int, temp_table*)+0xec>
    465a:	80 e2       	ldi	r24, 0x20	; 32
    465c:	8a 83       	std	Y+2, r24	; 0x02
set_time():
    465e:	ae 01       	movw	r20, r28
    4660:	4f 5f       	subi	r20, 0xFF	; 255
    4662:	5f 4f       	sbci	r21, 0xFF	; 255
    4664:	61 2f       	mov	r22, r17
    4666:	c7 01       	movw	r24, r14
    4668:	0e 94 ad 20 	call	0x415a	; 0x415a <set_time(temp_table*, unsigned char, char*) [clone .part.1]>
    466c:	c2 cf       	rjmp	.-124    	; 0x45f2 <esc_click_event_listener(unsigned int, temp_table*)+0x70>
_Z24esc_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:97
    else if(i) time_str[i - 1] = ' '; // otherwise, delete right most digit
    466e:	88 23       	and	r24, r24
    4670:	b1 f3       	breq	.-20     	; 0x465e <esc_click_event_listener(unsigned int, temp_table*)+0xdc>
    4672:	2c 0f       	add	r18, r28
    4674:	3d 1f       	adc	r19, r29
    4676:	80 e2       	ldi	r24, 0x20	; 32
    4678:	d9 01       	movw	r26, r18
    467a:	8c 93       	st	X, r24
    467c:	f0 cf       	rjmp	.-32     	; 0x465e <esc_click_event_listener(unsigned int, temp_table*)+0xdc>

0000467e <number_click_event_listener(unsigned int, temp_table*)>:
_Z27number_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:60
    //
  //}
  
}

void number_click_event_listener(uint16_t keys, struct temp_table *temp_table) { // number keys add a digit
    467e:	8f 92       	push	r8
    4680:	9f 92       	push	r9
    4682:	af 92       	push	r10
    4684:	bf 92       	push	r11
    4686:	cf 92       	push	r12
    4688:	df 92       	push	r13
    468a:	ef 92       	push	r14
    468c:	ff 92       	push	r15
    468e:	0f 93       	push	r16
    4690:	1f 93       	push	r17
    4692:	cf 93       	push	r28
    4694:	df 93       	push	r29
    4696:	00 d0       	rcall	.+0      	; 0x4698 <number_click_event_listener(unsigned int, temp_table*)+0x1a>
    4698:	00 d0       	rcall	.+0      	; 0x469a <number_click_event_listener(unsigned int, temp_table*)+0x1c>
    469a:	00 d0       	rcall	.+0      	; 0x469c <number_click_event_listener(unsigned int, temp_table*)+0x1e>
    469c:	cd b7       	in	r28, 0x3d	; 61
    469e:	de b7       	in	r29, 0x3e	; 62
    46a0:	6c 01       	movw	r12, r24
    46a2:	8b 01       	movw	r16, r22
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:61
  uint8_t col = temp_table->selected_field % 2;
    46a4:	db 01       	movw	r26, r22
    46a6:	50 96       	adiw	r26, 0x10	; 16
    46a8:	9c 91       	ld	r25, X
    46aa:	50 97       	sbiw	r26, 0x10	; 16
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:62
  uint8_t row = temp_table->selected_field / 2;
    46ac:	f9 2e       	mov	r15, r25
    46ae:	f6 94       	lsr	r15
    46b0:	6f 2d       	mov	r22, r15
    46b2:	70 e0       	ldi	r23, 0x00	; 0
    46b4:	53 96       	adiw	r26, 0x13	; 19
    46b6:	2d 91       	ld	r18, X+
    46b8:	3c 91       	ld	r19, X
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:63
  if(col) { // selected field is temperature
    46ba:	b9 2f       	mov	r27, r25
    46bc:	b1 70       	andi	r27, 0x01	; 1
    46be:	eb 2e       	mov	r14, r27
    46c0:	90 ff       	sbrs	r25, 0
    46c2:	59 c0       	rjmp	.+178    	; 0x4776 <number_click_event_listener(unsigned int, temp_table*)+0xf8>
get_temp():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:27

  //edit_point(temp_table->temp_graph, temp_table->setpoint_list, old_setpoint, row, row);
}

uint16_t get_temp(struct temp_table *temp_table, uint8_t row) {
  return get_index(temp_table->setpoint_list, row)->data.temp;
    46c4:	c9 01       	movw	r24, r18
    46c6:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
    46ca:	4c 01       	movw	r8, r24
_Z27number_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:64
    set_temp(temp_table, row, get_temp(temp_table, row) * 10 + char_to_int(map_key(keys))); // left shift field contents and add new digit to the right
    46cc:	fc 01       	movw	r30, r24
    46ce:	86 81       	ldd	r24, Z+6	; 0x06
    46d0:	97 81       	ldd	r25, Z+7	; 0x07
    46d2:	2a e0       	ldi	r18, 0x0A	; 10
    46d4:	28 9f       	mul	r18, r24
    46d6:	50 01       	movw	r10, r0
    46d8:	29 9f       	mul	r18, r25
    46da:	b0 0c       	add	r11, r0
    46dc:	11 24       	eor	r1, r1
    46de:	e9 e7       	ldi	r30, 0x79	; 121
    46e0:	f1 e0       	ldi	r31, 0x01	; 1
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	80 e0       	ldi	r24, 0x00	; 0
map_key():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:29
  {32768, 'A'}
};

char map_key(uint16_t key_code) { // maps the keycode to a character using the key_map array
  for(uint8_t i = 0; i < 16; i++) {
    if(key_map[i].key_code & key_code) {return key_map[i].key;}
    46e6:	20 81       	ld	r18, Z
    46e8:	31 81       	ldd	r19, Z+1	; 0x01
    46ea:	2c 21       	and	r18, r12
    46ec:	3d 21       	and	r19, r13
    46ee:	23 2b       	or	r18, r19
    46f0:	d1 f1       	breq	.+116    	; 0x4766 <number_click_event_listener(unsigned int, temp_table*)+0xe8>
    46f2:	fc 01       	movw	r30, r24
    46f4:	ee 0f       	add	r30, r30
    46f6:	ff 1f       	adc	r31, r31
    46f8:	e8 0f       	add	r30, r24
    46fa:	f9 1f       	adc	r31, r25
    46fc:	e7 58       	subi	r30, 0x87	; 135
    46fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4700:	82 81       	ldd	r24, Z+2	; 0x02
_Z27number_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:64
    4702:	0e 94 12 07 	call	0xe24	; 0xe24 <char_to_int(char)>
    4706:	8a 0d       	add	r24, r10
    4708:	9b 2d       	mov	r25, r11
    470a:	91 1d       	adc	r25, r1
set_temp():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:10
#include "setpoint.h"
#include "temp_graph.h"
#include "graphics.h"

void set_temp(struct temp_table *temp_table, uint8_t row, uint16_t new_temp) {
  if(new_temp > MAX_TEMP) return; // save new temp only if it is smaller than 1300°C
    470c:	85 31       	cpi	r24, 0x15	; 21
    470e:	f5 e0       	ldi	r31, 0x05	; 5
    4710:	9f 07       	cpc	r25, r31
    4712:	28 f4       	brcc	.+10     	; 0x471e <number_click_event_listener(unsigned int, temp_table*)+0xa0>
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:18
  // display.Set_Draw_color(BACKGROUND_COLOR);
  // draw_temp_curve(temp_table->temp_graph, temp_table->setpoint_list);
  setpoint *new_setpoint = &get_index(temp_table->setpoint_list, row)->data;
  // setpoint old_setpoint;
  // memcpy(&old_setpoint, new_setpoint, sizeof(setpoint));
  new_setpoint->temp = new_temp;
    4714:	d4 01       	movw	r26, r8
    4716:	17 96       	adiw	r26, 0x07	; 7
    4718:	9c 93       	st	X, r25
    471a:	8e 93       	st	-X, r24
    471c:	16 97       	sbiw	r26, 0x06	; 6
_Z27number_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:77
    time_str[i] = map_key(keys); // fill first empty digit with clicked number
    if(char_to_int(time_str[3]) > 5) time_str[3] = ' '; // cannot add a digit higher than 5 directly after the colon because maximum value for minutes is :59
    
    set_time(temp_table, row, time_str);
  }
  fill_field(temp_table, col, row); // redraw field
    471e:	4f 2d       	mov	r20, r15
    4720:	6e 2d       	mov	r22, r14
    4722:	c8 01       	movw	r24, r16
    4724:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <fill_field(temp_table*, unsigned char, unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:78
  col = temp_table->selected_field % 2;
    4728:	f8 01       	movw	r30, r16
    472a:	60 89       	ldd	r22, Z+16	; 0x10
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:79
  row = temp_table->selected_field / 2;
    472c:	46 2f       	mov	r20, r22
    472e:	46 95       	lsr	r20
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:80
  highlight_field(&temp_table->temp_table, col, row + 1);
    4730:	50 e0       	ldi	r21, 0x00	; 0
    4732:	4f 5f       	subi	r20, 0xFF	; 255
    4734:	5f 4f       	sbci	r21, 0xFF	; 255
    4736:	61 70       	andi	r22, 0x01	; 1
    4738:	70 e0       	ldi	r23, 0x00	; 0
    473a:	c8 01       	movw	r24, r16
    473c:	0e 94 df 0b 	call	0x17be	; 0x17be <highlight_field(table*, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:81
}
    4740:	26 96       	adiw	r28, 0x06	; 6
    4742:	0f b6       	in	r0, 0x3f	; 63
    4744:	f8 94       	cli
    4746:	de bf       	out	0x3e, r29	; 62
    4748:	0f be       	out	0x3f, r0	; 63
    474a:	cd bf       	out	0x3d, r28	; 61
    474c:	df 91       	pop	r29
    474e:	cf 91       	pop	r28
    4750:	1f 91       	pop	r17
    4752:	0f 91       	pop	r16
    4754:	ff 90       	pop	r15
    4756:	ef 90       	pop	r14
    4758:	df 90       	pop	r13
    475a:	cf 90       	pop	r12
    475c:	bf 90       	pop	r11
    475e:	af 90       	pop	r10
    4760:	9f 90       	pop	r9
    4762:	8f 90       	pop	r8
    4764:	08 95       	ret
    4766:	01 96       	adiw	r24, 0x01	; 1
    4768:	33 96       	adiw	r30, 0x03	; 3
map_key():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:28
  {16384, '3'},
  {32768, 'A'}
};

char map_key(uint16_t key_code) { // maps the keycode to a character using the key_map array
  for(uint8_t i = 0; i < 16; i++) {
    476a:	80 31       	cpi	r24, 0x10	; 16
    476c:	91 05       	cpc	r25, r1
    476e:	09 f0       	breq	.+2      	; 0x4772 <number_click_event_listener(unsigned int, temp_table*)+0xf4>
    4770:	ba cf       	rjmp	.-140    	; 0x46e6 <number_click_event_listener(unsigned int, temp_table*)+0x68>
_Z27number_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:31
    if(key_map[i].key_code & key_code) {return key_map[i].key;}
  }
  return 0;
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	c6 cf       	rjmp	.-116    	; 0x4702 <number_click_event_listener(unsigned int, temp_table*)+0x84>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:66
  uint8_t col = temp_table->selected_field % 2;
  uint8_t row = temp_table->selected_field / 2;
  if(col) { // selected field is temperature
    set_temp(temp_table, row, get_temp(temp_table, row) * 10 + char_to_int(map_key(keys))); // left shift field contents and add new digit to the right
  } else { // selected field is time
    char time_str[6] = "";
    4776:	1a 82       	std	Y+2, r1	; 0x02
    4778:	19 82       	std	Y+1, r1	; 0x01
    477a:	fe 01       	movw	r30, r28
    477c:	33 96       	adiw	r30, 0x03	; 3
    477e:	84 e0       	ldi	r24, 0x04	; 4
    4780:	df 01       	movw	r26, r30
    4782:	1d 92       	st	X+, r1
    4784:	8a 95       	dec	r24
    4786:	e9 f7       	brne	.-6      	; 0x4782 <number_click_event_listener(unsigned int, temp_table*)+0x104>
get_time():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:73
    strcpy(time_str, new_time_str);
  }
}

char *get_time(struct temp_table *temp_table, uint8_t row) {
  return get_index(temp_table->setpoint_list, row)->data.time;
    4788:	c9 01       	movw	r24, r18
    478a:	0e 94 bc 07 	call	0xf78	; 0xf78 <list<setpoint>* get_index<setpoint>(list<setpoint>*, unsigned int)>
_Z27number_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:67
    strcpy(time_str, get_time(temp_table, row)); // copy time string
    478e:	bc 01       	movw	r22, r24
    4790:	ce 01       	movw	r24, r28
    4792:	01 96       	adiw	r24, 0x01	; 1
    4794:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <strcpy>
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:69

    uint8_t i = 0;
    4798:	20 e0       	ldi	r18, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:70
    while(time_str[i] != ' ' && time_str[i+1] != '\0') i++; // iterate over the time string up to the first empty digit or up to the end
    479a:	82 2f       	mov	r24, r18
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	e1 e0       	ldi	r30, 0x01	; 1
    47a0:	f0 e0       	ldi	r31, 0x00	; 0
    47a2:	ec 0f       	add	r30, r28
    47a4:	fd 1f       	adc	r31, r29
    47a6:	e8 0f       	add	r30, r24
    47a8:	f9 1f       	adc	r31, r25
    47aa:	30 81       	ld	r19, Z
    47ac:	30 32       	cpi	r19, 0x20	; 32
    47ae:	59 f0       	breq	.+22     	; 0x47c6 <number_click_event_listener(unsigned int, temp_table*)+0x148>
    47b0:	e2 e0       	ldi	r30, 0x02	; 2
    47b2:	f0 e0       	ldi	r31, 0x00	; 0
    47b4:	ec 0f       	add	r30, r28
    47b6:	fd 1f       	adc	r31, r29
    47b8:	e8 0f       	add	r30, r24
    47ba:	f9 1f       	adc	r31, r25
    47bc:	30 81       	ld	r19, Z
    47be:	33 23       	and	r19, r19
    47c0:	11 f0       	breq	.+4      	; 0x47c6 <number_click_event_listener(unsigned int, temp_table*)+0x148>
    47c2:	2f 5f       	subi	r18, 0xFF	; 255
    47c4:	ea cf       	rjmp	.-44     	; 0x479a <number_click_event_listener(unsigned int, temp_table*)+0x11c>
    47c6:	e9 e7       	ldi	r30, 0x79	; 121
    47c8:	f1 e0       	ldi	r31, 0x01	; 1
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:69
    set_temp(temp_table, row, get_temp(temp_table, row) * 10 + char_to_int(map_key(keys))); // left shift field contents and add new digit to the right
  } else { // selected field is time
    char time_str[6] = "";
    strcpy(time_str, get_time(temp_table, row)); // copy time string

    uint8_t i = 0;
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	20 e0       	ldi	r18, 0x00	; 0
map_key():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:29
  {32768, 'A'}
};

char map_key(uint16_t key_code) { // maps the keycode to a character using the key_map array
  for(uint8_t i = 0; i < 16; i++) {
    if(key_map[i].key_code & key_code) {return key_map[i].key;}
    47ce:	40 81       	ld	r20, Z
    47d0:	51 81       	ldd	r21, Z+1	; 0x01
    47d2:	4c 21       	and	r20, r12
    47d4:	5d 21       	and	r21, r13
    47d6:	45 2b       	or	r20, r21
    47d8:	11 f1       	breq	.+68     	; 0x481e <number_click_event_listener(unsigned int, temp_table*)+0x1a0>
    47da:	f9 01       	movw	r30, r18
    47dc:	ee 0f       	add	r30, r30
    47de:	ff 1f       	adc	r31, r31
    47e0:	e2 0f       	add	r30, r18
    47e2:	f3 1f       	adc	r31, r19
    47e4:	e7 58       	subi	r30, 0x87	; 135
    47e6:	fe 4f       	sbci	r31, 0xFE	; 254
    47e8:	22 81       	ldd	r18, Z+2	; 0x02
_Z27number_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:72
    while(time_str[i] != ' ' && time_str[i+1] != '\0') i++; // iterate over the time string up to the first empty digit or up to the end

    time_str[i] = map_key(keys); // fill first empty digit with clicked number
    47ea:	e1 e0       	ldi	r30, 0x01	; 1
    47ec:	f0 e0       	ldi	r31, 0x00	; 0
    47ee:	ec 0f       	add	r30, r28
    47f0:	fd 1f       	adc	r31, r29
    47f2:	8e 0f       	add	r24, r30
    47f4:	9f 1f       	adc	r25, r31
    47f6:	dc 01       	movw	r26, r24
    47f8:	2c 93       	st	X, r18
/home/noah/Documents/basteln/ofen_v2/main/key_event_handlers.cpp:73
    if(char_to_int(time_str[3]) > 5) time_str[3] = ' '; // cannot add a digit higher than 5 directly after the colon because maximum value for minutes is :59
    47fa:	8c 81       	ldd	r24, Y+4	; 0x04
    47fc:	0e 94 12 07 	call	0xe24	; 0xe24 <char_to_int(char)>
    4800:	86 30       	cpi	r24, 0x06	; 6
    4802:	10 f0       	brcs	.+4      	; 0x4808 <number_click_event_listener(unsigned int, temp_table*)+0x18a>
    4804:	80 e2       	ldi	r24, 0x20	; 32
    4806:	8c 83       	std	Y+4, r24	; 0x04
set_time():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:31
uint16_t get_temp(struct temp_table *temp_table, uint8_t row) {
  return get_index(temp_table->setpoint_list, row)->data.temp;
}

void set_time(struct temp_table *temp_table, uint8_t row, char *new_time_str) {
  if(!row) return;
    4808:	ff 20       	and	r15, r15
    480a:	09 f4       	brne	.+2      	; 0x480e <number_click_event_listener(unsigned int, temp_table*)+0x190>
    480c:	88 cf       	rjmp	.-240    	; 0x471e <number_click_event_listener(unsigned int, temp_table*)+0xa0>
    480e:	ae 01       	movw	r20, r28
    4810:	4f 5f       	subi	r20, 0xFF	; 255
    4812:	5f 4f       	sbci	r21, 0xFF	; 255
    4814:	6f 2d       	mov	r22, r15
    4816:	c8 01       	movw	r24, r16
    4818:	0e 94 ad 20 	call	0x415a	; 0x415a <set_time(temp_table*, unsigned char, char*) [clone .part.1]>
    481c:	80 cf       	rjmp	.-256    	; 0x471e <number_click_event_listener(unsigned int, temp_table*)+0xa0>
    481e:	2f 5f       	subi	r18, 0xFF	; 255
    4820:	3f 4f       	sbci	r19, 0xFF	; 255
    4822:	33 96       	adiw	r30, 0x03	; 3
map_key():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:28
  {16384, '3'},
  {32768, 'A'}
};

char map_key(uint16_t key_code) { // maps the keycode to a character using the key_map array
  for(uint8_t i = 0; i < 16; i++) {
    4824:	20 31       	cpi	r18, 0x10	; 16
    4826:	31 05       	cpc	r19, r1
    4828:	91 f6       	brne	.-92     	; 0x47ce <number_click_event_listener(unsigned int, temp_table*)+0x150>
_Z27number_click_event_listenerjP10temp_table():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:31
    if(key_map[i].key_code & key_code) {return key_map[i].key;}
  }
  return 0;
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	de cf       	rjmp	.-68     	; 0x47ea <number_click_event_listener(unsigned int, temp_table*)+0x16c>

0000482e <tmr_evnt_lstnr1(void*)>:
_Z15tmr_evnt_lstnr1Pv():
/home/noah/Documents/basteln/ofen_v2/main/main.ino:17

// void key_event_listener(uint16_t keys) {
//   Serial.println((keys), BIN);
// }

void tmr_evnt_lstnr1(void *params) {
    482e:	8f 92       	push	r8
    4830:	9f 92       	push	r9
    4832:	af 92       	push	r10
    4834:	bf 92       	push	r11
    4836:	cf 92       	push	r12
    4838:	df 92       	push	r13
    483a:	ef 92       	push	r14
    483c:	ff 92       	push	r15
get_voltage():
    483e:	0e 94 be 19 	call	0x337c	; 0x337c <get_voltage(unsigned char) [clone .part.0] [clone .constprop.58]>
print():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:111
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4842:	45 e0       	ldi	r20, 0x05	; 5
    4844:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Print::printFloat(double, unsigned char) [clone .constprop.10]>
write():
    4848:	85 ed       	ldi	r24, 0xD5	; 213
    484a:	91 e0       	ldi	r25, 0x01	; 1
    484c:	0e 94 3f 19 	call	0x327e	; 0x327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>
get_voltage():
    4850:	0e 94 be 19 	call	0x337c	; 0x337c <get_voltage(unsigned char) [clone .part.0] [clone .constprop.58]>
    4854:	9b 01       	movw	r18, r22
    4856:	ac 01       	movw	r20, r24
get_thermistor_temp():
/home/noah/Documents/basteln/ofen_v2/main/temperature.cpp:30
  }
}

float get_thermistor_temp() {
  float thermistor_voltage = get_voltage(THERMISTOR_CH);
  float thermistor_resistance_log = logf(U_REG * THERMISTOR_RM / thermistor_voltage - THERMISTOR_RM - THERMISTOR_RS);
    4858:	60 e0       	ldi	r22, 0x00	; 0
    485a:	70 e8       	ldi	r23, 0x80	; 128
    485c:	8c e5       	ldi	r24, 0x5C	; 92
    485e:	93 e4       	ldi	r25, 0x43	; 67
    4860:	0e 94 bf 32 	call	0x657e	; 0x657e <__divsf3>
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	30 e0       	ldi	r19, 0x00	; 0
    4868:	44 e3       	ldi	r20, 0x34	; 52
    486a:	53 e4       	ldi	r21, 0x43	; 67
    486c:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__subsf3>
    4870:	20 e0       	ldi	r18, 0x00	; 0
    4872:	30 ec       	ldi	r19, 0xC0	; 192
    4874:	43 e7       	ldi	r20, 0x73	; 115
    4876:	55 e4       	ldi	r21, 0x45	; 69
    4878:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__subsf3>
    487c:	4b 01       	movw	r8, r22
    487e:	5c 01       	movw	r10, r24
    4880:	0e 94 74 33 	call	0x66e8	; 0x66e8 <log>
    4884:	6b 01       	movw	r12, r22
    4886:	7c 01       	movw	r14, r24
print():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:111
    4888:	45 e0       	ldi	r20, 0x05	; 5
    488a:	c5 01       	movw	r24, r10
    488c:	b4 01       	movw	r22, r8
    488e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Print::printFloat(double, unsigned char) [clone .constprop.10]>
write():
    4892:	85 ed       	ldi	r24, 0xD5	; 213
    4894:	91 e0       	ldi	r25, 0x01	; 1
    4896:	0e 94 3f 19 	call	0x327e	; 0x327e <Print::write(char const*) [clone .part.2] [clone .constprop.67]>
get_thermistor_temp():
/home/noah/Documents/basteln/ofen_v2/main/temperature.cpp:32
  Serial.println(U_REG * THERMISTOR_RM / thermistor_voltage - THERMISTOR_RM - THERMISTOR_RS, 5);
  return 1/(THERMISTOR_A + THERMISTOR_B * thermistor_resistance_log + THERMISTOR_C * pow(thermistor_resistance_log, 3)) - 273.15;
    489a:	20 e0       	ldi	r18, 0x00	; 0
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	40 e4       	ldi	r20, 0x40	; 64
    48a0:	50 e4       	ldi	r21, 0x40	; 64
    48a2:	c7 01       	movw	r24, r14
    48a4:	b6 01       	movw	r22, r12
    48a6:	0e 94 bc 33 	call	0x6778	; 0x6778 <pow>
    48aa:	4b 01       	movw	r8, r22
    48ac:	5c 01       	movw	r10, r24
    48ae:	24 ef       	ldi	r18, 0xF4	; 244
    48b0:	38 e2       	ldi	r19, 0x28	; 40
    48b2:	4d e8       	ldi	r20, 0x8D	; 141
    48b4:	59 e3       	ldi	r21, 0x39	; 57
    48b6:	c7 01       	movw	r24, r14
    48b8:	b6 01       	movw	r22, r12
    48ba:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulsf3>
    48be:	2c e4       	ldi	r18, 0x4C	; 76
    48c0:	3c e7       	ldi	r19, 0x7C	; 124
    48c2:	4d ed       	ldi	r20, 0xDD	; 221
    48c4:	59 e3       	ldi	r21, 0x39	; 57
    48c6:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__addsf3>
    48ca:	6b 01       	movw	r12, r22
    48cc:	7c 01       	movw	r14, r24
    48ce:	28 ed       	ldi	r18, 0xD8	; 216
    48d0:	32 ec       	ldi	r19, 0xC2	; 194
    48d2:	4d eb       	ldi	r20, 0xBD	; 189
    48d4:	53 eb       	ldi	r21, 0xB3	; 179
    48d6:	c5 01       	movw	r24, r10
    48d8:	b4 01       	movw	r22, r8
    48da:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulsf3>
    48de:	9b 01       	movw	r18, r22
    48e0:	ac 01       	movw	r20, r24
    48e2:	c7 01       	movw	r24, r14
    48e4:	b6 01       	movw	r22, r12
    48e6:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__addsf3>
    48ea:	9b 01       	movw	r18, r22
    48ec:	ac 01       	movw	r20, r24
    48ee:	60 e0       	ldi	r22, 0x00	; 0
    48f0:	70 e0       	ldi	r23, 0x00	; 0
    48f2:	80 e8       	ldi	r24, 0x80	; 128
    48f4:	9f e3       	ldi	r25, 0x3F	; 63
    48f6:	0e 94 bf 32 	call	0x657e	; 0x657e <__divsf3>
    48fa:	23 e3       	ldi	r18, 0x33	; 51
    48fc:	33 e9       	ldi	r19, 0x93	; 147
    48fe:	48 e8       	ldi	r20, 0x88	; 136
    4900:	53 e4       	ldi	r21, 0x43	; 67
    4902:	0e 94 52 32 	call	0x64a4	; 0x64a4 <__subsf3>
print():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/Print.cpp:111
    4906:	42 e0       	ldi	r20, 0x02	; 2
    4908:	0e 94 3c 1a 	call	0x3478	; 0x3478 <Print::printFloat(double, unsigned char) [clone .constprop.10]>
_Z15tmr_evnt_lstnr1Pv():
/home/noah/Documents/basteln/ofen_v2/main/main.ino:20
  Serial.println(get_voltage(THERMISTOR_CH), 5);
  Serial.print(get_thermistor_temp());
  Serial.println(" C");
    490c:	8a e0       	ldi	r24, 0x0A	; 10
    490e:	92 e0       	ldi	r25, 0x02	; 2
/home/noah/Documents/basteln/ofen_v2/main/main.ino:30
  // select_mux_channel(THERMISTOR_CH);
  // Serial.println(convert());
  //delay(5000);
  // Serial.println();
  //get_thermistor_temp();
}
    4910:	ff 90       	pop	r15
    4912:	ef 90       	pop	r14
    4914:	df 90       	pop	r13
    4916:	cf 90       	pop	r12
    4918:	bf 90       	pop	r11
    491a:	af 90       	pop	r10
    491c:	9f 90       	pop	r9
    491e:	8f 90       	pop	r8
/home/noah/Documents/basteln/ofen_v2/main/main.ino:20
// }

void tmr_evnt_lstnr1(void *params) {
  Serial.println(get_voltage(THERMISTOR_CH), 5);
  Serial.print(get_thermistor_temp());
  Serial.println(" C");
    4920:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <Print::println(char const*) [clone .constprop.17]>

00004924 <__vector_16>:
__vector_16():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4924:	1f 92       	push	r1
    4926:	0f 92       	push	r0
    4928:	0f b6       	in	r0, 0x3f	; 63
    492a:	0f 92       	push	r0
    492c:	11 24       	eor	r1, r1
    492e:	2f 93       	push	r18
    4930:	3f 93       	push	r19
    4932:	8f 93       	push	r24
    4934:	9f 93       	push	r25
    4936:	af 93       	push	r26
    4938:	bf 93       	push	r27
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    493a:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <timer0_millis>
    493e:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <timer0_millis+0x1>
    4942:	a0 91 4d 02 	lds	r26, 0x024D	; 0x80024d <timer0_millis+0x2>
    4946:	b0 91 4e 02 	lds	r27, 0x024E	; 0x80024e <timer0_millis+0x3>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    494a:	30 91 4a 02 	lds	r19, 0x024A	; 0x80024a <timer0_fract>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    494e:	26 e0       	ldi	r18, 0x06	; 6
    4950:	23 0f       	add	r18, r19
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    4952:	2d 37       	cpi	r18, 0x7D	; 125
    4954:	68 f1       	brcs	.+90     	; 0x49b0 <__vector_16+0x8c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    4956:	29 e8       	ldi	r18, 0x89	; 137
    4958:	23 0f       	add	r18, r19
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    495a:	03 96       	adiw	r24, 0x03	; 3
    495c:	a1 1d       	adc	r26, r1
    495e:	b1 1d       	adc	r27, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    4960:	20 93 4a 02 	sts	0x024A, r18	; 0x80024a <timer0_fract>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    4964:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <timer0_millis>
    4968:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <timer0_millis+0x1>
    496c:	a0 93 4d 02 	sts	0x024D, r26	; 0x80024d <timer0_millis+0x2>
    4970:	b0 93 4e 02 	sts	0x024E, r27	; 0x80024e <timer0_millis+0x3>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    4974:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <timer0_overflow_count>
    4978:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <timer0_overflow_count+0x1>
    497c:	a0 91 51 02 	lds	r26, 0x0251	; 0x800251 <timer0_overflow_count+0x2>
    4980:	b0 91 52 02 	lds	r27, 0x0252	; 0x800252 <timer0_overflow_count+0x3>
    4984:	01 96       	adiw	r24, 0x01	; 1
    4986:	a1 1d       	adc	r26, r1
    4988:	b1 1d       	adc	r27, r1
    498a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <timer0_overflow_count>
    498e:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <timer0_overflow_count+0x1>
    4992:	a0 93 51 02 	sts	0x0251, r26	; 0x800251 <timer0_overflow_count+0x2>
    4996:	b0 93 52 02 	sts	0x0252, r27	; 0x800252 <timer0_overflow_count+0x3>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    499a:	bf 91       	pop	r27
    499c:	af 91       	pop	r26
    499e:	9f 91       	pop	r25
    49a0:	8f 91       	pop	r24
    49a2:	3f 91       	pop	r19
    49a4:	2f 91       	pop	r18
    49a6:	0f 90       	pop	r0
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	0f 90       	pop	r0
    49ac:	1f 90       	pop	r1
    49ae:	18 95       	reti
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    49b0:	02 96       	adiw	r24, 0x02	; 2
    49b2:	a1 1d       	adc	r26, r1
    49b4:	b1 1d       	adc	r27, r1
    49b6:	d4 cf       	rjmp	.-88     	; 0x4960 <__vector_16+0x3c>

000049b8 <__vector_19>:
__vector_19():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    49b8:	1f 92       	push	r1
    49ba:	0f 92       	push	r0
    49bc:	0f b6       	in	r0, 0x3f	; 63
    49be:	0f 92       	push	r0
    49c0:	11 24       	eor	r1, r1
    49c2:	2f 93       	push	r18
    49c4:	3f 93       	push	r19
    49c6:	4f 93       	push	r20
    49c8:	5f 93       	push	r21
    49ca:	6f 93       	push	r22
    49cc:	7f 93       	push	r23
    49ce:	8f 93       	push	r24
    49d0:	9f 93       	push	r25
    49d2:	af 93       	push	r26
    49d4:	bf 93       	push	r27
    49d6:	ef 93       	push	r30
    49d8:	ff 93       	push	r31
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    49da:	83 e5       	ldi	r24, 0x53	; 83
    49dc:	92 e0       	ldi	r25, 0x02	; 2
    49de:	0e 94 83 06 	call	0xd06	; 0xd06 <HardwareSerial::_tx_udr_empty_irq()>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    49e2:	ff 91       	pop	r31
    49e4:	ef 91       	pop	r30
    49e6:	bf 91       	pop	r27
    49e8:	af 91       	pop	r26
    49ea:	9f 91       	pop	r25
    49ec:	8f 91       	pop	r24
    49ee:	7f 91       	pop	r23
    49f0:	6f 91       	pop	r22
    49f2:	5f 91       	pop	r21
    49f4:	4f 91       	pop	r20
    49f6:	3f 91       	pop	r19
    49f8:	2f 91       	pop	r18
    49fa:	0f 90       	pop	r0
    49fc:	0f be       	out	0x3f, r0	; 63
    49fe:	0f 90       	pop	r0
    4a00:	1f 90       	pop	r1
    4a02:	18 95       	reti

00004a04 <__vector_18>:
__vector_18():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    4a04:	1f 92       	push	r1
    4a06:	0f 92       	push	r0
    4a08:	0f b6       	in	r0, 0x3f	; 63
    4a0a:	0f 92       	push	r0
    4a0c:	11 24       	eor	r1, r1
    4a0e:	2f 93       	push	r18
    4a10:	8f 93       	push	r24
    4a12:	9f 93       	push	r25
    4a14:	ef 93       	push	r30
    4a16:	ff 93       	push	r31
_rx_complete_irq():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    4a18:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <Serial+0x10>
    4a1c:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <Serial+0x11>
    4a20:	80 81       	ld	r24, Z
    4a22:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <Serial+0x16>
    4a26:	f0 91 6a 02 	lds	r31, 0x026A	; 0x80026a <Serial+0x17>
    4a2a:	82 fd       	sbrc	r24, 2
    4a2c:	1b c0       	rjmp	.+54     	; 0x4a64 <__vector_18+0x60>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4a2e:	90 81       	ld	r25, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4a30:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <Serial+0x19>
    4a34:	8f 5f       	subi	r24, 0xFF	; 255
    4a36:	8f 73       	andi	r24, 0x3F	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    4a38:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <Serial+0x1a>
    4a3c:	82 17       	cp	r24, r18
    4a3e:	41 f0       	breq	.+16     	; 0x4a50 <__vector_18+0x4c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    4a40:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <Serial+0x19>
    4a44:	f0 e0       	ldi	r31, 0x00	; 0
    4a46:	ed 5a       	subi	r30, 0xAD	; 173
    4a48:	fd 4f       	sbci	r31, 0xFD	; 253
    4a4a:	95 8f       	std	Z+29, r25	; 0x1d
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    4a4c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <Serial+0x19>
__vector_18():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    4a50:	ff 91       	pop	r31
    4a52:	ef 91       	pop	r30
    4a54:	9f 91       	pop	r25
    4a56:	8f 91       	pop	r24
    4a58:	2f 91       	pop	r18
    4a5a:	0f 90       	pop	r0
    4a5c:	0f be       	out	0x3f, r0	; 63
    4a5e:	0f 90       	pop	r0
    4a60:	1f 90       	pop	r1
    4a62:	18 95       	reti
_rx_complete_irq():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4a64:	80 81       	ld	r24, Z
    4a66:	f4 cf       	rjmp	.-24     	; 0x4a50 <__vector_18+0x4c>

00004a68 <__vector_11>:
__vector_11():
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:30
    }
    event_listener_iter = event_listener_iter->next;
  }
}

ISR(TIMER1_COMPA_vect) {
    4a68:	1f 92       	push	r1
    4a6a:	0f 92       	push	r0
    4a6c:	0f b6       	in	r0, 0x3f	; 63
    4a6e:	0f 92       	push	r0
    4a70:	11 24       	eor	r1, r1
    4a72:	2f 93       	push	r18
    4a74:	3f 93       	push	r19
    4a76:	8f 93       	push	r24
    4a78:	ef 93       	push	r30
    4a7a:	ff 93       	push	r31
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:31
  struct list<struct timer_event_listener_conf> *event_listener_iter = timer_event_listener_list;
    4a7c:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <timer_event_listener_list>
    4a80:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <timer_event_listener_list+0x1>
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:32
  while(event_listener_iter->next){ // iterate over all registered timer event listeners
    4a84:	26 81       	ldd	r18, Z+6	; 0x06
    4a86:	37 81       	ldd	r19, Z+7	; 0x07
    4a88:	21 15       	cp	r18, r1
    4a8a:	31 05       	cpc	r19, r1
    4a8c:	29 f0       	breq	.+10     	; 0x4a98 <__vector_11+0x30>
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:33
    event_listener_iter->data.counter += 1;
    4a8e:	82 81       	ldd	r24, Z+2	; 0x02
    4a90:	8f 5f       	subi	r24, 0xFF	; 255
    4a92:	82 83       	std	Z+2, r24	; 0x02
    4a94:	f9 01       	movw	r30, r18
    4a96:	f6 cf       	rjmp	.-20     	; 0x4a84 <__vector_11+0x1c>
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:36
    event_listener_iter = event_listener_iter->next;
  }
    4a98:	ff 91       	pop	r31
    4a9a:	ef 91       	pop	r30
    4a9c:	8f 91       	pop	r24
    4a9e:	3f 91       	pop	r19
    4aa0:	2f 91       	pop	r18
    4aa2:	0f 90       	pop	r0
    4aa4:	0f be       	out	0x3f, r0	; 63
    4aa6:	0f 90       	pop	r0
    4aa8:	1f 90       	pop	r1
    4aaa:	18 95       	reti

00004aac <global constructors keyed to 65535_0_adc.cpp.o.3551>:
_GLOBAL__I_65535_0_adc.cpp.o.3551():
    4aac:	cf 93       	push	r28
    4aae:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <Serial+0x3>
    4ab2:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <Serial+0x2>
    4ab6:	88 ee       	ldi	r24, 0xE8	; 232
    4ab8:	93 e0       	ldi	r25, 0x03	; 3
    4aba:	a0 e0       	ldi	r26, 0x00	; 0
    4abc:	b0 e0       	ldi	r27, 0x00	; 0
    4abe:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <Serial+0x4>
    4ac2:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <Serial+0x5>
    4ac6:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <Serial+0x6>
    4aca:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <Serial+0x7>
    4ace:	83 eb       	ldi	r24, 0xB3	; 179
    4ad0:	91 e0       	ldi	r25, 0x01	; 1
    4ad2:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <Serial+0x1>
    4ad6:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <Serial>
    4ada:	85 ec       	ldi	r24, 0xC5	; 197
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <Serial+0xd>
    4ae2:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <Serial+0xc>
    4ae6:	84 ec       	ldi	r24, 0xC4	; 196
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <Serial+0xf>
    4aee:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <Serial+0xe>
    4af2:	80 ec       	ldi	r24, 0xC0	; 192
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <Serial+0x11>
    4afa:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <Serial+0x10>
    4afe:	81 ec       	ldi	r24, 0xC1	; 193
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <Serial+0x13>
    4b06:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <Serial+0x12>
    4b0a:	82 ec       	ldi	r24, 0xC2	; 194
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <Serial+0x15>
    4b12:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <Serial+0x14>
    4b16:	86 ec       	ldi	r24, 0xC6	; 198
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <Serial+0x17>
    4b1e:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <Serial+0x16>
    4b22:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <Serial+0x19>
    4b26:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <Serial+0x1a>
    4b2a:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <Serial+0x1b>
    4b2e:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <Serial+0x1c>
    4b32:	89 e0       	ldi	r24, 0x09	; 9
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    4b3a:	fc 01       	movw	r30, r24
    4b3c:	10 86       	std	Z+8, r1	; 0x08
    4b3e:	17 82       	std	Z+7, r1	; 0x07
    4b40:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <event_listener_list+0x1>
    4b44:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <event_listener_list>
    4b48:	88 e0       	ldi	r24, 0x08	; 8
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    4b50:	fc 01       	movw	r30, r24
    4b52:	17 82       	std	Z+7, r1	; 0x07
    4b54:	16 82       	std	Z+6, r1	; 0x06
    4b56:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <timer_event_listener_list+0x1>
    4b5a:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <timer_event_listener_list>
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	98 ef       	ldi	r25, 0xF8	; 248
    4b62:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <display+0x9>
    4b66:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <display+0x8>
    4b6a:	20 ee       	ldi	r18, 0xE0	; 224
    4b6c:	37 e0       	ldi	r19, 0x07	; 7
    4b6e:	30 93 fc 02 	sts	0x02FC, r19	; 0x8002fc <display+0x7>
    4b72:	20 93 fb 02 	sts	0x02FB, r18	; 0x8002fb <display+0x6>
    4b76:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <display+0xb>
    4b7a:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <display+0xa>
    4b7e:	91 e0       	ldi	r25, 0x01	; 1
    4b80:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <display+0xc>
    4b84:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <display+0xd>
    4b88:	25 ec       	ldi	r18, 0xC5	; 197
    4b8a:	31 e0       	ldi	r19, 0x01	; 1
    4b8c:	30 93 f6 02 	sts	0x02F6, r19	; 0x8002f6 <display+0x1>
    4b90:	20 93 f5 02 	sts	0x02F5, r18	; 0x8002f5 <display>
    4b94:	87 e0       	ldi	r24, 0x07	; 7
    4b96:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <display+0x47>
    4b9a:	89 e0       	ldi	r24, 0x09	; 9
    4b9c:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <display+0x48>
    4ba0:	8f ef       	ldi	r24, 0xFF	; 255
    4ba2:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <display+0x49>
    4ba6:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <display+0x4a>
    4baa:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <display+0x4b>
    4bae:	28 e0       	ldi	r18, 0x08	; 8
    4bb0:	20 93 41 03 	sts	0x0341, r18	; 0x800341 <display+0x4c>
    4bb4:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <display+0x4d>
    4bb8:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <display+0x1e>
    4bbc:	8c e0       	ldi	r24, 0x0C	; 12
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <display+0x32>
    4bc4:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <display+0x31>
    4bc8:	e1 ee       	ldi	r30, 0xE1	; 225
    4bca:	f9 e0       	ldi	r31, 0x09	; 9
    4bcc:	e4 91       	lpm	r30, Z
    4bce:	f0 e0       	ldi	r31, 0x00	; 0
    4bd0:	ee 0f       	add	r30, r30
    4bd2:	ff 1f       	adc	r31, r31
    4bd4:	e0 53       	subi	r30, 0x30	; 48
    4bd6:	f6 4f       	sbci	r31, 0xF6	; 246
    4bd8:	a5 91       	lpm	r26, Z+
    4bda:	b4 91       	lpm	r27, Z
    4bdc:	b0 93 29 03 	sts	0x0329, r27	; 0x800329 <display+0x34>
    4be0:	a0 93 28 03 	sts	0x0328, r26	; 0x800328 <display+0x33>
    4be4:	e0 ec       	ldi	r30, 0xC0	; 192
    4be6:	f9 e0       	ldi	r31, 0x09	; 9
    4be8:	84 91       	lpm	r24, Z
    4bea:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <display+0x3d>
    4bee:	98 2f       	mov	r25, r24
    4bf0:	90 95       	com	r25
    4bf2:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <display+0x42>
    4bf6:	e3 ee       	ldi	r30, 0xE3	; 227
    4bf8:	f9 e0       	ldi	r31, 0x09	; 9
    4bfa:	e4 91       	lpm	r30, Z
    4bfc:	f0 e0       	ldi	r31, 0x00	; 0
    4bfe:	ee 0f       	add	r30, r30
    4c00:	ff 1f       	adc	r31, r31
    4c02:	e0 53       	subi	r30, 0x30	; 48
    4c04:	f6 4f       	sbci	r31, 0xF6	; 246
    4c06:	25 91       	lpm	r18, Z+
    4c08:	34 91       	lpm	r19, Z
    4c0a:	30 93 2b 03 	sts	0x032B, r19	; 0x80032b <display+0x36>
    4c0e:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <display+0x35>
    4c12:	e2 ec       	ldi	r30, 0xC2	; 194
    4c14:	f9 e0       	ldi	r31, 0x09	; 9
    4c16:	e4 91       	lpm	r30, Z
    4c18:	e0 93 33 03 	sts	0x0333, r30	; 0x800333 <display+0x3e>
    4c1c:	e0 95       	com	r30
    4c1e:	e0 93 38 03 	sts	0x0338, r30	; 0x800338 <display+0x43>
    4c22:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <display+0x38>
    4c26:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <display+0x37>
    4c2a:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <display+0x3f>
    4c2e:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <display+0x44>
    4c32:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <display+0x3a>
    4c36:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <display+0x39>
    4c3a:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <display+0x40>
    4c3e:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <display+0x45>
    4c42:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <display+0x3c>
    4c46:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <display+0x3b>
    4c4a:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <display+0x41>
    4c4e:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <display+0x46>
    4c52:	ec 91       	ld	r30, X
    4c54:	e8 2b       	or	r30, r24
    4c56:	ec 93       	st	X, r30
    4c58:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    4c5c:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    4c60:	80 81       	ld	r24, Z
    4c62:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    4c66:	89 2b       	or	r24, r25
    4c68:	80 83       	st	Z, r24
    4c6a:	87 e0       	ldi	r24, 0x07	; 7
    4c6c:	0e 94 30 05 	call	0xa60	; 0xa60 <pinMode.constprop.23>
    4c70:	89 e0       	ldi	r24, 0x09	; 9
    4c72:	0e 94 30 05 	call	0xa60	; 0xa60 <pinMode.constprop.23>
    4c76:	61 e0       	ldi	r22, 0x01	; 1
    4c78:	88 e0       	ldi	r24, 0x08	; 8
    4c7a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <digitalWrite>
    4c7e:	88 e0       	ldi	r24, 0x08	; 8
    4c80:	0e 94 30 05 	call	0xa60	; 0xa60 <pinMode.constprop.23>
    4c84:	cf b7       	in	r28, 0x3f	; 63
    4c86:	f8 94       	cli
    4c88:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <SPIClass::initialized>
    4c8c:	81 11       	cpse	r24, r1
    4c8e:	24 c0       	rjmp	.+72     	; 0x4cd8 <global constructors keyed to 65535_0_adc.cpp.o.3551+0x22c>
    4c90:	e4 ee       	ldi	r30, 0xE4	; 228
    4c92:	f9 e0       	ldi	r31, 0x09	; 9
    4c94:	84 91       	lpm	r24, Z
    4c96:	e3 ec       	ldi	r30, 0xC3	; 195
    4c98:	f9 e0       	ldi	r31, 0x09	; 9
    4c9a:	94 91       	lpm	r25, Z
    4c9c:	e8 2f       	mov	r30, r24
    4c9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ca0:	ee 0f       	add	r30, r30
    4ca2:	ff 1f       	adc	r31, r31
    4ca4:	e1 55       	subi	r30, 0x51	; 81
    4ca6:	f6 4f       	sbci	r31, 0xF6	; 246
    4ca8:	a5 91       	lpm	r26, Z+
    4caa:	b4 91       	lpm	r27, Z
    4cac:	ec 91       	ld	r30, X
    4cae:	e9 23       	and	r30, r25
    4cb0:	21 f4       	brne	.+8      	; 0x4cba <global constructors keyed to 65535_0_adc.cpp.o.3551+0x20e>
    4cb2:	61 e0       	ldi	r22, 0x01	; 1
    4cb4:	8a e0       	ldi	r24, 0x0A	; 10
    4cb6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <digitalWrite>
    4cba:	8a e0       	ldi	r24, 0x0A	; 10
    4cbc:	0e 94 30 05 	call	0xa60	; 0xa60 <pinMode.constprop.23>
    4cc0:	8c b5       	in	r24, 0x2c	; 44
    4cc2:	80 61       	ori	r24, 0x10	; 16
    4cc4:	8c bd       	out	0x2c, r24	; 44
    4cc6:	8c b5       	in	r24, 0x2c	; 44
    4cc8:	80 64       	ori	r24, 0x40	; 64
    4cca:	8c bd       	out	0x2c, r24	; 44
    4ccc:	8d e0       	ldi	r24, 0x0D	; 13
    4cce:	0e 94 30 05 	call	0xa60	; 0xa60 <pinMode.constprop.23>
    4cd2:	8b e0       	ldi	r24, 0x0B	; 11
    4cd4:	0e 94 30 05 	call	0xa60	; 0xa60 <pinMode.constprop.23>
    4cd8:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <SPIClass::initialized>
    4cdc:	8f 5f       	subi	r24, 0xFF	; 255
    4cde:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <SPIClass::initialized>
    4ce2:	cf bf       	out	0x3f, r28	; 63
    4ce4:	8c b5       	in	r24, 0x2c	; 44
    4ce6:	8c 7f       	andi	r24, 0xFC	; 252
    4ce8:	8c bd       	out	0x2c, r24	; 44
    4cea:	8d b5       	in	r24, 0x2d	; 45
    4cec:	8e 7f       	andi	r24, 0xFE	; 254
    4cee:	8d bd       	out	0x2d, r24	; 45
    4cf0:	8c b5       	in	r24, 0x2c	; 44
    4cf2:	8f 7d       	andi	r24, 0xDF	; 223
    4cf4:	8c bd       	out	0x2c, r24	; 44
    4cf6:	8c b5       	in	r24, 0x2c	; 44
    4cf8:	83 7f       	andi	r24, 0xF3	; 243
    4cfa:	8c bd       	out	0x2c, r24	; 44
    4cfc:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <display+0xe>
    4d00:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <display+0xf>
    4d04:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <display+0x19>
    4d08:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <display+0x18>
    4d0c:	88 e8       	ldi	r24, 0x88	; 136
    4d0e:	94 e9       	ldi	r25, 0x94	; 148
    4d10:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <display+0x1d>
    4d14:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <display+0x1c>
    4d18:	20 e4       	ldi	r18, 0x40	; 64
    4d1a:	31 e0       	ldi	r19, 0x01	; 1
    4d1c:	30 93 06 03 	sts	0x0306, r19	; 0x800306 <display+0x11>
    4d20:	20 93 05 03 	sts	0x0305, r18	; 0x800305 <display+0x10>
    4d24:	80 ee       	ldi	r24, 0xE0	; 224
    4d26:	91 e0       	ldi	r25, 0x01	; 1
    4d28:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <display+0x13>
    4d2c:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <display+0x12>
    4d30:	30 93 0a 03 	sts	0x030A, r19	; 0x80030a <display+0x15>
    4d34:	20 93 09 03 	sts	0x0309, r18	; 0x800309 <display+0x14>
    4d38:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <display+0x17>
    4d3c:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <display+0x16>
    4d40:	cf 91       	pop	r28
    4d42:	08 95       	ret

00004d44 <main>:
main():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    4d44:	cf 93       	push	r28
    4d46:	df 93       	push	r29
    4d48:	cd b7       	in	r28, 0x3d	; 61
    4d4a:	de b7       	in	r29, 0x3e	; 62
    4d4c:	ee 97       	sbiw	r28, 0x3e	; 62
    4d4e:	0f b6       	in	r0, 0x3f	; 63
    4d50:	f8 94       	cli
    4d52:	de bf       	out	0x3e, r29	; 62
    4d54:	0f be       	out	0x3f, r0	; 63
    4d56:	cd bf       	out	0x3d, r28	; 61
init():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    4d58:	78 94       	sei
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    4d5a:	84 b5       	in	r24, 0x24	; 36
    4d5c:	83 60       	ori	r24, 0x03	; 3
    4d5e:	84 bd       	out	0x24, r24	; 36
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    4d60:	85 b5       	in	r24, 0x25	; 37
    4d62:	83 60       	ori	r24, 0x03	; 3
    4d64:	85 bd       	out	0x25, r24	; 37
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    4d66:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    4d6a:	81 60       	ori	r24, 0x01	; 1
    4d6c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    4d70:	92 e0       	ldi	r25, 0x02	; 2
    4d72:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    4d76:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    4d7a:	81 60       	ori	r24, 0x01	; 1
    4d7c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    4d80:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4d84:	81 60       	ori	r24, 0x01	; 1
    4d86:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    4d8a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    4d8e:	84 60       	ori	r24, 0x04	; 4
    4d90:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    4d94:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4d98:	81 60       	ori	r24, 0x01	; 1
    4d9a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    4d9e:	86 e8       	ldi	r24, 0x86	; 134
    4da0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    4da4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
pin_config():
/home/noah/Documents/basteln/ofen_v2/main/pins.cpp:6
#include "pins.h"
#include "avrio.h"
#include "avr/io.h"

void pin_config() {
  DDRB = 0b11101111;
    4da8:	8f ee       	ldi	r24, 0xEF	; 239
    4daa:	84 b9       	out	0x04, r24	; 4
/home/noah/Documents/basteln/ofen_v2/main/pins.cpp:9
  // Shift CP (OUT), Shift PL (OUT), SCK (OUT), MISO (IN), MOSI (OUT), SD CS (OUT), LCD D/C (OUT), LCD RST (OUT)

  DDRC = 0b00111111;
    4dac:	8f e3       	ldi	r24, 0x3F	; 63
    4dae:	87 b9       	out	0x07, r24	; 7
/home/noah/Documents/basteln/ofen_v2/main/pins.cpp:12
  // RST (IN), HEATER (OUT), MUX A (OUT), MUX B (OUT), MUX C (OUT), ADC CS (OUT), Touch CS (OUT)

  DDRD = 0b11100010;
    4db0:	82 ee       	ldi	r24, 0xE2	; 226
    4db2:	8a b9       	out	0x0a, r24	; 10
begin():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4db4:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <Serial+0x10>
    4db8:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <Serial+0x11>
    4dbc:	90 83       	st	Z, r25
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4dbe:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <Serial+0xc>
    4dc2:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <Serial+0xd>
    4dc6:	10 82       	st	Z, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    4dc8:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <Serial+0xe>
    4dcc:	f0 91 62 02 	lds	r31, 0x0262	; 0x800262 <Serial+0xf>
    4dd0:	88 e0       	ldi	r24, 0x08	; 8
    4dd2:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    4dd4:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <Serial+0x18>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4dd8:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <Serial+0x14>
    4ddc:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <Serial+0x15>
    4de0:	86 e0       	ldi	r24, 0x06	; 6
    4de2:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    4de4:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <Serial+0x12>
    4de8:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <Serial+0x13>
    4dec:	80 81       	ld	r24, Z
    4dee:	88 69       	ori	r24, 0x98	; 152
    4df0:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    4df2:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <Serial+0x12>
    4df6:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <Serial+0x13>
    4dfa:	80 81       	ld	r24, Z
    4dfc:	8f 7d       	andi	r24, 0xDF	; 223
    4dfe:	80 83       	st	Z, r24
setup():
/home/noah/Documents/basteln/ofen_v2/main/main.ino:40

void setup() {
  pin_config();

  Serial.begin(115200);
  Serial.println("Hello!");
    4e00:	8d e0       	ldi	r24, 0x0D	; 13
    4e02:	92 e0       	ldi	r25, 0x02	; 2
    4e04:	0e 94 2a 1a 	call	0x3454	; 0x3454 <Print::println(char const*) [clone .constprop.17]>
/home/noah/Documents/basteln/ofen_v2/main/main.ino:41
  write(ADC_CS_PIN, HIGH);
    4e08:	61 e0       	ldi	r22, 0x01	; 1
    4e0a:	85 e1       	ldi	r24, 0x15	; 21
    4e0c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
beginTransaction():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    4e10:	80 e5       	ldi	r24, 0x50	; 80
    4e12:	8c bd       	out	0x2c, r24	; 44
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
    4e14:	81 e0       	ldi	r24, 0x01	; 1
    4e16:	8d bd       	out	0x2d, r24	; 45
adc_config():
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:9
#include "avrio.h"
#include "pins.h"


void adc_config() {
  write(ADC_CS_PIN, LOW);
    4e18:	60 e0       	ldi	r22, 0x00	; 0
    4e1a:	85 e1       	ldi	r24, 0x15	; 21
    4e1c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:10
  SPI.transfer(DEVICE_ADDRESS << 6 | 0b00000110);
    4e20:	86 e4       	ldi	r24, 0x46	; 70
    4e22:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:11
  SPI.transfer(0b11100000); //CONFIG0:  CLK_SEL
    4e26:	80 ee       	ldi	r24, 0xE0	; 224
    4e28:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:13
  // SPI.transfer(0b00111100); //CONFIG1:  OSR
  SPI.transfer(0b00101100); //CONFIG1:  OSR
    4e2c:	8c e2       	ldi	r24, 0x2C	; 44
    4e2e:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:14
  SPI.transfer(0b10101011); //CONFIG2:  GAIN, AZ_MUX
    4e32:	8b ea       	ldi	r24, 0xAB	; 171
    4e34:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:15
  SPI.transfer(0b00000000); //CONFIG3:  Default
    4e38:	80 e0       	ldi	r24, 0x00	; 0
    4e3a:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:16
  SPI.transfer(0b00000110); //IRQ:      IRQ_MODE, EN_STP
    4e3e:	86 e0       	ldi	r24, 0x06	; 6
    4e40:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:17
  write(ADC_CS_PIN, HIGH);
    4e44:	61 e0       	ldi	r22, 0x01	; 1
    4e46:	85 e1       	ldi	r24, 0x15	; 21
    4e48:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
timer_config():
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:13
void add_timer_event_listener(timer_event_listener *new_event_listener, uint8_t match, void *params) {
  add_last<struct timer_event_listener_conf>(timer_event_listener_list, {new_event_listener, 0, match, params});
}

void timer_config() {
  TCCR1A = 0;
    4e4c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:14
  TCCR1B = 0b00001101;
    4e50:	8d e0       	ldi	r24, 0x0D	; 13
    4e52:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:15
  OCR1A = 7812;
    4e56:	84 e8       	ldi	r24, 0x84	; 132
    4e58:	9e e1       	ldi	r25, 0x1E	; 30
    4e5a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    4e5e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:16
  TIMSK1 |= 1 << OCIE1A;
    4e62:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    4e66:	82 60       	ori	r24, 0x02	; 2
    4e68:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
setup():
/home/noah/Documents/basteln/ofen_v2/main/main.ino:46
  SPI.beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0));

  adc_config();
  timer_config();
  sei();
    4e6c:	78 94       	sei
add_timer_event_listener():
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:9

struct list<struct timer_event_listener_conf> *timer_event_listener_list = new_list<struct timer_event_listener_conf>();

// register a new event listener to be called when the counter reaches the match value
void add_timer_event_listener(timer_event_listener *new_event_listener, uint8_t match, void *params) {
  add_last<struct timer_event_listener_conf>(timer_event_listener_list, {new_event_listener, 0, match, params});
    4e6e:	00 91 f2 02 	lds	r16, 0x02F2	; 0x8002f2 <timer_event_listener_list>
    4e72:	10 91 f3 02 	lds	r17, 0x02F3	; 0x8002f3 <timer_event_listener_list+0x1>
add_last():
/home/noah/Documents/basteln/ofen_v2/main/list.h:46
}

template <typename T>
void add_last(struct list<T> *list, T data) {
  struct list<T> *last_element = list;
  while(last_element->next) {
    4e76:	d8 01       	movw	r26, r16
    4e78:	16 96       	adiw	r26, 0x06	; 6
    4e7a:	8d 91       	ld	r24, X+
    4e7c:	9c 91       	ld	r25, X
    4e7e:	17 97       	sbiw	r26, 0x07	; 7
    4e80:	00 97       	sbiw	r24, 0x00	; 0
    4e82:	09 f0       	breq	.+2      	; 0x4e86 <main+0x142>
    4e84:	b6 c1       	rjmp	.+876    	; 0x51f2 <main+0x4ae>
/home/noah/Documents/basteln/ofen_v2/main/list.h:49
    last_element = last_element->next;
  }
  last_element->data = data;
    4e86:	87 e1       	ldi	r24, 0x17	; 23
    4e88:	94 e2       	ldi	r25, 0x24	; 36
    4e8a:	11 96       	adiw	r26, 0x01	; 1
    4e8c:	9c 93       	st	X, r25
    4e8e:	8e 93       	st	-X, r24
    4e90:	12 96       	adiw	r26, 0x02	; 2
    4e92:	1c 92       	st	X, r1
    4e94:	12 97       	sbiw	r26, 0x02	; 2
    4e96:	81 e0       	ldi	r24, 0x01	; 1
    4e98:	13 96       	adiw	r26, 0x03	; 3
    4e9a:	8c 93       	st	X, r24
    4e9c:	13 97       	sbiw	r26, 0x03	; 3
    4e9e:	15 96       	adiw	r26, 0x05	; 5
    4ea0:	1c 92       	st	X, r1
    4ea2:	1e 92       	st	-X, r1
    4ea4:	14 97       	sbiw	r26, 0x04	; 4
new_helper():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/new.cpp:44
static void * new_helper(std::size_t size) {
  // Even zero-sized allocations should return a unique pointer, but
  // malloc does not guarantee this
  if (size == 0)
    size = 1;
  return malloc(size);
    4ea6:	88 e0       	ldi	r24, 0x08	; 8
    4ea8:	90 e0       	ldi	r25, 0x00	; 0
    4eaa:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
new_list():
/home/noah/Documents/basteln/ofen_v2/main/list.h:39

template <typename T>
struct list<T> *new_list() {
  struct list<T> *new_list = new struct list<T>;
  //new_list->data = (T)0;
  new_list->next = 0;
    4eae:	fc 01       	movw	r30, r24
    4eb0:	17 82       	std	Z+7, r1	; 0x07
    4eb2:	16 82       	std	Z+6, r1	; 0x06
add_last():
/home/noah/Documents/basteln/ofen_v2/main/list.h:50
  struct list<T> *last_element = list;
  while(last_element->next) {
    last_element = last_element->next;
  }
  last_element->data = data;
  last_element->next = new_list<T>();
    4eb4:	d8 01       	movw	r26, r16
    4eb6:	17 96       	adiw	r26, 0x07	; 7
    4eb8:	9c 93       	st	X, r25
    4eba:	8e 93       	st	-X, r24
    4ebc:	16 97       	sbiw	r26, 0x06	; 6
new_helper():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/new.cpp:44
    4ebe:	8a e0       	ldi	r24, 0x0A	; 10
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    4ec6:	1c 01       	movw	r2, r24
new_list():
/home/noah/Documents/basteln/ofen_v2/main/list.h:39

template <typename T>
struct list<T> *new_list() {
  struct list<T> *new_list = new struct list<T>;
  //new_list->data = (T)0;
  new_list->next = 0;
    4ec8:	fc 01       	movw	r30, r24
    4eca:	11 86       	std	Z+9, r1	; 0x09
    4ecc:	10 86       	std	Z+8, r1	; 0x08
launch_ui():
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:19
float cols[] = {-1, 0.55};
float rows[] = {-1, 21, 42, 63, 84, 105, 126, 147, 168, 189, 210, 231, 252};

void launch_ui() {
  struct list<setpoint> *setpoint_list = new_list<setpoint>();
  struct temp_table *temp_table = (struct temp_table *)malloc(sizeof(struct temp_table));
    4ece:	87 e1       	ldi	r24, 0x17	; 23
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    4ed6:	8c 01       	movw	r16, r24
create_table():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:4
#include "table.h"

table *create_table(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t rows, uint16_t cols) {
  table *new_table = (table *)malloc(sizeof(table));
    4ed8:	80 e1       	ldi	r24, 0x10	; 16
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    4ee0:	7c 01       	movw	r14, r24
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:5
  new_table->pos = {x, y};
    4ee2:	8c e5       	ldi	r24, 0x5C	; 92
    4ee4:	91 e0       	ldi	r25, 0x01	; 1
    4ee6:	d7 01       	movw	r26, r14
    4ee8:	11 96       	adiw	r26, 0x01	; 1
    4eea:	9c 93       	st	X, r25
    4eec:	8e 93       	st	-X, r24
    4eee:	8c e3       	ldi	r24, 0x3C	; 60
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	13 96       	adiw	r26, 0x03	; 3
    4ef4:	9c 93       	st	X, r25
    4ef6:	8e 93       	st	-X, r24
    4ef8:	12 97       	sbiw	r26, 0x02	; 2
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:6
  new_table->width = width;
    4efa:	80 e8       	ldi	r24, 0x80	; 128
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	15 96       	adiw	r26, 0x05	; 5
    4f00:	9c 93       	st	X, r25
    4f02:	8e 93       	st	-X, r24
    4f04:	14 97       	sbiw	r26, 0x04	; 4
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:7
  new_table->height = height;
    4f06:	80 e0       	ldi	r24, 0x00	; 0
    4f08:	91 e0       	ldi	r25, 0x01	; 1
    4f0a:	17 96       	adiw	r26, 0x07	; 7
    4f0c:	9c 93       	st	X, r25
    4f0e:	8e 93       	st	-X, r24
    4f10:	16 97       	sbiw	r26, 0x06	; 6
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:8
  new_table->rows = rows;
    4f12:	8d e0       	ldi	r24, 0x0D	; 13
    4f14:	18 96       	adiw	r26, 0x08	; 8
    4f16:	8c 93       	st	X, r24
    4f18:	18 97       	sbiw	r26, 0x08	; 8
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:9
  new_table->columns = cols;
    4f1a:	82 e0       	ldi	r24, 0x02	; 2
    4f1c:	19 96       	adiw	r26, 0x09	; 9
    4f1e:	8c 93       	st	X, r24
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:10
  new_table->hlines = (float *)malloc(sizeof(float) * rows);
    4f20:	84 e3       	ldi	r24, 0x34	; 52
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    4f28:	f7 01       	movw	r30, r14
    4f2a:	93 87       	std	Z+11, r25	; 0x0b
    4f2c:	82 87       	std	Z+10, r24	; 0x0a
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:11
  new_table->vlines = (float *)malloc(sizeof(float) * cols);
    4f2e:	88 e0       	ldi	r24, 0x08	; 8
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    4f36:	d7 01       	movw	r26, r14
    4f38:	1d 96       	adiw	r26, 0x0d	; 13
    4f3a:	9c 93       	st	X, r25
    4f3c:	8e 93       	st	-X, r24
    4f3e:	1c 97       	sbiw	r26, 0x0c	; 12
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:12
  new_table->field_colors = (rgb_color *)malloc(sizeof(rgb_color) * rows * cols);
    4f40:	8e e4       	ldi	r24, 0x4E	; 78
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    4f48:	f7 01       	movw	r30, r14
    4f4a:	97 87       	std	Z+15, r25	; 0x0f
    4f4c:	86 87       	std	Z+14, r24	; 0x0e
launch_ui():
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:21
  table *temp_table_table = create_table(TABLE_X, TABLE_Y, TABLE_WIDTH, TABLE_HEIGHT, 13, 2);
  graph *temperature_graph = (graph*)malloc(sizeof(graph));
    4f4e:	89 e1       	ldi	r24, 0x19	; 25
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    4f56:	3c 01       	movw	r6, r24
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:22
  *temperature_graph = {{GRAPH_X, GRAPH_Y}, GRAPH_WIDTH, GRAPH_HEIGHT, 0, 400, 0, 1300, 10};
    4f58:	89 e1       	ldi	r24, 0x19	; 25
    4f5a:	e5 e4       	ldi	r30, 0x45	; 69
    4f5c:	f1 e0       	ldi	r31, 0x01	; 1
    4f5e:	d3 01       	movw	r26, r6
    4f60:	01 90       	ld	r0, Z+
    4f62:	0d 92       	st	X+, r0
    4f64:	8a 95       	dec	r24
    4f66:	e1 f7       	brne	.-8      	; 0x4f60 <main+0x21c>
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:23
  *temp_table = (struct temp_table){.temp_table = *temp_table_table, .selected_field = 0, .pre_edit = "00:00", .setpoint_list = setpoint_list, .temp_graph = temperature_graph};
    4f68:	80 e1       	ldi	r24, 0x10	; 16
    4f6a:	f7 01       	movw	r30, r14
    4f6c:	de 01       	movw	r26, r28
    4f6e:	11 96       	adiw	r26, 0x01	; 1
    4f70:	01 90       	ld	r0, Z+
    4f72:	0d 92       	st	X+, r0
    4f74:	8a 95       	dec	r24
    4f76:	e1 f7       	brne	.-8      	; 0x4f70 <main+0x22c>
    4f78:	80 e1       	ldi	r24, 0x10	; 16
    4f7a:	fe 01       	movw	r30, r28
    4f7c:	31 96       	adiw	r30, 0x01	; 1
    4f7e:	d8 01       	movw	r26, r16
    4f80:	01 90       	ld	r0, Z+
    4f82:	0d 92       	st	X+, r0
    4f84:	8a 95       	dec	r24
    4f86:	e1 f7       	brne	.-8      	; 0x4f80 <main+0x23c>
    4f88:	d8 01       	movw	r26, r16
    4f8a:	50 96       	adiw	r26, 0x10	; 16
    4f8c:	1c 92       	st	X, r1
    4f8e:	50 97       	sbiw	r26, 0x10	; 16
    4f90:	84 e1       	ldi	r24, 0x14	; 20
    4f92:	92 e0       	ldi	r25, 0x02	; 2
    4f94:	52 96       	adiw	r26, 0x12	; 18
    4f96:	9c 93       	st	X, r25
    4f98:	8e 93       	st	-X, r24
    4f9a:	51 97       	sbiw	r26, 0x11	; 17
    4f9c:	54 96       	adiw	r26, 0x14	; 20
    4f9e:	3c 92       	st	X, r3
    4fa0:	2e 92       	st	-X, r2
    4fa2:	53 97       	sbiw	r26, 0x13	; 19
    4fa4:	56 96       	adiw	r26, 0x16	; 22
    4fa6:	7c 92       	st	X, r7
    4fa8:	6e 92       	st	-X, r6
    4faa:	55 97       	sbiw	r26, 0x15	; 21
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:24
  temp_table->temp_table.hlines = rows;
    4fac:	88 e0       	ldi	r24, 0x08	; 8
    4fae:	91 e0       	ldi	r25, 0x01	; 1
    4fb0:	1b 96       	adiw	r26, 0x0b	; 11
    4fb2:	9c 93       	st	X, r25
    4fb4:	8e 93       	st	-X, r24
    4fb6:	1a 97       	sbiw	r26, 0x0a	; 10
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:25
  temp_table->temp_table.vlines = cols;
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	91 e0       	ldi	r25, 0x01	; 1
    4fbc:	1d 96       	adiw	r26, 0x0d	; 13
    4fbe:	9c 93       	st	X, r25
    4fc0:	8e 93       	st	-X, r24
    4fc2:	1c 97       	sbiw	r26, 0x0c	; 12
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:27
  
  add_event_listener((event_listener*)&arrow_click_event_listener, KEY_RIGHT|KEY_LEFT, CLICK, temp_table);
    4fc4:	98 01       	movw	r18, r16
    4fc6:	41 e0       	ldi	r20, 0x01	; 1
    4fc8:	6c e0       	ldi	r22, 0x0C	; 12
    4fca:	70 e0       	ldi	r23, 0x00	; 0
    4fcc:	8f e9       	ldi	r24, 0x9F	; 159
    4fce:	91 e2       	ldi	r25, 0x21	; 33
    4fd0:	0e 94 20 19 	call	0x3240	; 0x3240 <add_event_listener(void* (*)(unsigned int, void*), unsigned int, unsigned char, void*)>
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:28
  add_event_listener((event_listener*)&arrow_click_event_listener, KEY_UP|KEY_DOWN, CLICK|MULTI_CLICK, temp_table);
    4fd4:	98 01       	movw	r18, r16
    4fd6:	45 e0       	ldi	r20, 0x05	; 5
    4fd8:	60 e8       	ldi	r22, 0x80	; 128
    4fda:	78 e0       	ldi	r23, 0x08	; 8
    4fdc:	8f e9       	ldi	r24, 0x9F	; 159
    4fde:	91 e2       	ldi	r25, 0x21	; 33
    4fe0:	0e 94 20 19 	call	0x3240	; 0x3240 <add_event_listener(void* (*)(unsigned int, void*), unsigned int, unsigned char, void*)>
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:29
  add_event_listener((event_listener*)&number_click_event_listener, KEY_NUMBER, CLICK, temp_table);
    4fe4:	98 01       	movw	r18, r16
    4fe6:	41 e0       	ldi	r20, 0x01	; 1
    4fe8:	62 e7       	ldi	r22, 0x72	; 114
    4fea:	77 e7       	ldi	r23, 0x77	; 119
    4fec:	8f e3       	ldi	r24, 0x3F	; 63
    4fee:	93 e2       	ldi	r25, 0x23	; 35
    4ff0:	0e 94 20 19 	call	0x3240	; 0x3240 <add_event_listener(void* (*)(unsigned int, void*), unsigned int, unsigned char, void*)>
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:30
  add_event_listener((event_listener*)&esc_click_event_listener, KEY_ESC, CLICK, temp_table);
    4ff4:	98 01       	movw	r18, r16
    4ff6:	41 e0       	ldi	r20, 0x01	; 1
    4ff8:	61 e0       	ldi	r22, 0x01	; 1
    4ffa:	70 e0       	ldi	r23, 0x00	; 0
    4ffc:	81 ec       	ldi	r24, 0xC1	; 193
    4ffe:	92 e2       	ldi	r25, 0x22	; 34
    5000:	0e 94 20 19 	call	0x3240	; 0x3240 <add_event_listener(void* (*)(unsigned int, void*), unsigned int, unsigned char, void*)>
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:31
  add_event_listener((event_listener*)&enter_click_event_listener, KEY_ENTER, CLICK, temp_table);
    5004:	98 01       	movw	r18, r16
    5006:	41 e0       	ldi	r20, 0x01	; 1
    5008:	60 e0       	ldi	r22, 0x00	; 0
    500a:	70 e8       	ldi	r23, 0x80	; 128
    500c:	8b e8       	ldi	r24, 0x8B	; 139
    500e:	92 e2       	ldi	r25, 0x22	; 34
    5010:	0e 94 20 19 	call	0x3240	; 0x3240 <add_event_listener(void* (*)(unsigned int, void*), unsigned int, unsigned char, void*)>
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:32
  add_event_listener((event_listener*)&delete_row_event_listener, KEY_LEFT, LONG_PRESS, temp_table);
    5014:	98 01       	movw	r18, r16
    5016:	42 e0       	ldi	r20, 0x02	; 2
    5018:	64 e0       	ldi	r22, 0x04	; 4
    501a:	70 e0       	ldi	r23, 0x00	; 0
    501c:	87 ef       	ldi	r24, 0xF7	; 247
    501e:	9f e1       	ldi	r25, 0x1F	; 31
    5020:	0e 94 20 19 	call	0x3240	; 0x3240 <add_event_listener(void* (*)(unsigned int, void*), unsigned int, unsigned char, void*)>
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:33
  add_event_listener((event_listener*)&add_row_event_listener, KEY_RIGHT, LONG_PRESS, temp_table);
    5024:	98 01       	movw	r18, r16
    5026:	42 e0       	ldi	r20, 0x02	; 2
    5028:	68 e0       	ldi	r22, 0x08	; 8
    502a:	70 e0       	ldi	r23, 0x00	; 0
    502c:	8a e4       	ldi	r24, 0x4A	; 74
    502e:	90 e2       	ldi	r25, 0x20	; 32
    5030:	0e 94 20 19 	call	0x3240	; 0x3240 <add_event_listener(void* (*)(unsigned int, void*), unsigned int, unsigned char, void*)>
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:35

  add_last<setpoint>(setpoint_list, (setpoint){"00:00", 0});
    5034:	88 e0       	ldi	r24, 0x08	; 8
    5036:	ee e5       	ldi	r30, 0x5E	; 94
    5038:	f1 e0       	ldi	r31, 0x01	; 1
    503a:	de 01       	movw	r26, r28
    503c:	99 96       	adiw	r26, 0x29	; 41
    503e:	01 90       	ld	r0, Z+
    5040:	0d 92       	st	X+, r0
    5042:	8a 95       	dec	r24
    5044:	e1 f7       	brne	.-8      	; 0x503e <main+0x2fa>
    5046:	88 e0       	ldi	r24, 0x08	; 8
    5048:	fe 01       	movw	r30, r28
    504a:	b9 96       	adiw	r30, 0x29	; 41
    504c:	de 01       	movw	r26, r28
    504e:	91 96       	adiw	r26, 0x21	; 33
    5050:	01 90       	ld	r0, Z+
    5052:	0d 92       	st	X+, r0
    5054:	8a 95       	dec	r24
    5056:	e1 f7       	brne	.-8      	; 0x5050 <main+0x30c>
main():
/home/noah/Documents/basteln/ofen_v2/main/list.h:45
  return new_list;
}

template <typename T>
void add_last(struct list<T> *list, T data) {
  struct list<T> *last_element = list;
    5058:	71 01       	movw	r14, r2
add_last():
/home/noah/Documents/basteln/ofen_v2/main/list.h:46
  while(last_element->next) {
    505a:	f7 01       	movw	r30, r14
    505c:	80 85       	ldd	r24, Z+8	; 0x08
    505e:	91 85       	ldd	r25, Z+9	; 0x09
    5060:	00 97       	sbiw	r24, 0x00	; 0
    5062:	09 f0       	breq	.+2      	; 0x5066 <main+0x322>
    5064:	c8 c0       	rjmp	.+400    	; 0x51f6 <main+0x4b2>
/home/noah/Documents/basteln/ofen_v2/main/list.h:49
    last_element = last_element->next;
  }
  last_element->data = data;
    5066:	88 e0       	ldi	r24, 0x08	; 8
    5068:	fe 01       	movw	r30, r28
    506a:	b1 96       	adiw	r30, 0x21	; 33
    506c:	d7 01       	movw	r26, r14
    506e:	01 90       	ld	r0, Z+
    5070:	0d 92       	st	X+, r0
    5072:	8a 95       	dec	r24
    5074:	e1 f7       	brne	.-8      	; 0x506e <main+0x32a>
new_helper():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/new.cpp:44
    5076:	8a e0       	ldi	r24, 0x0A	; 10
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
new_list():
/home/noah/Documents/basteln/ofen_v2/main/list.h:39

template <typename T>
struct list<T> *new_list() {
  struct list<T> *new_list = new struct list<T>;
  //new_list->data = (T)0;
  new_list->next = 0;
    507e:	dc 01       	movw	r26, r24
    5080:	19 96       	adiw	r26, 0x09	; 9
    5082:	1c 92       	st	X, r1
    5084:	1e 92       	st	-X, r1
    5086:	18 97       	sbiw	r26, 0x08	; 8
add_last():
/home/noah/Documents/basteln/ofen_v2/main/list.h:50
  struct list<T> *last_element = list;
  while(last_element->next) {
    last_element = last_element->next;
  }
  last_element->data = data;
  last_element->next = new_list<T>();
    5088:	f7 01       	movw	r30, r14
    508a:	91 87       	std	Z+9, r25	; 0x09
    508c:	80 87       	std	Z+8, r24	; 0x08
add_setpoint():
/home/noah/Documents/basteln/ofen_v2/main/setpoint.cpp:29
  return i; // return the final position of the new setpoint
}

// add setpoint at latest possible position
uint8_t add_setpoint(struct list<setpoint> *setpoint_list, uint16_t time, uint16_t temp) {
  add_setpoint(setpoint_list, time, temp, -1);
    508e:	2f ef       	ldi	r18, 0xFF	; 255
    5090:	46 e9       	ldi	r20, 0x96	; 150
    5092:	50 e0       	ldi	r21, 0x00	; 0
    5094:	64 e1       	ldi	r22, 0x14	; 20
    5096:	70 e0       	ldi	r23, 0x00	; 0
    5098:	c1 01       	movw	r24, r2
    509a:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)>
    509e:	2f ef       	ldi	r18, 0xFF	; 255
    50a0:	40 e2       	ldi	r20, 0x20	; 32
    50a2:	53 e0       	ldi	r21, 0x03	; 3
    50a4:	66 e4       	ldi	r22, 0x46	; 70
    50a6:	70 e0       	ldi	r23, 0x00	; 0
    50a8:	c1 01       	movw	r24, r2
    50aa:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)>
    50ae:	2f ef       	ldi	r18, 0xFF	; 255
    50b0:	48 ec       	ldi	r20, 0xC8	; 200
    50b2:	50 e0       	ldi	r21, 0x00	; 0
    50b4:	64 e0       	ldi	r22, 0x04	; 4
    50b6:	71 e0       	ldi	r23, 0x01	; 1
    50b8:	c1 01       	movw	r24, r2
    50ba:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)>
    50be:	2f ef       	ldi	r18, 0xFF	; 255
    50c0:	40 eb       	ldi	r20, 0xB0	; 176
    50c2:	54 e0       	ldi	r21, 0x04	; 4
    50c4:	60 e5       	ldi	r22, 0x50	; 80
    50c6:	70 e0       	ldi	r23, 0x00	; 0
    50c8:	c1 01       	movw	r24, r2
    50ca:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)>
    50ce:	2f ef       	ldi	r18, 0xFF	; 255
    50d0:	48 ee       	ldi	r20, 0xE8	; 232
    50d2:	53 e0       	ldi	r21, 0x03	; 3
    50d4:	60 e5       	ldi	r22, 0x50	; 80
    50d6:	70 e0       	ldi	r23, 0x00	; 0
    50d8:	c1 01       	movw	r24, r2
    50da:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)>
    50de:	2f ef       	ldi	r18, 0xFF	; 255
    50e0:	50 e0       	ldi	r21, 0x00	; 0
    50e2:	40 e0       	ldi	r20, 0x00	; 0
    50e4:	60 e9       	ldi	r22, 0x90	; 144
    50e6:	71 e0       	ldi	r23, 0x01	; 1
    50e8:	c1 01       	movw	r24, r2
    50ea:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <add_setpoint(list<setpoint>*, unsigned int, unsigned int, unsigned char)>
Init_LCD():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:434
}

// Initialization lcd modules
void LCDWIKI_SPI::Init_LCD(void)
{
	reset();
    50ee:	0e 94 a5 09 	call	0x134a	; 0x134a <LCDWIKI_SPI::reset() [clone .constprop.44]>
Led_control():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:471
  CS_IDLE;
}

void LCDWIKI_SPI::Led_control(boolean i)
{
	if(_led >= 0)
    50f2:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <display+0x4d>
    50f6:	87 fd       	sbrc	r24, 7
    50f8:	03 c0       	rjmp	.+6      	; 0x5100 <main+0x3bc>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:475
	{
		if(i)
		{
			digitalWrite(_led, HIGH);
    50fa:	61 e0       	ldi	r22, 0x01	; 1
    50fc:	0e 94 4f 05 	call	0xa9e	; 0xa9e <digitalWrite>
Init_LCD():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:436
// Initialization lcd modules
void LCDWIKI_SPI::Init_LCD(void)
{
	reset();
	Led_control(true);
	if(lcd_model == 0xFFFF)
    5100:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <display+0x1c>
    5104:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <display+0x1d>
    5108:	01 96       	adiw	r24, 0x01	; 1
    510a:	09 f0       	breq	.+2      	; 0x510e <main+0x3ca>
    510c:	45 c0       	rjmp	.+138    	; 0x5198 <main+0x454>
Read_ID():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:891

//read LCD controller chip ID
uint16_t LCDWIKI_SPI::Read_ID(void)
{
	uint16_t ret;
	if ((Read_Reg(0x04,0) == 0x00)&&(Read_Reg(0x04,1) == 0x8000))
    510e:	60 e0       	ldi	r22, 0x00	; 0
    5110:	84 e0       	ldi	r24, 0x04	; 4
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <LCDWIKI_SPI::Read_Reg(unsigned int, signed char) [clone .constprop.42]>
    5118:	89 2b       	or	r24, r25
    511a:	21 f5       	brne	.+72     	; 0x5164 <main+0x420>
    511c:	61 e0       	ldi	r22, 0x01	; 1
    511e:	84 e0       	ldi	r24, 0x04	; 4
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <LCDWIKI_SPI::Read_Reg(unsigned int, signed char) [clone .constprop.42]>
    5126:	81 15       	cp	r24, r1
    5128:	90 48       	sbci	r25, 0x80	; 128
    512a:	e1 f4       	brne	.+56     	; 0x5164 <main+0x420>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:893
	{
		uint8_t buf[] = {0xFF, 0x83, 0x57};
    512c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__malloc_margin+0x26>
    5130:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <__malloc_margin+0x27>
    5134:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <__malloc_margin+0x28>
    5138:	89 8b       	std	Y+17, r24	; 0x11
    513a:	9a 8b       	std	Y+18, r25	; 0x12
    513c:	ab 8b       	std	Y+19, r26	; 0x13
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:894
		Push_Command(HX8357D_SETC, buf, sizeof(buf));
    513e:	23 e0       	ldi	r18, 0x03	; 3
    5140:	ae 01       	movw	r20, r28
    5142:	4f 5e       	subi	r20, 0xEF	; 239
    5144:	5f 4f       	sbci	r21, 0xFF	; 255
    5146:	69 eb       	ldi	r22, 0xB9	; 185
    5148:	85 ef       	ldi	r24, 0xF5	; 245
    514a:	92 e0       	ldi	r25, 0x02	; 2
    514c:	0e 94 2a 12 	call	0x2454	; 0x2454 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:895
		ret = (Read_Reg(0xD0,0) << 16) | Read_Reg(0xD0,1);
    5150:	60 e0       	ldi	r22, 0x00	; 0
    5152:	80 ed       	ldi	r24, 0xD0	; 208
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <LCDWIKI_SPI::Read_Reg(unsigned int, signed char) [clone .constprop.42]>
    515a:	61 e0       	ldi	r22, 0x01	; 1
    515c:	80 ed       	ldi	r24, 0xD0	; 208
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <LCDWIKI_SPI::Read_Reg(unsigned int, signed char) [clone .constprop.42]>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:901
		if((ret == 0x990000) || (ret == 0x900000))
		{
			return 0x9090;
		}
	}
	ret = Read_Reg(0xD3,1);
    5164:	61 e0       	ldi	r22, 0x01	; 1
    5166:	83 ed       	ldi	r24, 0xD3	; 211
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <LCDWIKI_SPI::Read_Reg(unsigned int, signed char) [clone .constprop.42]>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:902
	if(ret == 0x9341)
    516e:	81 34       	cpi	r24, 0x41	; 65
    5170:	a3 e9       	ldi	r26, 0x93	; 147
    5172:	9a 07       	cpc	r25, r26
    5174:	69 f0       	breq	.+26     	; 0x5190 <main+0x44c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:906
	{
		return 0x9341;
	}
	else if(ret == 0x9486)
    5176:	86 38       	cpi	r24, 0x86	; 134
    5178:	b4 e9       	ldi	r27, 0x94	; 148
    517a:	9b 07       	cpc	r25, r27
    517c:	49 f0       	breq	.+18     	; 0x5190 <main+0x44c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:910
	{
		return 0x9486;
	}
	else if(ret == 0x9488)
    517e:	88 38       	cpi	r24, 0x88	; 136
    5180:	e4 e9       	ldi	r30, 0x94	; 148
    5182:	9e 07       	cpc	r25, r30
    5184:	29 f0       	breq	.+10     	; 0x5190 <main+0x44c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:916
	{
		return 0x9488;
	}
	else
	{
		return Read_Reg(0, 0);
    5186:	60 e0       	ldi	r22, 0x00	; 0
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	80 e0       	ldi	r24, 0x00	; 0
    518c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <LCDWIKI_SPI::Read_Reg(unsigned int, signed char) [clone .constprop.42]>
Init_LCD():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:438
{
	reset();
	Led_control(true);
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
    5190:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <display+0x1d>
    5194:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <display+0x1c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:441
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
    5198:	e0 90 11 03 	lds	r14, 0x0311	; 0x800311 <display+0x1c>
    519c:	f0 90 12 03 	lds	r15, 0x0312	; 0x800312 <display+0x1d>
start():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1435
    }
}

void LCDWIKI_SPI::start(uint16_t ID)
{
	reset();
    51a0:	0e 94 a5 09 	call	0x134a	; 0x134a <LCDWIKI_SPI::reset() [clone .constprop.44]>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1436
	delay(200);
    51a4:	68 ec       	ldi	r22, 0xC8	; 200
    51a6:	70 e0       	ldi	r23, 0x00	; 0
    51a8:	80 e0       	ldi	r24, 0x00	; 0
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	0e 94 c0 05 	call	0xb80	; 0xb80 <delay>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1437
	switch(ID)
    51b0:	f5 e2       	ldi	r31, 0x25	; 37
    51b2:	ef 16       	cp	r14, r31
    51b4:	f3 e9       	ldi	r31, 0x93	; 147
    51b6:	ff 06       	cpc	r15, r31
    51b8:	09 f4       	brne	.+2      	; 0x51bc <main+0x478>
    51ba:	ff c0       	rjmp	.+510    	; 0x53ba <main+0x676>
    51bc:	08 f0       	brcs	.+2      	; 0x51c0 <main+0x47c>
    51be:	66 c0       	rjmp	.+204    	; 0x528c <main+0x548>
    51c0:	85 e7       	ldi	r24, 0x75	; 117
    51c2:	e8 16       	cp	r14, r24
    51c4:	f8 06       	cpc	r15, r24
    51c6:	09 f4       	brne	.+2      	; 0x51ca <main+0x486>
    51c8:	c1 c0       	rjmp	.+386    	; 0x534c <main+0x608>
    51ca:	b8 f4       	brcc	.+46     	; 0x51fa <main+0x4b6>
    51cc:	b6 e0       	ldi	r27, 0x06	; 6
    51ce:	eb 16       	cp	r14, r27
    51d0:	b1 e1       	ldi	r27, 0x11	; 17
    51d2:	fb 06       	cpc	r15, r27
    51d4:	09 f4       	brne	.+2      	; 0x51d8 <main+0x494>
    51d6:	66 c3       	rjmp	.+1740   	; 0x58a4 <main+0xb60>
    51d8:	e3 e8       	ldi	r30, 0x83	; 131
    51da:	ee 16       	cp	r14, r30
    51dc:	e2 e1       	ldi	r30, 0x12	; 18
    51de:	fe 06       	cpc	r15, r30
    51e0:	09 f4       	brne	.+2      	; 0x51e4 <main+0x4a0>
    51e2:	21 c3       	rjmp	.+1602   	; 0x5826 <main+0xae2>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1824
            	0xAF, 0,
			};
			init_table8(SH1106_regValues, sizeof(SH1106_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
    51e4:	8f ef       	ldi	r24, 0xFF	; 255
    51e6:	90 e0       	ldi	r25, 0x00	; 0
    51e8:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <display+0x1b>
    51ec:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <display+0x1a>
    51f0:	1c c1       	rjmp	.+568    	; 0x542a <main+0x6e6>
add_last():
/home/noah/Documents/basteln/ofen_v2/main/list.h:46
}

template <typename T>
void add_last(struct list<T> *list, T data) {
  struct list<T> *last_element = list;
  while(last_element->next) {
    51f2:	8c 01       	movw	r16, r24
    51f4:	40 ce       	rjmp	.-896    	; 0x4e76 <main+0x132>
    51f6:	7c 01       	movw	r14, r24
    51f8:	30 cf       	rjmp	.-416    	; 0x505a <main+0x316>
start():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1437

void LCDWIKI_SPI::start(uint16_t ID)
{
	reset();
	delay(200);
	switch(ID)
    51fa:	f5 e3       	ldi	r31, 0x35	; 53
    51fc:	ef 16       	cp	r14, r31
    51fe:	f7 e7       	ldi	r31, 0x77	; 119
    5200:	ff 06       	cpc	r15, r31
    5202:	09 f4       	brne	.+2      	; 0x5206 <main+0x4c2>
    5204:	c6 c2       	rjmp	.+1420   	; 0x5792 <main+0xa4e>
    5206:	20 e9       	ldi	r18, 0x90	; 144
    5208:	e2 16       	cp	r14, r18
    520a:	f2 06       	cpc	r15, r18
    520c:	59 f7       	brne	.-42     	; 0x51e4 <main+0x4a0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1543
            	ILI9341_DISPLAYON, 0          //Display On
            };
			init_table8(ILI9341_regValues, sizeof(ILI9341_regValues));    
			break;
		case 0x9090:
			lcd_driver = ID_HX8357D;
    520e:	83 e0       	ldi	r24, 0x03	; 3
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <display+0x1b>
    5216:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <display+0x1a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1546
			//WIDTH = 320,HEIGHT = 480;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=HX8357_RAMWR,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=HX8357_MADCTL,VL=1,R24BIT=1;
    521a:	8a e2       	ldi	r24, 0x2A	; 42
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <display+0x20>
    5222:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <display+0x1f>
    5226:	8b e2       	ldi	r24, 0x2B	; 43
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <display+0x22>
    522e:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <display+0x21>
    5232:	8c e2       	ldi	r24, 0x2C	; 44
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <display+0x24>
    523a:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <display+0x23>
    523e:	8e e2       	ldi	r24, 0x2E	; 46
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <display+0x26>
    5246:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <display+0x25>
    524a:	83 e3       	ldi	r24, 0x33	; 51
    524c:	90 e0       	ldi	r25, 0x00	; 0
    524e:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <display+0x28>
    5252:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <display+0x27>
    5256:	87 e3       	ldi	r24, 0x37	; 55
    5258:	90 e0       	ldi	r25, 0x00	; 0
    525a:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <display+0x2a>
    525e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <display+0x29>
    5262:	86 e3       	ldi	r24, 0x36	; 54
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <display+0x2c>
    526a:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <display+0x2b>
    526e:	81 e0       	ldi	r24, 0x01	; 1
    5270:	90 e0       	ldi	r25, 0x00	; 0
    5272:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <display+0x2e>
    5276:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <display+0x2d>
    527a:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <display+0x30>
    527e:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <display+0x2f>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1569
  				HX8357_SLPOUT, 0,
  				TFTLCD_DELAY8, 150,
  				HX8357_DISPON, 0, 
  				TFTLCD_DELAY8, 50
			};
			init_table8(HX8357D_regValues, sizeof(HX8357D_regValues));
    5282:	66 e4       	ldi	r22, 0x46	; 70
    5284:	70 e0       	ldi	r23, 0x00	; 0
    5286:	81 e1       	ldi	r24, 0x11	; 17
    5288:	93 e0       	ldi	r25, 0x03	; 3
    528a:	52 c0       	rjmp	.+164    	; 0x5330 <main+0x5ec>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1437

void LCDWIKI_SPI::start(uint16_t ID)
{
	reset();
	delay(200);
	switch(ID)
    528c:	86 e8       	ldi	r24, 0x86	; 134
    528e:	e8 16       	cp	r14, r24
    5290:	84 e9       	ldi	r24, 0x94	; 148
    5292:	f8 06       	cpc	r15, r24
    5294:	09 f4       	brne	.+2      	; 0x5298 <main+0x554>
    5296:	f2 c1       	rjmp	.+996    	; 0x567c <main+0x938>
    5298:	08 f0       	brcs	.+2      	; 0x529c <main+0x558>
    529a:	4d c0       	rjmp	.+154    	; 0x5336 <main+0x5f2>
    529c:	b8 e2       	ldi	r27, 0x28	; 40
    529e:	eb 16       	cp	r14, r27
    52a0:	b3 e9       	ldi	r27, 0x93	; 147
    52a2:	fb 06       	cpc	r15, r27
    52a4:	09 f4       	brne	.+2      	; 0x52a8 <main+0x564>
    52a6:	89 c0       	rjmp	.+274    	; 0x53ba <main+0x676>
    52a8:	e1 e4       	ldi	r30, 0x41	; 65
    52aa:	ee 16       	cp	r14, r30
    52ac:	e3 e9       	ldi	r30, 0x93	; 147
    52ae:	fe 06       	cpc	r15, r30
    52b0:	09 f0       	breq	.+2      	; 0x52b4 <main+0x570>
    52b2:	98 cf       	rjmp	.-208    	; 0x51e4 <main+0x4a0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1502
		  		ILI932X_DISP_CTRL1	   , 0x0133 // Main screen turn on		
			};
			init_table16(ILI932x_regValues, sizeof(ILI932x_regValues));
			break;
		case 0x9341:
			lcd_driver = ID_9341;
    52b4:	82 e0       	ldi	r24, 0x02	; 2
    52b6:	90 e0       	ldi	r25, 0x00	; 0
    52b8:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <display+0x1b>
    52bc:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <display+0x1a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1505
			//WIDTH = 240,HEIGHT = 320;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=1;
    52c0:	8a e2       	ldi	r24, 0x2A	; 42
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <display+0x20>
    52c8:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <display+0x1f>
    52cc:	8b e2       	ldi	r24, 0x2B	; 43
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <display+0x22>
    52d4:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <display+0x21>
    52d8:	8c e2       	ldi	r24, 0x2C	; 44
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <display+0x24>
    52e0:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <display+0x23>
    52e4:	8e e2       	ldi	r24, 0x2E	; 46
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <display+0x26>
    52ec:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <display+0x25>
    52f0:	83 e3       	ldi	r24, 0x33	; 51
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <display+0x28>
    52f8:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <display+0x27>
    52fc:	87 e3       	ldi	r24, 0x37	; 55
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <display+0x2a>
    5304:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <display+0x29>
    5308:	86 e3       	ldi	r24, 0x36	; 54
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <display+0x2c>
    5310:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <display+0x2b>
    5314:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <display+0x2e>
    5318:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <display+0x2d>
    531c:	81 e0       	ldi	r24, 0x01	; 1
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <display+0x30>
    5324:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <display+0x2f>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1540
				ILI9341_ENTRYMODE, 1,0x07,
            	ILI9341_SLEEPOUT, 0,            //Sleep Out
            	TFTLCD_DELAY8, 150,
            	ILI9341_DISPLAYON, 0          //Display On
            };
			init_table8(ILI9341_regValues, sizeof(ILI9341_regValues));    
    5328:	6a e7       	ldi	r22, 0x7A	; 122
    532a:	70 e0       	ldi	r23, 0x00	; 0
    532c:	87 e5       	ldi	r24, 0x57	; 87
    532e:	93 e0       	ldi	r25, 0x03	; 3
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1821
            	0x14, 0,
            	0xA4, 0,
            	0xA6, 0,
            	0xAF, 0,
			};
			init_table8(SH1106_regValues, sizeof(SH1106_regValues));
    5330:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCDWIKI_SPI::init_table8(void const*, int) [clone .constprop.46]>
    5334:	7a c0       	rjmp	.+244    	; 0x542a <main+0x6e6>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1437

void LCDWIKI_SPI::start(uint16_t ID)
{
	reset();
	delay(200);
	switch(ID)
    5336:	f8 e8       	ldi	r31, 0x88	; 136
    5338:	ef 16       	cp	r14, r31
    533a:	f4 e9       	ldi	r31, 0x94	; 148
    533c:	ff 06       	cpc	r15, r31
    533e:	09 f4       	brne	.+2      	; 0x5342 <main+0x5fe>
    5340:	da c1       	rjmp	.+948    	; 0x56f6 <main+0x9b2>
    5342:	25 e9       	ldi	r18, 0x95	; 149
    5344:	e2 16       	cp	r14, r18
    5346:	f2 06       	cpc	r15, r18
    5348:	09 f0       	breq	.+2      	; 0x534c <main+0x608>
    534a:	4c cf       	rjmp	.-360    	; 0x51e4 <main+0x4a0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1573
			};
			init_table8(HX8357D_regValues, sizeof(HX8357D_regValues));
			break;
		case 0x7575:
		case 0x9595:
			lcd_driver = ID_7575;
    534c:	81 e0       	ldi	r24, 0x01	; 1
    534e:	90 e0       	ldi	r25, 0x00	; 0
    5350:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <display+0x1b>
    5354:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <display+0x1a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1576
			//WIDTH = 240,HEIGHT = 320;
			//width = WIDTH, height = HEIGHT;
			XC=0,YC=0,CC=0x22,RC=ILI932X_RW_GRAM,SC1=0x0E,SC2=0x14,MD=HX8347G_MEMACCESS,VL=1,R24BIT=1;
    5358:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <display+0x20>
    535c:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <display+0x1f>
    5360:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <display+0x22>
    5364:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <display+0x21>
    5368:	22 e2       	ldi	r18, 0x22	; 34
    536a:	30 e0       	ldi	r19, 0x00	; 0
    536c:	30 93 19 03 	sts	0x0319, r19	; 0x800319 <display+0x24>
    5370:	20 93 18 03 	sts	0x0318, r18	; 0x800318 <display+0x23>
    5374:	30 93 1b 03 	sts	0x031B, r19	; 0x80031b <display+0x26>
    5378:	20 93 1a 03 	sts	0x031A, r18	; 0x80031a <display+0x25>
    537c:	2e e0       	ldi	r18, 0x0E	; 14
    537e:	30 e0       	ldi	r19, 0x00	; 0
    5380:	30 93 1d 03 	sts	0x031D, r19	; 0x80031d <display+0x28>
    5384:	20 93 1c 03 	sts	0x031C, r18	; 0x80031c <display+0x27>
    5388:	24 e1       	ldi	r18, 0x14	; 20
    538a:	30 e0       	ldi	r19, 0x00	; 0
    538c:	30 93 1f 03 	sts	0x031F, r19	; 0x80031f <display+0x2a>
    5390:	20 93 1e 03 	sts	0x031E, r18	; 0x80031e <display+0x29>
    5394:	26 e1       	ldi	r18, 0x16	; 22
    5396:	30 e0       	ldi	r19, 0x00	; 0
    5398:	30 93 21 03 	sts	0x0321, r19	; 0x800321 <display+0x2c>
    539c:	20 93 20 03 	sts	0x0320, r18	; 0x800320 <display+0x2b>
    53a0:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <display+0x2e>
    53a4:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <display+0x2d>
    53a8:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <display+0x30>
    53ac:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <display+0x2f>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1633
        		  0x06 , 1 , 0x00,
        		  0x07 , 1 , 0x00,
        		  0x08 , 1 , 0x01,
        		  0x09 , 1 , 0x3F
			};
		    init_table8(HX8347G_regValues, sizeof(HX8347G_regValues));
    53b0:	6f e7       	ldi	r22, 0x7F	; 127
    53b2:	70 e0       	ldi	r23, 0x00	; 0
    53b4:	82 e9       	ldi	r24, 0x92	; 146
    53b6:	92 e0       	ldi	r25, 0x02	; 2
    53b8:	bb cf       	rjmp	.-138    	; 0x5330 <main+0x5ec>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1441
	delay(200);
	switch(ID)
	{
		case 0x9325:
		case 0x9328:
			lcd_driver = ID_932X;
    53ba:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <display+0x1b>
    53be:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <display+0x1a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1444
			//WIDTH = 240,HEIGHT = 320;
			//width = WIDTH, height = HEIGHT;
			XC=0,YC=0,CC=ILI932X_RW_GRAM,RC=ILI932X_RW_GRAM,SC1=ILI932X_GATE_SCAN_CTRL2,SC2=ILI932X_GATE_SCAN_CTRL3,MD=0x0003,VL=1,R24BIT=0;
    53c2:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <display+0x20>
    53c6:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <display+0x1f>
    53ca:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <display+0x22>
    53ce:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <display+0x21>
    53d2:	82 e2       	ldi	r24, 0x22	; 34
    53d4:	90 e0       	ldi	r25, 0x00	; 0
    53d6:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <display+0x24>
    53da:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <display+0x23>
    53de:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <display+0x26>
    53e2:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <display+0x25>
    53e6:	81 e6       	ldi	r24, 0x61	; 97
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <display+0x28>
    53ee:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <display+0x27>
    53f2:	8a e6       	ldi	r24, 0x6A	; 106
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <display+0x2a>
    53fa:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <display+0x29>
    53fe:	83 e0       	ldi	r24, 0x03	; 3
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <display+0x2c>
    5406:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <display+0x2b>
    540a:	81 e0       	ldi	r24, 0x01	; 1
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <display+0x2e>
    5412:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <display+0x2d>
    5416:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <display+0x30>
    541a:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <display+0x2f>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1499
		  		ILI932X_PANEL_IF_CTRL4   , 0X1100,
		  		ILI932X_PANEL_IF_CTRL5   , 0X0000,
		  		ILI932X_PANEL_IF_CTRL6   , 0X0000,
		  		ILI932X_DISP_CTRL1	   , 0x0133 // Main screen turn on		
			};
			init_table16(ILI932x_regValues, sizeof(ILI932x_regValues));
    541e:	6c ec       	ldi	r22, 0xCC	; 204
    5420:	70 e0       	ldi	r23, 0x00	; 0
    5422:	81 ed       	ldi	r24, 0xD1	; 209
    5424:	93 e0       	ldi	r25, 0x03	; 3
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1783
            	0x02, 0x0300,
            	0x0B, 0x580C,
            	0x12, 0x0609,
            	0x13, 0x3100, 
			};
			init_table16(SSD1283A_regValues, sizeof(SSD1283A_regValues));
    5426:	0e 94 83 09 	call	0x1306	; 0x1306 <LCDWIKI_SPI::init_table16(void const*, int) [clone .constprop.45]>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1827
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
    542a:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <display+0x18>
    542e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]>
Invert_Display():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1292
}

//Anti color display 
void LCDWIKI_SPI::Invert_Display(boolean i)
{
	CS_ACTIVE;
    5432:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <display+0x33>
    5436:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <display+0x34>
    543a:	80 81       	ld	r24, Z
    543c:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <display+0x42>
    5440:	89 23       	and	r24, r25
    5442:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1293
	uint8_t val = VL^i;
    5444:	f0 90 22 03 	lds	r15, 0x0322	; 0x800322 <display+0x2d>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1294
	if(lcd_driver == ID_932X)
    5448:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <display+0x1a>
    544c:	30 91 10 03 	lds	r19, 0x0310	; 0x800310 <display+0x1b>
    5450:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    5454:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    5458:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <display+0x43>
    545c:	21 15       	cp	r18, r1
    545e:	31 05       	cpc	r19, r1
    5460:	09 f0       	breq	.+2      	; 0x5464 <main+0x720>
    5462:	55 c2       	rjmp	.+1194   	; 0x590e <main+0xbca>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1296
	{
		writeCmdData8(0x61, val);
    5464:	90 81       	ld	r25, Z
    5466:	89 23       	and	r24, r25
    5468:	80 83       	st	Z, r24
    546a:	61 e6       	ldi	r22, 0x61	; 97
    546c:	85 ef       	ldi	r24, 0xF5	; 245
    546e:	92 e0       	ldi	r25, 0x02	; 2
    5470:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    5474:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    5478:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    547c:	80 81       	ld	r24, Z
    547e:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    5482:	89 2b       	or	r24, r25
    5484:	80 83       	st	Z, r24
    5486:	6f 2d       	mov	r22, r15
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1335
	{
		writeCmd8(val ? 0xA6 : 0xA7);
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    5488:	85 ef       	ldi	r24, 0xF5	; 245
    548a:	92 e0       	ldi	r25, 0x02	; 2
    548c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1337
	}
	CS_IDLE;
    5490:	e0 91 28 03 	lds	r30, 0x0328	; 0x800328 <display+0x33>
    5494:	f0 91 29 03 	lds	r31, 0x0329	; 0x800329 <display+0x34>
    5498:	80 81       	ld	r24, Z
    549a:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <display+0x3d>
    549e:	89 2b       	or	r24, r25
    54a0:	80 83       	st	Z, r24
init_display():
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:11
#include "graphics.h"


void init_display() {
  display.Init_LCD();
  display.Set_Rotation(1);
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCDWIKI_SPI::Set_Rotation(unsigned char) [clone .constprop.48]>
Set_Draw_color():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:40
}

//set 16bits draw color
void LCDWIKI_GUI::Set_Draw_color(uint16_t color)
{
	draw_color = color;
    54a8:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <display+0xb>
    54ac:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <display+0xa>
Set_Text_colour():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:493
}

//set text colour with 16bit color
void LCDWIKI_GUI::Set_Text_colour(uint16_t color)
{
	text_color = color;
    54b0:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <display+0x7>
    54b4:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <display+0x6>
Set_Text_Back_colour():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:511
}

//set text background colour with 16bits color
void LCDWIKI_GUI::Set_Text_Back_colour(uint16_t color)
{
	text_bgcolor = color;	
    54b8:	8f ef       	ldi	r24, 0xFF	; 255
    54ba:	9f ef       	ldi	r25, 0xFF	; 255
    54bc:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <display+0x9>
    54c0:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <display+0x8>
Set_Text_Mode():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:541
}

//set text mode
void LCDWIKI_GUI::Set_Text_Mode(boolean mode)
{
	text_mode = mode;
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <display+0xd>
draw_temp_table():
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:20
  display.Set_Text_Back_colour(WHITE);
  display.Set_Text_Mode(1);
}

void draw_temp_table(table *temp_table) {  
  draw_table(temp_table);
    54ca:	c8 01       	movw	r24, r16
    54cc:	0e 94 41 0c 	call	0x1882	; 0x1882 <draw_table(table*)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:21
  write_string_to_field(temp_table, 0, 0, "Time");
    54d0:	2a e1       	ldi	r18, 0x1A	; 26
    54d2:	32 e0       	ldi	r19, 0x02	; 2
    54d4:	50 e0       	ldi	r21, 0x00	; 0
    54d6:	40 e0       	ldi	r20, 0x00	; 0
    54d8:	70 e0       	ldi	r23, 0x00	; 0
    54da:	60 e0       	ldi	r22, 0x00	; 0
    54dc:	c8 01       	movw	r24, r16
    54de:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <write_string_to_field(table*, unsigned int, unsigned int, char*)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:22
  write_string_to_field(temp_table, 1, 0, "Temp");
    54e2:	2f e1       	ldi	r18, 0x1F	; 31
    54e4:	32 e0       	ldi	r19, 0x02	; 2
    54e6:	50 e0       	ldi	r21, 0x00	; 0
    54e8:	40 e0       	ldi	r20, 0x00	; 0
    54ea:	61 e0       	ldi	r22, 0x01	; 1
    54ec:	70 e0       	ldi	r23, 0x00	; 0
    54ee:	c8 01       	movw	r24, r16
    54f0:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <write_string_to_field(table*, unsigned int, unsigned int, char*)>
fill_table():
/home/noah/Documents/basteln/ofen_v2/main/temp_table.cpp:115
  }
}

// fill all the fields with their value and background color
void fill_table(struct temp_table *temp_table) {
  fill_table_section(temp_table, 0, temp_table->temp_table.rows - 1);
    54f4:	d8 01       	movw	r26, r16
    54f6:	18 96       	adiw	r26, 0x08	; 8
    54f8:	4c 91       	ld	r20, X
    54fa:	41 50       	subi	r20, 0x01	; 1
    54fc:	60 e0       	ldi	r22, 0x00	; 0
    54fe:	c8 01       	movw	r24, r16
    5500:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <fill_table_section(temp_table*, unsigned char, unsigned char)>
Set_Draw_color():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:46
}

//set 8bits r,g,b color
void LCDWIKI_GUI::Set_Draw_color(uint8_t r, uint8_t g, uint8_t b)
{
	draw_color = Color_To_565(r, g, b);
    5504:	8f e9       	ldi	r24, 0x9F	; 159
    5506:	91 e0       	ldi	r25, 0x01	; 1
    5508:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <display+0xb>
    550c:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <display+0xa>
launch_ui():
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:49
  
  draw_temp_table(&temp_table->temp_table);

  fill_table(temp_table);
  display.Set_Draw_color(0, 50, 255);
  highlight_field(&temp_table->temp_table, 0, 1);
    5510:	41 e0       	ldi	r20, 0x01	; 1
    5512:	50 e0       	ldi	r21, 0x00	; 0
    5514:	70 e0       	ldi	r23, 0x00	; 0
    5516:	60 e0       	ldi	r22, 0x00	; 0
    5518:	c8 01       	movw	r24, r16
    551a:	0e 94 df 0b 	call	0x17be	; 0x17be <highlight_field(table*, unsigned int, unsigned int)>
Set_Draw_color():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:46
    551e:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <display+0xb>
    5522:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <display+0xa>
draw_graph():
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:90

  draw_pattern_line(point_1.x, point_1.y, point_2.x, point_2.y, pattern);
}

void draw_graph(graph *graph) {
  display.Draw_Fast_HLine(graph->pos.x, graph->pos.y + graph->height - graph->padding, graph->width); // x axis
    5526:	f3 01       	movw	r30, r6
    5528:	44 81       	ldd	r20, Z+4	; 0x04
    552a:	55 81       	ldd	r21, Z+5	; 0x05
    552c:	62 81       	ldd	r22, Z+2	; 0x02
    552e:	73 81       	ldd	r23, Z+3	; 0x03
    5530:	86 81       	ldd	r24, Z+6	; 0x06
    5532:	97 81       	ldd	r25, Z+7	; 0x07
    5534:	68 0f       	add	r22, r24
    5536:	79 1f       	adc	r23, r25
    5538:	80 8d       	ldd	r24, Z+24	; 0x18
    553a:	68 1b       	sub	r22, r24
    553c:	71 09       	sbc	r23, r1
    553e:	80 81       	ld	r24, Z
    5540:	91 81       	ldd	r25, Z+1	; 0x01
    5542:	0e 94 b3 0b 	call	0x1766	; 0x1766 <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int) [clone .constprop.30]>
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:91
  display.Draw_Fast_VLine(graph->pos.x + graph->padding, graph->pos.y, graph->height); // y axis
    5546:	d3 01       	movw	r26, r6
    5548:	16 96       	adiw	r26, 0x06	; 6
    554a:	4d 91       	ld	r20, X+
    554c:	5c 91       	ld	r21, X
    554e:	17 97       	sbiw	r26, 0x07	; 7
    5550:	12 96       	adiw	r26, 0x02	; 2
    5552:	6d 91       	ld	r22, X+
    5554:	7c 91       	ld	r23, X
    5556:	13 97       	sbiw	r26, 0x03	; 3
    5558:	58 96       	adiw	r26, 0x18	; 24
    555a:	2c 91       	ld	r18, X
    555c:	58 97       	sbiw	r26, 0x18	; 24
    555e:	8d 91       	ld	r24, X+
    5560:	9c 91       	ld	r25, X
    5562:	82 0f       	add	r24, r18
    5564:	91 1d       	adc	r25, r1
    5566:	0e 94 c9 0b 	call	0x1792	; 0x1792 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int) [clone .constprop.29]>
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:95

  uint8_t arrow_size = 5;

  draw_arrow({graph->pos.x + graph->width, graph->pos.y + graph->height - graph->padding}, 1, graph->padding, graph->padding/2); // x axis arrow
    556a:	f3 01       	movw	r30, r6
    556c:	80 8d       	ldd	r24, Z+24	; 0x18
    556e:	48 2e       	mov	r4, r24
    5570:	46 94       	lsr	r4
    5572:	51 2c       	mov	r5, r1
    5574:	90 e0       	ldi	r25, 0x00	; 0
    5576:	c0 80       	ld	r12, Z
    5578:	d1 80       	ldd	r13, Z+1	; 0x01
    557a:	24 81       	ldd	r18, Z+4	; 0x04
    557c:	35 81       	ldd	r19, Z+5	; 0x05
    557e:	c2 0e       	add	r12, r18
    5580:	d3 1e       	adc	r13, r19
    5582:	e2 80       	ldd	r14, Z+2	; 0x02
    5584:	f3 80       	ldd	r15, Z+3	; 0x03
    5586:	26 81       	ldd	r18, Z+6	; 0x06
    5588:	37 81       	ldd	r19, Z+7	; 0x07
    558a:	e2 0e       	add	r14, r18
    558c:	f3 1e       	adc	r15, r19
    558e:	e8 1a       	sub	r14, r24
    5590:	f9 0a       	sbc	r15, r25
draw_arrow():
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:40
      size_x = length;
      size_y = width;
    break;
  }

  display.Draw_Line(head.x, head.y, head.x + size_x, head.y + size_y);
    5592:	86 01       	movw	r16, r12
    5594:	08 1b       	sub	r16, r24
    5596:	19 0b       	sbc	r17, r25
    5598:	92 01       	movw	r18, r4
    559a:	2e 0d       	add	r18, r14
    559c:	3f 1d       	adc	r19, r15
    559e:	a8 01       	movw	r20, r16
    55a0:	b7 01       	movw	r22, r14
    55a2:	c6 01       	movw	r24, r12
    55a4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:53
    case 3:
      size_y = -size_y;
    break;
  }

  display.Draw_Line(head.x, head.y, head.x + size_x, head.y + size_y);
    55a8:	97 01       	movw	r18, r14
    55aa:	24 19       	sub	r18, r4
    55ac:	35 09       	sbc	r19, r5
    55ae:	a8 01       	movw	r20, r16
    55b0:	b7 01       	movw	r22, r14
    55b2:	c6 01       	movw	r24, r12
    55b4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]>
draw_graph():
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:96
  draw_arrow({graph->pos.x + graph->padding, graph->pos.y}, 0, graph->padding, graph->padding/2); // y axis arrow
    55b8:	d3 01       	movw	r26, r6
    55ba:	58 96       	adiw	r26, 0x18	; 24
    55bc:	ec 90       	ld	r14, X
    55be:	58 97       	sbiw	r26, 0x18	; 24
    55c0:	4e 2c       	mov	r4, r14
    55c2:	46 94       	lsr	r4
    55c4:	51 2c       	mov	r5, r1
    55c6:	f1 2c       	mov	r15, r1
    55c8:	cd 90       	ld	r12, X+
    55ca:	dc 90       	ld	r13, X
    55cc:	11 97       	sbiw	r26, 0x01	; 1
    55ce:	ce 0c       	add	r12, r14
    55d0:	df 1c       	adc	r13, r15
    55d2:	12 96       	adiw	r26, 0x02	; 2
    55d4:	0d 91       	ld	r16, X+
    55d6:	1c 91       	ld	r17, X
draw_arrow():
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:40
      size_x = length;
      size_y = width;
    break;
  }

  display.Draw_Line(head.x, head.y, head.x + size_x, head.y + size_y);
    55d8:	e0 0e       	add	r14, r16
    55da:	f1 1e       	adc	r15, r17
    55dc:	a2 01       	movw	r20, r4
    55de:	4c 0d       	add	r20, r12
    55e0:	5d 1d       	adc	r21, r13
    55e2:	97 01       	movw	r18, r14
    55e4:	b8 01       	movw	r22, r16
    55e6:	c6 01       	movw	r24, r12
    55e8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:53
    case 3:
      size_y = -size_y;
    break;
  }

  display.Draw_Line(head.x, head.y, head.x + size_x, head.y + size_y);
    55ec:	a6 01       	movw	r20, r12
    55ee:	44 19       	sub	r20, r4
    55f0:	55 09       	sbc	r21, r5
    55f2:	97 01       	movw	r18, r14
    55f4:	b8 01       	movw	r22, r16
    55f6:	c6 01       	movw	r24, r12
    55f8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCDWIKI_GUI::Draw_Line(int, int, int, int) [clone .constprop.27]>
draw_temp_curve():
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:14
  
}

void draw_temp_curve(graph *temperature_graph, struct list<setpoint> *setpoint_list) {
  struct list<setpoint> *setpoint_iter = setpoint_list;
  while(setpoint_iter->next->next) {
    55fc:	f1 01       	movw	r30, r2
    55fe:	c0 84       	ldd	r12, Z+8	; 0x08
    5600:	d1 84       	ldd	r13, Z+9	; 0x09
    5602:	d6 01       	movw	r26, r12
    5604:	18 96       	adiw	r26, 0x08	; 8
    5606:	8d 91       	ld	r24, X+
    5608:	9c 91       	ld	r25, X
    560a:	89 2b       	or	r24, r25
    560c:	09 f4       	brne	.+2      	; 0x5610 <main+0x8cc>
    560e:	e0 c1       	rjmp	.+960    	; 0x59d0 <main+0xc8c>
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:15
    add_line(temperature_graph, time_str_to_min(setpoint_iter->data.time), setpoint_iter->data.temp, time_str_to_min(setpoint_iter->next->data.time), setpoint_iter->next->data.temp);
    5610:	c6 01       	movw	r24, r12
    5612:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    5616:	7c 01       	movw	r14, r24
    5618:	c1 01       	movw	r24, r2
    561a:	0e 94 8b 07 	call	0xf16	; 0xf16 <time_str_to_min(char*)>
    561e:	8c 01       	movw	r16, r24
    5620:	f6 01       	movw	r30, r12
    5622:	66 81       	ldd	r22, Z+6	; 0x06
    5624:	77 81       	ldd	r23, Z+7	; 0x07
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	80 e0       	ldi	r24, 0x00	; 0
    562a:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    562e:	4b 01       	movw	r8, r22
    5630:	5c 01       	movw	r10, r24
    5632:	b7 01       	movw	r22, r14
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	80 e0       	ldi	r24, 0x00	; 0
    5638:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    563c:	6b 01       	movw	r12, r22
    563e:	7c 01       	movw	r14, r24
    5640:	d1 01       	movw	r26, r2
    5642:	16 96       	adiw	r26, 0x06	; 6
    5644:	6d 91       	ld	r22, X+
    5646:	7c 91       	ld	r23, X
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	80 e0       	ldi	r24, 0x00	; 0
    564c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    5650:	6b af       	std	Y+59, r22	; 0x3b
    5652:	7c af       	std	Y+60, r23	; 0x3c
    5654:	8d af       	std	Y+61, r24	; 0x3d
    5656:	9e af       	std	Y+62, r25	; 0x3e
    5658:	b8 01       	movw	r22, r16
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	80 e0       	ldi	r24, 0x00	; 0
    565e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__floatunsisf>
    5662:	ab 01       	movw	r20, r22
    5664:	bc 01       	movw	r22, r24
    5666:	0b ad       	ldd	r16, Y+59	; 0x3b
    5668:	1c ad       	ldd	r17, Y+60	; 0x3c
    566a:	2d ad       	ldd	r18, Y+61	; 0x3d
    566c:	3e ad       	ldd	r19, Y+62	; 0x3e
    566e:	c3 01       	movw	r24, r6
    5670:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <add_line(graph*, float, float, float, float)>
/home/noah/Documents/basteln/ofen_v2/main/temp_graph.cpp:18
    //add_x_mark(temperature_graph, time_str_to_min(setpoint_iter->data.time));
    //add_y_mark(temperature_graph, setpoint_iter->data.temp);
    setpoint_iter = setpoint_iter->next;
    5674:	f1 01       	movw	r30, r2
    5676:	20 84       	ldd	r2, Z+8	; 0x08
    5678:	31 84       	ldd	r3, Z+9	; 0x09
    567a:	c0 cf       	rjmp	.-128    	; 0x55fc <main+0x8b8>
start():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1636
        		  0x09 , 1 , 0x3F
			};
		    init_table8(HX8347G_regValues, sizeof(HX8347G_regValues));
			break;
		case 0x9486:
			lcd_driver = ID_9486;
    567c:	85 e0       	ldi	r24, 0x05	; 5
    567e:	90 e0       	ldi	r25, 0x00	; 0
    5680:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <display+0x1b>
    5684:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <display+0x1a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1639
			//WIDTH = 320,HEIGHT = 480;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    5688:	8a e2       	ldi	r24, 0x2A	; 42
    568a:	90 e0       	ldi	r25, 0x00	; 0
    568c:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <display+0x20>
    5690:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <display+0x1f>
    5694:	8b e2       	ldi	r24, 0x2B	; 43
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <display+0x22>
    569c:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <display+0x21>
    56a0:	8c e2       	ldi	r24, 0x2C	; 44
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <display+0x24>
    56a8:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <display+0x23>
    56ac:	8e e2       	ldi	r24, 0x2E	; 46
    56ae:	90 e0       	ldi	r25, 0x00	; 0
    56b0:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <display+0x26>
    56b4:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <display+0x25>
    56b8:	83 e3       	ldi	r24, 0x33	; 51
    56ba:	90 e0       	ldi	r25, 0x00	; 0
    56bc:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <display+0x28>
    56c0:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <display+0x27>
    56c4:	87 e3       	ldi	r24, 0x37	; 55
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <display+0x2a>
    56cc:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <display+0x29>
    56d0:	86 e3       	ldi	r24, 0x36	; 54
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <display+0x2c>
    56d8:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <display+0x2b>
    56dc:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <display+0x2e>
    56e0:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <display+0x2d>
    56e4:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <display+0x30>
    56e8:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <display+0x2f>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1678
            	0x11, 0,            //Sleep Out
            	TFTLCD_DELAY8, 150,
            	0x29, 0         //Display On
            */
			};
			init_table8(ILI9486_regValues, sizeof(ILI9486_regValues));
    56ec:	65 e5       	ldi	r22, 0x55	; 85
    56ee:	70 e0       	ldi	r23, 0x00	; 0
    56f0:	8d e3       	ldi	r24, 0x3D	; 61
    56f2:	92 e0       	ldi	r25, 0x02	; 2
    56f4:	1d ce       	rjmp	.-966    	; 0x5330 <main+0x5ec>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1681
			break;
		case 0x9488:
			lcd_driver = ID_9488;			
    56f6:	8a e0       	ldi	r24, 0x0A	; 10
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <display+0x1b>
    56fe:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <display+0x1a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1682
			if(MODEL == ILI9488_18)
    5702:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <display+0x31>
    5706:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <display+0x32>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1685
			{
				static const uint8_t ILI9488_IPF[] PROGMEM ={0x3A,1,0x66};
				init_table8(ILI9488_IPF, sizeof(ILI9488_IPF));
    570a:	63 e0       	ldi	r22, 0x03	; 3
    570c:	70 e0       	ldi	r23, 0x00	; 0
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1682
			};
			init_table8(ILI9486_regValues, sizeof(ILI9486_regValues));
			break;
		case 0x9488:
			lcd_driver = ID_9488;			
			if(MODEL == ILI9488_18)
    570e:	0c 97       	sbiw	r24, 0x0c	; 12
    5710:	e9 f5       	brne	.+122    	; 0x578c <main+0xa48>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1685
			{
				static const uint8_t ILI9488_IPF[] PROGMEM ={0x3A,1,0x66};
				init_table8(ILI9488_IPF, sizeof(ILI9488_IPF));
    5712:	8a e3       	ldi	r24, 0x3A	; 58
    5714:	92 e0       	ldi	r25, 0x02	; 2
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1690
			}
			else
			{
				static const uint8_t ILI9488_IPF[] PROGMEM ={0x3A,1,0x55};
				init_table8(ILI9488_IPF, sizeof(ILI9488_IPF));
    5716:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCDWIKI_SPI::init_table8(void const*, int) [clone .constprop.46]>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1694
			}
			//WIDTH = 320,HEIGHT = 480;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=1;
    571a:	8a e2       	ldi	r24, 0x2A	; 42
    571c:	90 e0       	ldi	r25, 0x00	; 0
    571e:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <display+0x20>
    5722:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <display+0x1f>
    5726:	8b e2       	ldi	r24, 0x2B	; 43
    5728:	90 e0       	ldi	r25, 0x00	; 0
    572a:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <display+0x22>
    572e:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <display+0x21>
    5732:	8c e2       	ldi	r24, 0x2C	; 44
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <display+0x24>
    573a:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <display+0x23>
    573e:	8e e2       	ldi	r24, 0x2E	; 46
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <display+0x26>
    5746:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <display+0x25>
    574a:	83 e3       	ldi	r24, 0x33	; 51
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <display+0x28>
    5752:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <display+0x27>
    5756:	87 e3       	ldi	r24, 0x37	; 55
    5758:	90 e0       	ldi	r25, 0x00	; 0
    575a:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <display+0x2a>
    575e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <display+0x29>
    5762:	86 e3       	ldi	r24, 0x36	; 54
    5764:	90 e0       	ldi	r25, 0x00	; 0
    5766:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <display+0x2c>
    576a:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <display+0x2b>
    576e:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <display+0x2e>
    5772:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <display+0x2d>
    5776:	81 e0       	ldi	r24, 0x01	; 1
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <display+0x30>
    577e:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <display+0x2f>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1714
				0xE1, 15, 0x00, 0x17, 0x1A, 0x04, 0x0E, 0x06, 0x2F, 0x45, 0x43, 0x02, 0x0A, 0x09, 0x32, 0x36, 0x0F,
				0x11, 0,
				TFTLCD_DELAY8, 120,
				0x29, 0
			};
			init_table8(ILI9488_regValues, sizeof(ILI9488_regValues));
    5782:	62 e5       	ldi	r22, 0x52	; 82
    5784:	70 e0       	ldi	r23, 0x00	; 0
    5786:	85 ee       	ldi	r24, 0xE5	; 229
    5788:	91 e0       	ldi	r25, 0x01	; 1
    578a:	d2 cd       	rjmp	.-1116   	; 0x5330 <main+0x5ec>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1690
				init_table8(ILI9488_IPF, sizeof(ILI9488_IPF));
			}
			else
			{
				static const uint8_t ILI9488_IPF[] PROGMEM ={0x3A,1,0x55};
				init_table8(ILI9488_IPF, sizeof(ILI9488_IPF));
    578c:	87 e3       	ldi	r24, 0x37	; 55
    578e:	92 e0       	ldi	r25, 0x02	; 2
    5790:	c2 cf       	rjmp	.-124    	; 0x5716 <main+0x9d2>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1717
				0x29, 0
			};
			init_table8(ILI9488_regValues, sizeof(ILI9488_regValues));
			break;
		case 0x7735:
			if(HEIGHT == 160)
    5792:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <display+0x12>
    5796:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <display+0x13>
    579a:	80 3a       	cpi	r24, 0xA0	; 160
    579c:	91 05       	cpc	r25, r1
    579e:	e9 f5       	brne	.+122    	; 0x581a <main+0xad6>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1719
			{
				lcd_driver = ID_7735;
    57a0:	86 e0       	ldi	r24, 0x06	; 6
    57a2:	90 e0       	ldi	r25, 0x00	; 0
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1723
			}
			else if(HEIGHT == 128)
			{
				lcd_driver = ID_7735_128;
    57a4:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <display+0x1b>
    57a8:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <display+0x1a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1727
			}
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    57ac:	8a e2       	ldi	r24, 0x2A	; 42
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <display+0x20>
    57b4:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <display+0x1f>
    57b8:	8b e2       	ldi	r24, 0x2B	; 43
    57ba:	90 e0       	ldi	r25, 0x00	; 0
    57bc:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <display+0x22>
    57c0:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <display+0x21>
    57c4:	8c e2       	ldi	r24, 0x2C	; 44
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <display+0x24>
    57cc:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <display+0x23>
    57d0:	8e e2       	ldi	r24, 0x2E	; 46
    57d2:	90 e0       	ldi	r25, 0x00	; 0
    57d4:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <display+0x26>
    57d8:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <display+0x25>
    57dc:	83 e3       	ldi	r24, 0x33	; 51
    57de:	90 e0       	ldi	r25, 0x00	; 0
    57e0:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <display+0x28>
    57e4:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <display+0x27>
    57e8:	87 e3       	ldi	r24, 0x37	; 55
    57ea:	90 e0       	ldi	r25, 0x00	; 0
    57ec:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <display+0x2a>
    57f0:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <display+0x29>
    57f4:	86 e3       	ldi	r24, 0x36	; 54
    57f6:	90 e0       	ldi	r25, 0x00	; 0
    57f8:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <display+0x2c>
    57fc:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <display+0x2b>
    5800:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <display+0x2e>
    5804:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <display+0x2d>
    5808:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <display+0x30>
    580c:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <display+0x2f>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1751
            	//TFTLCD_DELAY8, 150,
            	0x3A, 1, 0x05,  
      //      	0x13, 0,
            	0x29, 0         
			};
			init_table8(ST7735S_regValues, sizeof(ST7735S_regValues));
    5810:	6f e5       	ldi	r22, 0x5F	; 95
    5812:	70 e0       	ldi	r23, 0x00	; 0
    5814:	86 e8       	ldi	r24, 0x86	; 134
    5816:	91 e0       	ldi	r25, 0x01	; 1
    5818:	8b cd       	rjmp	.-1258   	; 0x5330 <main+0x5ec>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1721
		case 0x7735:
			if(HEIGHT == 160)
			{
				lcd_driver = ID_7735;
			}
			else if(HEIGHT == 128)
    581a:	80 38       	cpi	r24, 0x80	; 128
    581c:	91 05       	cpc	r25, r1
    581e:	31 f6       	brne	.-116    	; 0x57ac <main+0xa68>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1723
			{
				lcd_driver = ID_7735_128;
    5820:	89 e0       	ldi	r24, 0x09	; 9
    5822:	90 e0       	ldi	r25, 0x00	; 0
    5824:	bf cf       	rjmp	.-130    	; 0x57a4 <main+0xa60>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1754
            	0x29, 0         
			};
			init_table8(ST7735S_regValues, sizeof(ST7735S_regValues));
			break;
		 case 0x1283:
		 	lcd_driver = ID_1283A;
    5826:	87 e0       	ldi	r24, 0x07	; 7
    5828:	90 e0       	ldi	r25, 0x00	; 0
    582a:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <display+0x1b>
    582e:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <display+0x1a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1755
			XC=0x45,YC=0x44,CC=0x22,RC=HX8357_RAMRD,SC1=0x41,SC2=0x42,MD=0x03,VL=1,R24BIT=0;
    5832:	85 e4       	ldi	r24, 0x45	; 69
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <display+0x20>
    583a:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <display+0x1f>
    583e:	84 e4       	ldi	r24, 0x44	; 68
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <display+0x22>
    5846:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <display+0x21>
    584a:	82 e2       	ldi	r24, 0x22	; 34
    584c:	90 e0       	ldi	r25, 0x00	; 0
    584e:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <display+0x24>
    5852:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <display+0x23>
    5856:	8e e2       	ldi	r24, 0x2E	; 46
    5858:	90 e0       	ldi	r25, 0x00	; 0
    585a:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <display+0x26>
    585e:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <display+0x25>
    5862:	81 e4       	ldi	r24, 0x41	; 65
    5864:	90 e0       	ldi	r25, 0x00	; 0
    5866:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <display+0x28>
    586a:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <display+0x27>
    586e:	82 e4       	ldi	r24, 0x42	; 66
    5870:	90 e0       	ldi	r25, 0x00	; 0
    5872:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <display+0x2a>
    5876:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <display+0x29>
    587a:	83 e0       	ldi	r24, 0x03	; 3
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <display+0x2c>
    5882:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <display+0x2b>
    5886:	81 e0       	ldi	r24, 0x01	; 1
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <display+0x2e>
    588e:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <display+0x2d>
    5892:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <display+0x30>
    5896:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <display+0x2f>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1783
            	0x02, 0x0300,
            	0x0B, 0x580C,
            	0x12, 0x0609,
            	0x13, 0x3100, 
			};
			init_table16(SSD1283A_regValues, sizeof(SSD1283A_regValues));
    589a:	60 e6       	ldi	r22, 0x60	; 96
    589c:	70 e0       	ldi	r23, 0x00	; 0
    589e:	86 e2       	ldi	r24, 0x26	; 38
    58a0:	91 e0       	ldi	r25, 0x01	; 1
    58a2:	c1 cd       	rjmp	.-1150   	; 0x5426 <main+0x6e2>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1786
			break;
		case 0x1106:
		 	lcd_driver = ID_1106;
    58a4:	88 e0       	ldi	r24, 0x08	; 8
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <display+0x1b>
    58ac:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <display+0x1a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1787
			XC=0x10,YC=0xB0,CC=0,RC=0,SC1=0,SC2=0,MD=0,VL=1,R24BIT=0;
    58b0:	80 e1       	ldi	r24, 0x10	; 16
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <display+0x20>
    58b8:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <display+0x1f>
    58bc:	80 eb       	ldi	r24, 0xB0	; 176
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <display+0x22>
    58c4:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <display+0x21>
    58c8:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <display+0x24>
    58cc:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <display+0x23>
    58d0:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <display+0x26>
    58d4:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <display+0x25>
    58d8:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <display+0x28>
    58dc:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <display+0x27>
    58e0:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <display+0x2a>
    58e4:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <display+0x29>
    58e8:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <display+0x2c>
    58ec:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <display+0x2b>
    58f0:	81 e0       	ldi	r24, 0x01	; 1
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    58f4:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <display+0x2e>
    58f8:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <display+0x2d>
    58fc:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <display+0x30>
    5900:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <display+0x2f>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1821
            	0x14, 0,
            	0xA4, 0,
            	0xA6, 0,
            	0xAF, 0,
			};
			init_table8(SH1106_regValues, sizeof(SH1106_regValues));
    5904:	6c e3       	ldi	r22, 0x3C	; 60
    5906:	70 e0       	ldi	r23, 0x00	; 0
    5908:	8a ee       	ldi	r24, 0xEA	; 234
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	11 cd       	rjmp	.-1502   	; 0x5330 <main+0x5ec>
Invert_Display():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1298
	uint8_t val = VL^i;
	if(lcd_driver == ID_932X)
	{
		writeCmdData8(0x61, val);
	}
	else if(lcd_driver == ID_7575)
    590e:	21 30       	cpi	r18, 0x01	; 1
    5910:	31 05       	cpc	r19, r1
    5912:	b1 f4       	brne	.+44     	; 0x5940 <main+0xbfc>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1300
	{
		writeCmdData8(0x01, val ? 8 : 10);
    5914:	90 81       	ld	r25, Z
    5916:	89 23       	and	r24, r25
    5918:	80 83       	st	Z, r24
    591a:	61 e0       	ldi	r22, 0x01	; 1
    591c:	85 ef       	ldi	r24, 0xF5	; 245
    591e:	92 e0       	ldi	r25, 0x02	; 2
    5920:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    5924:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    5928:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    592c:	80 81       	ld	r24, Z
    592e:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    5932:	89 2b       	or	r24, r25
    5934:	80 83       	st	Z, r24
main():
    5936:	68 e0       	ldi	r22, 0x08	; 8
Invert_Display():
    5938:	f1 10       	cpse	r15, r1
    593a:	a6 cd       	rjmp	.-1204   	; 0x5488 <main+0x744>
main():
    593c:	6a e0       	ldi	r22, 0x0A	; 10
    593e:	a4 cd       	rjmp	.-1208   	; 0x5488 <main+0x744>
Invert_Display():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1302
	}
	else if(lcd_driver == ID_1283A)
    5940:	27 30       	cpi	r18, 0x07	; 7
    5942:	31 05       	cpc	r19, r1
    5944:	a9 f5       	brne	.+106    	; 0x59b0 <main+0xc6c>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1305
	{
		uint16_t reg;
		if((rotation == 0)||(rotation == 2))
    5946:	20 91 0d 03 	lds	r18, 0x030D	; 0x80030d <display+0x18>
    594a:	30 91 0e 03 	lds	r19, 0x030E	; 0x80030e <display+0x19>
    594e:	2d 7f       	andi	r18, 0xFD	; 253
    5950:	21 15       	cp	r18, r1
    5952:	31 05       	cpc	r19, r1
    5954:	19 f5       	brne	.+70     	; 0x599c <main+0xc58>
main():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1309
		{
			if(val)
			{
				reg=0x2183;
    5956:	41 e2       	ldi	r20, 0x21	; 33
    5958:	d4 2e       	mov	r13, r20
Invert_Display():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1307
	else if(lcd_driver == ID_1283A)
	{
		uint16_t reg;
		if((rotation == 0)||(rotation == 2))
		{
			if(val)
    595a:	f1 10       	cpse	r15, r1
    595c:	02 c0       	rjmp	.+4      	; 0x5962 <main+0xc1e>
main():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1313
			{
				reg=0x2183;
			}
			else
			{
				reg=0x0183;
    595e:	dd 24       	eor	r13, r13
    5960:	d3 94       	inc	r13
Invert_Display():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1327
			else
			{
				reg=0x0283;
			}
		}
		writeCmdData16(0x01,reg);
    5962:	90 81       	ld	r25, Z
    5964:	89 23       	and	r24, r25
    5966:	80 83       	st	Z, r24
    5968:	60 e0       	ldi	r22, 0x00	; 0
    596a:	85 ef       	ldi	r24, 0xF5	; 245
    596c:	92 e0       	ldi	r25, 0x02	; 2
    596e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    5972:	61 e0       	ldi	r22, 0x01	; 1
    5974:	85 ef       	ldi	r24, 0xF5	; 245
    5976:	92 e0       	ldi	r25, 0x02	; 2
    5978:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    597c:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <display+0x35>
    5980:	f0 91 2b 03 	lds	r31, 0x032B	; 0x80032b <display+0x36>
    5984:	80 81       	ld	r24, Z
    5986:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <display+0x3e>
    598a:	89 2b       	or	r24, r25
    598c:	80 83       	st	Z, r24
    598e:	6d 2d       	mov	r22, r13
    5990:	85 ef       	ldi	r24, 0xF5	; 245
    5992:	92 e0       	ldi	r25, 0x02	; 2
    5994:	0e 94 f7 08 	call	0x11ee	; 0x11ee <LCDWIKI_SPI::Spi_Write(unsigned char)>
    5998:	63 e8       	ldi	r22, 0x83	; 131
    599a:	76 cd       	rjmp	.-1300   	; 0x5488 <main+0x744>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1316
			else
			{
				reg=0x0183;
			}
		}
		else if((rotation == 1) || (rotation == 3))
    599c:	21 30       	cpi	r18, 0x01	; 1
    599e:	31 05       	cpc	r19, r1
    59a0:	01 f7       	brne	.-64     	; 0x5962 <main+0xc1e>
main():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1320
		{
			if(val)
			{
				reg=0x2283;
    59a2:	32 e2       	ldi	r19, 0x22	; 34
    59a4:	d3 2e       	mov	r13, r19
Invert_Display():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1318
				reg=0x0183;
			}
		}
		else if((rotation == 1) || (rotation == 3))
		{
			if(val)
    59a6:	f1 10       	cpse	r15, r1
    59a8:	dc cf       	rjmp	.-72     	; 0x5962 <main+0xc1e>
main():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1324
			{
				reg=0x2283;
			}
			else
			{
				reg=0x0283;
    59aa:	22 e0       	ldi	r18, 0x02	; 2
    59ac:	d2 2e       	mov	r13, r18
    59ae:	d9 cf       	rjmp	.-78     	; 0x5962 <main+0xc1e>
Invert_Display():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1331
		}
		writeCmdData16(0x01,reg);
	}
	else if(lcd_driver == ID_1106)
	{
		writeCmd8(val ? 0xA6 : 0xA7);
    59b0:	90 81       	ld	r25, Z
    59b2:	89 23       	and	r24, r25
    59b4:	80 83       	st	Z, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1329
				reg=0x0283;
			}
		}
		writeCmdData16(0x01,reg);
	}
	else if(lcd_driver == ID_1106)
    59b6:	28 30       	cpi	r18, 0x08	; 8
    59b8:	31 05       	cpc	r19, r1
    59ba:	29 f4       	brne	.+10     	; 0x59c6 <main+0xc82>
main():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1331
	{
		writeCmd8(val ? 0xA6 : 0xA7);
    59bc:	66 ea       	ldi	r22, 0xA6	; 166
Invert_Display():
    59be:	f1 10       	cpse	r15, r1
    59c0:	63 cd       	rjmp	.-1338   	; 0x5488 <main+0x744>
main():
    59c2:	67 ea       	ldi	r22, 0xA7	; 167
    59c4:	61 cd       	rjmp	.-1342   	; 0x5488 <main+0x744>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1335
	}
	else
	{
		writeCmd8(val ? 0x21 : 0x20);
    59c6:	61 e2       	ldi	r22, 0x21	; 33
Invert_Display():
    59c8:	f1 10       	cpse	r15, r1
    59ca:	5e cd       	rjmp	.-1348   	; 0x5488 <main+0x744>
main():
    59cc:	60 e2       	ldi	r22, 0x20	; 32
    59ce:	5c cd       	rjmp	.-1352   	; 0x5488 <main+0x744>
launch_ui():
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:57
  
  draw_graph(temperature_graph);
  draw_temp_curve(temperature_graph, setpoint_list);


  float status_rows[] = {0, 1};
    59d0:	19 aa       	std	Y+49, r1	; 0x31
    59d2:	1a aa       	std	Y+50, r1	; 0x32
    59d4:	1b aa       	std	Y+51, r1	; 0x33
    59d6:	1c aa       	std	Y+52, r1	; 0x34
    59d8:	80 e0       	ldi	r24, 0x00	; 0
    59da:	90 e0       	ldi	r25, 0x00	; 0
    59dc:	a0 e8       	ldi	r26, 0x80	; 128
    59de:	bf e3       	ldi	r27, 0x3F	; 63
    59e0:	8d ab       	std	Y+53, r24	; 0x35
    59e2:	9e ab       	std	Y+54, r25	; 0x36
    59e4:	af ab       	std	Y+55, r26	; 0x37
    59e6:	b8 af       	std	Y+56, r27	; 0x38
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:58
  float status_cols[] = {0, 0.3, 0.7, 1}; 
    59e8:	80 e1       	ldi	r24, 0x10	; 16
    59ea:	e9 e6       	ldi	r30, 0x69	; 105
    59ec:	f1 e0       	ldi	r31, 0x01	; 1
    59ee:	de 01       	movw	r26, r28
    59f0:	51 96       	adiw	r26, 0x11	; 17
    59f2:	01 90       	ld	r0, Z+
    59f4:	0d 92       	st	X+, r0
    59f6:	8a 95       	dec	r24
    59f8:	e1 f7       	brne	.-8      	; 0x59f2 <main+0xcae>
create_table():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:4
#include "table.h"

table *create_table(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t rows, uint16_t cols) {
  table *new_table = (table *)malloc(sizeof(table));
    59fa:	80 e1       	ldi	r24, 0x10	; 16
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    5a02:	8c 01       	movw	r16, r24
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:5
  new_table->pos = {x, y};
    5a04:	84 e0       	ldi	r24, 0x04	; 4
    5a06:	90 e0       	ldi	r25, 0x00	; 0
    5a08:	d8 01       	movw	r26, r16
    5a0a:	11 96       	adiw	r26, 0x01	; 1
    5a0c:	9c 93       	st	X, r25
    5a0e:	8e 93       	st	-X, r24
    5a10:	13 96       	adiw	r26, 0x03	; 3
    5a12:	9c 93       	st	X, r25
    5a14:	8e 93       	st	-X, r24
    5a16:	12 97       	sbiw	r26, 0x02	; 2
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:6
  new_table->width = width;
    5a18:	88 ed       	ldi	r24, 0xD8	; 216
    5a1a:	91 e0       	ldi	r25, 0x01	; 1
    5a1c:	15 96       	adiw	r26, 0x05	; 5
    5a1e:	9c 93       	st	X, r25
    5a20:	8e 93       	st	-X, r24
    5a22:	14 97       	sbiw	r26, 0x04	; 4
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:7
  new_table->height = height;
    5a24:	80 e3       	ldi	r24, 0x30	; 48
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	17 96       	adiw	r26, 0x07	; 7
    5a2a:	9c 93       	st	X, r25
    5a2c:	8e 93       	st	-X, r24
    5a2e:	16 97       	sbiw	r26, 0x06	; 6
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:8
  new_table->rows = rows;
    5a30:	82 e0       	ldi	r24, 0x02	; 2
    5a32:	18 96       	adiw	r26, 0x08	; 8
    5a34:	8c 93       	st	X, r24
    5a36:	18 97       	sbiw	r26, 0x08	; 8
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:9
  new_table->columns = cols;
    5a38:	84 e0       	ldi	r24, 0x04	; 4
    5a3a:	19 96       	adiw	r26, 0x09	; 9
    5a3c:	8c 93       	st	X, r24
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:12
  new_table->hlines = (float *)malloc(sizeof(float) * rows);
  new_table->vlines = (float *)malloc(sizeof(float) * cols);
  new_table->field_colors = (rgb_color *)malloc(sizeof(rgb_color) * rows * cols);
    5a3e:	88 e1       	ldi	r24, 0x18	; 24
    5a40:	90 e0       	ldi	r25, 0x00	; 0
    5a42:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    5a46:	f8 01       	movw	r30, r16
    5a48:	97 87       	std	Z+15, r25	; 0x0f
    5a4a:	86 87       	std	Z+14, r24	; 0x0e
launch_ui():
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:60
  table *status_table = create_table(TOP_ROW_X, TOP_ROW_Y, TOP_ROW_WIDTH, TOP_ROW_HEIGHT, 2, 4);
  status_table->hlines = status_rows;
    5a4c:	ce 01       	movw	r24, r28
    5a4e:	c1 96       	adiw	r24, 0x31	; 49
    5a50:	93 87       	std	Z+11, r25	; 0x0b
    5a52:	82 87       	std	Z+10, r24	; 0x0a
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:61
  status_table->vlines = status_cols;
    5a54:	80 97       	sbiw	r24, 0x20	; 32
    5a56:	95 87       	std	Z+13, r25	; 0x0d
    5a58:	84 87       	std	Z+12, r24	; 0x0c
/home/noah/Documents/basteln/ofen_v2/main/user_interface.cpp:62
  draw_table(status_table);
    5a5a:	c8 01       	movw	r24, r16
    5a5c:	0e 94 41 0c 	call	0x1882	; 0x1882 <draw_table(table*)>
    5a60:	a1 2c       	mov	r10, r1
    5a62:	b1 2c       	mov	r11, r1
serialEventRun():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	29 2e       	mov	r2, r25
    5a68:	90 e0       	ldi	r25, 0x00	; 0
    5a6a:	39 2e       	mov	r3, r25
main():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1335
    5a6c:	91 2c       	mov	r9, r1
    5a6e:	81 2c       	mov	r8, r1
    5a70:	10 e0       	ldi	r17, 0x00	; 0
    5a72:	00 e0       	ldi	r16, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:45
  write(DEMUX_A0_PIN, column & 0x01); // write first bit of column
  write(DEMUX_A1_PIN, (column >> 1) & 0x01); // write second bit of columns
}

uint16_t read_keypad() { // reads the keypad state, determines the active key event for every key and notifies all the registered event_listeners
  uint16_t keys = 0;
    5a74:	d1 2c       	mov	r13, r1
    5a76:	c1 2c       	mov	r12, r1
select_keypad_column():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:40
  uint8_t shift_reg = read_shift_reg();
  return shift_reg & 0b00001111;
}

void select_keypad_column(uint8_t column) { // write the first two bits of column to pins DEMUX_A0 and DEMUX_A1 to select one of 4 keypad columns
  write(DEMUX_A0_PIN, column & 0x01); // write first bit of column
    5a78:	60 2f       	mov	r22, r16
    5a7a:	61 70       	andi	r22, 0x01	; 1
    5a7c:	84 e2       	ldi	r24, 0x24	; 36
    5a7e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:41
  write(DEMUX_A1_PIN, (column >> 1) & 0x01); // write second bit of columns
    5a82:	b8 01       	movw	r22, r16
    5a84:	75 95       	asr	r23
    5a86:	67 95       	ror	r22
    5a88:	83 e2       	ldi	r24, 0x23	; 35
    5a8a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
read_shift_reg():
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:8
#include "pins.h"
#include <Arduino.h>

uint8_t read_shift_reg() {
  uint8_t shift_reg = 0;
  write(SHIFT_LOAD_PIN, 0);
    5a8e:	60 e0       	ldi	r22, 0x00	; 0
    5a90:	80 e1       	ldi	r24, 0x10	; 16
    5a92:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
pulse():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:129

  *port ^= 0x01 << pin_mod;
}

void pulse(uint8_t pin) {
  toggle(pin);
    5a96:	0e 94 24 05 	call	0xa48	; 0xa48 <toggle(unsigned char) [clone .constprop.56]>
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:130
  toggle(pin);
    5a9a:	0e 94 24 05 	call	0xa48	; 0xa48 <toggle(unsigned char) [clone .constprop.56]>
read_shift_reg():
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:10
  pulse(SHIFT_CLK_PIN);
  write(SHIFT_LOAD_PIN, 1);
    5a9e:	61 e0       	ldi	r22, 0x01	; 1
    5aa0:	80 e1       	ldi	r24, 0x10	; 16
    5aa2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <write(unsigned char, char)>
    5aa6:	f1 2c       	mov	r15, r1
    5aa8:	e1 2c       	mov	r14, r1
main():
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:7
#include "avrio.h"
#include "pins.h"
#include <Arduino.h>

uint8_t read_shift_reg() {
  uint8_t shift_reg = 0;
    5aaa:	71 2c       	mov	r7, r1
pulse():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:129

  *port ^= 0x01 << pin_mod;
}

void pulse(uint8_t pin) {
  toggle(pin);
    5aac:	0e 94 24 05 	call	0xa48	; 0xa48 <toggle(unsigned char) [clone .constprop.56]>
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:130
  toggle(pin);
    5ab0:	0e 94 24 05 	call	0xa48	; 0xa48 <toggle(unsigned char) [clone .constprop.56]>
read():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:140

char read(uint8_t pin) {
  volatile uint8_t *pin_reg = get_pin_address(pin);
  uint8_t pin_mod = pin % 10;

  return (*pin_reg & (0x01 << pin_mod)) >> pin_mod;
    5ab4:	89 b1       	in	r24, 0x09	; 9
    5ab6:	82 95       	swap	r24
    5ab8:	81 70       	andi	r24, 0x01	; 1
    5aba:	89 af       	std	Y+57, r24	; 0x39
    5abc:	1a ae       	std	Y+58, r1	; 0x3a
read_shift_reg():
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:13
  write(SHIFT_LOAD_PIN, 0);
  pulse(SHIFT_CLK_PIN);
  write(SHIFT_LOAD_PIN, 1);
  for(uint8_t i = 0; i < 8; i++) {
    pulse(SHIFT_CLK_PIN);  
    shift_reg |= read(SHIFT_Q_PIN) << i;
    5abe:	89 ad       	ldd	r24, Y+57	; 0x39
    5ac0:	9a ad       	ldd	r25, Y+58	; 0x3a
    5ac2:	0e 2c       	mov	r0, r14
    5ac4:	01 c0       	rjmp	.+2      	; 0x5ac8 <main+0xd84>
    5ac6:	88 0f       	add	r24, r24
    5ac8:	0a 94       	dec	r0
    5aca:	ea f7       	brpl	.-6      	; 0x5ac6 <main+0xd82>
    5acc:	78 2a       	or	r7, r24
    5ace:	ff ef       	ldi	r31, 0xFF	; 255
    5ad0:	ef 1a       	sub	r14, r31
    5ad2:	ff 0a       	sbc	r15, r31
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:11
uint8_t read_shift_reg() {
  uint8_t shift_reg = 0;
  write(SHIFT_LOAD_PIN, 0);
  pulse(SHIFT_CLK_PIN);
  write(SHIFT_LOAD_PIN, 1);
  for(uint8_t i = 0; i < 8; i++) {
    5ad4:	28 e0       	ldi	r18, 0x08	; 8
    5ad6:	e2 16       	cp	r14, r18
    5ad8:	f1 04       	cpc	r15, r1
    5ada:	41 f7       	brne	.-48     	; 0x5aac <main+0xd68>
get_keypad_state():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:36
  return 0;
}

uint8_t get_keypad_state() { // gives a bit pattern representing the key states of the currently selecet keypad column. 1 means held down, 0 means not pressed
  uint8_t shift_reg = read_shift_reg();
  return shift_reg & 0b00001111;
    5adc:	87 2d       	mov	r24, r7
    5ade:	8f 70       	andi	r24, 0x0F	; 15
read_keypad():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:48

uint16_t read_keypad() { // reads the keypad state, determines the active key event for every key and notifies all the registered event_listeners
  uint16_t keys = 0;
  for(uint8_t column = 0; column < 4; column++) { // read all 4 keypad columns and save the state of every key in the according bit of keys
    select_keypad_column(column);
    uint16_t keypad_state = get_keypad_state();
    5ae0:	90 e0       	ldi	r25, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:49
    keys |= keypad_state << (4 * column);
    5ae2:	08 2c       	mov	r0, r8
    5ae4:	02 c0       	rjmp	.+4      	; 0x5aea <main+0xda6>
    5ae6:	88 0f       	add	r24, r24
    5ae8:	99 1f       	adc	r25, r25
    5aea:	0a 94       	dec	r0
    5aec:	e2 f7       	brpl	.-8      	; 0x5ae6 <main+0xda2>
    5aee:	c8 2a       	or	r12, r24
    5af0:	d9 2a       	or	r13, r25
    5af2:	0f 5f       	subi	r16, 0xFF	; 255
    5af4:	1f 4f       	sbci	r17, 0xFF	; 255
    5af6:	84 e0       	ldi	r24, 0x04	; 4
    5af8:	88 0e       	add	r8, r24
    5afa:	91 1c       	adc	r9, r1
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:46
  write(DEMUX_A1_PIN, (column >> 1) & 0x01); // write second bit of columns
}

uint16_t read_keypad() { // reads the keypad state, determines the active key event for every key and notifies all the registered event_listeners
  uint16_t keys = 0;
  for(uint8_t column = 0; column < 4; column++) { // read all 4 keypad columns and save the state of every key in the according bit of keys
    5afc:	04 30       	cpi	r16, 0x04	; 4
    5afe:	11 05       	cpc	r17, r1
    5b00:	09 f0       	breq	.+2      	; 0x5b04 <main+0xdc0>
    5b02:	ba cf       	rjmp	.-140    	; 0x5a78 <main+0xd34>
millis():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    5b04:	2f b7       	in	r18, 0x3f	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    5b06:	f8 94       	cli
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    5b08:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <timer0_millis>
    5b0c:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <timer0_millis+0x1>
    5b10:	a0 91 4d 02 	lds	r26, 0x024D	; 0x80024d <timer0_millis+0x2>
    5b14:	b0 91 4e 02 	lds	r27, 0x024E	; 0x80024e <timer0_millis+0x3>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    5b18:	2f bf       	out	0x3f, r18	; 63
emit_key_events():
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:29

void emit_key_events() { // reads the keypad state, determines the active key event for every key and notifies all the registered event_listeners
  uint16_t keys = read_keypad();

  unsigned long current_ms = millis(); // update timer
  unsigned long passed_ms = current_ms - last_update;
    5b1a:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <last_update>
    5b1e:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <last_update+0x1>
    5b22:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <last_update+0x2>
    5b26:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <last_update+0x3>
    5b2a:	2c 01       	movw	r4, r24
    5b2c:	3d 01       	movw	r6, r26
    5b2e:	44 1a       	sub	r4, r20
    5b30:	55 0a       	sbc	r5, r21
    5b32:	66 0a       	sbc	r6, r22
    5b34:	77 0a       	sbc	r7, r23
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:30
  last_update = current_ms;
    5b36:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <last_update>
    5b3a:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <last_update+0x1>
    5b3e:	a0 93 48 02 	sts	0x0248, r26	; 0x800248 <last_update+0x2>
    5b42:	b0 93 49 02 	sts	0x0249, r27	; 0x800249 <last_update+0x3>
    5b46:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__data_end>
    5b4a:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__data_end+0x1>
    5b4e:	a5 01       	movw	r20, r10
    5b50:	e6 e2       	ldi	r30, 0x26	; 38
    5b52:	f2 e0       	ldi	r31, 0x02	; 2
main():
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:33

  uint16_t clicked_keys = 0; // keys that reveived a click shorter than LONG_PRESS_MS
  uint16_t long_pressed_keys = 0; // keys that received a click longer than LONG_PRESS_MS
    5b54:	f1 2c       	mov	r15, r1
    5b56:	e1 2c       	mov	r14, r1
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:32

  unsigned long current_ms = millis(); // update timer
  unsigned long passed_ms = current_ms - last_update;
  last_update = current_ms;

  uint16_t clicked_keys = 0; // keys that reveived a click shorter than LONG_PRESS_MS
    5b58:	10 e0       	ldi	r17, 0x00	; 0
    5b5a:	00 e0       	ldi	r16, 0x00	; 0
emit_key_events():
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:35
  uint16_t long_pressed_keys = 0; // keys that received a click longer than LONG_PRESS_MS

  for(uint8_t i; i<16; i++) { // check following conditions for every key
    5b5c:	40 31       	cpi	r20, 0x10	; 16
    5b5e:	e8 f5       	brcc	.+122    	; 0x5bda <main+0xe96>
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:36
    uint16_t key_bit_pattern = 0b1 << i; // bit position of the current key in keys
    5b60:	81 e0       	ldi	r24, 0x01	; 1
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	04 2e       	mov	r0, r20
    5b66:	02 c0       	rjmp	.+4      	; 0x5b6c <main+0xe28>
    5b68:	88 0f       	add	r24, r24
    5b6a:	99 1f       	adc	r25, r25
    5b6c:	0a 94       	dec	r0
    5b6e:	e2 f7       	brpl	.-8      	; 0x5b68 <main+0xe24>
    5b70:	60 81       	ld	r22, Z
    5b72:	71 81       	ldd	r23, Z+1	; 0x01
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:37
    if(keys & key_bit_pattern) { // key is pressed
    5b74:	dc 01       	movw	r26, r24
    5b76:	ac 21       	and	r26, r12
    5b78:	bd 21       	and	r27, r13
    5b7a:	ab 2b       	or	r26, r27
    5b7c:	f9 f0       	breq	.+62     	; 0x5bbc <main+0xe78>
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:38
      key_times[i] += passed_ms; // update for how long the key has been pressed
    5b7e:	64 0d       	add	r22, r4
    5b80:	75 1d       	adc	r23, r5
    5b82:	71 83       	std	Z+1, r23	; 0x01
    5b84:	60 83       	st	Z, r22
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:46
        clicked_keys |= key_bit_pattern; // add key to clicked_keys
      }
      key_times[i] = 0; // reset key timer
      multi_click_keys &= ~key_bit_pattern; // reset multi click flag
    }
    if(key_times[i] >= LONG_PRESS_MS && !(multi_click_keys & key_bit_pattern)) { // check if key has been pressed long enough to trigger a long press event but is not in multi click mode
    5b86:	60 81       	ld	r22, Z
    5b88:	71 81       	ldd	r23, Z+1	; 0x01
    5b8a:	68 3c       	cpi	r22, 0xC8	; 200
    5b8c:	71 05       	cpc	r23, r1
    5b8e:	90 f0       	brcs	.+36     	; 0x5bb4 <main+0xe70>
    5b90:	dc 01       	movw	r26, r24
    5b92:	a2 23       	and	r26, r18
    5b94:	b3 23       	and	r27, r19
    5b96:	ab 2b       	or	r26, r27
    5b98:	21 f4       	brne	.+8      	; 0x5ba2 <main+0xe5e>
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:47
      long_pressed_keys |= key_bit_pattern; // add to long_pressed_keys
    5b9a:	e8 2a       	or	r14, r24
    5b9c:	f9 2a       	or	r15, r25
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:48
      multi_click_keys |= key_bit_pattern; // set multi click flag
    5b9e:	28 2b       	or	r18, r24
    5ba0:	39 2b       	or	r19, r25
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:50
    }
    if(key_times[i] >= LONG_PRESS_MS + MULTI_CLICK_MS) { // check if key has been pressed long enough to trigger a multi click event
    5ba2:	6a 3f       	cpi	r22, 0xFA	; 250
    5ba4:	71 05       	cpc	r23, r1
    5ba6:	30 f0       	brcs	.+12     	; 0x5bb4 <main+0xe70>
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:51
      key_times[i] -= MULTI_CLICK_MS; // reduce key timer value to trigger the next multi click event in MULTI_CLICK_MS
    5ba8:	62 53       	subi	r22, 0x32	; 50
    5baa:	71 09       	sbc	r23, r1
    5bac:	71 83       	std	Z+1, r23	; 0x01
    5bae:	60 83       	st	Z, r22
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:52
      clicked_keys |= key_bit_pattern; // add to clicked_keys
    5bb0:	08 2b       	or	r16, r24
    5bb2:	19 2b       	or	r17, r25
    5bb4:	32 96       	adiw	r30, 0x02	; 2
    5bb6:	4f 5f       	subi	r20, 0xFF	; 255
    5bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    5bba:	d0 cf       	rjmp	.-96     	; 0x5b5c <main+0xe18>
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:40
  for(uint8_t i; i<16; i++) { // check following conditions for every key
    uint16_t key_bit_pattern = 0b1 << i; // bit position of the current key in keys
    if(keys & key_bit_pattern) { // key is pressed
      key_times[i] += passed_ms; // update for how long the key has been pressed
    } else { // key is not pressed
      if(key_times[i] < LONG_PRESS_MS && key_times[i] > 0) { // check if key has been pressed short enough to be a clicked key
    5bbc:	61 50       	subi	r22, 0x01	; 1
    5bbe:	71 09       	sbc	r23, r1
    5bc0:	67 3c       	cpi	r22, 0xC7	; 199
    5bc2:	71 05       	cpc	r23, r1
    5bc4:	10 f4       	brcc	.+4      	; 0x5bca <main+0xe86>
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:41
        clicked_keys |= key_bit_pattern; // add key to clicked_keys
    5bc6:	08 2b       	or	r16, r24
    5bc8:	19 2b       	or	r17, r25
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:43
      }
      key_times[i] = 0; // reset key timer
    5bca:	11 82       	std	Z+1, r1	; 0x01
    5bcc:	10 82       	st	Z, r1
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:44
      multi_click_keys &= ~key_bit_pattern; // reset multi click flag
    5bce:	bc 01       	movw	r22, r24
    5bd0:	60 95       	com	r22
    5bd2:	70 95       	com	r23
    5bd4:	26 23       	and	r18, r22
    5bd6:	37 23       	and	r19, r23
    5bd8:	d6 cf       	rjmp	.-84     	; 0x5b86 <main+0xe42>
    5bda:	30 93 25 02 	sts	0x0225, r19	; 0x800225 <__data_end+0x1>
    5bde:	20 93 24 02 	sts	0x0224, r18	; 0x800224 <__data_end>
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:56
      key_times[i] -= MULTI_CLICK_MS; // reduce key timer value to trigger the next multi click event in MULTI_CLICK_MS
      clicked_keys |= key_bit_pattern; // add to clicked_keys
    }
  }

  if(!long_pressed_keys && !clicked_keys) return; // return if no key events were triggered
    5be2:	e1 14       	cp	r14, r1
    5be4:	f1 04       	cpc	r15, r1
    5be6:	21 f4       	brne	.+8      	; 0x5bf0 <main+0xeac>
    5be8:	01 15       	cp	r16, r1
    5bea:	11 05       	cpc	r17, r1
    5bec:	09 f4       	brne	.+2      	; 0x5bf0 <main+0xeac>
    5bee:	41 c0       	rjmp	.+130    	; 0x5c72 <main+0xf2e>
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:58

  struct list<struct event_listener_conf> *event_listener_iter = event_listener_list;
    5bf0:	c0 90 f0 02 	lds	r12, 0x02F0	; 0x8002f0 <event_listener_list>
    5bf4:	d0 90 f1 02 	lds	r13, 0x02F1	; 0x8002f1 <event_listener_list+0x1>
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:59
  while(event_listener_iter->next){ // iterate over all registered key event listeners
    5bf8:	d6 01       	movw	r26, r12
    5bfa:	17 96       	adiw	r26, 0x07	; 7
    5bfc:	8d 91       	ld	r24, X+
    5bfe:	9c 91       	ld	r25, X
    5c00:	18 97       	sbiw	r26, 0x08	; 8
    5c02:	89 2b       	or	r24, r25
    5c04:	b1 f1       	breq	.+108    	; 0x5c72 <main+0xf2e>
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:60
    struct event_listener_conf listener = event_listener_iter->data; // get data of current key event listener
    5c06:	8d 90       	ld	r8, X+
    5c08:	9c 90       	ld	r9, X
    5c0a:	11 97       	sbiw	r26, 0x01	; 1
    5c0c:	12 96       	adiw	r26, 0x02	; 2
    5c0e:	8d 91       	ld	r24, X+
    5c10:	9c 91       	ld	r25, X
    5c12:	13 97       	sbiw	r26, 0x03	; 3
    5c14:	14 96       	adiw	r26, 0x04	; 4
    5c16:	ac 91       	ld	r26, X
    5c18:	f6 01       	movw	r30, r12
    5c1a:	65 81       	ldd	r22, Z+5	; 0x05
    5c1c:	76 81       	ldd	r23, Z+6	; 0x06
main():
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:64

    // bit pattern which holds all the keys that received an event which is subscribed to by the current event listener
    uint16_t registered_keys = listener.mask & ( // only listen to keys that where specified by the mask parameter on the call to add_event_listener()
      (listener.event_types & CLICK ? clicked_keys & ~multi_click_keys : 0) | // all the keys that are clicked but not multi clicked if the event listener subscribed to CLICK
    5c1e:	30 e0       	ldi	r19, 0x00	; 0
    5c20:	20 e0       	ldi	r18, 0x00	; 0
emit_key_events():
    5c22:	a0 ff       	sbrs	r26, 0
    5c24:	08 c0       	rjmp	.+16     	; 0x5c36 <main+0xef2>
    5c26:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__data_end>
    5c2a:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__data_end+0x1>
    5c2e:	20 95       	com	r18
    5c30:	30 95       	com	r19
    5c32:	20 23       	and	r18, r16
    5c34:	31 23       	and	r19, r17
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:65
      (listener.event_types & LONG_PRESS ? long_pressed_keys : 0) | // all the keys that are long pressed if the event listener subscribed to LONG_PRESS
    5c36:	a7 01       	movw	r20, r14
    5c38:	a1 fd       	sbrc	r26, 1
    5c3a:	02 c0       	rjmp	.+4      	; 0x5c40 <main+0xefc>
main():
    5c3c:	50 e0       	ldi	r21, 0x00	; 0
    5c3e:	40 e0       	ldi	r20, 0x00	; 0
emit_key_events():
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:64
  while(event_listener_iter->next){ // iterate over all registered key event listeners
    struct event_listener_conf listener = event_listener_iter->data; // get data of current key event listener

    // bit pattern which holds all the keys that received an event which is subscribed to by the current event listener
    uint16_t registered_keys = listener.mask & ( // only listen to keys that where specified by the mask parameter on the call to add_event_listener()
      (listener.event_types & CLICK ? clicked_keys & ~multi_click_keys : 0) | // all the keys that are clicked but not multi clicked if the event listener subscribed to CLICK
    5c40:	24 2b       	or	r18, r20
    5c42:	35 2b       	or	r19, r21
main():
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:66
      (listener.event_types & LONG_PRESS ? long_pressed_keys : 0) | // all the keys that are long pressed if the event listener subscribed to LONG_PRESS
      ((listener.event_types & MULTI_CLICK) ? clicked_keys & multi_click_keys : 0)); // all the keys that are multi clicked if tha event listener subscribed to MULTI_CLICK
    5c44:	50 e0       	ldi	r21, 0x00	; 0
    5c46:	40 e0       	ldi	r20, 0x00	; 0
emit_key_events():
    5c48:	a2 ff       	sbrs	r26, 2
    5c4a:	06 c0       	rjmp	.+12     	; 0x5c58 <main+0xf14>
    5c4c:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__data_end>
    5c50:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__data_end+0x1>
    5c54:	40 23       	and	r20, r16
    5c56:	51 23       	and	r21, r17
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:65
    struct event_listener_conf listener = event_listener_iter->data; // get data of current key event listener

    // bit pattern which holds all the keys that received an event which is subscribed to by the current event listener
    uint16_t registered_keys = listener.mask & ( // only listen to keys that where specified by the mask parameter on the call to add_event_listener()
      (listener.event_types & CLICK ? clicked_keys & ~multi_click_keys : 0) | // all the keys that are clicked but not multi clicked if the event listener subscribed to CLICK
      (listener.event_types & LONG_PRESS ? long_pressed_keys : 0) | // all the keys that are long pressed if the event listener subscribed to LONG_PRESS
    5c58:	24 2b       	or	r18, r20
    5c5a:	35 2b       	or	r19, r21
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:63
  struct list<struct event_listener_conf> *event_listener_iter = event_listener_list;
  while(event_listener_iter->next){ // iterate over all registered key event listeners
    struct event_listener_conf listener = event_listener_iter->data; // get data of current key event listener

    // bit pattern which holds all the keys that received an event which is subscribed to by the current event listener
    uint16_t registered_keys = listener.mask & ( // only listen to keys that where specified by the mask parameter on the call to add_event_listener()
    5c5c:	82 23       	and	r24, r18
    5c5e:	93 23       	and	r25, r19
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:68
      (listener.event_types & CLICK ? clicked_keys & ~multi_click_keys : 0) | // all the keys that are clicked but not multi clicked if the event listener subscribed to CLICK
      (listener.event_types & LONG_PRESS ? long_pressed_keys : 0) | // all the keys that are long pressed if the event listener subscribed to LONG_PRESS
      ((listener.event_types & MULTI_CLICK) ? clicked_keys & multi_click_keys : 0)); // all the keys that are multi clicked if tha event listener subscribed to MULTI_CLICK

    if(registered_keys) {
    5c60:	00 97       	sbiw	r24, 0x00	; 0
    5c62:	11 f0       	breq	.+4      	; 0x5c68 <main+0xf24>
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:69
      (**((event_listener*)listener.callback))(registered_keys, listener.params); // call the event listener function with the parameters specified on the call to add_event_listener()
    5c64:	f4 01       	movw	r30, r8
    5c66:	09 95       	icall
/home/noah/Documents/basteln/ofen_v2/main/user_input.cpp:71
    }
    event_listener_iter = event_listener_iter->next;
    5c68:	d6 01       	movw	r26, r12
    5c6a:	17 96       	adiw	r26, 0x07	; 7
    5c6c:	cd 90       	ld	r12, X+
    5c6e:	dc 90       	ld	r13, X
    5c70:	c3 cf       	rjmp	.-122    	; 0x5bf8 <main+0xeb4>
emit_timer_events():
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:20
  OCR1A = 7812;
  TIMSK1 |= 1 << OCIE1A;
}

void emit_timer_events() {
  struct list<struct timer_event_listener_conf> *event_listener_iter = timer_event_listener_list;
    5c72:	00 91 f2 02 	lds	r16, 0x02F2	; 0x8002f2 <timer_event_listener_list>
    5c76:	10 91 f3 02 	lds	r17, 0x02F3	; 0x8002f3 <timer_event_listener_list+0x1>
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:21
  while(event_listener_iter->next){ // iterate over all registered timer event listeners
    5c7a:	f8 01       	movw	r30, r16
    5c7c:	86 81       	ldd	r24, Z+6	; 0x06
    5c7e:	97 81       	ldd	r25, Z+7	; 0x07
    5c80:	89 2b       	or	r24, r25
    5c82:	89 f0       	breq	.+34     	; 0x5ca6 <main+0xf62>
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:22
    if(event_listener_iter->data.counter >= event_listener_iter->data.match) {
    5c84:	92 81       	ldd	r25, Z+2	; 0x02
    5c86:	83 81       	ldd	r24, Z+3	; 0x03
    5c88:	98 17       	cp	r25, r24
    5c8a:	48 f0       	brcs	.+18     	; 0x5c9e <main+0xf5a>
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:23
    	event_listener_iter->data.counter = 0;
    5c8c:	12 82       	std	Z+2, r1	; 0x02
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:24
    	event_listener_iter->data.callback(event_listener_iter->data.params);
    5c8e:	01 90       	ld	r0, Z+
    5c90:	f0 81       	ld	r31, Z
    5c92:	e0 2d       	mov	r30, r0
    5c94:	d8 01       	movw	r26, r16
    5c96:	14 96       	adiw	r26, 0x04	; 4
    5c98:	8d 91       	ld	r24, X+
    5c9a:	9c 91       	ld	r25, X
    5c9c:	09 95       	icall
/home/noah/Documents/basteln/ofen_v2/main/timer.cpp:26
    }
    event_listener_iter = event_listener_iter->next;
    5c9e:	f8 01       	movw	r30, r16
    5ca0:	06 81       	ldd	r16, Z+6	; 0x06
    5ca2:	17 81       	ldd	r17, Z+7	; 0x07
    5ca4:	ea cf       	rjmp	.-44     	; 0x5c7a <main+0xf36>
serialEventRun():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/3.0.3/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    5ca6:	21 14       	cp	r2, r1
    5ca8:	31 04       	cpc	r3, r1
    5caa:	09 f4       	brne	.+2      	; 0x5cae <main+0xf6a>
    5cac:	df ce       	rjmp	.-578    	; 0x5a6c <main+0xd28>
    5cae:	0e 94 6f 06 	call	0xcde	; 0xcde <Serial0_available()>
    5cb2:	88 23       	and	r24, r24
    5cb4:	09 f4       	brne	.+2      	; 0x5cb8 <main+0xf74>
    5cb6:	da ce       	rjmp	.-588    	; 0x5a6c <main+0xd28>
    5cb8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5cbc:	d7 ce       	rjmp	.-594    	; 0x5a6c <main+0xd28>

00005cbe <vfprintf>:
vfprintf():
    5cbe:	ab e0       	ldi	r26, 0x0B	; 11
    5cc0:	b0 e0       	ldi	r27, 0x00	; 0
    5cc2:	e5 e6       	ldi	r30, 0x65	; 101
    5cc4:	fe e2       	ldi	r31, 0x2E	; 46
    5cc6:	0c 94 0c 32 	jmp	0x6418	; 0x6418 <__prologue_saves__>
    5cca:	7c 01       	movw	r14, r24
    5ccc:	3b 01       	movw	r6, r22
    5cce:	8a 01       	movw	r16, r20
    5cd0:	fc 01       	movw	r30, r24
    5cd2:	17 82       	std	Z+7, r1	; 0x07
    5cd4:	16 82       	std	Z+6, r1	; 0x06
    5cd6:	83 81       	ldd	r24, Z+3	; 0x03
    5cd8:	81 ff       	sbrs	r24, 1
    5cda:	c8 c1       	rjmp	.+912    	; 0x606c <vfprintf+0x3ae>
    5cdc:	ce 01       	movw	r24, r28
    5cde:	01 96       	adiw	r24, 0x01	; 1
    5ce0:	5c 01       	movw	r10, r24
    5ce2:	f7 01       	movw	r30, r14
    5ce4:	93 81       	ldd	r25, Z+3	; 0x03
    5ce6:	f3 01       	movw	r30, r6
    5ce8:	93 fd       	sbrc	r25, 3
    5cea:	85 91       	lpm	r24, Z+
    5cec:	93 ff       	sbrs	r25, 3
    5cee:	81 91       	ld	r24, Z+
    5cf0:	3f 01       	movw	r6, r30
    5cf2:	88 23       	and	r24, r24
    5cf4:	09 f4       	brne	.+2      	; 0x5cf8 <vfprintf+0x3a>
    5cf6:	53 c1       	rjmp	.+678    	; 0x5f9e <vfprintf+0x2e0>
    5cf8:	85 32       	cpi	r24, 0x25	; 37
    5cfa:	39 f4       	brne	.+14     	; 0x5d0a <vfprintf+0x4c>
    5cfc:	93 fd       	sbrc	r25, 3
    5cfe:	85 91       	lpm	r24, Z+
    5d00:	93 ff       	sbrs	r25, 3
    5d02:	81 91       	ld	r24, Z+
    5d04:	3f 01       	movw	r6, r30
    5d06:	85 32       	cpi	r24, 0x25	; 37
    5d08:	29 f4       	brne	.+10     	; 0x5d14 <vfprintf+0x56>
    5d0a:	b7 01       	movw	r22, r14
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	0e 94 4f 30 	call	0x609e	; 0x609e <fputc>
    5d12:	e7 cf       	rjmp	.-50     	; 0x5ce2 <vfprintf+0x24>
    5d14:	91 2c       	mov	r9, r1
    5d16:	21 2c       	mov	r2, r1
    5d18:	31 2c       	mov	r3, r1
    5d1a:	ff e1       	ldi	r31, 0x1F	; 31
    5d1c:	f3 15       	cp	r31, r3
    5d1e:	38 f0       	brcs	.+14     	; 0x5d2e <vfprintf+0x70>
    5d20:	8b 32       	cpi	r24, 0x2B	; 43
    5d22:	11 f1       	breq	.+68     	; 0x5d68 <vfprintf+0xaa>
    5d24:	90 f4       	brcc	.+36     	; 0x5d4a <vfprintf+0x8c>
    5d26:	80 32       	cpi	r24, 0x20	; 32
    5d28:	09 f1       	breq	.+66     	; 0x5d6c <vfprintf+0xae>
    5d2a:	83 32       	cpi	r24, 0x23	; 35
    5d2c:	29 f1       	breq	.+74     	; 0x5d78 <vfprintf+0xba>
    5d2e:	37 fc       	sbrc	r3, 7
    5d30:	3c c0       	rjmp	.+120    	; 0x5daa <vfprintf+0xec>
    5d32:	20 ed       	ldi	r18, 0xD0	; 208
    5d34:	28 0f       	add	r18, r24
    5d36:	2a 30       	cpi	r18, 0x0A	; 10
    5d38:	50 f5       	brcc	.+84     	; 0x5d8e <vfprintf+0xd0>
    5d3a:	36 fe       	sbrs	r3, 6
    5d3c:	20 c0       	rjmp	.+64     	; 0x5d7e <vfprintf+0xc0>
    5d3e:	8a e0       	ldi	r24, 0x0A	; 10
    5d40:	98 9e       	mul	r9, r24
    5d42:	20 0d       	add	r18, r0
    5d44:	11 24       	eor	r1, r1
    5d46:	92 2e       	mov	r9, r18
    5d48:	06 c0       	rjmp	.+12     	; 0x5d56 <vfprintf+0x98>
    5d4a:	8d 32       	cpi	r24, 0x2D	; 45
    5d4c:	91 f0       	breq	.+36     	; 0x5d72 <vfprintf+0xb4>
    5d4e:	80 33       	cpi	r24, 0x30	; 48
    5d50:	71 f7       	brne	.-36     	; 0x5d2e <vfprintf+0x70>
    5d52:	68 94       	set
    5d54:	30 f8       	bld	r3, 0
    5d56:	f3 01       	movw	r30, r6
    5d58:	93 fd       	sbrc	r25, 3
    5d5a:	85 91       	lpm	r24, Z+
    5d5c:	93 ff       	sbrs	r25, 3
    5d5e:	81 91       	ld	r24, Z+
    5d60:	3f 01       	movw	r6, r30
    5d62:	81 11       	cpse	r24, r1
    5d64:	da cf       	rjmp	.-76     	; 0x5d1a <vfprintf+0x5c>
    5d66:	21 c0       	rjmp	.+66     	; 0x5daa <vfprintf+0xec>
    5d68:	68 94       	set
    5d6a:	31 f8       	bld	r3, 1
    5d6c:	68 94       	set
    5d6e:	32 f8       	bld	r3, 2
    5d70:	f2 cf       	rjmp	.-28     	; 0x5d56 <vfprintf+0x98>
    5d72:	68 94       	set
    5d74:	33 f8       	bld	r3, 3
    5d76:	ef cf       	rjmp	.-34     	; 0x5d56 <vfprintf+0x98>
    5d78:	68 94       	set
    5d7a:	34 f8       	bld	r3, 4
    5d7c:	ec cf       	rjmp	.-40     	; 0x5d56 <vfprintf+0x98>
    5d7e:	ea e0       	ldi	r30, 0x0A	; 10
    5d80:	2e 9e       	mul	r2, r30
    5d82:	20 0d       	add	r18, r0
    5d84:	11 24       	eor	r1, r1
    5d86:	22 2e       	mov	r2, r18
    5d88:	68 94       	set
    5d8a:	35 f8       	bld	r3, 5
    5d8c:	e4 cf       	rjmp	.-56     	; 0x5d56 <vfprintf+0x98>
    5d8e:	8e 32       	cpi	r24, 0x2E	; 46
    5d90:	29 f4       	brne	.+10     	; 0x5d9c <vfprintf+0xde>
    5d92:	36 fc       	sbrc	r3, 6
    5d94:	04 c1       	rjmp	.+520    	; 0x5f9e <vfprintf+0x2e0>
    5d96:	68 94       	set
    5d98:	36 f8       	bld	r3, 6
    5d9a:	dd cf       	rjmp	.-70     	; 0x5d56 <vfprintf+0x98>
    5d9c:	8c 36       	cpi	r24, 0x6C	; 108
    5d9e:	19 f4       	brne	.+6      	; 0x5da6 <vfprintf+0xe8>
    5da0:	68 94       	set
    5da2:	37 f8       	bld	r3, 7
    5da4:	d8 cf       	rjmp	.-80     	; 0x5d56 <vfprintf+0x98>
    5da6:	88 36       	cpi	r24, 0x68	; 104
    5da8:	b1 f2       	breq	.-84     	; 0x5d56 <vfprintf+0x98>
    5daa:	98 2f       	mov	r25, r24
    5dac:	9f 7d       	andi	r25, 0xDF	; 223
    5dae:	95 54       	subi	r25, 0x45	; 69
    5db0:	93 30       	cpi	r25, 0x03	; 3
    5db2:	e0 f0       	brcs	.+56     	; 0x5dec <vfprintf+0x12e>
    5db4:	83 36       	cpi	r24, 0x63	; 99
    5db6:	a1 f1       	breq	.+104    	; 0x5e20 <vfprintf+0x162>
    5db8:	83 37       	cpi	r24, 0x73	; 115
    5dba:	c1 f1       	breq	.+112    	; 0x5e2c <vfprintf+0x16e>
    5dbc:	83 35       	cpi	r24, 0x53	; 83
    5dbe:	09 f0       	breq	.+2      	; 0x5dc2 <vfprintf+0x104>
    5dc0:	63 c0       	rjmp	.+198    	; 0x5e88 <vfprintf+0x1ca>
    5dc2:	28 01       	movw	r4, r16
    5dc4:	f2 e0       	ldi	r31, 0x02	; 2
    5dc6:	4f 0e       	add	r4, r31
    5dc8:	51 1c       	adc	r5, r1
    5dca:	f8 01       	movw	r30, r16
    5dcc:	c0 80       	ld	r12, Z
    5dce:	d1 80       	ldd	r13, Z+1	; 0x01
    5dd0:	69 2d       	mov	r22, r9
    5dd2:	70 e0       	ldi	r23, 0x00	; 0
    5dd4:	36 fc       	sbrc	r3, 6
    5dd6:	02 c0       	rjmp	.+4      	; 0x5ddc <vfprintf+0x11e>
    5dd8:	6f ef       	ldi	r22, 0xFF	; 255
    5dda:	7f ef       	ldi	r23, 0xFF	; 255
    5ddc:	c6 01       	movw	r24, r12
    5dde:	0e 94 39 30 	call	0x6072	; 0x6072 <strnlen_P>
    5de2:	4c 01       	movw	r8, r24
    5de4:	68 94       	set
    5de6:	37 f8       	bld	r3, 7
    5de8:	82 01       	movw	r16, r4
    5dea:	0a c0       	rjmp	.+20     	; 0x5e00 <vfprintf+0x142>
    5dec:	0c 5f       	subi	r16, 0xFC	; 252
    5dee:	1f 4f       	sbci	r17, 0xFF	; 255
    5df0:	ff e3       	ldi	r31, 0x3F	; 63
    5df2:	f9 83       	std	Y+1, r31	; 0x01
    5df4:	88 24       	eor	r8, r8
    5df6:	83 94       	inc	r8
    5df8:	91 2c       	mov	r9, r1
    5dfa:	65 01       	movw	r12, r10
    5dfc:	e8 94       	clt
    5dfe:	37 f8       	bld	r3, 7
    5e00:	33 fe       	sbrs	r3, 3
    5e02:	2d c0       	rjmp	.+90     	; 0x5e5e <vfprintf+0x1a0>
    5e04:	52 2c       	mov	r5, r2
    5e06:	81 14       	cp	r8, r1
    5e08:	91 04       	cpc	r9, r1
    5e0a:	71 f5       	brne	.+92     	; 0x5e68 <vfprintf+0x1aa>
    5e0c:	55 20       	and	r5, r5
    5e0e:	09 f4       	brne	.+2      	; 0x5e12 <vfprintf+0x154>
    5e10:	68 cf       	rjmp	.-304    	; 0x5ce2 <vfprintf+0x24>
    5e12:	b7 01       	movw	r22, r14
    5e14:	80 e2       	ldi	r24, 0x20	; 32
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	0e 94 4f 30 	call	0x609e	; 0x609e <fputc>
    5e1c:	5a 94       	dec	r5
    5e1e:	f6 cf       	rjmp	.-20     	; 0x5e0c <vfprintf+0x14e>
    5e20:	f8 01       	movw	r30, r16
    5e22:	80 81       	ld	r24, Z
    5e24:	89 83       	std	Y+1, r24	; 0x01
    5e26:	0e 5f       	subi	r16, 0xFE	; 254
    5e28:	1f 4f       	sbci	r17, 0xFF	; 255
    5e2a:	e4 cf       	rjmp	.-56     	; 0x5df4 <vfprintf+0x136>
    5e2c:	28 01       	movw	r4, r16
    5e2e:	f2 e0       	ldi	r31, 0x02	; 2
    5e30:	4f 0e       	add	r4, r31
    5e32:	51 1c       	adc	r5, r1
    5e34:	f8 01       	movw	r30, r16
    5e36:	c0 80       	ld	r12, Z
    5e38:	d1 80       	ldd	r13, Z+1	; 0x01
    5e3a:	69 2d       	mov	r22, r9
    5e3c:	70 e0       	ldi	r23, 0x00	; 0
    5e3e:	36 fc       	sbrc	r3, 6
    5e40:	02 c0       	rjmp	.+4      	; 0x5e46 <vfprintf+0x188>
    5e42:	6f ef       	ldi	r22, 0xFF	; 255
    5e44:	7f ef       	ldi	r23, 0xFF	; 255
    5e46:	c6 01       	movw	r24, r12
    5e48:	0e 94 44 30 	call	0x6088	; 0x6088 <strnlen>
    5e4c:	4c 01       	movw	r8, r24
    5e4e:	82 01       	movw	r16, r4
    5e50:	d5 cf       	rjmp	.-86     	; 0x5dfc <vfprintf+0x13e>
    5e52:	b7 01       	movw	r22, r14
    5e54:	80 e2       	ldi	r24, 0x20	; 32
    5e56:	90 e0       	ldi	r25, 0x00	; 0
    5e58:	0e 94 4f 30 	call	0x609e	; 0x609e <fputc>
    5e5c:	2a 94       	dec	r2
    5e5e:	28 14       	cp	r2, r8
    5e60:	19 04       	cpc	r1, r9
    5e62:	09 f0       	breq	.+2      	; 0x5e66 <vfprintf+0x1a8>
    5e64:	b0 f7       	brcc	.-20     	; 0x5e52 <vfprintf+0x194>
    5e66:	ce cf       	rjmp	.-100    	; 0x5e04 <vfprintf+0x146>
    5e68:	f6 01       	movw	r30, r12
    5e6a:	37 fc       	sbrc	r3, 7
    5e6c:	85 91       	lpm	r24, Z+
    5e6e:	37 fe       	sbrs	r3, 7
    5e70:	81 91       	ld	r24, Z+
    5e72:	6f 01       	movw	r12, r30
    5e74:	b7 01       	movw	r22, r14
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	0e 94 4f 30 	call	0x609e	; 0x609e <fputc>
    5e7c:	51 10       	cpse	r5, r1
    5e7e:	5a 94       	dec	r5
    5e80:	f1 e0       	ldi	r31, 0x01	; 1
    5e82:	8f 1a       	sub	r8, r31
    5e84:	91 08       	sbc	r9, r1
    5e86:	bf cf       	rjmp	.-130    	; 0x5e06 <vfprintf+0x148>
    5e88:	84 36       	cpi	r24, 0x64	; 100
    5e8a:	19 f0       	breq	.+6      	; 0x5e92 <vfprintf+0x1d4>
    5e8c:	89 36       	cpi	r24, 0x69	; 105
    5e8e:	09 f0       	breq	.+2      	; 0x5e92 <vfprintf+0x1d4>
    5e90:	77 c0       	rjmp	.+238    	; 0x5f80 <vfprintf+0x2c2>
    5e92:	f8 01       	movw	r30, r16
    5e94:	37 fe       	sbrs	r3, 7
    5e96:	6b c0       	rjmp	.+214    	; 0x5f6e <vfprintf+0x2b0>
    5e98:	60 81       	ld	r22, Z
    5e9a:	71 81       	ldd	r23, Z+1	; 0x01
    5e9c:	82 81       	ldd	r24, Z+2	; 0x02
    5e9e:	93 81       	ldd	r25, Z+3	; 0x03
    5ea0:	0c 5f       	subi	r16, 0xFC	; 252
    5ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea4:	f3 2d       	mov	r31, r3
    5ea6:	ff 76       	andi	r31, 0x6F	; 111
    5ea8:	3f 2e       	mov	r3, r31
    5eaa:	97 ff       	sbrs	r25, 7
    5eac:	09 c0       	rjmp	.+18     	; 0x5ec0 <vfprintf+0x202>
    5eae:	90 95       	com	r25
    5eb0:	80 95       	com	r24
    5eb2:	70 95       	com	r23
    5eb4:	61 95       	neg	r22
    5eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    5eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    5eba:	9f 4f       	sbci	r25, 0xFF	; 255
    5ebc:	68 94       	set
    5ebe:	37 f8       	bld	r3, 7
    5ec0:	2a e0       	ldi	r18, 0x0A	; 10
    5ec2:	30 e0       	ldi	r19, 0x00	; 0
    5ec4:	a5 01       	movw	r20, r10
    5ec6:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__ultoa_invert>
    5eca:	c8 2e       	mov	r12, r24
    5ecc:	ca 18       	sub	r12, r10
    5ece:	8c 2c       	mov	r8, r12
    5ed0:	43 2c       	mov	r4, r3
    5ed2:	36 fe       	sbrs	r3, 6
    5ed4:	0c c0       	rjmp	.+24     	; 0x5eee <vfprintf+0x230>
    5ed6:	e8 94       	clt
    5ed8:	40 f8       	bld	r4, 0
    5eda:	c9 14       	cp	r12, r9
    5edc:	40 f4       	brcc	.+16     	; 0x5eee <vfprintf+0x230>
    5ede:	34 fe       	sbrs	r3, 4
    5ee0:	05 c0       	rjmp	.+10     	; 0x5eec <vfprintf+0x22e>
    5ee2:	32 fc       	sbrc	r3, 2
    5ee4:	03 c0       	rjmp	.+6      	; 0x5eec <vfprintf+0x22e>
    5ee6:	f3 2d       	mov	r31, r3
    5ee8:	fe 7e       	andi	r31, 0xEE	; 238
    5eea:	4f 2e       	mov	r4, r31
    5eec:	89 2c       	mov	r8, r9
    5eee:	44 fe       	sbrs	r4, 4
    5ef0:	95 c0       	rjmp	.+298    	; 0x601c <vfprintf+0x35e>
    5ef2:	fe 01       	movw	r30, r28
    5ef4:	ec 0d       	add	r30, r12
    5ef6:	f1 1d       	adc	r31, r1
    5ef8:	80 81       	ld	r24, Z
    5efa:	80 33       	cpi	r24, 0x30	; 48
    5efc:	09 f0       	breq	.+2      	; 0x5f00 <vfprintf+0x242>
    5efe:	87 c0       	rjmp	.+270    	; 0x600e <vfprintf+0x350>
    5f00:	24 2d       	mov	r18, r4
    5f02:	29 7e       	andi	r18, 0xE9	; 233
    5f04:	42 2e       	mov	r4, r18
    5f06:	84 2d       	mov	r24, r4
    5f08:	88 70       	andi	r24, 0x08	; 8
    5f0a:	58 2e       	mov	r5, r24
    5f0c:	43 fc       	sbrc	r4, 3
    5f0e:	95 c0       	rjmp	.+298    	; 0x603a <vfprintf+0x37c>
    5f10:	40 fe       	sbrs	r4, 0
    5f12:	8f c0       	rjmp	.+286    	; 0x6032 <vfprintf+0x374>
    5f14:	9c 2c       	mov	r9, r12
    5f16:	82 14       	cp	r8, r2
    5f18:	18 f4       	brcc	.+6      	; 0x5f20 <vfprintf+0x262>
    5f1a:	2c 0c       	add	r2, r12
    5f1c:	92 2c       	mov	r9, r2
    5f1e:	98 18       	sub	r9, r8
    5f20:	44 fe       	sbrs	r4, 4
    5f22:	91 c0       	rjmp	.+290    	; 0x6046 <vfprintf+0x388>
    5f24:	b7 01       	movw	r22, r14
    5f26:	80 e3       	ldi	r24, 0x30	; 48
    5f28:	90 e0       	ldi	r25, 0x00	; 0
    5f2a:	0e 94 4f 30 	call	0x609e	; 0x609e <fputc>
    5f2e:	42 fe       	sbrs	r4, 2
    5f30:	09 c0       	rjmp	.+18     	; 0x5f44 <vfprintf+0x286>
    5f32:	88 e7       	ldi	r24, 0x78	; 120
    5f34:	90 e0       	ldi	r25, 0x00	; 0
    5f36:	41 fe       	sbrs	r4, 1
    5f38:	02 c0       	rjmp	.+4      	; 0x5f3e <vfprintf+0x280>
    5f3a:	88 e5       	ldi	r24, 0x58	; 88
    5f3c:	90 e0       	ldi	r25, 0x00	; 0
    5f3e:	b7 01       	movw	r22, r14
    5f40:	0e 94 4f 30 	call	0x609e	; 0x609e <fputc>
    5f44:	c9 14       	cp	r12, r9
    5f46:	08 f4       	brcc	.+2      	; 0x5f4a <vfprintf+0x28c>
    5f48:	8a c0       	rjmp	.+276    	; 0x605e <vfprintf+0x3a0>
    5f4a:	ca 94       	dec	r12
    5f4c:	d1 2c       	mov	r13, r1
    5f4e:	9f ef       	ldi	r25, 0xFF	; 255
    5f50:	c9 1a       	sub	r12, r25
    5f52:	d9 0a       	sbc	r13, r25
    5f54:	ca 0c       	add	r12, r10
    5f56:	db 1c       	adc	r13, r11
    5f58:	f6 01       	movw	r30, r12
    5f5a:	82 91       	ld	r24, -Z
    5f5c:	6f 01       	movw	r12, r30
    5f5e:	b7 01       	movw	r22, r14
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	0e 94 4f 30 	call	0x609e	; 0x609e <fputc>
    5f66:	ac 14       	cp	r10, r12
    5f68:	bd 04       	cpc	r11, r13
    5f6a:	b1 f7       	brne	.-20     	; 0x5f58 <vfprintf+0x29a>
    5f6c:	4f cf       	rjmp	.-354    	; 0x5e0c <vfprintf+0x14e>
    5f6e:	60 81       	ld	r22, Z
    5f70:	71 81       	ldd	r23, Z+1	; 0x01
    5f72:	07 2e       	mov	r0, r23
    5f74:	00 0c       	add	r0, r0
    5f76:	88 0b       	sbc	r24, r24
    5f78:	99 0b       	sbc	r25, r25
    5f7a:	0e 5f       	subi	r16, 0xFE	; 254
    5f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    5f7e:	92 cf       	rjmp	.-220    	; 0x5ea4 <vfprintf+0x1e6>
    5f80:	d3 2c       	mov	r13, r3
    5f82:	e8 94       	clt
    5f84:	d4 f8       	bld	r13, 4
    5f86:	2a e0       	ldi	r18, 0x0A	; 10
    5f88:	30 e0       	ldi	r19, 0x00	; 0
    5f8a:	85 37       	cpi	r24, 0x75	; 117
    5f8c:	39 f1       	breq	.+78     	; 0x5fdc <vfprintf+0x31e>
    5f8e:	23 2d       	mov	r18, r3
    5f90:	29 7f       	andi	r18, 0xF9	; 249
    5f92:	d2 2e       	mov	r13, r18
    5f94:	8f 36       	cpi	r24, 0x6F	; 111
    5f96:	01 f1       	breq	.+64     	; 0x5fd8 <vfprintf+0x31a>
    5f98:	48 f4       	brcc	.+18     	; 0x5fac <vfprintf+0x2ee>
    5f9a:	88 35       	cpi	r24, 0x58	; 88
    5f9c:	a9 f0       	breq	.+42     	; 0x5fc8 <vfprintf+0x30a>
    5f9e:	f7 01       	movw	r30, r14
    5fa0:	86 81       	ldd	r24, Z+6	; 0x06
    5fa2:	97 81       	ldd	r25, Z+7	; 0x07
    5fa4:	2b 96       	adiw	r28, 0x0b	; 11
    5fa6:	e2 e1       	ldi	r30, 0x12	; 18
    5fa8:	0c 94 28 32 	jmp	0x6450	; 0x6450 <__epilogue_restores__>
    5fac:	80 37       	cpi	r24, 0x70	; 112
    5fae:	49 f0       	breq	.+18     	; 0x5fc2 <vfprintf+0x304>
    5fb0:	88 37       	cpi	r24, 0x78	; 120
    5fb2:	a9 f7       	brne	.-22     	; 0x5f9e <vfprintf+0x2e0>
    5fb4:	d4 fe       	sbrs	r13, 4
    5fb6:	02 c0       	rjmp	.+4      	; 0x5fbc <vfprintf+0x2fe>
    5fb8:	68 94       	set
    5fba:	d2 f8       	bld	r13, 2
    5fbc:	20 e1       	ldi	r18, 0x10	; 16
    5fbe:	30 e0       	ldi	r19, 0x00	; 0
    5fc0:	0d c0       	rjmp	.+26     	; 0x5fdc <vfprintf+0x31e>
    5fc2:	68 94       	set
    5fc4:	d4 f8       	bld	r13, 4
    5fc6:	f6 cf       	rjmp	.-20     	; 0x5fb4 <vfprintf+0x2f6>
    5fc8:	34 fe       	sbrs	r3, 4
    5fca:	03 c0       	rjmp	.+6      	; 0x5fd2 <vfprintf+0x314>
    5fcc:	82 2f       	mov	r24, r18
    5fce:	86 60       	ori	r24, 0x06	; 6
    5fd0:	d8 2e       	mov	r13, r24
    5fd2:	20 e1       	ldi	r18, 0x10	; 16
    5fd4:	32 e0       	ldi	r19, 0x02	; 2
    5fd6:	02 c0       	rjmp	.+4      	; 0x5fdc <vfprintf+0x31e>
    5fd8:	28 e0       	ldi	r18, 0x08	; 8
    5fda:	30 e0       	ldi	r19, 0x00	; 0
    5fdc:	f8 01       	movw	r30, r16
    5fde:	d7 fe       	sbrs	r13, 7
    5fe0:	0f c0       	rjmp	.+30     	; 0x6000 <vfprintf+0x342>
    5fe2:	60 81       	ld	r22, Z
    5fe4:	71 81       	ldd	r23, Z+1	; 0x01
    5fe6:	82 81       	ldd	r24, Z+2	; 0x02
    5fe8:	93 81       	ldd	r25, Z+3	; 0x03
    5fea:	0c 5f       	subi	r16, 0xFC	; 252
    5fec:	1f 4f       	sbci	r17, 0xFF	; 255
    5fee:	a5 01       	movw	r20, r10
    5ff0:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__ultoa_invert>
    5ff4:	c8 2e       	mov	r12, r24
    5ff6:	ca 18       	sub	r12, r10
    5ff8:	3d 2c       	mov	r3, r13
    5ffa:	e8 94       	clt
    5ffc:	37 f8       	bld	r3, 7
    5ffe:	67 cf       	rjmp	.-306    	; 0x5ece <vfprintf+0x210>
    6000:	60 81       	ld	r22, Z
    6002:	71 81       	ldd	r23, Z+1	; 0x01
    6004:	90 e0       	ldi	r25, 0x00	; 0
    6006:	80 e0       	ldi	r24, 0x00	; 0
    6008:	0e 5f       	subi	r16, 0xFE	; 254
    600a:	1f 4f       	sbci	r17, 0xFF	; 255
    600c:	f0 cf       	rjmp	.-32     	; 0x5fee <vfprintf+0x330>
    600e:	42 fc       	sbrc	r4, 2
    6010:	02 c0       	rjmp	.+4      	; 0x6016 <vfprintf+0x358>
    6012:	83 94       	inc	r8
    6014:	78 cf       	rjmp	.-272    	; 0x5f06 <vfprintf+0x248>
    6016:	83 94       	inc	r8
    6018:	83 94       	inc	r8
    601a:	75 cf       	rjmp	.-278    	; 0x5f06 <vfprintf+0x248>
    601c:	84 2d       	mov	r24, r4
    601e:	86 78       	andi	r24, 0x86	; 134
    6020:	09 f4       	brne	.+2      	; 0x6024 <vfprintf+0x366>
    6022:	71 cf       	rjmp	.-286    	; 0x5f06 <vfprintf+0x248>
    6024:	f6 cf       	rjmp	.-20     	; 0x6012 <vfprintf+0x354>
    6026:	b7 01       	movw	r22, r14
    6028:	80 e2       	ldi	r24, 0x20	; 32
    602a:	90 e0       	ldi	r25, 0x00	; 0
    602c:	0e 94 4f 30 	call	0x609e	; 0x609e <fputc>
    6030:	83 94       	inc	r8
    6032:	82 14       	cp	r8, r2
    6034:	c0 f3       	brcs	.-16     	; 0x6026 <vfprintf+0x368>
    6036:	51 2c       	mov	r5, r1
    6038:	73 cf       	rjmp	.-282    	; 0x5f20 <vfprintf+0x262>
    603a:	52 2c       	mov	r5, r2
    603c:	58 18       	sub	r5, r8
    603e:	82 14       	cp	r8, r2
    6040:	08 f4       	brcc	.+2      	; 0x6044 <vfprintf+0x386>
    6042:	6e cf       	rjmp	.-292    	; 0x5f20 <vfprintf+0x262>
    6044:	f8 cf       	rjmp	.-16     	; 0x6036 <vfprintf+0x378>
    6046:	84 2d       	mov	r24, r4
    6048:	86 78       	andi	r24, 0x86	; 134
    604a:	09 f4       	brne	.+2      	; 0x604e <vfprintf+0x390>
    604c:	7b cf       	rjmp	.-266    	; 0x5f44 <vfprintf+0x286>
    604e:	8b e2       	ldi	r24, 0x2B	; 43
    6050:	41 fe       	sbrs	r4, 1
    6052:	80 e2       	ldi	r24, 0x20	; 32
    6054:	47 fc       	sbrc	r4, 7
    6056:	8d e2       	ldi	r24, 0x2D	; 45
    6058:	b7 01       	movw	r22, r14
    605a:	90 e0       	ldi	r25, 0x00	; 0
    605c:	71 cf       	rjmp	.-286    	; 0x5f40 <vfprintf+0x282>
    605e:	b7 01       	movw	r22, r14
    6060:	80 e3       	ldi	r24, 0x30	; 48
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	0e 94 4f 30 	call	0x609e	; 0x609e <fputc>
    6068:	9a 94       	dec	r9
    606a:	6c cf       	rjmp	.-296    	; 0x5f44 <vfprintf+0x286>
    606c:	8f ef       	ldi	r24, 0xFF	; 255
    606e:	9f ef       	ldi	r25, 0xFF	; 255
    6070:	99 cf       	rjmp	.-206    	; 0x5fa4 <vfprintf+0x2e6>

00006072 <strnlen_P>:
strnlen_P():
    6072:	fc 01       	movw	r30, r24
    6074:	05 90       	lpm	r0, Z+
    6076:	61 50       	subi	r22, 0x01	; 1
    6078:	70 40       	sbci	r23, 0x00	; 0
    607a:	01 10       	cpse	r0, r1
    607c:	d8 f7       	brcc	.-10     	; 0x6074 <strnlen_P+0x2>
    607e:	80 95       	com	r24
    6080:	90 95       	com	r25
    6082:	8e 0f       	add	r24, r30
    6084:	9f 1f       	adc	r25, r31
    6086:	08 95       	ret

00006088 <strnlen>:
strnlen():
    6088:	fc 01       	movw	r30, r24
    608a:	61 50       	subi	r22, 0x01	; 1
    608c:	70 40       	sbci	r23, 0x00	; 0
    608e:	01 90       	ld	r0, Z+
    6090:	01 10       	cpse	r0, r1
    6092:	d8 f7       	brcc	.-10     	; 0x608a <strnlen+0x2>
    6094:	80 95       	com	r24
    6096:	90 95       	com	r25
    6098:	8e 0f       	add	r24, r30
    609a:	9f 1f       	adc	r25, r31
    609c:	08 95       	ret

0000609e <fputc>:
fputc():
    609e:	0f 93       	push	r16
    60a0:	1f 93       	push	r17
    60a2:	cf 93       	push	r28
    60a4:	df 93       	push	r29
    60a6:	18 2f       	mov	r17, r24
    60a8:	09 2f       	mov	r16, r25
    60aa:	eb 01       	movw	r28, r22
    60ac:	8b 81       	ldd	r24, Y+3	; 0x03
    60ae:	81 fd       	sbrc	r24, 1
    60b0:	09 c0       	rjmp	.+18     	; 0x60c4 <fputc+0x26>
    60b2:	1f ef       	ldi	r17, 0xFF	; 255
    60b4:	0f ef       	ldi	r16, 0xFF	; 255
    60b6:	81 2f       	mov	r24, r17
    60b8:	90 2f       	mov	r25, r16
    60ba:	df 91       	pop	r29
    60bc:	cf 91       	pop	r28
    60be:	1f 91       	pop	r17
    60c0:	0f 91       	pop	r16
    60c2:	08 95       	ret
    60c4:	82 ff       	sbrs	r24, 2
    60c6:	14 c0       	rjmp	.+40     	; 0x60f0 <fputc+0x52>
    60c8:	2e 81       	ldd	r18, Y+6	; 0x06
    60ca:	3f 81       	ldd	r19, Y+7	; 0x07
    60cc:	8c 81       	ldd	r24, Y+4	; 0x04
    60ce:	9d 81       	ldd	r25, Y+5	; 0x05
    60d0:	28 17       	cp	r18, r24
    60d2:	39 07       	cpc	r19, r25
    60d4:	3c f4       	brge	.+14     	; 0x60e4 <fputc+0x46>
    60d6:	e8 81       	ld	r30, Y
    60d8:	f9 81       	ldd	r31, Y+1	; 0x01
    60da:	cf 01       	movw	r24, r30
    60dc:	01 96       	adiw	r24, 0x01	; 1
    60de:	99 83       	std	Y+1, r25	; 0x01
    60e0:	88 83       	st	Y, r24
    60e2:	10 83       	st	Z, r17
    60e4:	8e 81       	ldd	r24, Y+6	; 0x06
    60e6:	9f 81       	ldd	r25, Y+7	; 0x07
    60e8:	01 96       	adiw	r24, 0x01	; 1
    60ea:	9f 83       	std	Y+7, r25	; 0x07
    60ec:	8e 83       	std	Y+6, r24	; 0x06
    60ee:	e3 cf       	rjmp	.-58     	; 0x60b6 <fputc+0x18>
    60f0:	e8 85       	ldd	r30, Y+8	; 0x08
    60f2:	f9 85       	ldd	r31, Y+9	; 0x09
    60f4:	81 2f       	mov	r24, r17
    60f6:	09 95       	icall
    60f8:	89 2b       	or	r24, r25
    60fa:	a1 f3       	breq	.-24     	; 0x60e4 <fputc+0x46>
    60fc:	da cf       	rjmp	.-76     	; 0x60b2 <fputc+0x14>

000060fe <__ultoa_invert>:
__ultoa_invert():
    60fe:	fa 01       	movw	r30, r20
    6100:	aa 27       	eor	r26, r26
    6102:	28 30       	cpi	r18, 0x08	; 8
    6104:	51 f1       	breq	.+84     	; 0x615a <__ultoa_invert+0x5c>
    6106:	20 31       	cpi	r18, 0x10	; 16
    6108:	81 f1       	breq	.+96     	; 0x616a <__ultoa_invert+0x6c>
    610a:	e8 94       	clt
    610c:	6f 93       	push	r22
    610e:	6e 7f       	andi	r22, 0xFE	; 254
    6110:	6e 5f       	subi	r22, 0xFE	; 254
    6112:	7f 4f       	sbci	r23, 0xFF	; 255
    6114:	8f 4f       	sbci	r24, 0xFF	; 255
    6116:	9f 4f       	sbci	r25, 0xFF	; 255
    6118:	af 4f       	sbci	r26, 0xFF	; 255
    611a:	b1 e0       	ldi	r27, 0x01	; 1
    611c:	3e d0       	rcall	.+124    	; 0x619a <__ultoa_invert+0x9c>
    611e:	b4 e0       	ldi	r27, 0x04	; 4
    6120:	3c d0       	rcall	.+120    	; 0x619a <__ultoa_invert+0x9c>
    6122:	67 0f       	add	r22, r23
    6124:	78 1f       	adc	r23, r24
    6126:	89 1f       	adc	r24, r25
    6128:	9a 1f       	adc	r25, r26
    612a:	a1 1d       	adc	r26, r1
    612c:	68 0f       	add	r22, r24
    612e:	79 1f       	adc	r23, r25
    6130:	8a 1f       	adc	r24, r26
    6132:	91 1d       	adc	r25, r1
    6134:	a1 1d       	adc	r26, r1
    6136:	6a 0f       	add	r22, r26
    6138:	71 1d       	adc	r23, r1
    613a:	81 1d       	adc	r24, r1
    613c:	91 1d       	adc	r25, r1
    613e:	a1 1d       	adc	r26, r1
    6140:	20 d0       	rcall	.+64     	; 0x6182 <__ultoa_invert+0x84>
    6142:	09 f4       	brne	.+2      	; 0x6146 <__ultoa_invert+0x48>
    6144:	68 94       	set
    6146:	3f 91       	pop	r19
    6148:	2a e0       	ldi	r18, 0x0A	; 10
    614a:	26 9f       	mul	r18, r22
    614c:	11 24       	eor	r1, r1
    614e:	30 19       	sub	r19, r0
    6150:	30 5d       	subi	r19, 0xD0	; 208
    6152:	31 93       	st	Z+, r19
    6154:	de f6       	brtc	.-74     	; 0x610c <__ultoa_invert+0xe>
    6156:	cf 01       	movw	r24, r30
    6158:	08 95       	ret
    615a:	46 2f       	mov	r20, r22
    615c:	47 70       	andi	r20, 0x07	; 7
    615e:	40 5d       	subi	r20, 0xD0	; 208
    6160:	41 93       	st	Z+, r20
    6162:	b3 e0       	ldi	r27, 0x03	; 3
    6164:	0f d0       	rcall	.+30     	; 0x6184 <__ultoa_invert+0x86>
    6166:	c9 f7       	brne	.-14     	; 0x615a <__ultoa_invert+0x5c>
    6168:	f6 cf       	rjmp	.-20     	; 0x6156 <__ultoa_invert+0x58>
    616a:	46 2f       	mov	r20, r22
    616c:	4f 70       	andi	r20, 0x0F	; 15
    616e:	40 5d       	subi	r20, 0xD0	; 208
    6170:	4a 33       	cpi	r20, 0x3A	; 58
    6172:	18 f0       	brcs	.+6      	; 0x617a <__ultoa_invert+0x7c>
    6174:	49 5d       	subi	r20, 0xD9	; 217
    6176:	31 fd       	sbrc	r19, 1
    6178:	40 52       	subi	r20, 0x20	; 32
    617a:	41 93       	st	Z+, r20
    617c:	02 d0       	rcall	.+4      	; 0x6182 <__ultoa_invert+0x84>
    617e:	a9 f7       	brne	.-22     	; 0x616a <__ultoa_invert+0x6c>
    6180:	ea cf       	rjmp	.-44     	; 0x6156 <__ultoa_invert+0x58>
    6182:	b4 e0       	ldi	r27, 0x04	; 4
    6184:	a6 95       	lsr	r26
    6186:	97 95       	ror	r25
    6188:	87 95       	ror	r24
    618a:	77 95       	ror	r23
    618c:	67 95       	ror	r22
    618e:	ba 95       	dec	r27
    6190:	c9 f7       	brne	.-14     	; 0x6184 <__ultoa_invert+0x86>
    6192:	00 97       	sbiw	r24, 0x00	; 0
    6194:	61 05       	cpc	r22, r1
    6196:	71 05       	cpc	r23, r1
    6198:	08 95       	ret
    619a:	9b 01       	movw	r18, r22
    619c:	ac 01       	movw	r20, r24
    619e:	0a 2e       	mov	r0, r26
    61a0:	06 94       	lsr	r0
    61a2:	57 95       	ror	r21
    61a4:	47 95       	ror	r20
    61a6:	37 95       	ror	r19
    61a8:	27 95       	ror	r18
    61aa:	ba 95       	dec	r27
    61ac:	c9 f7       	brne	.-14     	; 0x61a0 <__ultoa_invert+0xa2>
    61ae:	62 0f       	add	r22, r18
    61b0:	73 1f       	adc	r23, r19
    61b2:	84 1f       	adc	r24, r20
    61b4:	95 1f       	adc	r25, r21
    61b6:	a0 1d       	adc	r26, r0
    61b8:	08 95       	ret

000061ba <__cmpsf2>:
__cmpsf2():
    61ba:	0e 94 1f 31 	call	0x623e	; 0x623e <__fp_cmp>
    61be:	08 f4       	brcc	.+2      	; 0x61c2 <__cmpsf2+0x8>
    61c0:	81 e0       	ldi	r24, 0x01	; 1
    61c2:	08 95       	ret

000061c4 <__floatunsisf>:
__floatunsisf():
    61c4:	e8 94       	clt
    61c6:	09 c0       	rjmp	.+18     	; 0x61da <__floatsisf+0x12>

000061c8 <__floatsisf>:
    61c8:	97 fb       	bst	r25, 7
    61ca:	3e f4       	brtc	.+14     	; 0x61da <__floatsisf+0x12>
    61cc:	90 95       	com	r25
    61ce:	80 95       	com	r24
    61d0:	70 95       	com	r23
    61d2:	61 95       	neg	r22
    61d4:	7f 4f       	sbci	r23, 0xFF	; 255
    61d6:	8f 4f       	sbci	r24, 0xFF	; 255
    61d8:	9f 4f       	sbci	r25, 0xFF	; 255
    61da:	99 23       	and	r25, r25
    61dc:	a9 f0       	breq	.+42     	; 0x6208 <__floatsisf+0x40>
    61de:	f9 2f       	mov	r31, r25
    61e0:	96 e9       	ldi	r25, 0x96	; 150
    61e2:	bb 27       	eor	r27, r27
    61e4:	93 95       	inc	r25
    61e6:	f6 95       	lsr	r31
    61e8:	87 95       	ror	r24
    61ea:	77 95       	ror	r23
    61ec:	67 95       	ror	r22
    61ee:	b7 95       	ror	r27
    61f0:	f1 11       	cpse	r31, r1
    61f2:	f8 cf       	rjmp	.-16     	; 0x61e4 <__floatsisf+0x1c>
    61f4:	fa f4       	brpl	.+62     	; 0x6234 <__floatsisf+0x6c>
    61f6:	bb 0f       	add	r27, r27
    61f8:	11 f4       	brne	.+4      	; 0x61fe <__floatsisf+0x36>
    61fa:	60 ff       	sbrs	r22, 0
    61fc:	1b c0       	rjmp	.+54     	; 0x6234 <__floatsisf+0x6c>
    61fe:	6f 5f       	subi	r22, 0xFF	; 255
    6200:	7f 4f       	sbci	r23, 0xFF	; 255
    6202:	8f 4f       	sbci	r24, 0xFF	; 255
    6204:	9f 4f       	sbci	r25, 0xFF	; 255
    6206:	16 c0       	rjmp	.+44     	; 0x6234 <__floatsisf+0x6c>
    6208:	88 23       	and	r24, r24
    620a:	11 f0       	breq	.+4      	; 0x6210 <__floatsisf+0x48>
    620c:	96 e9       	ldi	r25, 0x96	; 150
    620e:	11 c0       	rjmp	.+34     	; 0x6232 <__floatsisf+0x6a>
    6210:	77 23       	and	r23, r23
    6212:	21 f0       	breq	.+8      	; 0x621c <__floatsisf+0x54>
    6214:	9e e8       	ldi	r25, 0x8E	; 142
    6216:	87 2f       	mov	r24, r23
    6218:	76 2f       	mov	r23, r22
    621a:	05 c0       	rjmp	.+10     	; 0x6226 <__floatsisf+0x5e>
    621c:	66 23       	and	r22, r22
    621e:	71 f0       	breq	.+28     	; 0x623c <__floatsisf+0x74>
    6220:	96 e8       	ldi	r25, 0x86	; 134
    6222:	86 2f       	mov	r24, r22
    6224:	70 e0       	ldi	r23, 0x00	; 0
    6226:	60 e0       	ldi	r22, 0x00	; 0
    6228:	2a f0       	brmi	.+10     	; 0x6234 <__floatsisf+0x6c>
    622a:	9a 95       	dec	r25
    622c:	66 0f       	add	r22, r22
    622e:	77 1f       	adc	r23, r23
    6230:	88 1f       	adc	r24, r24
    6232:	da f7       	brpl	.-10     	; 0x622a <__floatsisf+0x62>
    6234:	88 0f       	add	r24, r24
    6236:	96 95       	lsr	r25
    6238:	87 95       	ror	r24
    623a:	97 f9       	bld	r25, 7
    623c:	08 95       	ret

0000623e <__fp_cmp>:
__fp_cmp():
    623e:	99 0f       	add	r25, r25
    6240:	00 08       	sbc	r0, r0
    6242:	55 0f       	add	r21, r21
    6244:	aa 0b       	sbc	r26, r26
    6246:	e0 e8       	ldi	r30, 0x80	; 128
    6248:	fe ef       	ldi	r31, 0xFE	; 254
    624a:	16 16       	cp	r1, r22
    624c:	17 06       	cpc	r1, r23
    624e:	e8 07       	cpc	r30, r24
    6250:	f9 07       	cpc	r31, r25
    6252:	c0 f0       	brcs	.+48     	; 0x6284 <__fp_cmp+0x46>
    6254:	12 16       	cp	r1, r18
    6256:	13 06       	cpc	r1, r19
    6258:	e4 07       	cpc	r30, r20
    625a:	f5 07       	cpc	r31, r21
    625c:	98 f0       	brcs	.+38     	; 0x6284 <__fp_cmp+0x46>
    625e:	62 1b       	sub	r22, r18
    6260:	73 0b       	sbc	r23, r19
    6262:	84 0b       	sbc	r24, r20
    6264:	95 0b       	sbc	r25, r21
    6266:	39 f4       	brne	.+14     	; 0x6276 <__fp_cmp+0x38>
    6268:	0a 26       	eor	r0, r26
    626a:	61 f0       	breq	.+24     	; 0x6284 <__fp_cmp+0x46>
    626c:	23 2b       	or	r18, r19
    626e:	24 2b       	or	r18, r20
    6270:	25 2b       	or	r18, r21
    6272:	21 f4       	brne	.+8      	; 0x627c <__fp_cmp+0x3e>
    6274:	08 95       	ret
    6276:	0a 26       	eor	r0, r26
    6278:	09 f4       	brne	.+2      	; 0x627c <__fp_cmp+0x3e>
    627a:	a1 40       	sbci	r26, 0x01	; 1
    627c:	a6 95       	lsr	r26
    627e:	8f ef       	ldi	r24, 0xFF	; 255
    6280:	81 1d       	adc	r24, r1
    6282:	81 1d       	adc	r24, r1
    6284:	08 95       	ret

00006286 <__mulsf3>:
__mulsf3():
    6286:	0e 94 56 31 	call	0x62ac	; 0x62ac <__mulsf3x>
    628a:	0c 94 c7 31 	jmp	0x638e	; 0x638e <__fp_round>
    628e:	0e 94 b9 31 	call	0x6372	; 0x6372 <__fp_pscA>
    6292:	38 f0       	brcs	.+14     	; 0x62a2 <__mulsf3+0x1c>
    6294:	0e 94 c0 31 	call	0x6380	; 0x6380 <__fp_pscB>
    6298:	20 f0       	brcs	.+8      	; 0x62a2 <__mulsf3+0x1c>
    629a:	95 23       	and	r25, r21
    629c:	11 f0       	breq	.+4      	; 0x62a2 <__mulsf3+0x1c>
    629e:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__fp_inf>
    62a2:	0c 94 b6 31 	jmp	0x636c	; 0x636c <__fp_nan>
    62a6:	11 24       	eor	r1, r1
    62a8:	0c 94 fb 31 	jmp	0x63f6	; 0x63f6 <__fp_szero>

000062ac <__mulsf3x>:
__mulsf3x():
    62ac:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <__fp_split3>
    62b0:	70 f3       	brcs	.-36     	; 0x628e <__mulsf3+0x8>

000062b2 <__mulsf3_pse>:
    62b2:	95 9f       	mul	r25, r21
    62b4:	c1 f3       	breq	.-16     	; 0x62a6 <__mulsf3+0x20>
    62b6:	95 0f       	add	r25, r21
    62b8:	50 e0       	ldi	r21, 0x00	; 0
    62ba:	55 1f       	adc	r21, r21
    62bc:	62 9f       	mul	r22, r18
    62be:	f0 01       	movw	r30, r0
    62c0:	72 9f       	mul	r23, r18
    62c2:	bb 27       	eor	r27, r27
    62c4:	f0 0d       	add	r31, r0
    62c6:	b1 1d       	adc	r27, r1
    62c8:	63 9f       	mul	r22, r19
    62ca:	aa 27       	eor	r26, r26
    62cc:	f0 0d       	add	r31, r0
    62ce:	b1 1d       	adc	r27, r1
    62d0:	aa 1f       	adc	r26, r26
    62d2:	64 9f       	mul	r22, r20
    62d4:	66 27       	eor	r22, r22
    62d6:	b0 0d       	add	r27, r0
    62d8:	a1 1d       	adc	r26, r1
    62da:	66 1f       	adc	r22, r22
    62dc:	82 9f       	mul	r24, r18
    62de:	22 27       	eor	r18, r18
    62e0:	b0 0d       	add	r27, r0
    62e2:	a1 1d       	adc	r26, r1
    62e4:	62 1f       	adc	r22, r18
    62e6:	73 9f       	mul	r23, r19
    62e8:	b0 0d       	add	r27, r0
    62ea:	a1 1d       	adc	r26, r1
    62ec:	62 1f       	adc	r22, r18
    62ee:	83 9f       	mul	r24, r19
    62f0:	a0 0d       	add	r26, r0
    62f2:	61 1d       	adc	r22, r1
    62f4:	22 1f       	adc	r18, r18
    62f6:	74 9f       	mul	r23, r20
    62f8:	33 27       	eor	r19, r19
    62fa:	a0 0d       	add	r26, r0
    62fc:	61 1d       	adc	r22, r1
    62fe:	23 1f       	adc	r18, r19
    6300:	84 9f       	mul	r24, r20
    6302:	60 0d       	add	r22, r0
    6304:	21 1d       	adc	r18, r1
    6306:	82 2f       	mov	r24, r18
    6308:	76 2f       	mov	r23, r22
    630a:	6a 2f       	mov	r22, r26
    630c:	11 24       	eor	r1, r1
    630e:	9f 57       	subi	r25, 0x7F	; 127
    6310:	50 40       	sbci	r21, 0x00	; 0
    6312:	9a f0       	brmi	.+38     	; 0x633a <__mulsf3_pse+0x88>
    6314:	f1 f0       	breq	.+60     	; 0x6352 <__mulsf3_pse+0xa0>
    6316:	88 23       	and	r24, r24
    6318:	4a f0       	brmi	.+18     	; 0x632c <__mulsf3_pse+0x7a>
    631a:	ee 0f       	add	r30, r30
    631c:	ff 1f       	adc	r31, r31
    631e:	bb 1f       	adc	r27, r27
    6320:	66 1f       	adc	r22, r22
    6322:	77 1f       	adc	r23, r23
    6324:	88 1f       	adc	r24, r24
    6326:	91 50       	subi	r25, 0x01	; 1
    6328:	50 40       	sbci	r21, 0x00	; 0
    632a:	a9 f7       	brne	.-22     	; 0x6316 <__mulsf3_pse+0x64>
    632c:	9e 3f       	cpi	r25, 0xFE	; 254
    632e:	51 05       	cpc	r21, r1
    6330:	80 f0       	brcs	.+32     	; 0x6352 <__mulsf3_pse+0xa0>
    6332:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__fp_inf>
    6336:	0c 94 fb 31 	jmp	0x63f6	; 0x63f6 <__fp_szero>
    633a:	5f 3f       	cpi	r21, 0xFF	; 255
    633c:	e4 f3       	brlt	.-8      	; 0x6336 <__mulsf3_pse+0x84>
    633e:	98 3e       	cpi	r25, 0xE8	; 232
    6340:	d4 f3       	brlt	.-12     	; 0x6336 <__mulsf3_pse+0x84>
    6342:	86 95       	lsr	r24
    6344:	77 95       	ror	r23
    6346:	67 95       	ror	r22
    6348:	b7 95       	ror	r27
    634a:	f7 95       	ror	r31
    634c:	e7 95       	ror	r30
    634e:	9f 5f       	subi	r25, 0xFF	; 255
    6350:	c1 f7       	brne	.-16     	; 0x6342 <__mulsf3_pse+0x90>
    6352:	fe 2b       	or	r31, r30
    6354:	88 0f       	add	r24, r24
    6356:	91 1d       	adc	r25, r1
    6358:	96 95       	lsr	r25
    635a:	87 95       	ror	r24
    635c:	97 f9       	bld	r25, 7
    635e:	08 95       	ret

00006360 <__fp_inf>:
    6360:	97 f9       	bld	r25, 7
    6362:	9f 67       	ori	r25, 0x7F	; 127
    6364:	80 e8       	ldi	r24, 0x80	; 128
    6366:	70 e0       	ldi	r23, 0x00	; 0
    6368:	60 e0       	ldi	r22, 0x00	; 0
    636a:	08 95       	ret

0000636c <__fp_nan>:
    636c:	9f ef       	ldi	r25, 0xFF	; 255
    636e:	80 ec       	ldi	r24, 0xC0	; 192
    6370:	08 95       	ret

00006372 <__fp_pscA>:
    6372:	00 24       	eor	r0, r0
    6374:	0a 94       	dec	r0
    6376:	16 16       	cp	r1, r22
    6378:	17 06       	cpc	r1, r23
    637a:	18 06       	cpc	r1, r24
    637c:	09 06       	cpc	r0, r25
__fp_pscA():
    637e:	08 95       	ret

00006380 <__fp_pscB>:
__fp_pscB():
    6380:	00 24       	eor	r0, r0
    6382:	0a 94       	dec	r0
    6384:	12 16       	cp	r1, r18
    6386:	13 06       	cpc	r1, r19
    6388:	14 06       	cpc	r1, r20
    638a:	05 06       	cpc	r0, r21
    638c:	08 95       	ret

0000638e <__fp_round>:
__fp_round():
    638e:	09 2e       	mov	r0, r25
    6390:	03 94       	inc	r0
    6392:	00 0c       	add	r0, r0
    6394:	11 f4       	brne	.+4      	; 0x639a <__fp_round+0xc>
    6396:	88 23       	and	r24, r24
    6398:	52 f0       	brmi	.+20     	; 0x63ae <__fp_round+0x20>
    639a:	bb 0f       	add	r27, r27
    639c:	40 f4       	brcc	.+16     	; 0x63ae <__fp_round+0x20>
    639e:	bf 2b       	or	r27, r31
    63a0:	11 f4       	brne	.+4      	; 0x63a6 <__fp_round+0x18>
    63a2:	60 ff       	sbrs	r22, 0
    63a4:	04 c0       	rjmp	.+8      	; 0x63ae <__fp_round+0x20>
    63a6:	6f 5f       	subi	r22, 0xFF	; 255
    63a8:	7f 4f       	sbci	r23, 0xFF	; 255
    63aa:	8f 4f       	sbci	r24, 0xFF	; 255
    63ac:	9f 4f       	sbci	r25, 0xFF	; 255
    63ae:	08 95       	ret

000063b0 <__fp_split3>:
__fp_split3():
    63b0:	57 fd       	sbrc	r21, 7
    63b2:	90 58       	subi	r25, 0x80	; 128
    63b4:	44 0f       	add	r20, r20
    63b6:	55 1f       	adc	r21, r21
    63b8:	59 f0       	breq	.+22     	; 0x63d0 <__fp_splitA+0x10>
    63ba:	5f 3f       	cpi	r21, 0xFF	; 255
    63bc:	71 f0       	breq	.+28     	; 0x63da <__fp_splitA+0x1a>
    63be:	47 95       	ror	r20

000063c0 <__fp_splitA>:
    63c0:	88 0f       	add	r24, r24
    63c2:	97 fb       	bst	r25, 7
    63c4:	99 1f       	adc	r25, r25
    63c6:	61 f0       	breq	.+24     	; 0x63e0 <__fp_splitA+0x20>
    63c8:	9f 3f       	cpi	r25, 0xFF	; 255
    63ca:	79 f0       	breq	.+30     	; 0x63ea <__fp_splitA+0x2a>
    63cc:	87 95       	ror	r24
    63ce:	08 95       	ret
    63d0:	12 16       	cp	r1, r18
    63d2:	13 06       	cpc	r1, r19
    63d4:	14 06       	cpc	r1, r20
    63d6:	55 1f       	adc	r21, r21
    63d8:	f2 cf       	rjmp	.-28     	; 0x63be <__fp_split3+0xe>
    63da:	46 95       	lsr	r20
    63dc:	f1 df       	rcall	.-30     	; 0x63c0 <__fp_splitA>
    63de:	08 c0       	rjmp	.+16     	; 0x63f0 <__fp_splitA+0x30>
    63e0:	16 16       	cp	r1, r22
    63e2:	17 06       	cpc	r1, r23
    63e4:	18 06       	cpc	r1, r24
    63e6:	99 1f       	adc	r25, r25
    63e8:	f1 cf       	rjmp	.-30     	; 0x63cc <__fp_splitA+0xc>
    63ea:	86 95       	lsr	r24
    63ec:	71 05       	cpc	r23, r1
    63ee:	61 05       	cpc	r22, r1
    63f0:	08 94       	sec
    63f2:	08 95       	ret

000063f4 <__fp_zero>:
__fp_zero():
    63f4:	e8 94       	clt

000063f6 <__fp_szero>:
    63f6:	bb 27       	eor	r27, r27
    63f8:	66 27       	eor	r22, r22
    63fa:	77 27       	eor	r23, r23
    63fc:	cb 01       	movw	r24, r22
    63fe:	97 f9       	bld	r25, 7
    6400:	08 95       	ret

00006402 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    6402:	0e 94 43 32 	call	0x6486	; 0x6486 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    6406:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    6408:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    640a:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    640c:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    640e:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    6410:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    6412:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    6414:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    6416:	08 95       	ret

00006418 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    6418:	2f 92       	push	r2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    641a:	3f 92       	push	r3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    641c:	4f 92       	push	r4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    641e:	5f 92       	push	r5
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    6420:	6f 92       	push	r6
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    6422:	7f 92       	push	r7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    6424:	8f 92       	push	r8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    6426:	9f 92       	push	r9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    6428:	af 92       	push	r10
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    642a:	bf 92       	push	r11
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    642c:	cf 92       	push	r12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    642e:	df 92       	push	r13
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    6430:	ef 92       	push	r14
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    6432:	ff 92       	push	r15
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    6434:	0f 93       	push	r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    6436:	1f 93       	push	r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    6438:	cf 93       	push	r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    643a:	df 93       	push	r29
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    643c:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    643e:	de b7       	in	r29, 0x3e	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    6440:	ca 1b       	sub	r28, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    6442:	db 0b       	sbc	r29, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    6444:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    6446:	f8 94       	cli
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    6448:	de bf       	out	0x3e, r29	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    644a:	0f be       	out	0x3f, r0	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    644c:	cd bf       	out	0x3d, r28	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    644e:	09 94       	ijmp

00006450 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    6450:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    6452:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    6454:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    6456:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    6458:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    645a:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    645c:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    645e:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    6460:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    6462:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    6464:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    6466:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    6468:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    646a:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    646c:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    646e:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    6470:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    6472:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    6474:	ce 0f       	add	r28, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    6476:	d1 1d       	adc	r29, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    6478:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    647a:	f8 94       	cli
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    647c:	de bf       	out	0x3e, r29	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    647e:	0f be       	out	0x3f, r0	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    6480:	cd bf       	out	0x3d, r28	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    6482:	ed 01       	movw	r28, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    6484:	08 95       	ret

00006486 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    6486:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    6488:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    648a:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    648c:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    648e:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    6490:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    6492:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    6494:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    6496:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    6498:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    649a:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    649c:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    649e:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    64a0:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    64a2:	08 95       	ret

000064a4 <__subsf3>:
__subsf3():
    64a4:	50 58       	subi	r21, 0x80	; 128

000064a6 <__addsf3>:
    64a6:	bb 27       	eor	r27, r27
    64a8:	aa 27       	eor	r26, r26
    64aa:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <__addsf3x>
    64ae:	0c 94 c7 31 	jmp	0x638e	; 0x638e <__fp_round>
__addsf3():
    64b2:	0e 94 b9 31 	call	0x6372	; 0x6372 <__fp_pscA>
    64b6:	38 f0       	brcs	.+14     	; 0x64c6 <__addsf3+0x20>
    64b8:	0e 94 c0 31 	call	0x6380	; 0x6380 <__fp_pscB>
    64bc:	20 f0       	brcs	.+8      	; 0x64c6 <__addsf3+0x20>
    64be:	39 f4       	brne	.+14     	; 0x64ce <__addsf3+0x28>
    64c0:	9f 3f       	cpi	r25, 0xFF	; 255
    64c2:	19 f4       	brne	.+6      	; 0x64ca <__addsf3+0x24>
    64c4:	26 f4       	brtc	.+8      	; 0x64ce <__addsf3+0x28>
    64c6:	0c 94 b6 31 	jmp	0x636c	; 0x636c <__fp_nan>
    64ca:	0e f4       	brtc	.+2      	; 0x64ce <__addsf3+0x28>
    64cc:	e0 95       	com	r30
    64ce:	e7 fb       	bst	r30, 7
    64d0:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__fp_inf>

000064d4 <__addsf3x>:
__addsf3x():
    64d4:	e9 2f       	mov	r30, r25
    64d6:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <__fp_split3>
    64da:	58 f3       	brcs	.-42     	; 0x64b2 <__addsf3+0xc>
    64dc:	ba 17       	cp	r27, r26
    64de:	62 07       	cpc	r22, r18
    64e0:	73 07       	cpc	r23, r19
    64e2:	84 07       	cpc	r24, r20
    64e4:	95 07       	cpc	r25, r21
    64e6:	20 f0       	brcs	.+8      	; 0x64f0 <__addsf3x+0x1c>
    64e8:	79 f4       	brne	.+30     	; 0x6508 <__addsf3x+0x34>
    64ea:	a6 f5       	brtc	.+104    	; 0x6554 <__addsf3x+0x80>
    64ec:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <__fp_zero>
    64f0:	0e f4       	brtc	.+2      	; 0x64f4 <__addsf3x+0x20>
    64f2:	e0 95       	com	r30
    64f4:	0b 2e       	mov	r0, r27
    64f6:	ba 2f       	mov	r27, r26
    64f8:	a0 2d       	mov	r26, r0
    64fa:	0b 01       	movw	r0, r22
    64fc:	b9 01       	movw	r22, r18
    64fe:	90 01       	movw	r18, r0
    6500:	0c 01       	movw	r0, r24
    6502:	ca 01       	movw	r24, r20
    6504:	a0 01       	movw	r20, r0
    6506:	11 24       	eor	r1, r1
    6508:	ff 27       	eor	r31, r31
    650a:	59 1b       	sub	r21, r25
    650c:	99 f0       	breq	.+38     	; 0x6534 <__addsf3x+0x60>
    650e:	59 3f       	cpi	r21, 0xF9	; 249
    6510:	50 f4       	brcc	.+20     	; 0x6526 <__addsf3x+0x52>
    6512:	50 3e       	cpi	r21, 0xE0	; 224
    6514:	68 f1       	brcs	.+90     	; 0x6570 <__addsf3x+0x9c>
    6516:	1a 16       	cp	r1, r26
    6518:	f0 40       	sbci	r31, 0x00	; 0
    651a:	a2 2f       	mov	r26, r18
    651c:	23 2f       	mov	r18, r19
    651e:	34 2f       	mov	r19, r20
    6520:	44 27       	eor	r20, r20
    6522:	58 5f       	subi	r21, 0xF8	; 248
    6524:	f3 cf       	rjmp	.-26     	; 0x650c <__addsf3x+0x38>
    6526:	46 95       	lsr	r20
    6528:	37 95       	ror	r19
    652a:	27 95       	ror	r18
    652c:	a7 95       	ror	r26
    652e:	f0 40       	sbci	r31, 0x00	; 0
    6530:	53 95       	inc	r21
    6532:	c9 f7       	brne	.-14     	; 0x6526 <__addsf3x+0x52>
    6534:	7e f4       	brtc	.+30     	; 0x6554 <__addsf3x+0x80>
    6536:	1f 16       	cp	r1, r31
    6538:	ba 0b       	sbc	r27, r26
    653a:	62 0b       	sbc	r22, r18
    653c:	73 0b       	sbc	r23, r19
    653e:	84 0b       	sbc	r24, r20
    6540:	ba f0       	brmi	.+46     	; 0x6570 <__addsf3x+0x9c>
    6542:	91 50       	subi	r25, 0x01	; 1
    6544:	a1 f0       	breq	.+40     	; 0x656e <__addsf3x+0x9a>
    6546:	ff 0f       	add	r31, r31
    6548:	bb 1f       	adc	r27, r27
    654a:	66 1f       	adc	r22, r22
    654c:	77 1f       	adc	r23, r23
    654e:	88 1f       	adc	r24, r24
    6550:	c2 f7       	brpl	.-16     	; 0x6542 <__addsf3x+0x6e>
    6552:	0e c0       	rjmp	.+28     	; 0x6570 <__addsf3x+0x9c>
    6554:	ba 0f       	add	r27, r26
    6556:	62 1f       	adc	r22, r18
    6558:	73 1f       	adc	r23, r19
    655a:	84 1f       	adc	r24, r20
    655c:	48 f4       	brcc	.+18     	; 0x6570 <__addsf3x+0x9c>
    655e:	87 95       	ror	r24
    6560:	77 95       	ror	r23
    6562:	67 95       	ror	r22
    6564:	b7 95       	ror	r27
    6566:	f7 95       	ror	r31
    6568:	9e 3f       	cpi	r25, 0xFE	; 254
    656a:	08 f0       	brcs	.+2      	; 0x656e <__addsf3x+0x9a>
    656c:	b0 cf       	rjmp	.-160    	; 0x64ce <__addsf3+0x28>
    656e:	93 95       	inc	r25
    6570:	88 0f       	add	r24, r24
    6572:	08 f0       	brcs	.+2      	; 0x6576 <__addsf3x+0xa2>
    6574:	99 27       	eor	r25, r25
    6576:	ee 0f       	add	r30, r30
    6578:	97 95       	ror	r25
    657a:	87 95       	ror	r24
    657c:	08 95       	ret

0000657e <__divsf3>:
    657e:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__divsf3x>
    6582:	0c 94 c7 31 	jmp	0x638e	; 0x638e <__fp_round>
    6586:	0e 94 c0 31 	call	0x6380	; 0x6380 <__fp_pscB>
    658a:	58 f0       	brcs	.+22     	; 0x65a2 <__divsf3+0x24>
    658c:	0e 94 b9 31 	call	0x6372	; 0x6372 <__fp_pscA>
    6590:	40 f0       	brcs	.+16     	; 0x65a2 <__divsf3+0x24>
    6592:	29 f4       	brne	.+10     	; 0x659e <__divsf3+0x20>
    6594:	5f 3f       	cpi	r21, 0xFF	; 255
    6596:	29 f0       	breq	.+10     	; 0x65a2 <__divsf3+0x24>
    6598:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__fp_inf>
    659c:	51 11       	cpse	r21, r1
    659e:	0c 94 fb 31 	jmp	0x63f6	; 0x63f6 <__fp_szero>
__divsf3():
    65a2:	0c 94 b6 31 	jmp	0x636c	; 0x636c <__fp_nan>

000065a6 <__divsf3x>:
__divsf3x():
    65a6:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <__fp_split3>
    65aa:	68 f3       	brcs	.-38     	; 0x6586 <__divsf3+0x8>

000065ac <__divsf3_pse>:
    65ac:	99 23       	and	r25, r25
    65ae:	b1 f3       	breq	.-20     	; 0x659c <__divsf3+0x1e>
    65b0:	55 23       	and	r21, r21
    65b2:	91 f3       	breq	.-28     	; 0x6598 <__divsf3+0x1a>
    65b4:	95 1b       	sub	r25, r21
    65b6:	55 0b       	sbc	r21, r21
    65b8:	bb 27       	eor	r27, r27
    65ba:	aa 27       	eor	r26, r26
    65bc:	62 17       	cp	r22, r18
    65be:	73 07       	cpc	r23, r19
    65c0:	84 07       	cpc	r24, r20
    65c2:	38 f0       	brcs	.+14     	; 0x65d2 <__divsf3_pse+0x26>
    65c4:	9f 5f       	subi	r25, 0xFF	; 255
    65c6:	5f 4f       	sbci	r21, 0xFF	; 255
    65c8:	22 0f       	add	r18, r18
    65ca:	33 1f       	adc	r19, r19
    65cc:	44 1f       	adc	r20, r20
    65ce:	aa 1f       	adc	r26, r26
    65d0:	a9 f3       	breq	.-22     	; 0x65bc <__divsf3_pse+0x10>
    65d2:	35 d0       	rcall	.+106    	; 0x663e <__divsf3_pse+0x92>
    65d4:	0e 2e       	mov	r0, r30
    65d6:	3a f0       	brmi	.+14     	; 0x65e6 <__divsf3_pse+0x3a>
    65d8:	e0 e8       	ldi	r30, 0x80	; 128
    65da:	32 d0       	rcall	.+100    	; 0x6640 <__divsf3_pse+0x94>
    65dc:	91 50       	subi	r25, 0x01	; 1
    65de:	50 40       	sbci	r21, 0x00	; 0
    65e0:	e6 95       	lsr	r30
    65e2:	00 1c       	adc	r0, r0
    65e4:	ca f7       	brpl	.-14     	; 0x65d8 <__divsf3_pse+0x2c>
    65e6:	2b d0       	rcall	.+86     	; 0x663e <__divsf3_pse+0x92>
    65e8:	fe 2f       	mov	r31, r30
    65ea:	29 d0       	rcall	.+82     	; 0x663e <__divsf3_pse+0x92>
    65ec:	66 0f       	add	r22, r22
    65ee:	77 1f       	adc	r23, r23
    65f0:	88 1f       	adc	r24, r24
    65f2:	bb 1f       	adc	r27, r27
    65f4:	26 17       	cp	r18, r22
    65f6:	37 07       	cpc	r19, r23
    65f8:	48 07       	cpc	r20, r24
    65fa:	ab 07       	cpc	r26, r27
    65fc:	b0 e8       	ldi	r27, 0x80	; 128
    65fe:	09 f0       	breq	.+2      	; 0x6602 <__divsf3_pse+0x56>
    6600:	bb 0b       	sbc	r27, r27
    6602:	80 2d       	mov	r24, r0
    6604:	bf 01       	movw	r22, r30
    6606:	ff 27       	eor	r31, r31
    6608:	93 58       	subi	r25, 0x83	; 131
    660a:	5f 4f       	sbci	r21, 0xFF	; 255
    660c:	3a f0       	brmi	.+14     	; 0x661c <__divsf3_pse+0x70>
    660e:	9e 3f       	cpi	r25, 0xFE	; 254
    6610:	51 05       	cpc	r21, r1
    6612:	78 f0       	brcs	.+30     	; 0x6632 <__divsf3_pse+0x86>
    6614:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__fp_inf>
    6618:	0c 94 fb 31 	jmp	0x63f6	; 0x63f6 <__fp_szero>
    661c:	5f 3f       	cpi	r21, 0xFF	; 255
    661e:	e4 f3       	brlt	.-8      	; 0x6618 <__divsf3_pse+0x6c>
    6620:	98 3e       	cpi	r25, 0xE8	; 232
    6622:	d4 f3       	brlt	.-12     	; 0x6618 <__divsf3_pse+0x6c>
    6624:	86 95       	lsr	r24
    6626:	77 95       	ror	r23
    6628:	67 95       	ror	r22
    662a:	b7 95       	ror	r27
    662c:	f7 95       	ror	r31
    662e:	9f 5f       	subi	r25, 0xFF	; 255
    6630:	c9 f7       	brne	.-14     	; 0x6624 <__divsf3_pse+0x78>
    6632:	88 0f       	add	r24, r24
    6634:	91 1d       	adc	r25, r1
    6636:	96 95       	lsr	r25
    6638:	87 95       	ror	r24
    663a:	97 f9       	bld	r25, 7
    663c:	08 95       	ret
    663e:	e1 e0       	ldi	r30, 0x01	; 1
    6640:	66 0f       	add	r22, r22
    6642:	77 1f       	adc	r23, r23
    6644:	88 1f       	adc	r24, r24
    6646:	bb 1f       	adc	r27, r27
    6648:	62 17       	cp	r22, r18
    664a:	73 07       	cpc	r23, r19
    664c:	84 07       	cpc	r24, r20
    664e:	ba 07       	cpc	r27, r26
    6650:	20 f0       	brcs	.+8      	; 0x665a <__divsf3_pse+0xae>
    6652:	62 1b       	sub	r22, r18
    6654:	73 0b       	sbc	r23, r19
    6656:	84 0b       	sbc	r24, r20
    6658:	ba 0b       	sbc	r27, r26
    665a:	ee 1f       	adc	r30, r30
    665c:	88 f7       	brcc	.-30     	; 0x6640 <__divsf3_pse+0x94>
    665e:	e0 95       	com	r30
    6660:	08 95       	ret

00006662 <__fixsfsi>:
    6662:	0e 94 38 33 	call	0x6670	; 0x6670 <__fixunssfsi>
    6666:	68 94       	set
    6668:	b1 11       	cpse	r27, r1
    666a:	0c 94 fb 31 	jmp	0x63f6	; 0x63f6 <__fp_szero>
    666e:	08 95       	ret

00006670 <__fixunssfsi>:
    6670:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <__fp_splitA>
    6674:	88 f0       	brcs	.+34     	; 0x6698 <__fixunssfsi+0x28>
    6676:	9f 57       	subi	r25, 0x7F	; 127
    6678:	98 f0       	brcs	.+38     	; 0x66a0 <__fixunssfsi+0x30>
    667a:	b9 2f       	mov	r27, r25
    667c:	99 27       	eor	r25, r25
    667e:	b7 51       	subi	r27, 0x17	; 23
    6680:	b0 f0       	brcs	.+44     	; 0x66ae <__fixunssfsi+0x3e>
__fixunssfsi():
    6682:	e1 f0       	breq	.+56     	; 0x66bc <__fixunssfsi+0x4c>
    6684:	66 0f       	add	r22, r22
    6686:	77 1f       	adc	r23, r23
    6688:	88 1f       	adc	r24, r24
    668a:	99 1f       	adc	r25, r25
    668c:	1a f0       	brmi	.+6      	; 0x6694 <__fixunssfsi+0x24>
    668e:	ba 95       	dec	r27
    6690:	c9 f7       	brne	.-14     	; 0x6684 <__fixunssfsi+0x14>
    6692:	14 c0       	rjmp	.+40     	; 0x66bc <__fixunssfsi+0x4c>
    6694:	b1 30       	cpi	r27, 0x01	; 1
    6696:	91 f0       	breq	.+36     	; 0x66bc <__fixunssfsi+0x4c>
    6698:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <__fp_zero>
    669c:	b1 e0       	ldi	r27, 0x01	; 1
    669e:	08 95       	ret
    66a0:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <__fp_zero>
    66a4:	67 2f       	mov	r22, r23
    66a6:	78 2f       	mov	r23, r24
    66a8:	88 27       	eor	r24, r24
    66aa:	b8 5f       	subi	r27, 0xF8	; 248
    66ac:	39 f0       	breq	.+14     	; 0x66bc <__fixunssfsi+0x4c>
    66ae:	b9 3f       	cpi	r27, 0xF9	; 249
    66b0:	cc f3       	brlt	.-14     	; 0x66a4 <__fixunssfsi+0x34>
    66b2:	86 95       	lsr	r24
    66b4:	77 95       	ror	r23
    66b6:	67 95       	ror	r22
    66b8:	b3 95       	inc	r27
    66ba:	d9 f7       	brne	.-10     	; 0x66b2 <__fixunssfsi+0x42>
    66bc:	3e f4       	brtc	.+14     	; 0x66cc <__fixunssfsi+0x5c>
    66be:	90 95       	com	r25
    66c0:	80 95       	com	r24
    66c2:	70 95       	com	r23
    66c4:	61 95       	neg	r22
    66c6:	7f 4f       	sbci	r23, 0xFF	; 255
    66c8:	8f 4f       	sbci	r24, 0xFF	; 255
    66ca:	9f 4f       	sbci	r25, 0xFF	; 255
    66cc:	08 95       	ret

000066ce <__gesf2>:
__gesf2():
    66ce:	0e 94 1f 31 	call	0x623e	; 0x623e <__fp_cmp>
    66d2:	08 f4       	brcc	.+2      	; 0x66d6 <__gesf2+0x8>
    66d4:	8f ef       	ldi	r24, 0xFF	; 255
    66d6:	08 95       	ret
    66d8:	16 f0       	brts	.+4      	; 0x66de <__gesf2+0x10>
    66da:	0c 94 4b 34 	jmp	0x6896	; 0x6896 <__fp_mpack>
    66de:	0c 94 b6 31 	jmp	0x636c	; 0x636c <__fp_nan>
    66e2:	68 94       	set
    66e4:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__fp_inf>

000066e8 <log>:
log():
    66e8:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <__fp_splitA>
    66ec:	a8 f3       	brcs	.-22     	; 0x66d8 <__gesf2+0xa>
    66ee:	99 23       	and	r25, r25
    66f0:	c1 f3       	breq	.-16     	; 0x66e2 <__gesf2+0x14>
    66f2:	ae f3       	brts	.-22     	; 0x66de <__gesf2+0x10>
    66f4:	df 93       	push	r29
    66f6:	cf 93       	push	r28
    66f8:	1f 93       	push	r17
    66fa:	0f 93       	push	r16
    66fc:	ff 92       	push	r15
    66fe:	c9 2f       	mov	r28, r25
    6700:	dd 27       	eor	r29, r29
    6702:	88 23       	and	r24, r24
    6704:	2a f0       	brmi	.+10     	; 0x6710 <log+0x28>
    6706:	21 97       	sbiw	r28, 0x01	; 1
    6708:	66 0f       	add	r22, r22
    670a:	77 1f       	adc	r23, r23
    670c:	88 1f       	adc	r24, r24
    670e:	da f7       	brpl	.-10     	; 0x6706 <log+0x1e>
    6710:	20 e0       	ldi	r18, 0x00	; 0
    6712:	30 e0       	ldi	r19, 0x00	; 0
    6714:	40 e8       	ldi	r20, 0x80	; 128
    6716:	5f eb       	ldi	r21, 0xBF	; 191
    6718:	9f e3       	ldi	r25, 0x3F	; 63
    671a:	88 39       	cpi	r24, 0x98	; 152
    671c:	20 f0       	brcs	.+8      	; 0x6726 <log+0x3e>
    671e:	80 3e       	cpi	r24, 0xE0	; 224
    6720:	38 f0       	brcs	.+14     	; 0x6730 <log+0x48>
    6722:	21 96       	adiw	r28, 0x01	; 1
    6724:	8f 77       	andi	r24, 0x7F	; 127
    6726:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__addsf3>
    672a:	e8 e6       	ldi	r30, 0x68	; 104
    672c:	f0 e0       	ldi	r31, 0x00	; 0
    672e:	04 c0       	rjmp	.+8      	; 0x6738 <log+0x50>
    6730:	0e 94 53 32 	call	0x64a6	; 0x64a6 <__addsf3>
    6734:	e5 e9       	ldi	r30, 0x95	; 149
    6736:	f0 e0       	ldi	r31, 0x00	; 0
    6738:	0e 94 59 34 	call	0x68b2	; 0x68b2 <__fp_powser>
    673c:	8b 01       	movw	r16, r22
    673e:	be 01       	movw	r22, r28
    6740:	ec 01       	movw	r28, r24
    6742:	fb 2e       	mov	r15, r27
    6744:	6f 57       	subi	r22, 0x7F	; 127
    6746:	71 09       	sbc	r23, r1
    6748:	75 95       	asr	r23
    674a:	77 1f       	adc	r23, r23
    674c:	88 0b       	sbc	r24, r24
    674e:	99 0b       	sbc	r25, r25
    6750:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <__floatsisf>
    6754:	28 e1       	ldi	r18, 0x18	; 24
    6756:	32 e7       	ldi	r19, 0x72	; 114
    6758:	41 e3       	ldi	r20, 0x31	; 49
    675a:	5f e3       	ldi	r21, 0x3F	; 63
    675c:	0e 94 56 31 	call	0x62ac	; 0x62ac <__mulsf3x>
    6760:	af 2d       	mov	r26, r15
    6762:	98 01       	movw	r18, r16
    6764:	ae 01       	movw	r20, r28
    6766:	ff 90       	pop	r15
    6768:	0f 91       	pop	r16
    676a:	1f 91       	pop	r17
    676c:	cf 91       	pop	r28
    676e:	df 91       	pop	r29
    6770:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <__addsf3x>
    6774:	0c 94 c7 31 	jmp	0x638e	; 0x638e <__fp_round>

00006778 <pow>:
    6778:	fa 01       	movw	r30, r20
    677a:	ee 0f       	add	r30, r30
    677c:	ff 1f       	adc	r31, r31
    677e:	30 96       	adiw	r30, 0x00	; 0
    6780:	21 05       	cpc	r18, r1
    6782:	31 05       	cpc	r19, r1
    6784:	a1 f1       	breq	.+104    	; 0x67ee <pow+0x76>
    6786:	61 15       	cp	r22, r1
pow():
    6788:	71 05       	cpc	r23, r1
    678a:	61 f4       	brne	.+24     	; 0x67a4 <pow+0x2c>
    678c:	80 38       	cpi	r24, 0x80	; 128
    678e:	bf e3       	ldi	r27, 0x3F	; 63
    6790:	9b 07       	cpc	r25, r27
    6792:	49 f1       	breq	.+82     	; 0x67e6 <pow+0x6e>
    6794:	68 94       	set
    6796:	90 38       	cpi	r25, 0x80	; 128
    6798:	81 05       	cpc	r24, r1
    679a:	61 f0       	breq	.+24     	; 0x67b4 <pow+0x3c>
    679c:	80 38       	cpi	r24, 0x80	; 128
    679e:	bf ef       	ldi	r27, 0xFF	; 255
    67a0:	9b 07       	cpc	r25, r27
    67a2:	41 f0       	breq	.+16     	; 0x67b4 <pow+0x3c>
    67a4:	99 23       	and	r25, r25
    67a6:	4a f5       	brpl	.+82     	; 0x67fa <pow+0x82>
    67a8:	ff 3f       	cpi	r31, 0xFF	; 255
    67aa:	e1 05       	cpc	r30, r1
    67ac:	31 05       	cpc	r19, r1
    67ae:	21 05       	cpc	r18, r1
    67b0:	19 f1       	breq	.+70     	; 0x67f8 <pow+0x80>
    67b2:	e8 94       	clt
    67b4:	08 94       	sec
    67b6:	e7 95       	ror	r30
    67b8:	d9 01       	movw	r26, r18
    67ba:	aa 23       	and	r26, r26
    67bc:	29 f4       	brne	.+10     	; 0x67c8 <pow+0x50>
    67be:	ab 2f       	mov	r26, r27
    67c0:	be 2f       	mov	r27, r30
    67c2:	f8 5f       	subi	r31, 0xF8	; 248
    67c4:	d0 f3       	brcs	.-12     	; 0x67ba <pow+0x42>
    67c6:	10 c0       	rjmp	.+32     	; 0x67e8 <pow+0x70>
    67c8:	ff 5f       	subi	r31, 0xFF	; 255
    67ca:	70 f4       	brcc	.+28     	; 0x67e8 <pow+0x70>
    67cc:	a6 95       	lsr	r26
    67ce:	e0 f7       	brcc	.-8      	; 0x67c8 <pow+0x50>
    67d0:	f7 39       	cpi	r31, 0x97	; 151
    67d2:	50 f0       	brcs	.+20     	; 0x67e8 <pow+0x70>
    67d4:	19 f0       	breq	.+6      	; 0x67dc <pow+0x64>
    67d6:	ff 3a       	cpi	r31, 0xAF	; 175
    67d8:	38 f4       	brcc	.+14     	; 0x67e8 <pow+0x70>
    67da:	9f 77       	andi	r25, 0x7F	; 127
    67dc:	9f 93       	push	r25
    67de:	0d d0       	rcall	.+26     	; 0x67fa <pow+0x82>
    67e0:	0f 90       	pop	r0
    67e2:	07 fc       	sbrc	r0, 7
    67e4:	90 58       	subi	r25, 0x80	; 128
    67e6:	08 95       	ret
    67e8:	46 f0       	brts	.+16     	; 0x67fa <pow+0x82>
    67ea:	0c 94 b6 31 	jmp	0x636c	; 0x636c <__fp_nan>
    67ee:	60 e0       	ldi	r22, 0x00	; 0
    67f0:	70 e0       	ldi	r23, 0x00	; 0
    67f2:	80 e8       	ldi	r24, 0x80	; 128
    67f4:	9f e3       	ldi	r25, 0x3F	; 63
    67f6:	08 95       	ret
    67f8:	4f e7       	ldi	r20, 0x7F	; 127
    67fa:	9f 77       	andi	r25, 0x7F	; 127
    67fc:	5f 93       	push	r21
    67fe:	4f 93       	push	r20
    6800:	3f 93       	push	r19
    6802:	2f 93       	push	r18
    6804:	0e 94 74 33 	call	0x66e8	; 0x66e8 <log>
    6808:	2f 91       	pop	r18
    680a:	3f 91       	pop	r19
    680c:	4f 91       	pop	r20
    680e:	5f 91       	pop	r21
    6810:	0e 94 43 31 	call	0x6286	; 0x6286 <__mulsf3>
    6814:	0c 94 19 34 	jmp	0x6832	; 0x6832 <exp>

00006818 <__unordsf2>:
__unordsf2():
    6818:	0e 94 1f 31 	call	0x623e	; 0x623e <__fp_cmp>
    681c:	88 0b       	sbc	r24, r24
    681e:	99 0b       	sbc	r25, r25
    6820:	08 95       	ret
    6822:	29 f4       	brne	.+10     	; 0x682e <__unordsf2+0x16>
    6824:	16 f0       	brts	.+4      	; 0x682a <__unordsf2+0x12>
    6826:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__fp_inf>
    682a:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <__fp_zero>
    682e:	0c 94 b6 31 	jmp	0x636c	; 0x636c <__fp_nan>

00006832 <exp>:
exp():
    6832:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <__fp_splitA>
    6836:	a8 f3       	brcs	.-22     	; 0x6822 <__unordsf2+0xa>
    6838:	96 38       	cpi	r25, 0x86	; 134
    683a:	a0 f7       	brcc	.-24     	; 0x6824 <__unordsf2+0xc>
    683c:	07 f8       	bld	r0, 7
    683e:	0f 92       	push	r0
    6840:	e8 94       	clt
    6842:	2b e3       	ldi	r18, 0x3B	; 59
    6844:	3a ea       	ldi	r19, 0xAA	; 170
    6846:	48 eb       	ldi	r20, 0xB8	; 184
    6848:	5f e7       	ldi	r21, 0x7F	; 127
    684a:	0e 94 59 31 	call	0x62b2	; 0x62b2 <__mulsf3_pse>
    684e:	0f 92       	push	r0
    6850:	0f 92       	push	r0
    6852:	0f 92       	push	r0
    6854:	4d b7       	in	r20, 0x3d	; 61
    6856:	5e b7       	in	r21, 0x3e	; 62
    6858:	0f 92       	push	r0
    685a:	0e 94 c2 34 	call	0x6984	; 0x6984 <modf>
    685e:	e2 ec       	ldi	r30, 0xC2	; 194
    6860:	f0 e0       	ldi	r31, 0x00	; 0
    6862:	0e 94 59 34 	call	0x68b2	; 0x68b2 <__fp_powser>
    6866:	4f 91       	pop	r20
    6868:	5f 91       	pop	r21
    686a:	ef 91       	pop	r30
    686c:	ff 91       	pop	r31
    686e:	e5 95       	asr	r30
    6870:	ee 1f       	adc	r30, r30
    6872:	ff 1f       	adc	r31, r31
    6874:	49 f0       	breq	.+18     	; 0x6888 <exp+0x56>
    6876:	fe 57       	subi	r31, 0x7E	; 126
    6878:	e0 68       	ori	r30, 0x80	; 128
    687a:	44 27       	eor	r20, r20
    687c:	ee 0f       	add	r30, r30
    687e:	44 1f       	adc	r20, r20
    6880:	fa 95       	dec	r31
    6882:	e1 f7       	brne	.-8      	; 0x687c <exp+0x4a>
    6884:	41 95       	neg	r20
    6886:	55 0b       	sbc	r21, r21
    6888:	0e 94 8c 34 	call	0x6918	; 0x6918 <ldexp>
    688c:	0f 90       	pop	r0
    688e:	07 fe       	sbrs	r0, 7
    6890:	0c 94 80 34 	jmp	0x6900	; 0x6900 <inverse>
    6894:	08 95       	ret

00006896 <__fp_mpack>:
    6896:	9f 3f       	cpi	r25, 0xFF	; 255
    6898:	31 f0       	breq	.+12     	; 0x68a6 <__fp_mpack_finite+0xc>

0000689a <__fp_mpack_finite>:
    689a:	91 50       	subi	r25, 0x01	; 1
    689c:	20 f4       	brcc	.+8      	; 0x68a6 <__fp_mpack_finite+0xc>
    689e:	87 95       	ror	r24
    68a0:	77 95       	ror	r23
    68a2:	67 95       	ror	r22
    68a4:	b7 95       	ror	r27
__fp_mpack_finite():
    68a6:	88 0f       	add	r24, r24
    68a8:	91 1d       	adc	r25, r1
    68aa:	96 95       	lsr	r25
    68ac:	87 95       	ror	r24
    68ae:	97 f9       	bld	r25, 7
    68b0:	08 95       	ret

000068b2 <__fp_powser>:
__fp_powser():
    68b2:	df 93       	push	r29
    68b4:	cf 93       	push	r28
    68b6:	1f 93       	push	r17
    68b8:	0f 93       	push	r16
    68ba:	ff 92       	push	r15
    68bc:	ef 92       	push	r14
    68be:	df 92       	push	r13
    68c0:	7b 01       	movw	r14, r22
    68c2:	8c 01       	movw	r16, r24
    68c4:	68 94       	set
    68c6:	06 c0       	rjmp	.+12     	; 0x68d4 <__fp_powser+0x22>
    68c8:	da 2e       	mov	r13, r26
    68ca:	ef 01       	movw	r28, r30
    68cc:	0e 94 56 31 	call	0x62ac	; 0x62ac <__mulsf3x>
    68d0:	fe 01       	movw	r30, r28
    68d2:	e8 94       	clt
    68d4:	a5 91       	lpm	r26, Z+
    68d6:	25 91       	lpm	r18, Z+
    68d8:	35 91       	lpm	r19, Z+
    68da:	45 91       	lpm	r20, Z+
    68dc:	55 91       	lpm	r21, Z+
    68de:	a6 f3       	brts	.-24     	; 0x68c8 <__fp_powser+0x16>
    68e0:	ef 01       	movw	r28, r30
    68e2:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <__addsf3x>
    68e6:	fe 01       	movw	r30, r28
    68e8:	97 01       	movw	r18, r14
    68ea:	a8 01       	movw	r20, r16
    68ec:	da 94       	dec	r13
    68ee:	69 f7       	brne	.-38     	; 0x68ca <__fp_powser+0x18>
    68f0:	df 90       	pop	r13
    68f2:	ef 90       	pop	r14
    68f4:	ff 90       	pop	r15
    68f6:	0f 91       	pop	r16
    68f8:	1f 91       	pop	r17
    68fa:	cf 91       	pop	r28
    68fc:	df 91       	pop	r29
    68fe:	08 95       	ret

00006900 <inverse>:
inverse():
    6900:	9b 01       	movw	r18, r22
    6902:	ac 01       	movw	r20, r24
    6904:	60 e0       	ldi	r22, 0x00	; 0
    6906:	70 e0       	ldi	r23, 0x00	; 0
    6908:	80 e8       	ldi	r24, 0x80	; 128
    690a:	9f e3       	ldi	r25, 0x3F	; 63
    690c:	0c 94 bf 32 	jmp	0x657e	; 0x657e <__divsf3>
    6910:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__fp_inf>
    6914:	0c 94 4b 34 	jmp	0x6896	; 0x6896 <__fp_mpack>

00006918 <ldexp>:
ldexp():
    6918:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <__fp_splitA>
    691c:	d8 f3       	brcs	.-10     	; 0x6914 <inverse+0x14>
    691e:	99 23       	and	r25, r25
    6920:	c9 f3       	breq	.-14     	; 0x6914 <inverse+0x14>
    6922:	94 0f       	add	r25, r20
    6924:	51 1d       	adc	r21, r1
    6926:	a3 f3       	brvs	.-24     	; 0x6910 <inverse+0x10>
    6928:	91 50       	subi	r25, 0x01	; 1
    692a:	50 40       	sbci	r21, 0x00	; 0
    692c:	94 f0       	brlt	.+36     	; 0x6952 <ldexp+0x3a>
    692e:	59 f0       	breq	.+22     	; 0x6946 <ldexp+0x2e>
    6930:	88 23       	and	r24, r24
    6932:	32 f0       	brmi	.+12     	; 0x6940 <ldexp+0x28>
    6934:	66 0f       	add	r22, r22
    6936:	77 1f       	adc	r23, r23
    6938:	88 1f       	adc	r24, r24
    693a:	91 50       	subi	r25, 0x01	; 1
    693c:	50 40       	sbci	r21, 0x00	; 0
    693e:	c1 f7       	brne	.-16     	; 0x6930 <ldexp+0x18>
    6940:	9e 3f       	cpi	r25, 0xFE	; 254
    6942:	51 05       	cpc	r21, r1
    6944:	2c f7       	brge	.-54     	; 0x6910 <inverse+0x10>
    6946:	88 0f       	add	r24, r24
    6948:	91 1d       	adc	r25, r1
    694a:	96 95       	lsr	r25
    694c:	87 95       	ror	r24
    694e:	97 f9       	bld	r25, 7
    6950:	08 95       	ret
    6952:	5f 3f       	cpi	r21, 0xFF	; 255
    6954:	ac f0       	brlt	.+42     	; 0x6980 <ldexp+0x68>
    6956:	98 3e       	cpi	r25, 0xE8	; 232
    6958:	9c f0       	brlt	.+38     	; 0x6980 <ldexp+0x68>
    695a:	bb 27       	eor	r27, r27
    695c:	86 95       	lsr	r24
    695e:	77 95       	ror	r23
    6960:	67 95       	ror	r22
    6962:	b7 95       	ror	r27
    6964:	08 f4       	brcc	.+2      	; 0x6968 <ldexp+0x50>
    6966:	b1 60       	ori	r27, 0x01	; 1
    6968:	93 95       	inc	r25
    696a:	c1 f7       	brne	.-16     	; 0x695c <ldexp+0x44>
    696c:	bb 0f       	add	r27, r27
    696e:	58 f7       	brcc	.-42     	; 0x6946 <ldexp+0x2e>
    6970:	11 f4       	brne	.+4      	; 0x6976 <ldexp+0x5e>
    6972:	60 ff       	sbrs	r22, 0
    6974:	e8 cf       	rjmp	.-48     	; 0x6946 <ldexp+0x2e>
    6976:	6f 5f       	subi	r22, 0xFF	; 255
    6978:	7f 4f       	sbci	r23, 0xFF	; 255
    697a:	8f 4f       	sbci	r24, 0xFF	; 255
    697c:	9f 4f       	sbci	r25, 0xFF	; 255
    697e:	e3 cf       	rjmp	.-58     	; 0x6946 <ldexp+0x2e>
    6980:	0c 94 fb 31 	jmp	0x63f6	; 0x63f6 <__fp_szero>

00006984 <modf>:
    6984:	fa 01       	movw	r30, r20
    6986:	dc 01       	movw	r26, r24
    6988:	aa 0f       	add	r26, r26
    698a:	bb 1f       	adc	r27, r27
modf():
    698c:	9b 01       	movw	r18, r22
    698e:	ac 01       	movw	r20, r24
    6990:	bf 57       	subi	r27, 0x7F	; 127
    6992:	28 f4       	brcc	.+10     	; 0x699e <modf+0x1a>
    6994:	22 27       	eor	r18, r18
    6996:	33 27       	eor	r19, r19
    6998:	44 27       	eor	r20, r20
    699a:	50 78       	andi	r21, 0x80	; 128
    699c:	20 c0       	rjmp	.+64     	; 0x69de <modf+0x5a>
    699e:	b7 51       	subi	r27, 0x17	; 23
    69a0:	90 f4       	brcc	.+36     	; 0x69c6 <modf+0x42>
    69a2:	ab 2f       	mov	r26, r27
    69a4:	00 24       	eor	r0, r0
    69a6:	46 95       	lsr	r20
    69a8:	37 95       	ror	r19
    69aa:	27 95       	ror	r18
    69ac:	01 1c       	adc	r0, r1
    69ae:	a3 95       	inc	r26
    69b0:	d2 f3       	brmi	.-12     	; 0x69a6 <modf+0x22>
    69b2:	00 20       	and	r0, r0
    69b4:	71 f0       	breq	.+28     	; 0x69d2 <modf+0x4e>
    69b6:	22 0f       	add	r18, r18
    69b8:	33 1f       	adc	r19, r19
    69ba:	44 1f       	adc	r20, r20
    69bc:	b3 95       	inc	r27
    69be:	da f3       	brmi	.-10     	; 0x69b6 <modf+0x32>
    69c0:	0e d0       	rcall	.+28     	; 0x69de <modf+0x5a>
    69c2:	0c 94 52 32 	jmp	0x64a4	; 0x64a4 <__subsf3>
    69c6:	61 30       	cpi	r22, 0x01	; 1
    69c8:	71 05       	cpc	r23, r1
    69ca:	a0 e8       	ldi	r26, 0x80	; 128
    69cc:	8a 07       	cpc	r24, r26
    69ce:	b9 46       	sbci	r27, 0x69	; 105
    69d0:	30 f4       	brcc	.+12     	; 0x69de <modf+0x5a>
    69d2:	9b 01       	movw	r18, r22
    69d4:	ac 01       	movw	r20, r24
    69d6:	66 27       	eor	r22, r22
    69d8:	77 27       	eor	r23, r23
    69da:	88 27       	eor	r24, r24
    69dc:	90 78       	andi	r25, 0x80	; 128
    69de:	30 96       	adiw	r30, 0x00	; 0
    69e0:	21 f0       	breq	.+8      	; 0x69ea <modf+0x66>
    69e2:	20 83       	st	Z, r18
    69e4:	31 83       	std	Z+1, r19	; 0x01
    69e6:	42 83       	std	Z+2, r20	; 0x02
    69e8:	53 83       	std	Z+3, r21	; 0x03
    69ea:	08 95       	ret

000069ec <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    69ec:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    69ee:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    69f0:	04 c0       	rjmp	.+8      	; 0x69fa <__udivmodqi4_ep>

000069f2 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    69f2:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    69f4:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    69f6:	08 f0       	brcs	.+2      	; 0x69fa <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    69f8:	96 1b       	sub	r25, r22

000069fa <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    69fa:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    69fc:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    69fe:	c9 f7       	brne	.-14     	; 0x69f2 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    6a00:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    6a02:	08 95       	ret

00006a04 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    6a04:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    6a06:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    6a08:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    6a0a:	07 c0       	rjmp	.+14     	; 0x6a1a <__udivmodhi4_ep>

00006a0c <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    6a0c:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    6a0e:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    6a10:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    6a12:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    6a14:	10 f0       	brcs	.+4      	; 0x6a1a <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    6a16:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    6a18:	b7 0b       	sbc	r27, r23

00006a1a <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    6a1a:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    6a1c:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    6a1e:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    6a20:	a9 f7       	brne	.-22     	; 0x6a0c <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    6a22:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    6a24:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    6a26:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    6a28:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    6a2a:	08 95       	ret

00006a2c <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    6a2c:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    6a2e:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    6a30:	16 f4       	brtc	.+4      	; 0x6a36 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    6a32:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    6a34:	07 d0       	rcall	.+14     	; 0x6a44 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    6a36:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    6a38:	09 d0       	rcall	.+18     	; 0x6a4c <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    6a3a:	0e 94 02 35 	call	0x6a04	; 0x6a04 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    6a3e:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    6a40:	05 d0       	rcall	.+10     	; 0x6a4c <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    6a42:	3e f4       	brtc	.+14     	; 0x6a52 <__divmodhi4_exit>

00006a44 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    6a44:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    6a46:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    6a48:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    6a4a:	08 95       	ret

00006a4c <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    6a4c:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    6a4e:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    6a50:	7f 4f       	sbci	r23, 0xFF	; 255

00006a52 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    6a52:	08 95       	ret

00006a54 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    6a54:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    6a56:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    6a58:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    6a5a:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    6a5c:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    6a5e:	0d c0       	rjmp	.+26     	; 0x6a7a <__udivmodsi4_ep>

00006a60 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    6a60:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    6a62:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    6a64:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    6a66:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    6a68:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    6a6a:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    6a6c:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    6a6e:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    6a70:	20 f0       	brcs	.+8      	; 0x6a7a <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    6a72:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    6a74:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    6a76:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    6a78:	f5 0b       	sbc	r31, r21

00006a7a <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    6a7a:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    6a7c:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    6a7e:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    6a80:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    6a82:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    6a84:	69 f7       	brne	.-38     	; 0x6a60 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    6a86:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    6a88:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    6a8a:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    6a8c:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    6a8e:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    6a90:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    6a92:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    6a94:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    6a96:	08 95       	ret

00006a98 <__mulshisi3>:
__mulshisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    6a98:	b7 ff       	sbrs	r27, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    6a9a:	0c 94 01 32 	jmp	0x6402	; 0x6402 <__muluhisi3>

00006a9e <__mulohisi3>:
__mulohisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    6a9e:	0e 94 01 32 	call	0x6402	; 0x6402 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    6aa2:	82 1b       	sub	r24, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    6aa4:	93 0b       	sbc	r25, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    6aa6:	08 95       	ret

00006aa8 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    6aa8:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    6aaa:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    6aac:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    6aae:	f4 91       	lpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    6ab0:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    6ab2:	09 94       	ijmp

00006ab4 <malloc>:
malloc():
    6ab4:	0f 93       	push	r16
    6ab6:	1f 93       	push	r17
    6ab8:	cf 93       	push	r28
    6aba:	df 93       	push	r29
    6abc:	82 30       	cpi	r24, 0x02	; 2
    6abe:	91 05       	cpc	r25, r1
    6ac0:	10 f4       	brcc	.+4      	; 0x6ac6 <malloc+0x12>
    6ac2:	82 e0       	ldi	r24, 0x02	; 2
    6ac4:	90 e0       	ldi	r25, 0x00	; 0
    6ac6:	e0 91 45 03 	lds	r30, 0x0345	; 0x800345 <__flp>
    6aca:	f0 91 46 03 	lds	r31, 0x0346	; 0x800346 <__flp+0x1>
    6ace:	30 e0       	ldi	r19, 0x00	; 0
    6ad0:	20 e0       	ldi	r18, 0x00	; 0
    6ad2:	b0 e0       	ldi	r27, 0x00	; 0
    6ad4:	a0 e0       	ldi	r26, 0x00	; 0
    6ad6:	30 97       	sbiw	r30, 0x00	; 0
    6ad8:	99 f4       	brne	.+38     	; 0x6b00 <malloc+0x4c>
    6ada:	21 15       	cp	r18, r1
    6adc:	31 05       	cpc	r19, r1
    6ade:	09 f4       	brne	.+2      	; 0x6ae2 <malloc+0x2e>
    6ae0:	4a c0       	rjmp	.+148    	; 0x6b76 <malloc+0xc2>
    6ae2:	28 1b       	sub	r18, r24
    6ae4:	39 0b       	sbc	r19, r25
    6ae6:	24 30       	cpi	r18, 0x04	; 4
    6ae8:	31 05       	cpc	r19, r1
    6aea:	d8 f5       	brcc	.+118    	; 0x6b62 <malloc+0xae>
    6aec:	8a 81       	ldd	r24, Y+2	; 0x02
    6aee:	9b 81       	ldd	r25, Y+3	; 0x03
    6af0:	61 15       	cp	r22, r1
    6af2:	71 05       	cpc	r23, r1
    6af4:	89 f1       	breq	.+98     	; 0x6b58 <malloc+0xa4>
    6af6:	fb 01       	movw	r30, r22
    6af8:	93 83       	std	Z+3, r25	; 0x03
    6afa:	82 83       	std	Z+2, r24	; 0x02
    6afc:	fe 01       	movw	r30, r28
    6afe:	11 c0       	rjmp	.+34     	; 0x6b22 <malloc+0x6e>
    6b00:	40 81       	ld	r20, Z
    6b02:	51 81       	ldd	r21, Z+1	; 0x01
    6b04:	02 81       	ldd	r16, Z+2	; 0x02
    6b06:	13 81       	ldd	r17, Z+3	; 0x03
    6b08:	48 17       	cp	r20, r24
    6b0a:	59 07       	cpc	r21, r25
    6b0c:	e0 f0       	brcs	.+56     	; 0x6b46 <malloc+0x92>
    6b0e:	48 17       	cp	r20, r24
    6b10:	59 07       	cpc	r21, r25
    6b12:	99 f4       	brne	.+38     	; 0x6b3a <malloc+0x86>
    6b14:	10 97       	sbiw	r26, 0x00	; 0
    6b16:	61 f0       	breq	.+24     	; 0x6b30 <malloc+0x7c>
    6b18:	12 96       	adiw	r26, 0x02	; 2
    6b1a:	0c 93       	st	X, r16
    6b1c:	12 97       	sbiw	r26, 0x02	; 2
    6b1e:	13 96       	adiw	r26, 0x03	; 3
    6b20:	1c 93       	st	X, r17
    6b22:	32 96       	adiw	r30, 0x02	; 2
    6b24:	cf 01       	movw	r24, r30
    6b26:	df 91       	pop	r29
    6b28:	cf 91       	pop	r28
    6b2a:	1f 91       	pop	r17
    6b2c:	0f 91       	pop	r16
    6b2e:	08 95       	ret
    6b30:	00 93 45 03 	sts	0x0345, r16	; 0x800345 <__flp>
    6b34:	10 93 46 03 	sts	0x0346, r17	; 0x800346 <__flp+0x1>
    6b38:	f4 cf       	rjmp	.-24     	; 0x6b22 <malloc+0x6e>
    6b3a:	21 15       	cp	r18, r1
    6b3c:	31 05       	cpc	r19, r1
    6b3e:	51 f0       	breq	.+20     	; 0x6b54 <malloc+0xa0>
    6b40:	42 17       	cp	r20, r18
    6b42:	53 07       	cpc	r21, r19
    6b44:	38 f0       	brcs	.+14     	; 0x6b54 <malloc+0xa0>
    6b46:	a9 01       	movw	r20, r18
    6b48:	db 01       	movw	r26, r22
    6b4a:	9a 01       	movw	r18, r20
    6b4c:	bd 01       	movw	r22, r26
    6b4e:	df 01       	movw	r26, r30
    6b50:	f8 01       	movw	r30, r16
    6b52:	c1 cf       	rjmp	.-126    	; 0x6ad6 <malloc+0x22>
    6b54:	ef 01       	movw	r28, r30
    6b56:	f9 cf       	rjmp	.-14     	; 0x6b4a <malloc+0x96>
    6b58:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <__flp+0x1>
    6b5c:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <__flp>
    6b60:	cd cf       	rjmp	.-102    	; 0x6afc <malloc+0x48>
    6b62:	fe 01       	movw	r30, r28
    6b64:	e2 0f       	add	r30, r18
    6b66:	f3 1f       	adc	r31, r19
    6b68:	81 93       	st	Z+, r24
    6b6a:	91 93       	st	Z+, r25
    6b6c:	22 50       	subi	r18, 0x02	; 2
    6b6e:	31 09       	sbc	r19, r1
    6b70:	39 83       	std	Y+1, r19	; 0x01
    6b72:	28 83       	st	Y, r18
    6b74:	d7 cf       	rjmp	.-82     	; 0x6b24 <malloc+0x70>
    6b76:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <__brkval>
    6b7a:	30 91 44 03 	lds	r19, 0x0344	; 0x800344 <__brkval+0x1>
    6b7e:	23 2b       	or	r18, r19
    6b80:	41 f4       	brne	.+16     	; 0x6b92 <malloc+0xde>
    6b82:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__malloc_heap_start>
    6b86:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <__malloc_heap_start+0x1>
    6b8a:	30 93 44 03 	sts	0x0344, r19	; 0x800344 <__brkval+0x1>
    6b8e:	20 93 43 03 	sts	0x0343, r18	; 0x800343 <__brkval>
    6b92:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <__malloc_heap_end>
    6b96:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <__malloc_heap_end+0x1>
    6b9a:	21 15       	cp	r18, r1
    6b9c:	31 05       	cpc	r19, r1
    6b9e:	41 f4       	brne	.+16     	; 0x6bb0 <malloc+0xfc>
    6ba0:	2d b7       	in	r18, 0x3d	; 61
    6ba2:	3e b7       	in	r19, 0x3e	; 62
    6ba4:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <__malloc_margin>
    6ba8:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <__malloc_margin+0x1>
    6bac:	24 1b       	sub	r18, r20
    6bae:	35 0b       	sbc	r19, r21
    6bb0:	e0 91 43 03 	lds	r30, 0x0343	; 0x800343 <__brkval>
    6bb4:	f0 91 44 03 	lds	r31, 0x0344	; 0x800344 <__brkval+0x1>
    6bb8:	e2 17       	cp	r30, r18
    6bba:	f3 07       	cpc	r31, r19
    6bbc:	a0 f4       	brcc	.+40     	; 0x6be6 <malloc+0x132>
    6bbe:	2e 1b       	sub	r18, r30
    6bc0:	3f 0b       	sbc	r19, r31
    6bc2:	28 17       	cp	r18, r24
    6bc4:	39 07       	cpc	r19, r25
    6bc6:	78 f0       	brcs	.+30     	; 0x6be6 <malloc+0x132>
    6bc8:	ac 01       	movw	r20, r24
    6bca:	4e 5f       	subi	r20, 0xFE	; 254
    6bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    6bce:	24 17       	cp	r18, r20
    6bd0:	35 07       	cpc	r19, r21
    6bd2:	48 f0       	brcs	.+18     	; 0x6be6 <malloc+0x132>
    6bd4:	4e 0f       	add	r20, r30
    6bd6:	5f 1f       	adc	r21, r31
    6bd8:	50 93 44 03 	sts	0x0344, r21	; 0x800344 <__brkval+0x1>
    6bdc:	40 93 43 03 	sts	0x0343, r20	; 0x800343 <__brkval>
    6be0:	81 93       	st	Z+, r24
    6be2:	91 93       	st	Z+, r25
    6be4:	9f cf       	rjmp	.-194    	; 0x6b24 <malloc+0x70>
    6be6:	f0 e0       	ldi	r31, 0x00	; 0
    6be8:	e0 e0       	ldi	r30, 0x00	; 0
    6bea:	9c cf       	rjmp	.-200    	; 0x6b24 <malloc+0x70>

00006bec <free>:
free():
    6bec:	cf 93       	push	r28
    6bee:	df 93       	push	r29
    6bf0:	00 97       	sbiw	r24, 0x00	; 0
    6bf2:	e9 f0       	breq	.+58     	; 0x6c2e <free+0x42>
    6bf4:	fc 01       	movw	r30, r24
    6bf6:	32 97       	sbiw	r30, 0x02	; 2
    6bf8:	13 82       	std	Z+3, r1	; 0x03
    6bfa:	12 82       	std	Z+2, r1	; 0x02
    6bfc:	a0 91 45 03 	lds	r26, 0x0345	; 0x800345 <__flp>
    6c00:	b0 91 46 03 	lds	r27, 0x0346	; 0x800346 <__flp+0x1>
    6c04:	ed 01       	movw	r28, r26
    6c06:	30 e0       	ldi	r19, 0x00	; 0
    6c08:	20 e0       	ldi	r18, 0x00	; 0
    6c0a:	10 97       	sbiw	r26, 0x00	; 0
    6c0c:	a1 f4       	brne	.+40     	; 0x6c36 <free+0x4a>
    6c0e:	20 81       	ld	r18, Z
    6c10:	31 81       	ldd	r19, Z+1	; 0x01
    6c12:	82 0f       	add	r24, r18
    6c14:	93 1f       	adc	r25, r19
    6c16:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <__brkval>
    6c1a:	30 91 44 03 	lds	r19, 0x0344	; 0x800344 <__brkval+0x1>
    6c1e:	28 17       	cp	r18, r24
    6c20:	39 07       	cpc	r19, r25
    6c22:	09 f0       	breq	.+2      	; 0x6c26 <free+0x3a>
    6c24:	61 c0       	rjmp	.+194    	; 0x6ce8 <free+0xfc>
    6c26:	f0 93 44 03 	sts	0x0344, r31	; 0x800344 <__brkval+0x1>
    6c2a:	e0 93 43 03 	sts	0x0343, r30	; 0x800343 <__brkval>
    6c2e:	df 91       	pop	r29
    6c30:	cf 91       	pop	r28
    6c32:	08 95       	ret
    6c34:	ea 01       	movw	r28, r20
    6c36:	ce 17       	cp	r28, r30
    6c38:	df 07       	cpc	r29, r31
    6c3a:	e8 f5       	brcc	.+122    	; 0x6cb6 <free+0xca>
    6c3c:	4a 81       	ldd	r20, Y+2	; 0x02
    6c3e:	5b 81       	ldd	r21, Y+3	; 0x03
    6c40:	9e 01       	movw	r18, r28
    6c42:	41 15       	cp	r20, r1
    6c44:	51 05       	cpc	r21, r1
    6c46:	b1 f7       	brne	.-20     	; 0x6c34 <free+0x48>
    6c48:	e9 01       	movw	r28, r18
    6c4a:	fb 83       	std	Y+3, r31	; 0x03
    6c4c:	ea 83       	std	Y+2, r30	; 0x02
    6c4e:	49 91       	ld	r20, Y+
    6c50:	59 91       	ld	r21, Y+
    6c52:	c4 0f       	add	r28, r20
    6c54:	d5 1f       	adc	r29, r21
    6c56:	ec 17       	cp	r30, r28
    6c58:	fd 07       	cpc	r31, r29
    6c5a:	61 f4       	brne	.+24     	; 0x6c74 <free+0x88>
    6c5c:	80 81       	ld	r24, Z
    6c5e:	91 81       	ldd	r25, Z+1	; 0x01
    6c60:	02 96       	adiw	r24, 0x02	; 2
    6c62:	84 0f       	add	r24, r20
    6c64:	95 1f       	adc	r25, r21
    6c66:	e9 01       	movw	r28, r18
    6c68:	99 83       	std	Y+1, r25	; 0x01
    6c6a:	88 83       	st	Y, r24
    6c6c:	82 81       	ldd	r24, Z+2	; 0x02
    6c6e:	93 81       	ldd	r25, Z+3	; 0x03
    6c70:	9b 83       	std	Y+3, r25	; 0x03
    6c72:	8a 83       	std	Y+2, r24	; 0x02
    6c74:	f0 e0       	ldi	r31, 0x00	; 0
    6c76:	e0 e0       	ldi	r30, 0x00	; 0
    6c78:	12 96       	adiw	r26, 0x02	; 2
    6c7a:	8d 91       	ld	r24, X+
    6c7c:	9c 91       	ld	r25, X
    6c7e:	13 97       	sbiw	r26, 0x03	; 3
    6c80:	00 97       	sbiw	r24, 0x00	; 0
    6c82:	b9 f5       	brne	.+110    	; 0x6cf2 <free+0x106>
    6c84:	2d 91       	ld	r18, X+
    6c86:	3c 91       	ld	r19, X
    6c88:	11 97       	sbiw	r26, 0x01	; 1
    6c8a:	cd 01       	movw	r24, r26
    6c8c:	02 96       	adiw	r24, 0x02	; 2
    6c8e:	82 0f       	add	r24, r18
    6c90:	93 1f       	adc	r25, r19
    6c92:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <__brkval>
    6c96:	30 91 44 03 	lds	r19, 0x0344	; 0x800344 <__brkval+0x1>
    6c9a:	28 17       	cp	r18, r24
    6c9c:	39 07       	cpc	r19, r25
    6c9e:	39 f6       	brne	.-114    	; 0x6c2e <free+0x42>
    6ca0:	30 97       	sbiw	r30, 0x00	; 0
    6ca2:	51 f5       	brne	.+84     	; 0x6cf8 <free+0x10c>
    6ca4:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <__flp+0x1>
    6ca8:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <__flp>
    6cac:	b0 93 44 03 	sts	0x0344, r27	; 0x800344 <__brkval+0x1>
    6cb0:	a0 93 43 03 	sts	0x0343, r26	; 0x800343 <__brkval>
    6cb4:	bc cf       	rjmp	.-136    	; 0x6c2e <free+0x42>
    6cb6:	d3 83       	std	Z+3, r29	; 0x03
    6cb8:	c2 83       	std	Z+2, r28	; 0x02
    6cba:	40 81       	ld	r20, Z
    6cbc:	51 81       	ldd	r21, Z+1	; 0x01
    6cbe:	84 0f       	add	r24, r20
    6cc0:	95 1f       	adc	r25, r21
    6cc2:	c8 17       	cp	r28, r24
    6cc4:	d9 07       	cpc	r29, r25
    6cc6:	61 f4       	brne	.+24     	; 0x6ce0 <free+0xf4>
    6cc8:	4e 5f       	subi	r20, 0xFE	; 254
    6cca:	5f 4f       	sbci	r21, 0xFF	; 255
    6ccc:	88 81       	ld	r24, Y
    6cce:	99 81       	ldd	r25, Y+1	; 0x01
    6cd0:	48 0f       	add	r20, r24
    6cd2:	59 1f       	adc	r21, r25
    6cd4:	51 83       	std	Z+1, r21	; 0x01
    6cd6:	40 83       	st	Z, r20
    6cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    6cda:	9b 81       	ldd	r25, Y+3	; 0x03
    6cdc:	93 83       	std	Z+3, r25	; 0x03
    6cde:	82 83       	std	Z+2, r24	; 0x02
    6ce0:	21 15       	cp	r18, r1
    6ce2:	31 05       	cpc	r19, r1
    6ce4:	09 f0       	breq	.+2      	; 0x6ce8 <free+0xfc>
    6ce6:	b0 cf       	rjmp	.-160    	; 0x6c48 <free+0x5c>
    6ce8:	f0 93 46 03 	sts	0x0346, r31	; 0x800346 <__flp+0x1>
    6cec:	e0 93 45 03 	sts	0x0345, r30	; 0x800345 <__flp>
    6cf0:	9e cf       	rjmp	.-196    	; 0x6c2e <free+0x42>
    6cf2:	fd 01       	movw	r30, r26
    6cf4:	dc 01       	movw	r26, r24
    6cf6:	c0 cf       	rjmp	.-128    	; 0x6c78 <free+0x8c>
    6cf8:	13 82       	std	Z+3, r1	; 0x03
    6cfa:	12 82       	std	Z+2, r1	; 0x02
    6cfc:	d7 cf       	rjmp	.-82     	; 0x6cac <free+0xc0>

00006cfe <realloc>:
realloc():
    6cfe:	b0 e0       	ldi	r27, 0x00	; 0
    6d00:	a0 e0       	ldi	r26, 0x00	; 0
    6d02:	e5 e8       	ldi	r30, 0x85	; 133
    6d04:	f6 e3       	ldi	r31, 0x36	; 54
    6d06:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__prologue_saves__+0x4>
    6d0a:	8c 01       	movw	r16, r24
    6d0c:	00 97       	sbiw	r24, 0x00	; 0
    6d0e:	51 f4       	brne	.+20     	; 0x6d24 <realloc+0x26>
    6d10:	cb 01       	movw	r24, r22
    6d12:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    6d16:	8c 01       	movw	r16, r24
    6d18:	c8 01       	movw	r24, r16
    6d1a:	cd b7       	in	r28, 0x3d	; 61
    6d1c:	de b7       	in	r29, 0x3e	; 62
    6d1e:	e0 e1       	ldi	r30, 0x10	; 16
    6d20:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <__epilogue_restores__+0x4>
    6d24:	fc 01       	movw	r30, r24
    6d26:	e6 0f       	add	r30, r22
    6d28:	f7 1f       	adc	r31, r23
    6d2a:	9c 01       	movw	r18, r24
    6d2c:	22 50       	subi	r18, 0x02	; 2
    6d2e:	31 09       	sbc	r19, r1
    6d30:	e2 17       	cp	r30, r18
    6d32:	f3 07       	cpc	r31, r19
    6d34:	08 f4       	brcc	.+2      	; 0x6d38 <realloc+0x3a>
    6d36:	9d c0       	rjmp	.+314    	; 0x6e72 <realloc+0x174>
    6d38:	d9 01       	movw	r26, r18
    6d3a:	cd 91       	ld	r28, X+
    6d3c:	dc 91       	ld	r29, X
    6d3e:	11 97       	sbiw	r26, 0x01	; 1
    6d40:	c6 17       	cp	r28, r22
    6d42:	d7 07       	cpc	r29, r23
    6d44:	98 f0       	brcs	.+38     	; 0x6d6c <realloc+0x6e>
    6d46:	c5 30       	cpi	r28, 0x05	; 5
    6d48:	d1 05       	cpc	r29, r1
    6d4a:	30 f3       	brcs	.-52     	; 0x6d18 <realloc+0x1a>
    6d4c:	ce 01       	movw	r24, r28
    6d4e:	04 97       	sbiw	r24, 0x04	; 4
    6d50:	86 17       	cp	r24, r22
    6d52:	97 07       	cpc	r25, r23
    6d54:	08 f3       	brcs	.-62     	; 0x6d18 <realloc+0x1a>
    6d56:	c6 1b       	sub	r28, r22
    6d58:	d7 0b       	sbc	r29, r23
    6d5a:	22 97       	sbiw	r28, 0x02	; 2
    6d5c:	c1 93       	st	Z+, r28
    6d5e:	d1 93       	st	Z+, r29
    6d60:	6d 93       	st	X+, r22
    6d62:	7c 93       	st	X, r23
    6d64:	cf 01       	movw	r24, r30
    6d66:	0e 94 f6 35 	call	0x6bec	; 0x6bec <free>
    6d6a:	d6 cf       	rjmp	.-84     	; 0x6d18 <realloc+0x1a>
    6d6c:	5b 01       	movw	r10, r22
    6d6e:	ac 1a       	sub	r10, r28
    6d70:	bd 0a       	sbc	r11, r29
    6d72:	4c 01       	movw	r8, r24
    6d74:	8c 0e       	add	r8, r28
    6d76:	9d 1e       	adc	r9, r29
    6d78:	a0 91 45 03 	lds	r26, 0x0345	; 0x800345 <__flp>
    6d7c:	b0 91 46 03 	lds	r27, 0x0346	; 0x800346 <__flp+0x1>
    6d80:	51 2c       	mov	r5, r1
    6d82:	41 2c       	mov	r4, r1
    6d84:	f1 2c       	mov	r15, r1
    6d86:	e1 2c       	mov	r14, r1
    6d88:	10 97       	sbiw	r26, 0x00	; 0
    6d8a:	31 f5       	brne	.+76     	; 0x6dd8 <realloc+0xda>
    6d8c:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <__brkval>
    6d90:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <__brkval+0x1>
    6d94:	88 15       	cp	r24, r8
    6d96:	99 05       	cpc	r25, r9
    6d98:	09 f0       	breq	.+2      	; 0x6d9c <realloc+0x9e>
    6d9a:	5c c0       	rjmp	.+184    	; 0x6e54 <realloc+0x156>
    6d9c:	46 16       	cp	r4, r22
    6d9e:	57 06       	cpc	r5, r23
    6da0:	08 f0       	brcs	.+2      	; 0x6da4 <realloc+0xa6>
    6da2:	58 c0       	rjmp	.+176    	; 0x6e54 <realloc+0x156>
    6da4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__malloc_heap_end>
    6da8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__malloc_heap_end+0x1>
    6dac:	00 97       	sbiw	r24, 0x00	; 0
    6dae:	41 f4       	brne	.+16     	; 0x6dc0 <realloc+0xc2>
    6db0:	8d b7       	in	r24, 0x3d	; 61
    6db2:	9e b7       	in	r25, 0x3e	; 62
    6db4:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <__malloc_margin>
    6db8:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <__malloc_margin+0x1>
    6dbc:	84 1b       	sub	r24, r20
    6dbe:	95 0b       	sbc	r25, r21
    6dc0:	e8 17       	cp	r30, r24
    6dc2:	f9 07       	cpc	r31, r25
    6dc4:	08 f0       	brcs	.+2      	; 0x6dc8 <realloc+0xca>
    6dc6:	55 c0       	rjmp	.+170    	; 0x6e72 <realloc+0x174>
    6dc8:	f0 93 44 03 	sts	0x0344, r31	; 0x800344 <__brkval+0x1>
    6dcc:	e0 93 43 03 	sts	0x0343, r30	; 0x800343 <__brkval>
    6dd0:	f9 01       	movw	r30, r18
    6dd2:	71 83       	std	Z+1, r23	; 0x01
    6dd4:	60 83       	st	Z, r22
    6dd6:	a0 cf       	rjmp	.-192    	; 0x6d18 <realloc+0x1a>
    6dd8:	8d 91       	ld	r24, X+
    6dda:	9c 91       	ld	r25, X
    6ddc:	11 97       	sbiw	r26, 0x01	; 1
    6dde:	12 96       	adiw	r26, 0x02	; 2
    6de0:	6c 90       	ld	r6, X
    6de2:	12 97       	sbiw	r26, 0x02	; 2
    6de4:	13 96       	adiw	r26, 0x03	; 3
    6de6:	7c 90       	ld	r7, X
    6de8:	13 97       	sbiw	r26, 0x03	; 3
    6dea:	a8 15       	cp	r26, r8
    6dec:	b9 05       	cpc	r27, r9
    6dee:	59 f5       	brne	.+86     	; 0x6e46 <realloc+0x148>
    6df0:	6c 01       	movw	r12, r24
    6df2:	42 e0       	ldi	r20, 0x02	; 2
    6df4:	c4 0e       	add	r12, r20
    6df6:	d1 1c       	adc	r13, r1
    6df8:	ca 14       	cp	r12, r10
    6dfa:	db 04       	cpc	r13, r11
    6dfc:	20 f1       	brcs	.+72     	; 0x6e46 <realloc+0x148>
    6dfe:	ac 01       	movw	r20, r24
    6e00:	4a 19       	sub	r20, r10
    6e02:	5b 09       	sbc	r21, r11
    6e04:	da 01       	movw	r26, r20
    6e06:	12 96       	adiw	r26, 0x02	; 2
    6e08:	15 97       	sbiw	r26, 0x05	; 5
    6e0a:	80 f0       	brcs	.+32     	; 0x6e2c <realloc+0x12e>
    6e0c:	62 82       	std	Z+2, r6	; 0x02
    6e0e:	73 82       	std	Z+3, r7	; 0x03
    6e10:	51 83       	std	Z+1, r21	; 0x01
    6e12:	40 83       	st	Z, r20
    6e14:	d9 01       	movw	r26, r18
    6e16:	6d 93       	st	X+, r22
    6e18:	7c 93       	st	X, r23
    6e1a:	e1 14       	cp	r14, r1
    6e1c:	f1 04       	cpc	r15, r1
    6e1e:	71 f0       	breq	.+28     	; 0x6e3c <realloc+0x13e>
    6e20:	d7 01       	movw	r26, r14
    6e22:	13 96       	adiw	r26, 0x03	; 3
    6e24:	fc 93       	st	X, r31
    6e26:	ee 93       	st	-X, r30
    6e28:	12 97       	sbiw	r26, 0x02	; 2
    6e2a:	76 cf       	rjmp	.-276    	; 0x6d18 <realloc+0x1a>
    6e2c:	22 96       	adiw	r28, 0x02	; 2
    6e2e:	8c 0f       	add	r24, r28
    6e30:	9d 1f       	adc	r25, r29
    6e32:	f9 01       	movw	r30, r18
    6e34:	91 83       	std	Z+1, r25	; 0x01
    6e36:	80 83       	st	Z, r24
    6e38:	f3 01       	movw	r30, r6
    6e3a:	ef cf       	rjmp	.-34     	; 0x6e1a <realloc+0x11c>
    6e3c:	f0 93 46 03 	sts	0x0346, r31	; 0x800346 <__flp+0x1>
    6e40:	e0 93 45 03 	sts	0x0345, r30	; 0x800345 <__flp>
    6e44:	69 cf       	rjmp	.-302    	; 0x6d18 <realloc+0x1a>
    6e46:	48 16       	cp	r4, r24
    6e48:	59 06       	cpc	r5, r25
    6e4a:	08 f4       	brcc	.+2      	; 0x6e4e <realloc+0x150>
    6e4c:	2c 01       	movw	r4, r24
    6e4e:	7d 01       	movw	r14, r26
    6e50:	d3 01       	movw	r26, r6
    6e52:	9a cf       	rjmp	.-204    	; 0x6d88 <realloc+0x8a>
    6e54:	cb 01       	movw	r24, r22
    6e56:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <malloc>
    6e5a:	7c 01       	movw	r14, r24
    6e5c:	00 97       	sbiw	r24, 0x00	; 0
    6e5e:	49 f0       	breq	.+18     	; 0x6e72 <realloc+0x174>
    6e60:	ae 01       	movw	r20, r28
    6e62:	b8 01       	movw	r22, r16
    6e64:	0e 94 41 37 	call	0x6e82	; 0x6e82 <memcpy>
    6e68:	c8 01       	movw	r24, r16
    6e6a:	0e 94 f6 35 	call	0x6bec	; 0x6bec <free>
    6e6e:	87 01       	movw	r16, r14
    6e70:	53 cf       	rjmp	.-346    	; 0x6d18 <realloc+0x1a>
    6e72:	10 e0       	ldi	r17, 0x00	; 0
    6e74:	00 e0       	ldi	r16, 0x00	; 0
    6e76:	50 cf       	rjmp	.-352    	; 0x6d18 <realloc+0x1a>

00006e78 <abort>:
abort():
    6e78:	81 e0       	ldi	r24, 0x01	; 1
    6e7a:	90 e0       	ldi	r25, 0x00	; 0
    6e7c:	f8 94       	cli
    6e7e:	0c 94 7d 37 	jmp	0x6efa	; 0x6efa <_exit>

00006e82 <memcpy>:
memcpy():
    6e82:	fb 01       	movw	r30, r22
    6e84:	dc 01       	movw	r26, r24
    6e86:	02 c0       	rjmp	.+4      	; 0x6e8c <memcpy+0xa>
    6e88:	01 90       	ld	r0, Z+
    6e8a:	0d 92       	st	X+, r0
    6e8c:	41 50       	subi	r20, 0x01	; 1
    6e8e:	50 40       	sbci	r21, 0x00	; 0
    6e90:	d8 f7       	brcc	.-10     	; 0x6e88 <memcpy+0x6>
    6e92:	08 95       	ret

00006e94 <strcmp>:
strcmp():
    6e94:	fb 01       	movw	r30, r22
    6e96:	dc 01       	movw	r26, r24
    6e98:	8d 91       	ld	r24, X+
    6e9a:	01 90       	ld	r0, Z+
    6e9c:	80 19       	sub	r24, r0
    6e9e:	01 10       	cpse	r0, r1
    6ea0:	d9 f3       	breq	.-10     	; 0x6e98 <strcmp+0x4>
    6ea2:	99 0b       	sbc	r25, r25
    6ea4:	08 95       	ret

00006ea6 <strcpy>:
strcpy():
    6ea6:	fb 01       	movw	r30, r22
    6ea8:	dc 01       	movw	r26, r24
    6eaa:	01 90       	ld	r0, Z+
    6eac:	0d 92       	st	X+, r0
    6eae:	00 20       	and	r0, r0
    6eb0:	e1 f7       	brne	.-8      	; 0x6eaa <strcpy+0x4>
    6eb2:	08 95       	ret

00006eb4 <sprintf>:
sprintf():
    6eb4:	ae e0       	ldi	r26, 0x0E	; 14
    6eb6:	b0 e0       	ldi	r27, 0x00	; 0
    6eb8:	e0 e6       	ldi	r30, 0x60	; 96
    6eba:	f7 e3       	ldi	r31, 0x37	; 55
    6ebc:	0c 94 1a 32 	jmp	0x6434	; 0x6434 <__prologue_saves__+0x1c>
    6ec0:	0d 89       	ldd	r16, Y+21	; 0x15
    6ec2:	1e 89       	ldd	r17, Y+22	; 0x16
    6ec4:	86 e0       	ldi	r24, 0x06	; 6
    6ec6:	8c 83       	std	Y+4, r24	; 0x04
    6ec8:	1a 83       	std	Y+2, r17	; 0x02
    6eca:	09 83       	std	Y+1, r16	; 0x01
    6ecc:	8f ef       	ldi	r24, 0xFF	; 255
    6ece:	9f e7       	ldi	r25, 0x7F	; 127
    6ed0:	9e 83       	std	Y+6, r25	; 0x06
    6ed2:	8d 83       	std	Y+5, r24	; 0x05
    6ed4:	ae 01       	movw	r20, r28
    6ed6:	47 5e       	subi	r20, 0xE7	; 231
    6ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    6eda:	6f 89       	ldd	r22, Y+23	; 0x17
    6edc:	78 8d       	ldd	r23, Y+24	; 0x18
    6ede:	ce 01       	movw	r24, r28
    6ee0:	01 96       	adiw	r24, 0x01	; 1
    6ee2:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <vfprintf>
    6ee6:	2f 81       	ldd	r18, Y+7	; 0x07
    6ee8:	38 85       	ldd	r19, Y+8	; 0x08
    6eea:	02 0f       	add	r16, r18
    6eec:	13 1f       	adc	r17, r19
    6eee:	f8 01       	movw	r30, r16
    6ef0:	10 82       	st	Z, r1
    6ef2:	2e 96       	adiw	r28, 0x0e	; 14
    6ef4:	e4 e0       	ldi	r30, 0x04	; 4
    6ef6:	0c 94 36 32 	jmp	0x646c	; 0x646c <__epilogue_restores__+0x1c>

00006efa <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    6efa:	f8 94       	cli

00006efc <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    6efc:	ff cf       	rjmp	.-2      	; 0x6efc <__stop_program>
