
/tmp/arduino/sketches/E7A643FC64B2773803B21EA345A1F641/main.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 bb 04 	jmp	0x976	; 0x976 <__ctors_end>
       4:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
       8:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
       c:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      10:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      14:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      18:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      1c:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      20:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      24:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      28:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      2c:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      30:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      34:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      38:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      3c:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      40:	0c 94 c9 28 	jmp	0x5192	; 0x5192 <__vector_16>
      44:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      48:	0c 94 29 27 	jmp	0x4e52	; 0x4e52 <__vector_18>
      4c:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <__vector_19>
      50:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      54:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      58:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      5c:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      60:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>
      64:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 3e       	cpi	r16, 0xE0	; 224
      6e:	5b 4f       	sbci	r21, 0xFB	; 251
      70:	5b 3e       	cpi	r21, 0xEB	; 235
      72:	3e 6b       	ori	r19, 0xBE	; 190
      74:	4f 6b       	ori	r20, 0xBF	; 191
      76:	3e 1c       	adc	r3, r14
      78:	3e 7c       	andi	r19, 0xCE	; 206
      7a:	3e 1c       	adc	r3, r14
      7c:	18 3c       	cpi	r17, 0xC8	; 200
      7e:	7e 3c       	cpi	r23, 0xCE	; 206
      80:	18 1c       	adc	r1, r8
      82:	57 7d       	andi	r21, 0xD7	; 215
      84:	57 1c       	adc	r5, r7
      86:	1c 5e       	subi	r17, 0xEC	; 236
      88:	7f 5e       	subi	r23, 0xEF	; 239
      8a:	1c 00       	.word	0x001c	; ????
      8c:	18 3c       	cpi	r17, 0xC8	; 200
      8e:	18 00       	.word	0x0018	; ????
      90:	ff e7       	ldi	r31, 0x7F	; 127
      92:	c3 e7       	ldi	r28, 0x73	; 115
      94:	ff 00       	.word	0x00ff	; ????
      96:	18 24       	eor	r1, r8
      98:	18 00       	.word	0x0018	; ????
      9a:	ff e7       	ldi	r31, 0x7F	; 127
      9c:	db e7       	ldi	r29, 0x7B	; 123
      9e:	ff 30       	cpi	r31, 0x0F	; 15
      a0:	48 3a       	cpi	r20, 0xA8	; 168
      a2:	06 0e       	add	r0, r22
      a4:	26 29       	or	r18, r6
      a6:	79 29       	or	r23, r9
      a8:	26 40       	sbci	r18, 0x06	; 6
      aa:	7f 05       	cpc	r23, r15
      ac:	05 07       	cpc	r16, r21
      ae:	40 7f       	andi	r20, 0xF0	; 240
      b0:	05 25       	eor	r16, r5
      b2:	3f 5a       	subi	r19, 0xAF	; 175
      b4:	3c e7       	ldi	r19, 0x7C	; 124
      b6:	3c 5a       	subi	r19, 0xAC	; 172
      b8:	7f 3e       	cpi	r23, 0xEF	; 239
      ba:	1c 1c       	adc	r1, r12
      bc:	08 08       	sbc	r0, r8
      be:	1c 1c       	adc	r1, r12
      c0:	3e 7f       	andi	r19, 0xFE	; 254
      c2:	14 22       	and	r1, r20
      c4:	7f 22       	and	r7, r31
      c6:	14 5f       	subi	r17, 0xF4	; 244
      c8:	5f 00       	.word	0x005f	; ????
      ca:	5f 5f       	subi	r21, 0xFF	; 255
      cc:	06 09       	sbc	r16, r6
      ce:	7f 01       	movw	r14, r30
      d0:	7f 00       	.word	0x007f	; ????
      d2:	66 89       	ldd	r22, Z+22	; 0x16
      d4:	95 6a       	ori	r25, 0xA5	; 165
      d6:	60 60       	ori	r22, 0x00	; 0
      d8:	60 60       	ori	r22, 0x00	; 0
      da:	60 94       	com	r6
      dc:	a2 ff       	sbrs	r26, 2
      de:	a2 94       	swap	r10
      e0:	08 04       	cpc	r0, r8
      e2:	7e 04       	cpc	r7, r14
      e4:	08 10       	cpse	r0, r8
      e6:	20 7e       	andi	r18, 0xE0	; 224
      e8:	20 10       	cpse	r2, r0
      ea:	08 08       	sbc	r0, r8
      ec:	2a 1c       	adc	r2, r10
      ee:	08 08       	sbc	r0, r8
      f0:	1c 2a       	or	r1, r28
      f2:	08 08       	sbc	r0, r8
      f4:	1e 10       	cpse	r1, r14
      f6:	10 10       	cpse	r1, r0
      f8:	10 0c       	add	r1, r0
      fa:	1e 0c       	add	r1, r14
      fc:	1e 0c       	add	r1, r14
      fe:	30 38       	cpi	r19, 0x80	; 128
     100:	3e 38       	cpi	r19, 0x8E	; 142
     102:	30 06       	cpc	r3, r16
     104:	0e 3e       	cpi	r16, 0xEE	; 238
     106:	0e 06       	cpc	r0, r30
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	00 5f       	subi	r16, 0xF0	; 240
     110:	00 00       	nop
     112:	00 07       	cpc	r16, r16
     114:	00 07       	cpc	r16, r16
     116:	00 14       	cp	r0, r0
     118:	7f 14       	cp	r7, r15
     11a:	7f 14       	cp	r7, r15
     11c:	24 2a       	or	r2, r20
     11e:	7f 2a       	or	r7, r31
     120:	12 23       	and	r17, r18
     122:	13 08       	sbc	r1, r3
     124:	64 62       	ori	r22, 0x24	; 36
     126:	36 49       	sbci	r19, 0x96	; 150
     128:	56 20       	and	r5, r6
     12a:	50 00       	.word	0x0050	; ????
     12c:	08 07       	cpc	r16, r24
     12e:	03 00       	.word	0x0003	; ????
     130:	00 1c       	adc	r0, r0
     132:	22 41       	sbci	r18, 0x12	; 18
     134:	00 00       	nop
     136:	41 22       	and	r4, r17
     138:	1c 00       	.word	0x001c	; ????
     13a:	2a 1c       	adc	r2, r10
     13c:	7f 1c       	adc	r7, r15
     13e:	2a 08       	sbc	r2, r10
     140:	08 3e       	cpi	r16, 0xE8	; 232
     142:	08 08       	sbc	r0, r8
     144:	00 80       	ld	r0, Z
     146:	70 30       	cpi	r23, 0x00	; 0
     148:	00 08       	sbc	r0, r0
     14a:	08 08       	sbc	r0, r8
     14c:	08 08       	sbc	r0, r8
     14e:	00 00       	nop
     150:	60 60       	ori	r22, 0x00	; 0
     152:	00 20       	and	r0, r0
     154:	10 08       	sbc	r1, r0
     156:	04 02       	muls	r16, r20
     158:	3e 51       	subi	r19, 0x1E	; 30
     15a:	49 45       	sbci	r20, 0x59	; 89
     15c:	3e 00       	.word	0x003e	; ????
     15e:	42 7f       	andi	r20, 0xF2	; 242
     160:	40 00       	.word	0x0040	; ????
     162:	72 49       	sbci	r23, 0x92	; 146
     164:	49 49       	sbci	r20, 0x99	; 153
     166:	46 21       	and	r20, r6
     168:	41 49       	sbci	r20, 0x91	; 145
     16a:	4d 33       	cpi	r20, 0x3D	; 61
     16c:	18 14       	cp	r1, r8
     16e:	12 7f       	andi	r17, 0xF2	; 242
     170:	10 27       	eor	r17, r16
     172:	45 45       	sbci	r20, 0x55	; 85
     174:	45 39       	cpi	r20, 0x95	; 149
     176:	3c 4a       	sbci	r19, 0xAC	; 172
     178:	49 49       	sbci	r20, 0x99	; 153
     17a:	31 41       	sbci	r19, 0x11	; 17
     17c:	21 11       	cpse	r18, r1
     17e:	09 07       	cpc	r16, r25
     180:	36 49       	sbci	r19, 0x96	; 150
     182:	49 49       	sbci	r20, 0x99	; 153
     184:	36 46       	sbci	r19, 0x66	; 102
     186:	49 49       	sbci	r20, 0x99	; 153
     188:	29 1e       	adc	r2, r25
     18a:	00 00       	nop
     18c:	14 00       	.word	0x0014	; ????
     18e:	00 00       	nop
     190:	40 34       	cpi	r20, 0x40	; 64
     192:	00 00       	nop
     194:	00 08       	sbc	r0, r0
     196:	14 22       	and	r1, r20
     198:	41 14       	cp	r4, r1
     19a:	14 14       	cp	r1, r4
     19c:	14 14       	cp	r1, r4
     19e:	00 41       	sbci	r16, 0x10	; 16
     1a0:	22 14       	cp	r2, r2
     1a2:	08 02       	muls	r16, r24
     1a4:	01 59       	subi	r16, 0x91	; 145
     1a6:	09 06       	cpc	r0, r25
     1a8:	3e 41       	sbci	r19, 0x1E	; 30
     1aa:	5d 59       	subi	r21, 0x9D	; 157
     1ac:	4e 7c       	andi	r20, 0xCE	; 206
     1ae:	12 11       	cpse	r17, r2
     1b0:	12 7c       	andi	r17, 0xC2	; 194
     1b2:	7f 49       	sbci	r23, 0x9F	; 159
     1b4:	49 49       	sbci	r20, 0x99	; 153
     1b6:	36 3e       	cpi	r19, 0xE6	; 230
     1b8:	41 41       	sbci	r20, 0x11	; 17
     1ba:	41 22       	and	r4, r17
     1bc:	7f 41       	sbci	r23, 0x1F	; 31
     1be:	41 41       	sbci	r20, 0x11	; 17
     1c0:	3e 7f       	andi	r19, 0xFE	; 254
     1c2:	49 49       	sbci	r20, 0x99	; 153
     1c4:	49 41       	sbci	r20, 0x19	; 25
     1c6:	7f 09       	sbc	r23, r15
     1c8:	09 09       	sbc	r16, r9
     1ca:	01 3e       	cpi	r16, 0xE1	; 225
     1cc:	41 41       	sbci	r20, 0x11	; 17
     1ce:	51 73       	andi	r21, 0x31	; 49
     1d0:	7f 08       	sbc	r7, r15
     1d2:	08 08       	sbc	r0, r8
     1d4:	7f 00       	.word	0x007f	; ????
     1d6:	41 7f       	andi	r20, 0xF1	; 241
     1d8:	41 00       	.word	0x0041	; ????
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	41 3f       	cpi	r20, 0xF1	; 241
     1de:	01 7f       	andi	r16, 0xF1	; 241
     1e0:	08 14       	cp	r0, r8
     1e2:	22 41       	sbci	r18, 0x12	; 18
     1e4:	7f 40       	sbci	r23, 0x0F	; 15
     1e6:	40 40       	sbci	r20, 0x00	; 0
     1e8:	40 7f       	andi	r20, 0xF0	; 240
     1ea:	02 1c       	adc	r0, r2
     1ec:	02 7f       	andi	r16, 0xF2	; 242
     1ee:	7f 04       	cpc	r7, r15
     1f0:	08 10       	cpse	r0, r8
     1f2:	7f 3e       	cpi	r23, 0xEF	; 239
     1f4:	41 41       	sbci	r20, 0x11	; 17
     1f6:	41 3e       	cpi	r20, 0xE1	; 225
     1f8:	7f 09       	sbc	r23, r15
     1fa:	09 09       	sbc	r16, r9
     1fc:	06 3e       	cpi	r16, 0xE6	; 230
     1fe:	41 51       	subi	r20, 0x11	; 17
     200:	21 5e       	subi	r18, 0xE1	; 225
     202:	7f 09       	sbc	r23, r15
     204:	19 29       	or	r17, r9
     206:	46 26       	eor	r4, r22
     208:	49 49       	sbci	r20, 0x99	; 153
     20a:	49 32       	cpi	r20, 0x29	; 41
     20c:	03 01       	movw	r0, r6
     20e:	7f 01       	movw	r14, r30
     210:	03 3f       	cpi	r16, 0xF3	; 243
     212:	40 40       	sbci	r20, 0x00	; 0
     214:	40 3f       	cpi	r20, 0xF0	; 240
     216:	1f 20       	and	r1, r15
     218:	40 20       	and	r4, r0
     21a:	1f 3f       	cpi	r17, 0xFF	; 255
     21c:	40 38       	cpi	r20, 0x80	; 128
     21e:	40 3f       	cpi	r20, 0xF0	; 240
     220:	63 14       	cp	r6, r3
     222:	08 14       	cp	r0, r8
     224:	63 03       	mulsu	r22, r19
     226:	04 78       	andi	r16, 0x84	; 132
     228:	04 03       	mulsu	r16, r20
     22a:	61 59       	subi	r22, 0x91	; 145
     22c:	49 4d       	sbci	r20, 0xD9	; 217
     22e:	43 00       	.word	0x0043	; ????
     230:	7f 41       	sbci	r23, 0x1F	; 31
     232:	41 41       	sbci	r20, 0x11	; 17
     234:	02 04       	cpc	r0, r2
     236:	08 10       	cpse	r0, r8
     238:	20 00       	.word	0x0020	; ????
     23a:	41 41       	sbci	r20, 0x11	; 17
     23c:	41 7f       	andi	r20, 0xF1	; 241
     23e:	04 02       	muls	r16, r20
     240:	01 02       	muls	r16, r17
     242:	04 40       	sbci	r16, 0x04	; 4
     244:	40 40       	sbci	r20, 0x00	; 0
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	00 03       	mulsu	r16, r16
     24a:	07 08       	sbc	r0, r7
     24c:	00 20       	and	r0, r0
     24e:	54 54       	subi	r21, 0x44	; 68
     250:	78 40       	sbci	r23, 0x08	; 8
     252:	7f 28       	or	r7, r15
     254:	44 44       	sbci	r20, 0x44	; 68
     256:	38 38       	cpi	r19, 0x88	; 136
     258:	44 44       	sbci	r20, 0x44	; 68
     25a:	44 28       	or	r4, r4
     25c:	38 44       	sbci	r19, 0x48	; 72
     25e:	44 28       	or	r4, r4
     260:	7f 38       	cpi	r23, 0x8F	; 143
     262:	54 54       	subi	r21, 0x44	; 68
     264:	54 18       	sub	r5, r4
     266:	00 08       	sbc	r0, r0
     268:	7e 09       	sbc	r23, r14
     26a:	02 18       	sub	r0, r2
     26c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     26e:	9c 78       	andi	r25, 0x8C	; 140
     270:	7f 08       	sbc	r7, r15
     272:	04 04       	cpc	r0, r4
     274:	78 00       	.word	0x0078	; ????
     276:	44 7d       	andi	r20, 0xD4	; 212
     278:	40 00       	.word	0x0040	; ????
     27a:	20 40       	sbci	r18, 0x00	; 0
     27c:	40 3d       	cpi	r20, 0xD0	; 208
     27e:	00 7f       	andi	r16, 0xF0	; 240
     280:	10 28       	or	r1, r0
     282:	44 00       	.word	0x0044	; ????
     284:	00 41       	sbci	r16, 0x10	; 16
     286:	7f 40       	sbci	r23, 0x0F	; 15
     288:	00 7c       	andi	r16, 0xC0	; 192
     28a:	04 78       	andi	r16, 0x84	; 132
     28c:	04 78       	andi	r16, 0x84	; 132
     28e:	7c 08       	sbc	r7, r12
     290:	04 04       	cpc	r0, r4
     292:	78 38       	cpi	r23, 0x88	; 136
     294:	44 44       	sbci	r20, 0x44	; 68
     296:	44 38       	cpi	r20, 0x84	; 132
     298:	fc 18       	sub	r15, r12
     29a:	24 24       	eor	r2, r4
     29c:	18 18       	sub	r1, r8
     29e:	24 24       	eor	r2, r4
     2a0:	18 fc       	.word	0xfc18	; ????
     2a2:	7c 08       	sbc	r7, r12
     2a4:	04 04       	cpc	r0, r4
     2a6:	08 48       	sbci	r16, 0x88	; 136
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	54 24       	eor	r5, r4
     2ac:	04 04       	cpc	r0, r4
     2ae:	3f 44       	sbci	r19, 0x4F	; 79
     2b0:	24 3c       	cpi	r18, 0xC4	; 196
     2b2:	40 40       	sbci	r20, 0x00	; 0
     2b4:	20 7c       	andi	r18, 0xC0	; 192
     2b6:	1c 20       	and	r1, r12
     2b8:	40 20       	and	r4, r0
     2ba:	1c 3c       	cpi	r17, 0xCC	; 204
     2bc:	40 30       	cpi	r20, 0x00	; 0
     2be:	40 3c       	cpi	r20, 0xC0	; 192
     2c0:	44 28       	or	r4, r4
     2c2:	10 28       	or	r1, r0
     2c4:	44 4c       	sbci	r20, 0xC4	; 196
     2c6:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x7554>
     2ca:	44 64       	ori	r20, 0x44	; 68
     2cc:	54 4c       	sbci	r21, 0xC4	; 196
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	08 36       	cpi	r16, 0x68	; 104
     2d2:	41 00       	.word	0x0041	; ????
     2d4:	00 00       	nop
     2d6:	77 00       	.word	0x0077	; ????
     2d8:	00 00       	nop
     2da:	41 36       	cpi	r20, 0x61	; 97
     2dc:	08 00       	.word	0x0008	; ????
     2de:	02 01       	movw	r0, r4
     2e0:	02 04       	cpc	r0, r2
     2e2:	02 3c       	cpi	r16, 0xC2	; 194
     2e4:	26 23       	and	r18, r22
     2e6:	26 3c       	cpi	r18, 0xC6	; 198
     2e8:	1e a1       	ldd	r17, Y+38	; 0x26
     2ea:	a1 61       	ori	r26, 0x11	; 17
     2ec:	12 3a       	cpi	r17, 0xA2	; 162
     2ee:	40 40       	sbci	r20, 0x00	; 0
     2f0:	20 7a       	andi	r18, 0xA0	; 160
     2f2:	38 54       	subi	r19, 0x48	; 72
     2f4:	54 55       	subi	r21, 0x54	; 84
     2f6:	59 21       	and	r21, r9
     2f8:	55 55       	subi	r21, 0x55	; 85
     2fa:	79 41       	sbci	r23, 0x19	; 25
     2fc:	21 54       	subi	r18, 0x41	; 65
     2fe:	54 78       	andi	r21, 0x84	; 132
     300:	41 21       	and	r20, r1
     302:	55 54       	subi	r21, 0x45	; 69
     304:	78 40       	sbci	r23, 0x08	; 8
     306:	20 54       	subi	r18, 0x40	; 64
     308:	55 79       	andi	r21, 0x95	; 149
     30a:	40 0c       	add	r4, r0
     30c:	1e 52       	subi	r17, 0x2E	; 46
     30e:	72 12       	cpse	r7, r18
     310:	39 55       	subi	r19, 0x59	; 89
     312:	55 55       	subi	r21, 0x55	; 85
     314:	59 39       	cpi	r21, 0x99	; 153
     316:	54 54       	subi	r21, 0x44	; 68
     318:	54 59       	subi	r21, 0x94	; 148
     31a:	39 55       	subi	r19, 0x59	; 89
     31c:	54 54       	subi	r21, 0x44	; 68
     31e:	58 00       	.word	0x0058	; ????
     320:	00 45       	sbci	r16, 0x50	; 80
     322:	7c 41       	sbci	r23, 0x1C	; 28
     324:	00 02       	muls	r16, r16
     326:	45 7d       	andi	r20, 0xD5	; 213
     328:	42 00       	.word	0x0042	; ????
     32a:	01 45       	sbci	r16, 0x51	; 81
     32c:	7c 40       	sbci	r23, 0x0C	; 12
     32e:	f0 29       	or	r31, r0
     330:	24 29       	or	r18, r4
     332:	f0 f0       	brcs	.+60     	; 0x370 <__trampolines_end+0x308>
     334:	28 25       	eor	r18, r8
     336:	28 f0       	brcs	.+10     	; 0x342 <__trampolines_end+0x2da>
     338:	7c 54       	subi	r23, 0x4C	; 76
     33a:	55 45       	sbci	r21, 0x55	; 85
     33c:	00 20       	and	r0, r0
     33e:	54 54       	subi	r21, 0x44	; 68
     340:	7c 54       	subi	r23, 0x4C	; 76
     342:	7c 0a       	sbc	r7, r28
     344:	09 7f       	andi	r16, 0xF9	; 249
     346:	49 32       	cpi	r20, 0x29	; 41
     348:	49 49       	sbci	r20, 0x99	; 153
     34a:	49 32       	cpi	r20, 0x29	; 41
     34c:	32 48       	sbci	r19, 0x82	; 130
     34e:	48 48       	sbci	r20, 0x88	; 136
     350:	32 32       	cpi	r19, 0x22	; 34
     352:	4a 48       	sbci	r20, 0x8A	; 138
     354:	48 30       	cpi	r20, 0x08	; 8
     356:	3a 41       	sbci	r19, 0x1A	; 26
     358:	41 21       	and	r20, r1
     35a:	7a 3a       	cpi	r23, 0xAA	; 170
     35c:	42 40       	sbci	r20, 0x02	; 2
     35e:	20 78       	andi	r18, 0x80	; 128
     360:	00 9d       	mul	r16, r0
     362:	a0 a0       	ldd	r10, Z+32	; 0x20
     364:	7d 39       	cpi	r23, 0x9D	; 157
     366:	44 44       	sbci	r20, 0x44	; 68
     368:	44 39       	cpi	r20, 0x94	; 148
     36a:	3d 40       	sbci	r19, 0x0D	; 13
     36c:	40 40       	sbci	r20, 0x00	; 0
     36e:	3d 3c       	cpi	r19, 0xCD	; 205
     370:	24 ff       	sbrs	r18, 4
     372:	24 24       	eor	r2, r4
     374:	48 7e       	andi	r20, 0xE8	; 232
     376:	49 43       	sbci	r20, 0x39	; 57
     378:	66 2b       	or	r22, r22
     37a:	2f fc       	.word	0xfc2f	; ????
     37c:	2f 2b       	or	r18, r31
     37e:	ff 09       	sbc	r31, r15
     380:	29 f6       	brne	.-118    	; 0x30c <__trampolines_end+0x2a4>
     382:	20 c0       	rjmp	.+64     	; 0x3c4 <__trampolines_end+0x35c>
     384:	88 7e       	andi	r24, 0xE8	; 232
     386:	09 03       	fmul	r16, r17
     388:	20 54       	subi	r18, 0x40	; 64
     38a:	54 79       	andi	r21, 0x94	; 148
     38c:	41 00       	.word	0x0041	; ????
     38e:	00 44       	sbci	r16, 0x40	; 64
     390:	7d 41       	sbci	r23, 0x1D	; 29
     392:	30 48       	sbci	r19, 0x80	; 128
     394:	48 4a       	sbci	r20, 0xA8	; 168
     396:	32 38       	cpi	r19, 0x82	; 130
     398:	40 40       	sbci	r20, 0x00	; 0
     39a:	22 7a       	andi	r18, 0xA2	; 162
     39c:	00 7a       	andi	r16, 0xA0	; 160
     39e:	0a 0a       	sbc	r0, r26
     3a0:	72 7d       	andi	r23, 0xD2	; 210
     3a2:	0d 19       	sub	r16, r13
     3a4:	31 7d       	andi	r19, 0xD1	; 209
     3a6:	26 29       	or	r18, r6
     3a8:	29 2f       	mov	r18, r25
     3aa:	28 26       	eor	r2, r24
     3ac:	29 29       	or	r18, r9
     3ae:	29 26       	eor	r2, r25
     3b0:	30 48       	sbci	r19, 0x80	; 128
     3b2:	4d 40       	sbci	r20, 0x0D	; 13
     3b4:	20 38       	cpi	r18, 0x80	; 128
     3b6:	08 08       	sbc	r0, r8
     3b8:	08 08       	sbc	r0, r8
     3ba:	08 08       	sbc	r0, r8
     3bc:	08 08       	sbc	r0, r8
     3be:	38 2f       	mov	r19, r24
     3c0:	10 c8       	rjmp	.-4064   	; 0xfffff3e2 <__eeprom_end+0xff7ef3e2>
     3c2:	ac ba       	out	0x1c, r10	; 28
     3c4:	2f 10       	cpse	r2, r15
     3c6:	28 34       	cpi	r18, 0x48	; 72
     3c8:	fa 00       	.word	0x00fa	; ????
     3ca:	00 7b       	andi	r16, 0xB0	; 176
     3cc:	00 00       	nop
     3ce:	08 14       	cp	r0, r8
     3d0:	2a 14       	cp	r2, r10
     3d2:	22 22       	and	r2, r18
     3d4:	14 2a       	or	r1, r20
     3d6:	14 08       	sbc	r1, r4
     3d8:	aa 00       	.word	0x00aa	; ????
     3da:	55 00       	.word	0x0055	; ????
     3dc:	aa aa       	std	Y+50, r10	; 0x32
     3de:	55 aa       	std	Z+53, r5	; 0x35
     3e0:	55 aa       	std	Z+53, r5	; 0x35
     3e2:	00 00       	nop
     3e4:	00 ff       	sbrs	r16, 0
     3e6:	00 10       	cpse	r0, r0
     3e8:	10 10       	cpse	r1, r0
     3ea:	ff 00       	.word	0x00ff	; ????
     3ec:	14 14       	cp	r1, r4
     3ee:	14 ff       	sbrs	r17, 4
     3f0:	00 10       	cpse	r0, r0
     3f2:	10 ff       	sbrs	r17, 0
     3f4:	00 ff       	sbrs	r16, 0
     3f6:	10 10       	cpse	r1, r0
     3f8:	f0 10       	cpse	r15, r0
     3fa:	f0 14       	cp	r15, r0
     3fc:	14 14       	cp	r1, r4
     3fe:	fc 00       	.word	0x00fc	; ????
     400:	14 14       	cp	r1, r4
     402:	f7 00       	.word	0x00f7	; ????
     404:	ff 00       	.word	0x00ff	; ????
     406:	00 ff       	sbrs	r16, 0
     408:	00 ff       	sbrs	r16, 0
     40a:	14 14       	cp	r1, r4
     40c:	f4 04       	cpc	r15, r4
     40e:	fc 14       	cp	r15, r12
     410:	14 17       	cp	r17, r20
     412:	10 1f       	adc	r17, r16
     414:	10 10       	cpse	r1, r0
     416:	1f 10       	cpse	r1, r15
     418:	1f 14       	cp	r1, r15
     41a:	14 14       	cp	r1, r4
     41c:	1f 00       	.word	0x001f	; ????
     41e:	10 10       	cpse	r1, r0
     420:	10 f0       	brcs	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     422:	00 00       	nop
     424:	00 00       	nop
     426:	1f 10       	cpse	r1, r15
     428:	10 10       	cpse	r1, r0
     42a:	10 1f       	adc	r17, r16
     42c:	10 10       	cpse	r1, r0
     42e:	10 10       	cpse	r1, r0
     430:	f0 10       	cpse	r15, r0
     432:	00 00       	nop
     434:	00 ff       	sbrs	r16, 0
     436:	10 10       	cpse	r1, r0
     438:	10 10       	cpse	r1, r0
     43a:	10 10       	cpse	r1, r0
     43c:	10 10       	cpse	r1, r0
     43e:	10 ff       	sbrs	r17, 0
     440:	10 00       	.word	0x0010	; ????
     442:	00 00       	nop
     444:	ff 14       	cp	r15, r15
     446:	00 00       	nop
     448:	ff 00       	.word	0x00ff	; ????
     44a:	ff 00       	.word	0x00ff	; ????
     44c:	00 1f       	adc	r16, r16
     44e:	10 17       	cp	r17, r16
     450:	00 00       	nop
     452:	fc 04       	cpc	r15, r12
     454:	f4 14       	cp	r15, r4
     456:	14 17       	cp	r17, r20
     458:	10 17       	cp	r17, r16
     45a:	14 14       	cp	r1, r4
     45c:	f4 04       	cpc	r15, r4
     45e:	f4 00       	.word	0x00f4	; ????
     460:	00 ff       	sbrs	r16, 0
     462:	00 f7       	brcc	.-64     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     464:	14 14       	cp	r1, r4
     466:	14 14       	cp	r1, r4
     468:	14 14       	cp	r1, r4
     46a:	14 f7       	brge	.-60     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     46c:	00 f7       	brcc	.-64     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     46e:	14 14       	cp	r1, r4
     470:	14 17       	cp	r17, r20
     472:	14 10       	cpse	r1, r4
     474:	10 1f       	adc	r17, r16
     476:	10 1f       	adc	r17, r16
     478:	14 14       	cp	r1, r4
     47a:	14 f4       	brge	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47c:	14 10       	cpse	r1, r4
     47e:	10 f0       	brcs	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     480:	10 f0       	brcs	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     482:	00 00       	nop
     484:	1f 10       	cpse	r1, r15
     486:	1f 00       	.word	0x001f	; ????
     488:	00 00       	nop
     48a:	1f 14       	cp	r1, r15
     48c:	00 00       	nop
     48e:	00 fc       	sbrc	r0, 0
     490:	14 00       	.word	0x0014	; ????
     492:	00 f0       	brcs	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     494:	10 f0       	brcs	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     496:	10 10       	cpse	r1, r0
     498:	ff 10       	cpse	r15, r15
     49a:	ff 14       	cp	r15, r15
     49c:	14 14       	cp	r1, r4
     49e:	ff 14       	cp	r15, r15
     4a0:	10 10       	cpse	r1, r0
     4a2:	10 1f       	adc	r17, r16
     4a4:	00 00       	nop
     4a6:	00 00       	nop
     4a8:	f0 10       	cpse	r15, r0
     4aa:	ff ff       	.word	0xffff	; ????
     4ac:	ff ff       	.word	0xffff	; ????
     4ae:	ff f0       	brie	.+62     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4b0:	f0 f0       	brcs	.+60     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4b2:	f0 f0       	brcs	.+60     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4b4:	ff ff       	.word	0xffff	; ????
     4b6:	ff 00       	.word	0x00ff	; ????
     4b8:	00 00       	nop
     4ba:	00 00       	nop
     4bc:	ff ff       	.word	0xffff	; ????
     4be:	0f 0f       	add	r16, r31
     4c0:	0f 0f       	add	r16, r31
     4c2:	0f 38       	cpi	r16, 0x8F	; 143
     4c4:	44 44       	sbci	r20, 0x44	; 68
     4c6:	38 44       	sbci	r19, 0x48	; 72
     4c8:	7c 2a       	or	r7, r28
     4ca:	2a 3e       	cpi	r18, 0xEA	; 234
     4cc:	14 7e       	andi	r17, 0xE4	; 228
     4ce:	02 02       	muls	r16, r18
     4d0:	06 06       	cpc	r0, r22
     4d2:	02 7e       	andi	r16, 0xE2	; 226
     4d4:	02 7e       	andi	r16, 0xE2	; 226
     4d6:	02 63       	ori	r16, 0x32	; 50
     4d8:	55 49       	sbci	r21, 0x95	; 149
     4da:	41 63       	ori	r20, 0x31	; 49
     4dc:	38 44       	sbci	r19, 0x48	; 72
     4de:	44 3c       	cpi	r20, 0xC4	; 196
     4e0:	04 40       	sbci	r16, 0x04	; 4
     4e2:	7e 20       	and	r7, r14
     4e4:	1e 20       	and	r1, r14
     4e6:	06 02       	muls	r16, r22
     4e8:	7e 02       	muls	r23, r30
     4ea:	02 99       	sbic	0x00, 2	; 0
     4ec:	a5 e7       	ldi	r26, 0x75	; 117
     4ee:	a5 99       	sbic	0x14, 5	; 20
     4f0:	1c 2a       	or	r1, r28
     4f2:	49 2a       	or	r4, r25
     4f4:	1c 4c       	sbci	r17, 0xCC	; 204
     4f6:	72 01       	movw	r14, r4
     4f8:	72 4c       	sbci	r23, 0xC2	; 194
     4fa:	30 4a       	sbci	r19, 0xA0	; 160
     4fc:	4d 4d       	sbci	r20, 0xDD	; 221
     4fe:	30 30       	cpi	r19, 0x00	; 0
     500:	48 78       	andi	r20, 0x88	; 136
     502:	48 30       	cpi	r20, 0x08	; 8
     504:	bc 62       	ori	r27, 0x2C	; 44
     506:	5a 46       	sbci	r21, 0x6A	; 106
     508:	3d 3e       	cpi	r19, 0xED	; 237
     50a:	49 49       	sbci	r20, 0x99	; 153
     50c:	49 00       	.word	0x0049	; ????
     50e:	7e 01       	movw	r14, r28
     510:	01 01       	movw	r0, r2
     512:	7e 2a       	or	r7, r30
     514:	2a 2a       	or	r2, r26
     516:	2a 2a       	or	r2, r26
     518:	44 44       	sbci	r20, 0x44	; 68
     51a:	5f 44       	sbci	r21, 0x4F	; 79
     51c:	44 40       	sbci	r20, 0x04	; 4
     51e:	51 4a       	sbci	r21, 0xA1	; 161
     520:	44 40       	sbci	r20, 0x04	; 4
     522:	40 44       	sbci	r20, 0x40	; 64
     524:	4a 51       	subi	r20, 0x1A	; 26
     526:	40 00       	.word	0x0040	; ????
     528:	00 ff       	sbrs	r16, 0
     52a:	01 03       	mulsu	r16, r17
     52c:	e0 80       	ld	r14, Z
     52e:	ff 00       	.word	0x00ff	; ????
     530:	00 08       	sbc	r0, r0
     532:	08 6b       	ori	r16, 0xB8	; 184
     534:	6b 08       	sbc	r6, r11
     536:	36 12       	cpse	r3, r22
     538:	36 24       	eor	r3, r6
     53a:	36 06       	cpc	r3, r22
     53c:	0f 09       	sbc	r16, r15
     53e:	0f 06       	cpc	r0, r31
     540:	00 00       	nop
     542:	18 18       	sub	r1, r8
     544:	00 00       	nop
     546:	00 10       	cpse	r0, r0
     548:	10 00       	.word	0x0010	; ????
     54a:	30 40       	sbci	r19, 0x00	; 0
     54c:	ff 01       	movw	r30, r30
     54e:	01 00       	.word	0x0001	; ????
     550:	1f 01       	movw	r2, r30
     552:	01 1e       	adc	r0, r17
     554:	00 19       	sub	r16, r0
     556:	1d 17       	cp	r17, r29
     558:	12 00       	.word	0x0012	; ????
     55a:	3c 3c       	cpi	r19, 0xCC	; 204
     55c:	3c 3c       	cpi	r19, 0xCC	; 204
     55e:	00 00       	nop
     560:	00 00       	nop
	...

00000563 <LCDWIKI_SPI::start(unsigned int)::SH1106_regValues>:
     563:	8d 00 10 00 ae 00 02 00 10 00 40 00 81 00 cf 00     ..........@.....
     573:	a1 00 c8 00 a6 00 a8 00 3f 00 d3 00 00 00 d5 00     ........?.......
     583:	80 00 d9 00 f1 00 da 00 12 00 db 00 40 00 20 00     ............@. .
     593:	02 00 8d 00 14 00 a4 00 a6 00 af 00                 ............

0000059f <LCDWIKI_SPI::start(unsigned int)::SSD1283A_regValues>:
     59f:	10 00 8e 2f 11 00 0c 00 07 00 21 00 28 00 06 00     .../......!.(...
     5af:	28 00 05 00 27 00 7f 05 29 00 a1 89 00 00 01 00     (...'...).......
     5bf:	ff ff 64 00 29 00 b0 80 ff ff 1e 00 29 00 fe ff     ..d.).......)...
     5cf:	07 00 23 02 ff ff 1e 00 07 00 33 02 01 00 83 21     ..#.......3....!
     5df:	03 00 30 68 2f 00 ff ff 2c 00 00 80 27 00 70 05     ..0h/...,...'.p.
     5ef:	02 00 00 03 0b 00 0c 58 12 00 09 06 13 00 00 31     .......X.......1

000005ff <LCDWIKI_SPI::start(unsigned int)::ST7735S_regValues>:
     5ff:	11 00 7f 78 b1 03 05 3c 3c b2 03 05 3c 3c b3 06     ...x...<<...<<..
     60f:	05 3c 3c 05 3c 3c b4 01 03 c0 03 28 08 04 c1 01     .<<.<<.....(....
     61f:	c0 c2 02 0d 00 c3 02 8d 2a c4 02 8d ee c5 01 1a     ........*.......
     62f:	17 01 05 36 01 08 e0 10 03 22 07 0a 2e 30 25 2a     ...6....."...0%*
     63f:	28 26 2e 3a 00 01 03 13 e1 10 04 16 06 0d 2d 26     (&.:..........-&
     64f:	23 27 27 25 2d 3b 00 01 04 13 3a 01 05 29 00        #''%-;....:..).

0000065e <LCDWIKI_SPI::start(unsigned int)::ILI9488_regValues>:
     65e:	f7 04 a9 51 2c 82 c0 02 11 09 c1 01 41 c5 03 00     ...Q,.......A...
     66e:	0a 80 b1 02 b0 11 b4 01 02 b6 02 02 22 b7 01 c6     ............"...
     67e:	be 02 00 04 e9 01 00 36 01 08 e0 0f 00 07 10 09     .......6........
     68e:	17 0b 41 89 4b 0a 0c 0e 18 1b 0f e1 0f 00 17 1a     ..A.K...........
     69e:	04 0e 06 2f 45 43 02 0a 09 32 36 0f 11 00 7f 78     .../EC...26....x
     6ae:	29 00                                               ).

000006b0 <LCDWIKI_SPI::start(unsigned int)::ILI9488_IPF>:
     6b0:	3a 01 55                                            :.U

000006b3 <LCDWIKI_SPI::start(unsigned int)::ILI9488_IPF>:
     6b3:	3a 01 66                                            :.f

000006b6 <LCDWIKI_SPI::start(unsigned int)::ILI9486_regValues>:
     6b6:	f7 04 a9 51 2c 82 c0 02 11 09 c1 01 41 c5 03 00     ...Q,.......A...
     6c6:	0a 80 b1 02 b0 11 b4 01 02 b6 02 02 22 b7 01 c6     ............"...
     6d6:	be 02 00 04 e9 01 00 36 01 08 3a 01 55 e0 0f 00     .......6..:.U...
     6e6:	07 10 09 17 0b 41 89 4b 0a 0c 0e 18 1b 0f e1 0f     .....A.K........
     6f6:	00 17 1a 04 0e 06 2f 45 43 02 0a 09 32 36 0f 11     ....../EC...26..
     706:	00 7f 78 29 00                                      ..x).

0000070b <LCDWIKI_SPI::start(unsigned int)::HX8347G_regValues>:
     70b:	2e 01 89 29 01 8f 2b 01 02 e2 01 00 e4 01 01 e5     ...)..+.........
     71b:	01 10 e6 01 01 e7 01 10 e8 01 70 f2 01 00 ea 01     ..........p.....
     72b:	00 eb 01 20 ec 01 3c ed 01 c8 e9 01 38 f1 01 01     ... ..<.....8...
     73b:	1b 01 1a 1a 01 01 24 01 61 25 01 5c 23 01 88 18     ......$.a%.\#...
     74b:	01 36 19 01 01 1f 01 88 7f 05 1f 01 80 7f 05 1f     .6..............
     75b:	01 90 7f 05 1f 01 d4 7f 05 17 01 05 36 01 00 28     ............6..(
     76b:	01 38 7f 28 28 01 3c 02 01 00 03 01 00 04 01 00     .8.((.<.........
     77b:	05 01 ef 06 01 00 07 01 00 08 01 01 09 01 3f        ..............?

0000078a <LCDWIKI_SPI::start(unsigned int)::HX8357D_regValues>:
     78a:	01 00 b9 03 ff 83 57 7f fa b3 04 00 00 06 06 b6     ......W.........
     79a:	01 25 b0 01 68 cc 01 05 b1 06 00 15 1c 1c 83 aa     .%..h...........
     7aa:	c0 06 50 50 01 3c 1e 08 b4 07 02 40 00 2a 2a 0d     ..PP.<.....@.**.
     7ba:	78 3a 01 55 36 01 c0 35 01 00 44 02 00 02 11 00     x:.U6..5..D.....
     7ca:	7f 96 29 00 7f 32                                   ..)..2

000007d0 <LCDWIKI_SPI::start(unsigned int)::ILI9341_regValues>:
     7d0:	01 00 7f 32 28 00 f6 03 01 01 00 cf 03 00 81 30     ...2(..........0
     7e0:	ed 04 64 03 12 81 e8 03 85 10 78 cb 05 39 2c 00     ..d.......x..9,.
     7f0:	34 02 f7 01 20 ea 02 00 00 b0 01 00 b4 01 00 c0     4... ...........
     800:	01 21 c1 01 11 c5 02 3f 3c c7 01 b5 36 01 88 3a     .!.....?<...6..:
     810:	01 55 b1 02 00 1b 36 01 48 f2 01 00 26 01 01 e0     .U....6.H...&...
     820:	0f 0f 26 24 0b 0e 09 54 a8 46 0c 17 09 0f 07 00     ..&$...T.F......
     830:	e1 0f 00 19 1b 04 10 07 2a 47 39 03 06 06 30 38     ........*G9...08
     840:	0f b7 01 07 11 00 7f 96 29 00                       ........).

0000084a <LCDWIKI_SPI::start(unsigned int)::ILI932x_regValues>:
     84a:	00 00 01 00 ff ff 32 00 01 00 00 01 02 00 00 07     ......2.........
     85a:	03 00 30 10 04 00 00 00 08 00 02 02 09 00 00 00     ..0.............
     86a:	0a 00 00 00 0c 00 00 00 0d 00 00 00 0f 00 00 00     ................
     87a:	10 00 00 00 11 00 07 00 12 00 00 00 13 00 00 00     ................
     88a:	ff ff c8 00 10 00 90 16 11 00 27 02 ff ff 32 00     ..........'...2.
     89a:	12 00 1a 00 ff ff 32 00 13 00 00 18 29 00 2a 00     ......2.....).*.
     8aa:	ff ff 32 00 30 00 00 00 31 00 00 00 32 00 00 00     ..2.0...1...2...
     8ba:	35 00 06 02 36 00 08 08 37 00 07 00 38 00 01 02     5...6...7...8...
     8ca:	39 00 00 00 3c 00 00 00 3d 00 00 00 20 00 00 00     9...<...=... ...
     8da:	21 00 00 00 50 00 00 00 51 00 ef 00 52 00 00 00     !...P...Q...R...
     8ea:	53 00 3f 01 60 00 00 a7 61 00 03 00 6a 00 00 00     S.?.`...a...j...
     8fa:	90 00 10 00 92 00 00 00 93 00 03 00 95 00 00 11     ................
     90a:	97 00 00 00 98 00 00 00 07 00 33 01                 ..........3.

00000916 <digital_pin_to_timer_PGM>:
     916:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     926:	00 00 00 00 00 00 00                                .......

0000092d <digital_pin_to_bit_mask_PGM>:
     92d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     93d:	04 08 10 20 40 80 40                                ... @.@

00000944 <digital_pin_to_port_PGM>:
     944:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     954:	03 03 03 03 02 02 03                                .......

0000095b <port_to_output_PGM>:
     95b:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000965 <port_to_mode_PGM>:
     965:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000970 <__ctors_start>:
__ctors_start():
     970:	1b 0f       	add	r17, r27
     972:	a5 0f       	add	r26, r21
     974:	8b 27       	eor	r24, r27

00000976 <__ctors_end>:
__dtors_end():
     976:	11 24       	eor	r1, r1
     978:	1f be       	out	0x3f, r1	; 63
     97a:	cf ef       	ldi	r28, 0xFF	; 255
     97c:	d8 e0       	ldi	r29, 0x08	; 8
     97e:	de bf       	out	0x3e, r29	; 62
     980:	cd bf       	out	0x3d, r28	; 61

00000982 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     982:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     984:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     986:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     988:	e8 ea       	ldi	r30, 0xA8	; 168
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     98a:	f3 e6       	ldi	r31, 0x63	; 99
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     98c:	02 c0       	rjmp	.+4      	; 0x992 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     98e:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     990:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     992:	ac 33       	cpi	r26, 0x3C	; 60
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     994:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     996:	d9 f7       	brne	.-10     	; 0x98e <__do_copy_data+0xc>

00000998 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     998:	27 e0       	ldi	r18, 0x07	; 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     99a:	ac e3       	ldi	r26, 0x3C	; 60
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     99c:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <.do_clear_bss_start>

000009a0 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     9a0:	1d 92       	st	X+, r1

000009a2 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     9a2:	ac 33       	cpi	r26, 0x3C	; 60
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     9a4:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <.do_clear_bss_loop>

000009a8 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     9a8:	14 e0       	ldi	r17, 0x04	; 4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     9aa:	cb eb       	ldi	r28, 0xBB	; 187
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     9ac:	d4 e0       	ldi	r29, 0x04	; 4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     9b0:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     9b2:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     9b4:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     9b8:	c8 3b       	cpi	r28, 0xB8	; 184
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     9ba:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__do_global_ctors+0x8>
     9be:	0e 94 b4 28 	call	0x5168	; 0x5168 <main>
     9c2:	0c 94 d2 31 	jmp	0x63a4	; 0x63a4 <_exit>

000009c6 <__bad_interrupt>:
__vector_22():
     9c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000009ca <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     9ca:	8e bd       	out	0x2e, r24	; 46
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     9cc:	00 00       	nop
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
     9ce:	0d b4       	in	r0, 0x2d	; 45
     9d0:	07 fe       	sbrs	r0, 7
     9d2:	fd cf       	rjmp	.-6      	; 0x9ce <SPIClass::transfer(unsigned char)+0x4>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:221
    return SPDR;
     9d4:	8e b5       	in	r24, 0x2e	; 46
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:222
  }
     9d6:	08 95       	ret

000009d8 <adc_config()>:
_Z10adc_configv():
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:9
#include "avrio.h"
#include "pins.h"


void adc_config() {
  digitalWrite(ADC_CS_PIN, LOW);
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	85 e1       	ldi	r24, 0x15	; 21
     9dc:	0e 94 fe 29 	call	0x53fc	; 0x53fc <digitalWrite>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:10
  SPI.transfer(DEVICE_ADDRESS << 6 | 0b00000110);
     9e0:	86 e4       	ldi	r24, 0x46	; 70
     9e2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:11
  SPI.transfer(0b11100000); //CONFIG0:  CLK_SEL
     9e6:	80 ee       	ldi	r24, 0xE0	; 224
     9e8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:12
  SPI.transfer(0b00111100); //CONFIG1:  OSR
     9ec:	8c e3       	ldi	r24, 0x3C	; 60
     9ee:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:13
  SPI.transfer(0b10101011); //CONFIG2:  GAIN, AZ_MUX
     9f2:	8b ea       	ldi	r24, 0xAB	; 171
     9f4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:14
  SPI.transfer(0b00000000); //CONFIG3:  Default
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:15
  SPI.transfer(0b00000110); //IRQ:      IRQ_MODE, EN_STP
     9fe:	86 e0       	ldi	r24, 0x06	; 6
     a00:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPIClass::transfer(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/adc.cpp:16
  digitalWrite(ADC_CS_PIN, HIGH);
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	85 e1       	ldi	r24, 0x15	; 21
     a08:	0c 94 fe 29 	jmp	0x53fc	; 0x53fc <digitalWrite>

00000a0c <is_valid_pin(unsigned char)>:
_Z12is_valid_pinh():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:107
  uint8_t pin_mod = pin % 10;

  if(data_direction) {data_direction = 0xFF;}

  *ddr = (data_direction & (*ddr | (0x01 << pin_mod))) | (~data_direction & (*ddr & ~(0x01 << pin_mod)));
}
     a0c:	28 2f       	mov	r18, r24
     a0e:	86 ef       	ldi	r24, 0xF6	; 246
     a10:	82 0f       	add	r24, r18
     a12:	8c 31       	cpi	r24, 0x1C	; 28
     a14:	48 f4       	brcc	.+18     	; 0xa28 <is_valid_pin(unsigned char)+0x1c>
     a16:	82 2f       	mov	r24, r18
     a18:	6a e0       	ldi	r22, 0x0A	; 10
     a1a:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__udivmodqi4>
     a1e:	98 30       	cpi	r25, 0x08	; 8
     a20:	18 f4       	brcc	.+6      	; 0xa28 <is_valid_pin(unsigned char)+0x1c>
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	2b 31       	cpi	r18, 0x1B	; 27
     a26:	09 f4       	brne	.+2      	; 0xa2a <is_valid_pin(unsigned char)+0x1e>
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	08 95       	ret

00000a2c <get_port_address(unsigned char)>:
_Z16get_port_addressh():
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	c8 2f       	mov	r28, r24
     a32:	6a e0       	ldi	r22, 0x0A	; 10
     a34:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__udivmodqi4>
     a38:	d9 2f       	mov	r29, r25
     a3a:	8c 2f       	mov	r24, r28
     a3c:	0e 94 06 05 	call	0xa0c	; 0xa0c <is_valid_pin(unsigned char)>
     a40:	88 23       	and	r24, r24
     a42:	b9 f0       	breq	.+46     	; 0xa72 <get_port_address(unsigned char)+0x46>
     a44:	2c 2f       	mov	r18, r28
     a46:	2d 1b       	sub	r18, r29
     a48:	33 0b       	sbc	r19, r19
     a4a:	c9 01       	movw	r24, r18
     a4c:	6a e0       	ldi	r22, 0x0A	; 10
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__divmodhi4>
     a54:	61 50       	subi	r22, 0x01	; 1
     a56:	71 09       	sbc	r23, r1
     a58:	63 30       	cpi	r22, 0x03	; 3
     a5a:	71 05       	cpc	r23, r1
     a5c:	50 f4       	brcc	.+20     	; 0xa72 <get_port_address(unsigned char)+0x46>
     a5e:	66 0f       	add	r22, r22
     a60:	77 1f       	adc	r23, r23
     a62:	fb 01       	movw	r30, r22
     a64:	ee 51       	subi	r30, 0x1E	; 30
     a66:	fe 4f       	sbci	r31, 0xFE	; 254
     a68:	80 81       	ld	r24, Z
     a6a:	91 81       	ldd	r25, Z+1	; 0x01
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	fa cf       	rjmp	.-12     	; 0xa6c <get_port_address(unsigned char)+0x40>

00000a78 <get_pin_address(unsigned char)>:
_Z15get_pin_addressh():
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	c8 2f       	mov	r28, r24
     a7e:	6a e0       	ldi	r22, 0x0A	; 10
     a80:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__udivmodqi4>
     a84:	d9 2f       	mov	r29, r25
     a86:	8c 2f       	mov	r24, r28
     a88:	0e 94 06 05 	call	0xa0c	; 0xa0c <is_valid_pin(unsigned char)>
     a8c:	88 23       	and	r24, r24
     a8e:	b9 f0       	breq	.+46     	; 0xabe <get_pin_address(unsigned char)+0x46>
     a90:	2c 2f       	mov	r18, r28
     a92:	2d 1b       	sub	r18, r29
     a94:	33 0b       	sbc	r19, r19
     a96:	c9 01       	movw	r24, r18
     a98:	6a e0       	ldi	r22, 0x0A	; 10
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__divmodhi4>
     aa0:	61 50       	subi	r22, 0x01	; 1
     aa2:	71 09       	sbc	r23, r1
     aa4:	63 30       	cpi	r22, 0x03	; 3
     aa6:	71 05       	cpc	r23, r1
     aa8:	50 f4       	brcc	.+20     	; 0xabe <get_pin_address(unsigned char)+0x46>
     aaa:	66 0f       	add	r22, r22
     aac:	77 1f       	adc	r23, r23
     aae:	fb 01       	movw	r30, r22
     ab0:	e4 52       	subi	r30, 0x24	; 36
     ab2:	fe 4f       	sbci	r31, 0xFE	; 254
     ab4:	80 81       	ld	r24, Z
     ab6:	91 81       	ldd	r25, Z+1	; 0x01
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	fa cf       	rjmp	.-12     	; 0xab8 <get_pin_address(unsigned char)+0x40>

00000ac4 <write(unsigned char, char)>:
_Z5writehc():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:112


// WRITING to pins

void write(uint8_t pin, char value) {
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	c8 2f       	mov	r28, r24
     aca:	d6 2f       	mov	r29, r22
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:113
  volatile uint8_t *port = get_port_address(pin);
     acc:	0e 94 16 05 	call	0xa2c	; 0xa2c <get_port_address(unsigned char)>
     ad0:	fc 01       	movw	r30, r24
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:118
  uint8_t pin_mod = pin % 10;

  if(value) {value = 0xFF;}

  *port = (value & (*port | (0x01 << pin_mod))) | (~value & (*port & ~(0x01 << pin_mod)));
     ad2:	20 81       	ld	r18, Z
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:114

// WRITING to pins

void write(uint8_t pin, char value) {
  volatile uint8_t *port = get_port_address(pin);
  uint8_t pin_mod = pin % 10;
     ad4:	8c 2f       	mov	r24, r28
     ad6:	6a e0       	ldi	r22, 0x0A	; 10
     ad8:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__udivmodqi4>
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:118

  if(value) {value = 0xFF;}

  *port = (value & (*port | (0x01 << pin_mod))) | (~value & (*port & ~(0x01 << pin_mod)));
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <write(unsigned char, char)+0x20>
     ae2:	44 0f       	add	r20, r20
     ae4:	9a 95       	dec	r25
     ae6:	ea f7       	brpl	.-6      	; 0xae2 <write(unsigned char, char)+0x1e>
     ae8:	90 81       	ld	r25, Z
     aea:	84 2f       	mov	r24, r20
     aec:	80 95       	com	r24
     aee:	89 23       	and	r24, r25
     af0:	24 2b       	or	r18, r20
     af2:	28 27       	eor	r18, r24
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:116

void write(uint8_t pin, char value) {
  volatile uint8_t *port = get_port_address(pin);
  uint8_t pin_mod = pin % 10;

  if(value) {value = 0xFF;}
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	d1 11       	cpse	r29, r1
     af8:	01 c0       	rjmp	.+2      	; 0xafc <write(unsigned char, char)+0x38>
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	91 95       	neg	r25
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:118

  *port = (value & (*port | (0x01 << pin_mod))) | (~value & (*port & ~(0x01 << pin_mod)));
     afe:	29 23       	and	r18, r25
     b00:	28 27       	eor	r18, r24
     b02:	20 83       	st	Z, r18
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:119
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <toggle(unsigned char)>:
_Z6toggleh():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:121

void toggle(uint8_t pin) {
     b0a:	cf 93       	push	r28
     b0c:	c8 2f       	mov	r28, r24
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:122
  volatile uint8_t *port = get_port_address(pin);
     b0e:	0e 94 16 05 	call	0xa2c	; 0xa2c <get_port_address(unsigned char)>
     b12:	fc 01       	movw	r30, r24
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:125
  uint8_t pin_mod = pin % 10;

  *port ^= 0x01 << pin_mod;
     b14:	20 81       	ld	r18, Z
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:123
  *port = (value & (*port | (0x01 << pin_mod))) | (~value & (*port & ~(0x01 << pin_mod)));
}

void toggle(uint8_t pin) {
  volatile uint8_t *port = get_port_address(pin);
  uint8_t pin_mod = pin % 10;
     b16:	8c 2f       	mov	r24, r28
     b18:	6a e0       	ldi	r22, 0x0A	; 10
     b1a:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__udivmodqi4>
     b1e:	39 2f       	mov	r19, r25
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:125

  *port ^= 0x01 << pin_mod;
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <toggle(unsigned char)+0x1e>
     b26:	88 0f       	add	r24, r24
     b28:	3a 95       	dec	r19
     b2a:	ea f7       	brpl	.-6      	; 0xb26 <toggle(unsigned char)+0x1c>
     b2c:	28 27       	eor	r18, r24
     b2e:	20 83       	st	Z, r18
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:126
}
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <pulse(unsigned char)>:
_Z5pulseh():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:128

void pulse(uint8_t pin) {
     b34:	cf 93       	push	r28
     b36:	c8 2f       	mov	r28, r24
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:129
  toggle(pin);
     b38:	0e 94 85 05 	call	0xb0a	; 0xb0a <toggle(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:130
  toggle(pin);
     b3c:	8c 2f       	mov	r24, r28
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:131
}
     b3e:	cf 91       	pop	r28
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:130
  *port ^= 0x01 << pin_mod;
}

void pulse(uint8_t pin) {
  toggle(pin);
  toggle(pin);
     b40:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <toggle(unsigned char)>

00000b44 <read(unsigned char)>:
_Z4readh():
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:136
}


// READING from pins

char read(uint8_t pin) {
     b44:	cf 93       	push	r28
     b46:	c8 2f       	mov	r28, r24
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:137
  volatile uint8_t *pin_reg = get_pin_address(pin);
     b48:	0e 94 3c 05 	call	0xa78	; 0xa78 <get_pin_address(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:140
  uint8_t pin_mod = pin % 10;

  return (*pin_reg & (0x01 << pin_mod)) >> pin_mod;
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 81       	ld	r18, Z
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:138

// READING from pins

char read(uint8_t pin) {
  volatile uint8_t *pin_reg = get_pin_address(pin);
  uint8_t pin_mod = pin % 10;
     b50:	8c 2f       	mov	r24, r28
     b52:	6a e0       	ldi	r22, 0x0A	; 10
     b54:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__udivmodqi4>
     b58:	49 2f       	mov	r20, r25
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:140

  return (*pin_reg & (0x01 << pin_mod)) >> pin_mod;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	04 2e       	mov	r0, r20
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <read(unsigned char)+0x22>
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	0a 94       	dec	r0
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <read(unsigned char)+0x1e>
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	82 23       	and	r24, r18
     b6e:	93 23       	and	r25, r19
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <read(unsigned char)+0x32>
     b72:	95 95       	asr	r25
     b74:	87 95       	ror	r24
     b76:	4a 95       	dec	r20
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <read(unsigned char)+0x2e>
/home/noah/Documents/basteln/ofen_v2/main/avrio.cpp:141
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <draw_interface()>:
_Z14draw_interfacev():
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:9
#include "graph.h"
#include "table.h"
#include "graphics.h"


void draw_interface() {
     b7e:	2f 92       	push	r2
     b80:	3f 92       	push	r3
     b82:	4f 92       	push	r4
     b84:	5f 92       	push	r5
     b86:	6f 92       	push	r6
     b88:	7f 92       	push	r7
     b8a:	8f 92       	push	r8
     b8c:	9f 92       	push	r9
     b8e:	af 92       	push	r10
     b90:	bf 92       	push	r11
     b92:	cf 92       	push	r12
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	c5 57       	subi	r28, 0x75	; 117
     ba8:	d1 09       	sbc	r29, r1
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:12
  

  display.Init_LCD();
     bb4:	8c e3       	ldi	r24, 0x3C	; 60
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <LCDWIKI_SPI::Init_LCD()>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:13
  display.Set_Rotation(1);
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	8c e3       	ldi	r24, 0x3C	; 60
     bc0:	92 e0       	ldi	r25, 0x02	; 2
     bc2:	0e 94 fe 20 	call	0x41fc	; 0x41fc <LCDWIKI_SPI::Set_Rotation(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:14
  display.Set_Draw_color(BLACK);
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	8c e3       	ldi	r24, 0x3C	; 60
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	0e 94 11 13 	call	0x2622	; 0x2622 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:16
  // display.Fill_Screen(WHITE);
  display.Set_Text_colour(BLACK);
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	8c e3       	ldi	r24, 0x3C	; 60
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <LCDWIKI_GUI::Set_Text_colour(unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:17
  display.Set_Text_Back_colour(WHITE);
     bde:	6f ef       	ldi	r22, 0xFF	; 255
     be0:	7f ef       	ldi	r23, 0xFF	; 255
     be2:	8c e3       	ldi	r24, 0x3C	; 60
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:18
  display.Set_Text_Mode(1);
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	8c e3       	ldi	r24, 0x3C	; 60
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCDWIKI_GUI::Set_Text_Mode(bool)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:20

  graph temperature_graph = {{GRAPH_X, GRAPH_Y}, GRAPH_WIDTH, GRAPH_HEIGHT, 0, 12, 0, 1300, 10};
     bf4:	89 e1       	ldi	r24, 0x19	; 25
     bf6:	e4 e8       	ldi	r30, 0x84	; 132
     bf8:	f1 e0       	ldi	r31, 0x01	; 1
     bfa:	de 01       	movw	r26, r28
     bfc:	d5 96       	adiw	r26, 0x35	; 53
     bfe:	01 90       	ld	r0, Z+
     c00:	0d 92       	st	X+, r0
     c02:	8a 95       	dec	r24
     c04:	e1 f7       	brne	.-8      	; 0xbfe <draw_interface()+0x80>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:21
  draw_graph(temperature_graph);
     c06:	8d b7       	in	r24, 0x3d	; 61
     c08:	9e b7       	in	r25, 0x3e	; 62
     c0a:	49 97       	sbiw	r24, 0x19	; 25
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	9e bf       	out	0x3e, r25	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	8d bf       	out	0x3d, r24	; 61
     c16:	ad b7       	in	r26, 0x3d	; 61
     c18:	be b7       	in	r27, 0x3e	; 62
     c1a:	11 96       	adiw	r26, 0x01	; 1
     c1c:	89 e1       	ldi	r24, 0x19	; 25
     c1e:	fe 01       	movw	r30, r28
     c20:	f5 96       	adiw	r30, 0x35	; 53
     c22:	01 90       	ld	r0, Z+
     c24:	0d 92       	st	X+, r0
     c26:	8a 95       	dec	r24
     c28:	e1 f7       	brne	.-8      	; 0xc22 <draw_interface()+0xa4>
     c2a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <draw_graph(graph)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:23
  
  add_y_mark(temperature_graph, 0);
     c2e:	1f 92       	push	r1
     c30:	1f 92       	push	r1
     c32:	ed b7       	in	r30, 0x3d	; 61
     c34:	fe b7       	in	r31, 0x3e	; 62
     c36:	79 97       	sbiw	r30, 0x19	; 25
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	fe bf       	out	0x3e, r31	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	ed bf       	out	0x3d, r30	; 61
     c42:	ad b7       	in	r26, 0x3d	; 61
     c44:	be b7       	in	r27, 0x3e	; 62
     c46:	11 96       	adiw	r26, 0x01	; 1
     c48:	89 e1       	ldi	r24, 0x19	; 25
     c4a:	fe 01       	movw	r30, r28
     c4c:	f5 96       	adiw	r30, 0x35	; 53
     c4e:	01 90       	ld	r0, Z+
     c50:	0d 92       	st	X+, r0
     c52:	8a 95       	dec	r24
     c54:	e1 f7       	brne	.-8      	; 0xc4e <draw_interface()+0xd0>
     c56:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <add_y_mark(graph, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:24
  add_y_mark(temperature_graph, 1300);
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	95 e0       	ldi	r25, 0x05	; 5
     c66:	79 2e       	mov	r7, r25
     c68:	7f 92       	push	r7
     c6a:	84 e1       	ldi	r24, 0x14	; 20
     c6c:	8f 93       	push	r24
     c6e:	ed b7       	in	r30, 0x3d	; 61
     c70:	fe b7       	in	r31, 0x3e	; 62
     c72:	79 97       	sbiw	r30, 0x19	; 25
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	fe bf       	out	0x3e, r31	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	ed bf       	out	0x3d, r30	; 61
     c7e:	ad b7       	in	r26, 0x3d	; 61
     c80:	be b7       	in	r27, 0x3e	; 62
     c82:	11 96       	adiw	r26, 0x01	; 1
     c84:	89 e1       	ldi	r24, 0x19	; 25
     c86:	fe 01       	movw	r30, r28
     c88:	f5 96       	adiw	r30, 0x35	; 53
     c8a:	01 90       	ld	r0, Z+
     c8c:	0d 92       	st	X+, r0
     c8e:	8a 95       	dec	r24
     c90:	e1 f7       	brne	.-8      	; 0xc8a <draw_interface()+0x10c>
     c92:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <add_y_mark(graph, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:25
  add_y_mark(temperature_graph, 800);
     c96:	23 e0       	ldi	r18, 0x03	; 3
     c98:	62 2e       	mov	r6, r18
     c9a:	6f 92       	push	r6
     c9c:	80 e2       	ldi	r24, 0x20	; 32
     c9e:	8f 93       	push	r24
     ca0:	8d b7       	in	r24, 0x3d	; 61
     ca2:	9e b7       	in	r25, 0x3e	; 62
     ca4:	49 97       	sbiw	r24, 0x19	; 25
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	9e bf       	out	0x3e, r25	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	8d bf       	out	0x3d, r24	; 61
     cb0:	ad b7       	in	r26, 0x3d	; 61
     cb2:	be b7       	in	r27, 0x3e	; 62
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	89 e1       	ldi	r24, 0x19	; 25
     cb8:	fe 01       	movw	r30, r28
     cba:	f5 96       	adiw	r30, 0x35	; 53
     cbc:	01 90       	ld	r0, Z+
     cbe:	0d 92       	st	X+, r0
     cc0:	8a 95       	dec	r24
     cc2:	e1 f7       	brne	.-8      	; 0xcbc <draw_interface()+0x13e>
     cc4:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <add_y_mark(graph, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:26
  add_y_mark(temperature_graph, 200);
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	1f 92       	push	r1
     cd4:	08 ec       	ldi	r16, 0xC8	; 200
     cd6:	0f 93       	push	r16
     cd8:	8d b7       	in	r24, 0x3d	; 61
     cda:	9e b7       	in	r25, 0x3e	; 62
     cdc:	49 97       	sbiw	r24, 0x19	; 25
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	9e bf       	out	0x3e, r25	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	8d bf       	out	0x3d, r24	; 61
     ce8:	ad b7       	in	r26, 0x3d	; 61
     cea:	be b7       	in	r27, 0x3e	; 62
     cec:	11 96       	adiw	r26, 0x01	; 1
     cee:	89 e1       	ldi	r24, 0x19	; 25
     cf0:	fe 01       	movw	r30, r28
     cf2:	f5 96       	adiw	r30, 0x35	; 53
     cf4:	01 90       	ld	r0, Z+
     cf6:	0d 92       	st	X+, r0
     cf8:	8a 95       	dec	r24
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <draw_interface()+0x176>
     cfc:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <add_y_mark(graph, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:28

  add_x_mark(temperature_graph, 0);
     d00:	1f 92       	push	r1
     d02:	1f 92       	push	r1
     d04:	ed b7       	in	r30, 0x3d	; 61
     d06:	fe b7       	in	r31, 0x3e	; 62
     d08:	79 97       	sbiw	r30, 0x19	; 25
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	fe bf       	out	0x3e, r31	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	ed bf       	out	0x3d, r30	; 61
     d14:	ad b7       	in	r26, 0x3d	; 61
     d16:	be b7       	in	r27, 0x3e	; 62
     d18:	11 96       	adiw	r26, 0x01	; 1
     d1a:	89 e1       	ldi	r24, 0x19	; 25
     d1c:	fe 01       	movw	r30, r28
     d1e:	f5 96       	adiw	r30, 0x35	; 53
     d20:	01 90       	ld	r0, Z+
     d22:	0d 92       	st	X+, r0
     d24:	8a 95       	dec	r24
     d26:	e1 f7       	brne	.-8      	; 0xd20 <draw_interface()+0x1a2>
     d28:	0e 94 9f 0b 	call	0x173e	; 0x173e <add_x_mark(graph, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:29
  add_x_mark(temperature_graph, 1);
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	1f 92       	push	r1
     d38:	11 e0       	ldi	r17, 0x01	; 1
     d3a:	1f 93       	push	r17
     d3c:	ed b7       	in	r30, 0x3d	; 61
     d3e:	fe b7       	in	r31, 0x3e	; 62
     d40:	79 97       	sbiw	r30, 0x19	; 25
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	fe bf       	out	0x3e, r31	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	ed bf       	out	0x3d, r30	; 61
     d4c:	ad b7       	in	r26, 0x3d	; 61
     d4e:	be b7       	in	r27, 0x3e	; 62
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	89 e1       	ldi	r24, 0x19	; 25
     d54:	fe 01       	movw	r30, r28
     d56:	f5 96       	adiw	r30, 0x35	; 53
     d58:	01 90       	ld	r0, Z+
     d5a:	0d 92       	st	X+, r0
     d5c:	8a 95       	dec	r24
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <draw_interface()+0x1da>
     d60:	0e 94 9f 0b 	call	0x173e	; 0x173e <add_x_mark(graph, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:30
  add_x_mark(temperature_graph, 5);
     d64:	1f 92       	push	r1
     d66:	7f 92       	push	r7
     d68:	8d b7       	in	r24, 0x3d	; 61
     d6a:	9e b7       	in	r25, 0x3e	; 62
     d6c:	49 97       	sbiw	r24, 0x19	; 25
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	9e bf       	out	0x3e, r25	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	8d bf       	out	0x3d, r24	; 61
     d78:	ad b7       	in	r26, 0x3d	; 61
     d7a:	be b7       	in	r27, 0x3e	; 62
     d7c:	11 96       	adiw	r26, 0x01	; 1
     d7e:	89 e1       	ldi	r24, 0x19	; 25
     d80:	fe 01       	movw	r30, r28
     d82:	f5 96       	adiw	r30, 0x35	; 53
     d84:	01 90       	ld	r0, Z+
     d86:	0d 92       	st	X+, r0
     d88:	8a 95       	dec	r24
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <draw_interface()+0x206>
     d8c:	0e 94 9f 0b 	call	0x173e	; 0x173e <add_x_mark(graph, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:31
  add_x_mark(temperature_graph, 10);
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	1f 92       	push	r1
     d9c:	8a e0       	ldi	r24, 0x0A	; 10
     d9e:	8f 93       	push	r24
     da0:	8d b7       	in	r24, 0x3d	; 61
     da2:	9e b7       	in	r25, 0x3e	; 62
     da4:	49 97       	sbiw	r24, 0x19	; 25
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	9e bf       	out	0x3e, r25	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	8d bf       	out	0x3d, r24	; 61
     db0:	ad b7       	in	r26, 0x3d	; 61
     db2:	be b7       	in	r27, 0x3e	; 62
     db4:	11 96       	adiw	r26, 0x01	; 1
     db6:	89 e1       	ldi	r24, 0x19	; 25
     db8:	fe 01       	movw	r30, r28
     dba:	f5 96       	adiw	r30, 0x35	; 53
     dbc:	01 90       	ld	r0, Z+
     dbe:	0d 92       	st	X+, r0
     dc0:	8a 95       	dec	r24
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <draw_interface()+0x23e>
     dc4:	0e 94 9f 0b 	call	0x173e	; 0x173e <add_x_mark(graph, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:33

  add_point(temperature_graph, 1, 200, 'x');
     dc8:	38 e7       	ldi	r19, 0x78	; 120
     dca:	53 2e       	mov	r5, r19
     dcc:	5f 92       	push	r5
     dce:	1f 92       	push	r1
     dd0:	0f 93       	push	r16
     dd2:	1f 92       	push	r1
     dd4:	1f 93       	push	r17
     dd6:	ed b7       	in	r30, 0x3d	; 61
     dd8:	fe b7       	in	r31, 0x3e	; 62
     dda:	79 97       	sbiw	r30, 0x19	; 25
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	fe bf       	out	0x3e, r31	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	ed bf       	out	0x3d, r30	; 61
     de6:	ad b7       	in	r26, 0x3d	; 61
     de8:	be b7       	in	r27, 0x3e	; 62
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	89 e1       	ldi	r24, 0x19	; 25
     dee:	fe 01       	movw	r30, r28
     df0:	f5 96       	adiw	r30, 0x35	; 53
     df2:	01 90       	ld	r0, Z+
     df4:	0d 92       	st	X+, r0
     df6:	8a 95       	dec	r24
     df8:	e1 f7       	brne	.-8      	; 0xdf2 <draw_interface()+0x274>
     dfa:	0e 94 a1 0a 	call	0x1542	; 0x1542 <add_point(graph, unsigned int, unsigned int, char)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:34
  add_point(temperature_graph, 0, 0, 'x');
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	5f 92       	push	r5
     e0a:	1f 92       	push	r1
     e0c:	1f 92       	push	r1
     e0e:	1f 92       	push	r1
     e10:	1f 92       	push	r1
     e12:	ed b7       	in	r30, 0x3d	; 61
     e14:	fe b7       	in	r31, 0x3e	; 62
     e16:	79 97       	sbiw	r30, 0x19	; 25
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	fe bf       	out	0x3e, r31	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	ed bf       	out	0x3d, r30	; 61
     e22:	ad b7       	in	r26, 0x3d	; 61
     e24:	be b7       	in	r27, 0x3e	; 62
     e26:	11 96       	adiw	r26, 0x01	; 1
     e28:	89 e1       	ldi	r24, 0x19	; 25
     e2a:	fe 01       	movw	r30, r28
     e2c:	f5 96       	adiw	r30, 0x35	; 53
     e2e:	01 90       	ld	r0, Z+
     e30:	0d 92       	st	X+, r0
     e32:	8a 95       	dec	r24
     e34:	e1 f7       	brne	.-8      	; 0xe2e <draw_interface()+0x2b0>
     e36:	0e 94 a1 0a 	call	0x1542	; 0x1542 <add_point(graph, unsigned int, unsigned int, char)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:35
  add_point(temperature_graph, 5, 900, '+');
     e3a:	8b e2       	ldi	r24, 0x2B	; 43
     e3c:	8f 93       	push	r24
     e3e:	6f 92       	push	r6
     e40:	84 e8       	ldi	r24, 0x84	; 132
     e42:	8f 93       	push	r24
     e44:	1f 92       	push	r1
     e46:	7f 92       	push	r7
     e48:	8d b7       	in	r24, 0x3d	; 61
     e4a:	9e b7       	in	r25, 0x3e	; 62
     e4c:	49 97       	sbiw	r24, 0x19	; 25
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	9e bf       	out	0x3e, r25	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	8d bf       	out	0x3d, r24	; 61
     e58:	ad b7       	in	r26, 0x3d	; 61
     e5a:	be b7       	in	r27, 0x3e	; 62
     e5c:	11 96       	adiw	r26, 0x01	; 1
     e5e:	89 e1       	ldi	r24, 0x19	; 25
     e60:	fe 01       	movw	r30, r28
     e62:	f5 96       	adiw	r30, 0x35	; 53
     e64:	01 90       	ld	r0, Z+
     e66:	0d 92       	st	X+, r0
     e68:	8a 95       	dec	r24
     e6a:	e1 f7       	brne	.-8      	; 0xe64 <draw_interface()+0x2e6>
     e6c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <add_point(graph, unsigned int, unsigned int, char)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:36
  add_point(temperature_graph, 2, 500, '.');
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	8e e2       	ldi	r24, 0x2E	; 46
     e7c:	8f 93       	push	r24
     e7e:	1f 93       	push	r17
     e80:	84 ef       	ldi	r24, 0xF4	; 244
     e82:	8f 93       	push	r24
     e84:	1f 92       	push	r1
     e86:	12 e0       	ldi	r17, 0x02	; 2
     e88:	1f 93       	push	r17
     e8a:	8d b7       	in	r24, 0x3d	; 61
     e8c:	9e b7       	in	r25, 0x3e	; 62
     e8e:	49 97       	sbiw	r24, 0x19	; 25
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	9e bf       	out	0x3e, r25	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	8d bf       	out	0x3d, r24	; 61
     e9a:	ad b7       	in	r26, 0x3d	; 61
     e9c:	be b7       	in	r27, 0x3e	; 62
     e9e:	11 96       	adiw	r26, 0x01	; 1
     ea0:	89 e1       	ldi	r24, 0x19	; 25
     ea2:	fe 01       	movw	r30, r28
     ea4:	f5 96       	adiw	r30, 0x35	; 53
     ea6:	01 90       	ld	r0, Z+
     ea8:	0d 92       	st	X+, r0
     eaa:	8a 95       	dec	r24
     eac:	e1 f7       	brne	.-8      	; 0xea6 <draw_interface()+0x328>
     eae:	0e 94 a1 0a 	call	0x1542	; 0x1542 <add_point(graph, unsigned int, unsigned int, char)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:37
  add_point(temperature_graph, 9, 550, 'o');
     eb2:	8f e6       	ldi	r24, 0x6F	; 111
     eb4:	8f 93       	push	r24
     eb6:	1f 93       	push	r17
     eb8:	86 e2       	ldi	r24, 0x26	; 38
     eba:	8f 93       	push	r24
     ebc:	1f 92       	push	r1
     ebe:	49 e0       	ldi	r20, 0x09	; 9
     ec0:	64 2e       	mov	r6, r20
     ec2:	6f 92       	push	r6
     ec4:	ed b7       	in	r30, 0x3d	; 61
     ec6:	fe b7       	in	r31, 0x3e	; 62
     ec8:	79 97       	sbiw	r30, 0x19	; 25
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	fe bf       	out	0x3e, r31	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	ed bf       	out	0x3d, r30	; 61
     ed4:	ad b7       	in	r26, 0x3d	; 61
     ed6:	be b7       	in	r27, 0x3e	; 62
     ed8:	11 96       	adiw	r26, 0x01	; 1
     eda:	89 e1       	ldi	r24, 0x19	; 25
     edc:	fe 01       	movw	r30, r28
     ede:	f5 96       	adiw	r30, 0x35	; 53
     ee0:	01 90       	ld	r0, Z+
     ee2:	0d 92       	st	X+, r0
     ee4:	8a 95       	dec	r24
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <draw_interface()+0x362>
     ee8:	0e 94 a1 0a 	call	0x1542	; 0x1542 <add_point(graph, unsigned int, unsigned int, char)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:38
  add_point(temperature_graph, 12, 100, 'O');
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	8f e4       	ldi	r24, 0x4F	; 79
     ef8:	8f 93       	push	r24
     efa:	1f 92       	push	r1
     efc:	84 e6       	ldi	r24, 0x64	; 100
     efe:	8f 93       	push	r24
     f00:	1f 92       	push	r1
     f02:	8c e0       	ldi	r24, 0x0C	; 12
     f04:	8f 93       	push	r24
     f06:	ed b7       	in	r30, 0x3d	; 61
     f08:	fe b7       	in	r31, 0x3e	; 62
     f0a:	79 97       	sbiw	r30, 0x19	; 25
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	fe bf       	out	0x3e, r31	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	ed bf       	out	0x3d, r30	; 61
     f16:	ad b7       	in	r26, 0x3d	; 61
     f18:	be b7       	in	r27, 0x3e	; 62
     f1a:	11 96       	adiw	r26, 0x01	; 1
     f1c:	89 e1       	ldi	r24, 0x19	; 25
     f1e:	fe 01       	movw	r30, r28
     f20:	f5 96       	adiw	r30, 0x35	; 53
     f22:	01 90       	ld	r0, Z+
     f24:	0d 92       	st	X+, r0
     f26:	8a 95       	dec	r24
     f28:	e1 f7       	brne	.-8      	; 0xf22 <draw_interface()+0x3a4>
     f2a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <add_point(graph, unsigned int, unsigned int, char)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:40

  add_line(temperature_graph, 1, 200, 9, 550);
     f2e:	54 e4       	ldi	r21, 0x44	; 68
     f30:	75 2e       	mov	r7, r21
     f32:	7f 92       	push	r7
     f34:	6f 92       	push	r6
     f36:	80 e8       	ldi	r24, 0x80	; 128
     f38:	8f 93       	push	r24
     f3a:	1f 92       	push	r1
     f3c:	61 e4       	ldi	r22, 0x41	; 65
     f3e:	66 2e       	mov	r6, r22
     f40:	6f 92       	push	r6
     f42:	90 e1       	ldi	r25, 0x10	; 16
     f44:	9f 93       	push	r25
     f46:	1f 92       	push	r1
     f48:	1f 92       	push	r1
     f4a:	93 e4       	ldi	r25, 0x43	; 67
     f4c:	9f 93       	push	r25
     f4e:	98 e4       	ldi	r25, 0x48	; 72
     f50:	9f 93       	push	r25
     f52:	1f 92       	push	r1
     f54:	1f 92       	push	r1
     f56:	9f e3       	ldi	r25, 0x3F	; 63
     f58:	9f 93       	push	r25
     f5a:	8f 93       	push	r24
     f5c:	1f 92       	push	r1
     f5e:	1f 92       	push	r1
     f60:	8d b7       	in	r24, 0x3d	; 61
     f62:	9e b7       	in	r25, 0x3e	; 62
     f64:	49 97       	sbiw	r24, 0x19	; 25
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	9e bf       	out	0x3e, r25	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	8d bf       	out	0x3d, r24	; 61
     f70:	ad b7       	in	r26, 0x3d	; 61
     f72:	be b7       	in	r27, 0x3e	; 62
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	89 e1       	ldi	r24, 0x19	; 25
     f78:	fe 01       	movw	r30, r28
     f7a:	f5 96       	adiw	r30, 0x35	; 53
     f7c:	01 90       	ld	r0, Z+
     f7e:	0d 92       	st	X+, r0
     f80:	8a 95       	dec	r24
     f82:	e1 f7       	brne	.-8      	; 0xf7c <draw_interface()+0x3fe>
     f84:	0e 94 0f 0c 	call	0x181e	; 0x181e <add_line(graph, float, float, float, float)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:41
  add_line(temperature_graph, 5, 900, 12, 100);
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	82 e4       	ldi	r24, 0x42	; 66
     f94:	8f 93       	push	r24
     f96:	0f 93       	push	r16
     f98:	1f 92       	push	r1
     f9a:	1f 92       	push	r1
     f9c:	6f 92       	push	r6
     f9e:	80 e4       	ldi	r24, 0x40	; 64
     fa0:	8f 93       	push	r24
     fa2:	1f 92       	push	r1
     fa4:	1f 92       	push	r1
     fa6:	7f 92       	push	r7
     fa8:	91 e6       	ldi	r25, 0x61	; 97
     faa:	9f 93       	push	r25
     fac:	1f 92       	push	r1
     fae:	1f 92       	push	r1
     fb0:	8f 93       	push	r24
     fb2:	80 ea       	ldi	r24, 0xA0	; 160
     fb4:	8f 93       	push	r24
     fb6:	1f 92       	push	r1
     fb8:	1f 92       	push	r1
     fba:	8d b7       	in	r24, 0x3d	; 61
     fbc:	9e b7       	in	r25, 0x3e	; 62
     fbe:	49 97       	sbiw	r24, 0x19	; 25
     fc0:	0f b6       	in	r0, 0x3f	; 63
     fc2:	f8 94       	cli
     fc4:	9e bf       	out	0x3e, r25	; 62
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	8d bf       	out	0x3d, r24	; 61
     fca:	ad b7       	in	r26, 0x3d	; 61
     fcc:	be b7       	in	r27, 0x3e	; 62
     fce:	11 96       	adiw	r26, 0x01	; 1
     fd0:	89 e1       	ldi	r24, 0x19	; 25
     fd2:	fe 01       	movw	r30, r28
     fd4:	f5 96       	adiw	r30, 0x35	; 53
     fd6:	01 90       	ld	r0, Z+
     fd8:	0d 92       	st	X+, r0
     fda:	8a 95       	dec	r24
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <draw_interface()+0x458>
     fde:	0e 94 0f 0c 	call	0x181e	; 0x181e <add_line(graph, float, float, float, float)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:43

  draw_pattern_line(20, 20, 100, 100, DOTS);
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	05 e5       	ldi	r16, 0x55	; 85
     fee:	24 e6       	ldi	r18, 0x64	; 100
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	44 e6       	ldi	r20, 0x64	; 100
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	64 e1       	ldi	r22, 0x14	; 20
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	84 e1       	ldi	r24, 0x14	; 20
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <draw_pattern_line(int, int, int, int, char)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:44
  draw_pattern_line(20, 30, 100, 110, DASHS);
    1002:	0f e0       	ldi	r16, 0x0F	; 15
    1004:	2e e6       	ldi	r18, 0x6E	; 110
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	44 e6       	ldi	r20, 0x64	; 100
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	6e e1       	ldi	r22, 0x1E	; 30
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	84 e1       	ldi	r24, 0x14	; 20
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <draw_pattern_line(int, int, int, int, char)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:45
  draw_pattern_line(20, 40, 100, 120, DOTDASH);
    1018:	07 e2       	ldi	r16, 0x27	; 39
    101a:	28 e7       	ldi	r18, 0x78	; 120
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	44 e6       	ldi	r20, 0x64	; 100
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	68 e2       	ldi	r22, 0x28	; 40
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	84 e1       	ldi	r24, 0x14	; 20
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <draw_pattern_line(int, int, int, int, char)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:46
  draw_pattern_line(20, 50, 100, 130, SHORTDASH);
    102e:	03 e3       	ldi	r16, 0x33	; 51
    1030:	22 e8       	ldi	r18, 0x82	; 130
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	44 e6       	ldi	r20, 0x64	; 100
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	62 e3       	ldi	r22, 0x32	; 50
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	84 e1       	ldi	r24, 0x14	; 20
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <draw_pattern_line(int, int, int, int, char)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:48

  float cols[] = {-1, 0.55};
    1044:	ce 01       	movw	r24, r28
    1046:	84 5a       	subi	r24, 0xA4	; 164
    1048:	9f 4f       	sbci	r25, 0xFF	; 255
    104a:	28 e0       	ldi	r18, 0x08	; 8
    104c:	ed e9       	ldi	r30, 0x9D	; 157
    104e:	f1 e0       	ldi	r31, 0x01	; 1
    1050:	dc 01       	movw	r26, r24
    1052:	01 90       	ld	r0, Z+
    1054:	0d 92       	st	X+, r0
    1056:	2a 95       	dec	r18
    1058:	e1 f7       	brne	.-8      	; 0x1052 <draw_interface()+0x4d4>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:49
  float rows[] = {-1, 21, 42, 63, 84, 105, 126, 147, 168, 189, 210, 231, 252};
    105a:	24 e3       	ldi	r18, 0x34	; 52
    105c:	e5 ea       	ldi	r30, 0xA5	; 165
    105e:	f1 e0       	ldi	r31, 0x01	; 1
    1060:	ae 01       	movw	r20, r28
    1062:	4f 5f       	subi	r20, 0xFF	; 255
    1064:	5f 4f       	sbci	r21, 0xFF	; 255
    1066:	da 01       	movw	r26, r20
    1068:	01 90       	ld	r0, Z+
    106a:	0d 92       	st	X+, r0
    106c:	2a 95       	dec	r18
    106e:	e1 f7       	brne	.-8      	; 0x1068 <draw_interface()+0x4ea>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:51

  table temperature_table = {{TABLE_X, TABLE_Y}, TABLE_WIDTH, TABLE_HEIGHT, 13, 2, rows, cols};
    1070:	2c e5       	ldi	r18, 0x5C	; 92
    1072:	c2 2e       	mov	r12, r18
    1074:	2f 96       	adiw	r28, 0x0f	; 15
    1076:	2f af       	std	Y+63, r18	; 0x3f
    1078:	2f 97       	sbiw	r28, 0x0f	; 15
    107a:	21 e0       	ldi	r18, 0x01	; 1
    107c:	60 96       	adiw	r28, 0x10	; 16
    107e:	2f af       	std	Y+63, r18	; 0x3f
    1080:	60 97       	sbiw	r28, 0x10	; 16
    1082:	2c e3       	ldi	r18, 0x3C	; 60
    1084:	e2 2e       	mov	r14, r18
    1086:	61 96       	adiw	r28, 0x11	; 17
    1088:	2f af       	std	Y+63, r18	; 0x3f
    108a:	61 97       	sbiw	r28, 0x11	; 17
    108c:	62 96       	adiw	r28, 0x12	; 18
    108e:	1f ae       	std	Y+63, r1	; 0x3f
    1090:	62 97       	sbiw	r28, 0x12	; 18
    1092:	20 e8       	ldi	r18, 0x80	; 128
    1094:	02 2f       	mov	r16, r18
    1096:	63 96       	adiw	r28, 0x13	; 19
    1098:	2f af       	std	Y+63, r18	; 0x3f
    109a:	63 97       	sbiw	r28, 0x13	; 19
    109c:	64 96       	adiw	r28, 0x14	; 20
    109e:	1f ae       	std	Y+63, r1	; 0x3f
    10a0:	64 97       	sbiw	r28, 0x14	; 20
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	23 2f       	mov	r18, r19
    10a6:	65 96       	adiw	r28, 0x15	; 21
    10a8:	3f af       	std	Y+63, r19	; 0x3f
    10aa:	65 97       	sbiw	r28, 0x15	; 21
    10ac:	31 e0       	ldi	r19, 0x01	; 1
    10ae:	66 96       	adiw	r28, 0x16	; 22
    10b0:	3f af       	std	Y+63, r19	; 0x3f
    10b2:	66 97       	sbiw	r28, 0x16	; 22
    10b4:	68 96       	adiw	r28, 0x18	; 24
    10b6:	1f af       	std	Y+63, r17	; 0x3f
    10b8:	68 97       	sbiw	r28, 0x18	; 24
    10ba:	64 2f       	mov	r22, r20
    10bc:	6a 96       	adiw	r28, 0x1a	; 26
    10be:	5f af       	std	Y+63, r21	; 0x3f
    10c0:	4e af       	std	Y+62, r20	; 0x3e
    10c2:	6a 97       	sbiw	r28, 0x1a	; 26
    10c4:	6c 96       	adiw	r28, 0x1c	; 28
    10c6:	9f af       	std	Y+63, r25	; 0x3f
    10c8:	8e af       	std	Y+62, r24	; 0x3e
    10ca:	6c 97       	sbiw	r28, 0x1c	; 28
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:52
  draw_table(temperature_table);
    10cc:	9d e0       	ldi	r25, 0x0D	; 13
    10ce:	67 96       	adiw	r28, 0x17	; 23
    10d0:	9f af       	std	Y+63, r25	; 0x3f
    10d2:	67 97       	sbiw	r28, 0x17	; 23
    10d4:	dd 24       	eor	r13, r13
    10d6:	d3 94       	inc	r13
    10d8:	f1 2c       	mov	r15, r1
    10da:	10 e0       	ldi	r17, 0x00	; 0
    10dc:	4d e0       	ldi	r20, 0x0D	; 13
    10de:	52 e0       	ldi	r21, 0x02	; 2
    10e0:	6a 96       	adiw	r28, 0x1a	; 26
    10e2:	7f ad       	ldd	r23, Y+63	; 0x3f
    10e4:	6a 97       	sbiw	r28, 0x1a	; 26
    10e6:	6c 96       	adiw	r28, 0x1c	; 28
    10e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    10ea:	6c 97       	sbiw	r28, 0x1c	; 28
    10ec:	0e 94 39 10 	call	0x2072	; 0x2072 <draw_table(table)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:53
  write_text_to_field(temperature_table, 0, 0, "Time");
    10f0:	88 ee       	ldi	r24, 0xE8	; 232
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	9f 93       	push	r25
    10f6:	8f 93       	push	r24
    10f8:	91 2c       	mov	r9, r1
    10fa:	81 2c       	mov	r8, r1
    10fc:	b1 2c       	mov	r11, r1
    10fe:	a1 2c       	mov	r10, r1
    1100:	2f 96       	adiw	r28, 0x0f	; 15
    1102:	cf ac       	ldd	r12, Y+63	; 0x3f
    1104:	2f 97       	sbiw	r28, 0x0f	; 15
    1106:	60 96       	adiw	r28, 0x10	; 16
    1108:	df ac       	ldd	r13, Y+63	; 0x3f
    110a:	60 97       	sbiw	r28, 0x10	; 16
    110c:	61 96       	adiw	r28, 0x11	; 17
    110e:	ef ac       	ldd	r14, Y+63	; 0x3f
    1110:	61 97       	sbiw	r28, 0x11	; 17
    1112:	62 96       	adiw	r28, 0x12	; 18
    1114:	ff ac       	ldd	r15, Y+63	; 0x3f
    1116:	62 97       	sbiw	r28, 0x12	; 18
    1118:	63 96       	adiw	r28, 0x13	; 19
    111a:	0f ad       	ldd	r16, Y+63	; 0x3f
    111c:	63 97       	sbiw	r28, 0x13	; 19
    111e:	64 96       	adiw	r28, 0x14	; 20
    1120:	1f ad       	ldd	r17, Y+63	; 0x3f
    1122:	64 97       	sbiw	r28, 0x14	; 20
    1124:	65 96       	adiw	r28, 0x15	; 21
    1126:	2f ad       	ldd	r18, Y+63	; 0x3f
    1128:	65 97       	sbiw	r28, 0x15	; 21
    112a:	66 96       	adiw	r28, 0x16	; 22
    112c:	3f ad       	ldd	r19, Y+63	; 0x3f
    112e:	66 97       	sbiw	r28, 0x16	; 22
    1130:	67 96       	adiw	r28, 0x17	; 23
    1132:	4f ad       	ldd	r20, Y+63	; 0x3f
    1134:	67 97       	sbiw	r28, 0x17	; 23
    1136:	68 96       	adiw	r28, 0x18	; 24
    1138:	5f ad       	ldd	r21, Y+63	; 0x3f
    113a:	68 97       	sbiw	r28, 0x18	; 24
    113c:	69 96       	adiw	r28, 0x19	; 25
    113e:	6f ad       	ldd	r22, Y+63	; 0x3f
    1140:	69 97       	sbiw	r28, 0x19	; 25
    1142:	6a 96       	adiw	r28, 0x1a	; 26
    1144:	7f ad       	ldd	r23, Y+63	; 0x3f
    1146:	6a 97       	sbiw	r28, 0x1a	; 26
    1148:	6b 96       	adiw	r28, 0x1b	; 27
    114a:	8f ad       	ldd	r24, Y+63	; 0x3f
    114c:	6b 97       	sbiw	r28, 0x1b	; 27
    114e:	6c 96       	adiw	r28, 0x1c	; 28
    1150:	9f ad       	ldd	r25, Y+63	; 0x3f
    1152:	6c 97       	sbiw	r28, 0x1c	; 28
    1154:	0e 94 bc 11 	call	0x2378	; 0x2378 <write_text_to_field(table, unsigned int, unsigned int, char*)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:54
  write_text_to_field(temperature_table, 1, 0, "Temp");
    1158:	8d ee       	ldi	r24, 0xED	; 237
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	9f 93       	push	r25
    115e:	8f 93       	push	r24
    1160:	aa 24       	eor	r10, r10
    1162:	a3 94       	inc	r10
    1164:	b1 2c       	mov	r11, r1
    1166:	2f 96       	adiw	r28, 0x0f	; 15
    1168:	cf ac       	ldd	r12, Y+63	; 0x3f
    116a:	2f 97       	sbiw	r28, 0x0f	; 15
    116c:	60 96       	adiw	r28, 0x10	; 16
    116e:	df ac       	ldd	r13, Y+63	; 0x3f
    1170:	60 97       	sbiw	r28, 0x10	; 16
    1172:	61 96       	adiw	r28, 0x11	; 17
    1174:	ef ac       	ldd	r14, Y+63	; 0x3f
    1176:	61 97       	sbiw	r28, 0x11	; 17
    1178:	62 96       	adiw	r28, 0x12	; 18
    117a:	ff ac       	ldd	r15, Y+63	; 0x3f
    117c:	62 97       	sbiw	r28, 0x12	; 18
    117e:	63 96       	adiw	r28, 0x13	; 19
    1180:	0f ad       	ldd	r16, Y+63	; 0x3f
    1182:	63 97       	sbiw	r28, 0x13	; 19
    1184:	64 96       	adiw	r28, 0x14	; 20
    1186:	1f ad       	ldd	r17, Y+63	; 0x3f
    1188:	64 97       	sbiw	r28, 0x14	; 20
    118a:	65 96       	adiw	r28, 0x15	; 21
    118c:	2f ad       	ldd	r18, Y+63	; 0x3f
    118e:	65 97       	sbiw	r28, 0x15	; 21
    1190:	66 96       	adiw	r28, 0x16	; 22
    1192:	3f ad       	ldd	r19, Y+63	; 0x3f
    1194:	66 97       	sbiw	r28, 0x16	; 22
    1196:	67 96       	adiw	r28, 0x17	; 23
    1198:	4f ad       	ldd	r20, Y+63	; 0x3f
    119a:	67 97       	sbiw	r28, 0x17	; 23
    119c:	68 96       	adiw	r28, 0x18	; 24
    119e:	5f ad       	ldd	r21, Y+63	; 0x3f
    11a0:	68 97       	sbiw	r28, 0x18	; 24
    11a2:	69 96       	adiw	r28, 0x19	; 25
    11a4:	6f ad       	ldd	r22, Y+63	; 0x3f
    11a6:	69 97       	sbiw	r28, 0x19	; 25
    11a8:	6a 96       	adiw	r28, 0x1a	; 26
    11aa:	7f ad       	ldd	r23, Y+63	; 0x3f
    11ac:	6a 97       	sbiw	r28, 0x1a	; 26
    11ae:	6b 96       	adiw	r28, 0x1b	; 27
    11b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    11b2:	6b 97       	sbiw	r28, 0x1b	; 27
    11b4:	6c 96       	adiw	r28, 0x1c	; 28
    11b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    11b8:	6c 97       	sbiw	r28, 0x1c	; 28
    11ba:	0e 94 bc 11 	call	0x2378	; 0x2378 <write_text_to_field(table, unsigned int, unsigned int, char*)>
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	86 e7       	ldi	r24, 0x76	; 118
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	e2 96       	adiw	r28, 0x32	; 50
    11cc:	9f af       	std	Y+63, r25	; 0x3f
    11ce:	8e af       	std	Y+62, r24	; 0x3e
    11d0:	e2 97       	sbiw	r28, 0x32	; 50
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:55
  for (uint16_t i = 1; i<temperature_table.rows - 1; i++) {
    11d2:	66 24       	eor	r6, r6
    11d4:	63 94       	inc	r6
    11d6:	71 2c       	mov	r7, r1
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:56
    char time_str[6]="";
    11d8:	2e 01       	movw	r4, r28
    11da:	9a e6       	ldi	r25, 0x6A	; 106
    11dc:	49 0e       	add	r4, r25
    11de:	51 1c       	adc	r5, r1
    11e0:	f2 01       	movw	r30, r4
    11e2:	32 96       	adiw	r30, 0x02	; 2
    11e4:	e4 96       	adiw	r28, 0x34	; 52
    11e6:	ff af       	std	Y+63, r31	; 0x3f
    11e8:	ee af       	std	Y+62, r30	; 0x3e
    11ea:	e4 97       	sbiw	r28, 0x34	; 52
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:58
    sprintf(time_str, "12:%d", i);
    char temp_str[6]="";
    11ec:	1e 01       	movw	r2, r28
    11ee:	f4 e6       	ldi	r31, 0x64	; 100
    11f0:	2f 0e       	add	r2, r31
    11f2:	31 1c       	adc	r3, r1
    11f4:	c1 01       	movw	r24, r2
    11f6:	02 96       	adiw	r24, 0x02	; 2
    11f8:	e6 96       	adiw	r28, 0x36	; 54
    11fa:	9f af       	std	Y+63, r25	; 0x3f
    11fc:	8e af       	std	Y+62, r24	; 0x3e
    11fe:	e6 97       	sbiw	r28, 0x36	; 54
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:56 (discriminator 2)
  table temperature_table = {{TABLE_X, TABLE_Y}, TABLE_WIDTH, TABLE_HEIGHT, 13, 2, rows, cols};
  draw_table(temperature_table);
  write_text_to_field(temperature_table, 0, 0, "Time");
  write_text_to_field(temperature_table, 1, 0, "Temp");
  for (uint16_t i = 1; i<temperature_table.rows - 1; i++) {
    char time_str[6]="";
    1200:	f2 01       	movw	r30, r4
    1202:	11 82       	std	Z+1, r1	; 0x01
    1204:	10 82       	st	Z, r1
    1206:	e4 96       	adiw	r28, 0x34	; 52
    1208:	ee ad       	ldd	r30, Y+62	; 0x3e
    120a:	ff ad       	ldd	r31, Y+63	; 0x3f
    120c:	e4 97       	sbiw	r28, 0x34	; 52
    120e:	24 e0       	ldi	r18, 0x04	; 4
    1210:	11 92       	st	Z+, r1
    1212:	2a 95       	dec	r18
    1214:	e9 f7       	brne	.-6      	; 0x1210 <draw_interface()+0x692>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:57 (discriminator 2)
    sprintf(time_str, "12:%d", i);
    1216:	7f 92       	push	r7
    1218:	6f 92       	push	r6
    121a:	82 ef       	ldi	r24, 0xF2	; 242
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	9f 93       	push	r25
    1220:	8f 93       	push	r24
    1222:	5f 92       	push	r5
    1224:	4f 92       	push	r4
    1226:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <sprintf>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:58 (discriminator 2)
    char temp_str[6]="";
    122a:	f1 01       	movw	r30, r2
    122c:	11 82       	std	Z+1, r1	; 0x01
    122e:	10 82       	st	Z, r1
    1230:	e6 96       	adiw	r28, 0x36	; 54
    1232:	ee ad       	ldd	r30, Y+62	; 0x3e
    1234:	ff ad       	ldd	r31, Y+63	; 0x3f
    1236:	e6 97       	sbiw	r28, 0x36	; 54
    1238:	24 e0       	ldi	r18, 0x04	; 4
    123a:	11 92       	st	Z+, r1
    123c:	2a 95       	dec	r18
    123e:	e9 f7       	brne	.-6      	; 0x123a <draw_interface()+0x6bc>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:59 (discriminator 2)
    sprintf(temp_str, "%d", 118*i);      
    1240:	e2 96       	adiw	r28, 0x32	; 50
    1242:	8f ad       	ldd	r24, Y+63	; 0x3f
    1244:	e2 97       	sbiw	r28, 0x32	; 50
    1246:	8f 93       	push	r24
    1248:	e1 96       	adiw	r28, 0x31	; 49
    124a:	9f ad       	ldd	r25, Y+63	; 0x3f
    124c:	e1 97       	sbiw	r28, 0x31	; 49
    124e:	9f 93       	push	r25
    1250:	e5 ef       	ldi	r30, 0xF5	; 245
    1252:	f1 e0       	ldi	r31, 0x01	; 1
    1254:	ff 93       	push	r31
    1256:	ef 93       	push	r30
    1258:	3f 92       	push	r3
    125a:	2f 92       	push	r2
    125c:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <sprintf>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:60 (discriminator 2)
    write_text_to_field(temperature_table, 0, i, time_str);
    1260:	8d e0       	ldi	r24, 0x0D	; 13
    1262:	67 96       	adiw	r28, 0x17	; 23
    1264:	8f af       	std	Y+63, r24	; 0x3f
    1266:	67 97       	sbiw	r28, 0x17	; 23
    1268:	5f 92       	push	r5
    126a:	4f 92       	push	r4
    126c:	43 01       	movw	r8, r6
    126e:	b1 2c       	mov	r11, r1
    1270:	a1 2c       	mov	r10, r1
    1272:	2f 96       	adiw	r28, 0x0f	; 15
    1274:	cf ac       	ldd	r12, Y+63	; 0x3f
    1276:	2f 97       	sbiw	r28, 0x0f	; 15
    1278:	60 96       	adiw	r28, 0x10	; 16
    127a:	df ac       	ldd	r13, Y+63	; 0x3f
    127c:	60 97       	sbiw	r28, 0x10	; 16
    127e:	61 96       	adiw	r28, 0x11	; 17
    1280:	ef ac       	ldd	r14, Y+63	; 0x3f
    1282:	61 97       	sbiw	r28, 0x11	; 17
    1284:	62 96       	adiw	r28, 0x12	; 18
    1286:	ff ac       	ldd	r15, Y+63	; 0x3f
    1288:	62 97       	sbiw	r28, 0x12	; 18
    128a:	63 96       	adiw	r28, 0x13	; 19
    128c:	0f ad       	ldd	r16, Y+63	; 0x3f
    128e:	63 97       	sbiw	r28, 0x13	; 19
    1290:	64 96       	adiw	r28, 0x14	; 20
    1292:	1f ad       	ldd	r17, Y+63	; 0x3f
    1294:	64 97       	sbiw	r28, 0x14	; 20
    1296:	65 96       	adiw	r28, 0x15	; 21
    1298:	2f ad       	ldd	r18, Y+63	; 0x3f
    129a:	65 97       	sbiw	r28, 0x15	; 21
    129c:	66 96       	adiw	r28, 0x16	; 22
    129e:	3f ad       	ldd	r19, Y+63	; 0x3f
    12a0:	66 97       	sbiw	r28, 0x16	; 22
    12a2:	67 96       	adiw	r28, 0x17	; 23
    12a4:	4f ad       	ldd	r20, Y+63	; 0x3f
    12a6:	67 97       	sbiw	r28, 0x17	; 23
    12a8:	68 96       	adiw	r28, 0x18	; 24
    12aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ac:	68 97       	sbiw	r28, 0x18	; 24
    12ae:	69 96       	adiw	r28, 0x19	; 25
    12b0:	6f ad       	ldd	r22, Y+63	; 0x3f
    12b2:	69 97       	sbiw	r28, 0x19	; 25
    12b4:	6a 96       	adiw	r28, 0x1a	; 26
    12b6:	7f ad       	ldd	r23, Y+63	; 0x3f
    12b8:	6a 97       	sbiw	r28, 0x1a	; 26
    12ba:	6b 96       	adiw	r28, 0x1b	; 27
    12bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    12be:	6b 97       	sbiw	r28, 0x1b	; 27
    12c0:	6c 96       	adiw	r28, 0x1c	; 28
    12c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    12c4:	6c 97       	sbiw	r28, 0x1c	; 28
    12c6:	0e 94 bc 11 	call	0x2378	; 0x2378 <write_text_to_field(table, unsigned int, unsigned int, char*)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:61 (discriminator 2)
    change_field_color(temperature_table, 1, i, temperature_to_color(118*i));
    12ca:	e2 96       	adiw	r28, 0x32	; 50
    12cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    12ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    12d0:	e2 97       	sbiw	r28, 0x32	; 50
    12d2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <temperature_to_color(unsigned int)>
    12d6:	8f 93       	push	r24
    12d8:	7f 93       	push	r23
    12da:	6f 93       	push	r22
    12dc:	aa 24       	eor	r10, r10
    12de:	a3 94       	inc	r10
    12e0:	b1 2c       	mov	r11, r1
    12e2:	2f 96       	adiw	r28, 0x0f	; 15
    12e4:	cf ac       	ldd	r12, Y+63	; 0x3f
    12e6:	2f 97       	sbiw	r28, 0x0f	; 15
    12e8:	60 96       	adiw	r28, 0x10	; 16
    12ea:	df ac       	ldd	r13, Y+63	; 0x3f
    12ec:	60 97       	sbiw	r28, 0x10	; 16
    12ee:	61 96       	adiw	r28, 0x11	; 17
    12f0:	ef ac       	ldd	r14, Y+63	; 0x3f
    12f2:	61 97       	sbiw	r28, 0x11	; 17
    12f4:	62 96       	adiw	r28, 0x12	; 18
    12f6:	ff ac       	ldd	r15, Y+63	; 0x3f
    12f8:	62 97       	sbiw	r28, 0x12	; 18
    12fa:	63 96       	adiw	r28, 0x13	; 19
    12fc:	0f ad       	ldd	r16, Y+63	; 0x3f
    12fe:	63 97       	sbiw	r28, 0x13	; 19
    1300:	64 96       	adiw	r28, 0x14	; 20
    1302:	1f ad       	ldd	r17, Y+63	; 0x3f
    1304:	64 97       	sbiw	r28, 0x14	; 20
    1306:	65 96       	adiw	r28, 0x15	; 21
    1308:	2f ad       	ldd	r18, Y+63	; 0x3f
    130a:	65 97       	sbiw	r28, 0x15	; 21
    130c:	66 96       	adiw	r28, 0x16	; 22
    130e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1310:	66 97       	sbiw	r28, 0x16	; 22
    1312:	67 96       	adiw	r28, 0x17	; 23
    1314:	4f ad       	ldd	r20, Y+63	; 0x3f
    1316:	67 97       	sbiw	r28, 0x17	; 23
    1318:	68 96       	adiw	r28, 0x18	; 24
    131a:	5f ad       	ldd	r21, Y+63	; 0x3f
    131c:	68 97       	sbiw	r28, 0x18	; 24
    131e:	69 96       	adiw	r28, 0x19	; 25
    1320:	6f ad       	ldd	r22, Y+63	; 0x3f
    1322:	69 97       	sbiw	r28, 0x19	; 25
    1324:	6a 96       	adiw	r28, 0x1a	; 26
    1326:	7f ad       	ldd	r23, Y+63	; 0x3f
    1328:	6a 97       	sbiw	r28, 0x1a	; 26
    132a:	6b 96       	adiw	r28, 0x1b	; 27
    132c:	8f ad       	ldd	r24, Y+63	; 0x3f
    132e:	6b 97       	sbiw	r28, 0x1b	; 27
    1330:	6c 96       	adiw	r28, 0x1c	; 28
    1332:	9f ad       	ldd	r25, Y+63	; 0x3f
    1334:	6c 97       	sbiw	r28, 0x1c	; 28
    1336:	0e 94 42 12 	call	0x2484	; 0x2484 <change_field_color(table, unsigned int, unsigned int, rgb_color)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:62 (discriminator 2)
    write_text_to_field(temperature_table, 1, i, temp_str);
    133a:	3f 92       	push	r3
    133c:	2f 92       	push	r2
    133e:	2f 96       	adiw	r28, 0x0f	; 15
    1340:	cf ac       	ldd	r12, Y+63	; 0x3f
    1342:	2f 97       	sbiw	r28, 0x0f	; 15
    1344:	60 96       	adiw	r28, 0x10	; 16
    1346:	df ac       	ldd	r13, Y+63	; 0x3f
    1348:	60 97       	sbiw	r28, 0x10	; 16
    134a:	61 96       	adiw	r28, 0x11	; 17
    134c:	ef ac       	ldd	r14, Y+63	; 0x3f
    134e:	61 97       	sbiw	r28, 0x11	; 17
    1350:	62 96       	adiw	r28, 0x12	; 18
    1352:	ff ac       	ldd	r15, Y+63	; 0x3f
    1354:	62 97       	sbiw	r28, 0x12	; 18
    1356:	63 96       	adiw	r28, 0x13	; 19
    1358:	0f ad       	ldd	r16, Y+63	; 0x3f
    135a:	63 97       	sbiw	r28, 0x13	; 19
    135c:	64 96       	adiw	r28, 0x14	; 20
    135e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1360:	64 97       	sbiw	r28, 0x14	; 20
    1362:	65 96       	adiw	r28, 0x15	; 21
    1364:	2f ad       	ldd	r18, Y+63	; 0x3f
    1366:	65 97       	sbiw	r28, 0x15	; 21
    1368:	66 96       	adiw	r28, 0x16	; 22
    136a:	3f ad       	ldd	r19, Y+63	; 0x3f
    136c:	66 97       	sbiw	r28, 0x16	; 22
    136e:	67 96       	adiw	r28, 0x17	; 23
    1370:	4f ad       	ldd	r20, Y+63	; 0x3f
    1372:	67 97       	sbiw	r28, 0x17	; 23
    1374:	68 96       	adiw	r28, 0x18	; 24
    1376:	5f ad       	ldd	r21, Y+63	; 0x3f
    1378:	68 97       	sbiw	r28, 0x18	; 24
    137a:	69 96       	adiw	r28, 0x19	; 25
    137c:	6f ad       	ldd	r22, Y+63	; 0x3f
    137e:	69 97       	sbiw	r28, 0x19	; 25
    1380:	6a 96       	adiw	r28, 0x1a	; 26
    1382:	7f ad       	ldd	r23, Y+63	; 0x3f
    1384:	6a 97       	sbiw	r28, 0x1a	; 26
    1386:	6b 96       	adiw	r28, 0x1b	; 27
    1388:	8f ad       	ldd	r24, Y+63	; 0x3f
    138a:	6b 97       	sbiw	r28, 0x1b	; 27
    138c:	6c 96       	adiw	r28, 0x1c	; 28
    138e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1390:	6c 97       	sbiw	r28, 0x1c	; 28
    1392:	0e 94 bc 11 	call	0x2378	; 0x2378 <write_text_to_field(table, unsigned int, unsigned int, char*)>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:55 (discriminator 2)

  table temperature_table = {{TABLE_X, TABLE_Y}, TABLE_WIDTH, TABLE_HEIGHT, 13, 2, rows, cols};
  draw_table(temperature_table);
  write_text_to_field(temperature_table, 0, 0, "Time");
  write_text_to_field(temperature_table, 1, 0, "Temp");
  for (uint16_t i = 1; i<temperature_table.rows - 1; i++) {
    1396:	9f ef       	ldi	r25, 0xFF	; 255
    1398:	69 1a       	sub	r6, r25
    139a:	79 0a       	sbc	r7, r25
    139c:	e2 96       	adiw	r28, 0x32	; 50
    139e:	ee ad       	ldd	r30, Y+62	; 0x3e
    13a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    13a2:	e2 97       	sbiw	r28, 0x32	; 50
    13a4:	ea 58       	subi	r30, 0x8A	; 138
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	e2 96       	adiw	r28, 0x32	; 50
    13aa:	ff af       	std	Y+63, r31	; 0x3f
    13ac:	ee af       	std	Y+62, r30	; 0x3e
    13ae:	e2 97       	sbiw	r28, 0x32	; 50
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	9c e0       	ldi	r25, 0x0C	; 12
    13bc:	69 16       	cp	r6, r25
    13be:	71 04       	cpc	r7, r1
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <draw_interface()+0x846>
    13c2:	1e cf       	rjmp	.-452    	; 0x1200 <draw_interface()+0x682>
/home/noah/Documents/basteln/ofen_v2/main/display.cpp:66
    change_field_color(temperature_table, 1, i, temperature_to_color(118*i));
    write_text_to_field(temperature_table, 1, i, temp_str);
  }

  
}
    13c4:	cb 58       	subi	r28, 0x8B	; 139
    13c6:	df 4f       	sbci	r29, 0xFF	; 255
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	bf 90       	pop	r11
    13e4:	af 90       	pop	r10
    13e6:	9f 90       	pop	r9
    13e8:	8f 90       	pop	r8
    13ea:	7f 90       	pop	r7
    13ec:	6f 90       	pop	r6
    13ee:	5f 90       	pop	r5
    13f0:	4f 90       	pop	r4
    13f2:	3f 90       	pop	r3
    13f4:	2f 90       	pop	r2
    13f6:	08 95       	ret

000013f8 <point_to_position(graph, unsigned int, unsigned int)>:
_Z17point_to_position5graphjj():
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:83
void add_pattern_line(graph graph, float x1, float y1, float x2, float y2, char pattern) {
  position point_1 = point_to_position(graph, x1, y1);
  position point_2 = point_to_position(graph, x2, y2);

  draw_pattern_line(point_1.x, point_1.y, point_2.x, point_2.y, pattern);
}
    13f8:	2f 92       	push	r2
    13fa:	3f 92       	push	r3
    13fc:	4f 92       	push	r4
    13fe:	5f 92       	push	r5
    1400:	6f 92       	push	r6
    1402:	7f 92       	push	r7
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	eb 8c       	ldd	r14, Y+27	; 0x1b
    1422:	fc 8c       	ldd	r15, Y+28	; 0x1c
    1424:	0d a5       	ldd	r16, Y+45	; 0x2d
    1426:	10 e0       	ldi	r17, 0x00	; 0
    1428:	18 01       	movw	r2, r16
    142a:	22 0c       	add	r2, r2
    142c:	33 1c       	adc	r3, r3
    142e:	6f 89       	ldd	r22, Y+23	; 0x17
    1430:	78 8d       	ldd	r23, Y+24	; 0x18
    1432:	6e 0d       	add	r22, r14
    1434:	7f 1d       	adc	r23, r15
    1436:	60 1b       	sub	r22, r16
    1438:	71 0b       	sbc	r23, r17
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    1442:	2b 01       	movw	r4, r22
    1444:	3c 01       	movw	r6, r24
    1446:	68 a9       	ldd	r22, Y+48	; 0x30
    1448:	79 a9       	ldd	r23, Y+49	; 0x31
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    1452:	4b 01       	movw	r8, r22
    1454:	5c 01       	movw	r10, r24
    1456:	2d a1       	ldd	r18, Y+37	; 0x25
    1458:	3e a1       	ldd	r19, Y+38	; 0x26
    145a:	4f a1       	ldd	r20, Y+39	; 0x27
    145c:	58 a5       	ldd	r21, Y+40	; 0x28
    145e:	69 a5       	ldd	r22, Y+41	; 0x29
    1460:	7a a5       	ldd	r23, Y+42	; 0x2a
    1462:	8b a5       	ldd	r24, Y+43	; 0x2b
    1464:	9c a5       	ldd	r25, Y+44	; 0x2c
    1466:	0e 94 2d 2a 	call	0x545a	; 0x545a <__subsf3>
    146a:	9b 01       	movw	r18, r22
    146c:	ac 01       	movw	r20, r24
    146e:	c5 01       	movw	r24, r10
    1470:	b4 01       	movw	r22, r8
    1472:	0e 94 9f 2a 	call	0x553e	; 0x553e <__divsf3>
    1476:	4b 01       	movw	r8, r22
    1478:	5c 01       	movw	r10, r24
    147a:	e2 18       	sub	r14, r2
    147c:	f3 08       	sbc	r15, r3
    147e:	b7 01       	movw	r22, r14
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    1488:	9b 01       	movw	r18, r22
    148a:	ac 01       	movw	r20, r24
    148c:	c5 01       	movw	r24, r10
    148e:	b4 01       	movw	r22, r8
    1490:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <__mulsf3>
    1494:	9b 01       	movw	r18, r22
    1496:	ac 01       	movw	r20, r24
    1498:	c3 01       	movw	r24, r6
    149a:	b2 01       	movw	r22, r4
    149c:	0e 94 2d 2a 	call	0x545a	; 0x545a <__subsf3>
    14a0:	0e 94 18 2b 	call	0x5630	; 0x5630 <__fixunssfsi>
    14a4:	6b 01       	movw	r12, r22
    14a6:	6e a5       	ldd	r22, Y+46	; 0x2e
    14a8:	7f a5       	ldd	r23, Y+47	; 0x2f
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    14b2:	2b 01       	movw	r4, r22
    14b4:	3c 01       	movw	r6, r24
    14b6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    14b8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    14ba:	4f 8d       	ldd	r20, Y+31	; 0x1f
    14bc:	58 a1       	ldd	r21, Y+32	; 0x20
    14be:	69 a1       	ldd	r22, Y+33	; 0x21
    14c0:	7a a1       	ldd	r23, Y+34	; 0x22
    14c2:	8b a1       	ldd	r24, Y+35	; 0x23
    14c4:	9c a1       	ldd	r25, Y+36	; 0x24
    14c6:	0e 94 2d 2a 	call	0x545a	; 0x545a <__subsf3>
    14ca:	9b 01       	movw	r18, r22
    14cc:	ac 01       	movw	r20, r24
    14ce:	c3 01       	movw	r24, r6
    14d0:	b2 01       	movw	r22, r4
    14d2:	0e 94 9f 2a 	call	0x553e	; 0x553e <__divsf3>
    14d6:	2b 01       	movw	r4, r22
    14d8:	3c 01       	movw	r6, r24
    14da:	69 8d       	ldd	r22, Y+25	; 0x19
    14dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14de:	62 19       	sub	r22, r2
    14e0:	73 09       	sbc	r23, r3
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	c3 01       	movw	r24, r6
    14f0:	b2 01       	movw	r22, r4
    14f2:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <__mulsf3>
    14f6:	4b 01       	movw	r8, r22
    14f8:	5c 01       	movw	r10, r24
    14fa:	6d 89       	ldd	r22, Y+21	; 0x15
    14fc:	7e 89       	ldd	r23, Y+22	; 0x16
    14fe:	60 0f       	add	r22, r16
    1500:	71 1f       	adc	r23, r17
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    150a:	9b 01       	movw	r18, r22
    150c:	ac 01       	movw	r20, r24
    150e:	c5 01       	movw	r24, r10
    1510:	b4 01       	movw	r22, r8
    1512:	0e 94 2e 2a 	call	0x545c	; 0x545c <__addsf3>
    1516:	0e 94 18 2b 	call	0x5630	; 0x5630 <__fixunssfsi>
    151a:	c6 01       	movw	r24, r12
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	ef 90       	pop	r14
    1528:	df 90       	pop	r13
    152a:	cf 90       	pop	r12
    152c:	bf 90       	pop	r11
    152e:	af 90       	pop	r10
    1530:	9f 90       	pop	r9
    1532:	8f 90       	pop	r8
    1534:	7f 90       	pop	r7
    1536:	6f 90       	pop	r6
    1538:	5f 90       	pop	r5
    153a:	4f 90       	pop	r4
    153c:	3f 90       	pop	r3
    153e:	2f 90       	pop	r2
    1540:	08 95       	ret

00001542 <add_point(graph, unsigned int, unsigned int, char)>:
_Z9add_point5graphjjc():
    1542:	4f 92       	push	r4
    1544:	5f 92       	push	r5
    1546:	6f 92       	push	r6
    1548:	7f 92       	push	r7
    154a:	af 92       	push	r10
    154c:	bf 92       	push	r11
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	8a a5       	ldd	r24, Y+42	; 0x2a
    1564:	9b a5       	ldd	r25, Y+43	; 0x2b
    1566:	2c a5       	ldd	r18, Y+44	; 0x2c
    1568:	3d a5       	ldd	r19, Y+45	; 0x2d
    156a:	1e a5       	ldd	r17, Y+46	; 0x2e
    156c:	3f 93       	push	r19
    156e:	2f 93       	push	r18
    1570:	9f 93       	push	r25
    1572:	8f 93       	push	r24
    1574:	8d b7       	in	r24, 0x3d	; 61
    1576:	9e b7       	in	r25, 0x3e	; 62
    1578:	49 97       	sbiw	r24, 0x19	; 25
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	9e bf       	out	0x3e, r25	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	8d bf       	out	0x3d, r24	; 61
    1584:	ad b7       	in	r26, 0x3d	; 61
    1586:	be b7       	in	r27, 0x3e	; 62
    1588:	11 96       	adiw	r26, 0x01	; 1
    158a:	89 e1       	ldi	r24, 0x19	; 25
    158c:	fe 01       	movw	r30, r28
    158e:	71 96       	adiw	r30, 0x11	; 17
    1590:	01 90       	ld	r0, Z+
    1592:	0d 92       	st	X+, r0
    1594:	8a 95       	dec	r24
    1596:	e1 f7       	brne	.-8      	; 0x1590 <add_point(graph, unsigned int, unsigned int, char)+0x4e>
    1598:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <point_to_position(graph, unsigned int, unsigned int)>
    159c:	2b 01       	movw	r4, r22
    159e:	3c 01       	movw	r6, r24
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	1f 34       	cpi	r17, 0x4F	; 79
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <add_point(graph, unsigned int, unsigned int, char)+0x6e>
    15ae:	89 c0       	rjmp	.+274    	; 0x16c2 <add_point(graph, unsigned int, unsigned int, char)+0x180>
    15b0:	ac f4       	brge	.+42     	; 0x15dc <add_point(graph, unsigned int, unsigned int, char)+0x9a>
    15b2:	1b 32       	cpi	r17, 0x2B	; 43
    15b4:	c1 f1       	breq	.+112    	; 0x1626 <add_point(graph, unsigned int, unsigned int, char)+0xe4>
    15b6:	ac 01       	movw	r20, r24
    15b8:	1e 32       	cpi	r17, 0x2E	; 46
    15ba:	09 f4       	brne	.+2      	; 0x15be <add_point(graph, unsigned int, unsigned int, char)+0x7c>
    15bc:	6f c0       	rjmp	.+222    	; 0x169c <add_point(graph, unsigned int, unsigned int, char)+0x15a>
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	df 90       	pop	r13
    15cc:	cf 90       	pop	r12
    15ce:	bf 90       	pop	r11
    15d0:	af 90       	pop	r10
    15d2:	7f 90       	pop	r7
    15d4:	6f 90       	pop	r6
    15d6:	5f 90       	pop	r5
    15d8:	4f 90       	pop	r4
    15da:	08 95       	ret
    15dc:	1f 36       	cpi	r17, 0x6F	; 111
    15de:	09 f4       	brne	.+2      	; 0x15e2 <add_point(graph, unsigned int, unsigned int, char)+0xa0>
    15e0:	43 c0       	rjmp	.+134    	; 0x1668 <add_point(graph, unsigned int, unsigned int, char)+0x126>
    15e2:	18 37       	cpi	r17, 0x78	; 120
    15e4:	61 f7       	brne	.-40     	; 0x15be <add_point(graph, unsigned int, unsigned int, char)+0x7c>
    15e6:	7c 01       	movw	r14, r24
    15e8:	92 e0       	ldi	r25, 0x02	; 2
    15ea:	e9 0e       	add	r14, r25
    15ec:	f1 1c       	adc	r15, r1
    15ee:	62 01       	movw	r12, r4
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	c8 0e       	add	r12, r24
    15f4:	d1 1c       	adc	r13, r1
    15f6:	53 01       	movw	r10, r6
    15f8:	92 e0       	ldi	r25, 0x02	; 2
    15fa:	a9 1a       	sub	r10, r25
    15fc:	b1 08       	sbc	r11, r1
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	48 1a       	sub	r4, r24
    1602:	51 08       	sbc	r5, r1
    1604:	87 01       	movw	r16, r14
    1606:	96 01       	movw	r18, r12
    1608:	a5 01       	movw	r20, r10
    160a:	b2 01       	movw	r22, r4
    160c:	8c e3       	ldi	r24, 0x3C	; 60
    160e:	92 e0       	ldi	r25, 0x02	; 2
    1610:	0e 94 4d 13 	call	0x269a	; 0x269a <LCDWIKI_GUI::Draw_Line(int, int, int, int)>
    1614:	85 01       	movw	r16, r10
    1616:	96 01       	movw	r18, r12
    1618:	a7 01       	movw	r20, r14
    161a:	b2 01       	movw	r22, r4
    161c:	8c e3       	ldi	r24, 0x3C	; 60
    161e:	92 e0       	ldi	r25, 0x02	; 2
    1620:	0e 94 4d 13 	call	0x269a	; 0x269a <LCDWIKI_GUI::Draw_Line(int, int, int, int)>
    1624:	cc cf       	rjmp	.-104    	; 0x15be <add_point(graph, unsigned int, unsigned int, char)+0x7c>
    1626:	62 50       	subi	r22, 0x02	; 2
    1628:	71 09       	sbc	r23, r1
    162a:	25 e0       	ldi	r18, 0x05	; 5
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	ac 01       	movw	r20, r24
    1630:	8c e3       	ldi	r24, 0x3C	; 60
    1632:	92 e0       	ldi	r25, 0x02	; 2
    1634:	0e 94 37 13 	call	0x266e	; 0x266e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    1638:	a3 01       	movw	r20, r6
    163a:	42 50       	subi	r20, 0x02	; 2
    163c:	51 09       	sbc	r21, r1
    163e:	25 e0       	ldi	r18, 0x05	; 5
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	b2 01       	movw	r22, r4
    1644:	8c e3       	ldi	r24, 0x3C	; 60
    1646:	92 e0       	ldi	r25, 0x02	; 2
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	df 90       	pop	r13
    1656:	cf 90       	pop	r12
    1658:	bf 90       	pop	r11
    165a:	af 90       	pop	r10
    165c:	7f 90       	pop	r7
    165e:	6f 90       	pop	r6
    1660:	5f 90       	pop	r5
    1662:	4f 90       	pop	r4
    1664:	0c 94 20 13 	jmp	0x2640	; 0x2640 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
    1668:	61 50       	subi	r22, 0x01	; 1
    166a:	71 09       	sbc	r23, r1
    166c:	ac 01       	movw	r20, r24
    166e:	8c e3       	ldi	r24, 0x3C	; 60
    1670:	92 e0       	ldi	r25, 0x02	; 2
    1672:	0e 94 15 13 	call	0x262a	; 0x262a <LCDWIKI_GUI::Draw_Pixel(int, int)>
    1676:	b2 01       	movw	r22, r4
    1678:	6f 5f       	subi	r22, 0xFF	; 255
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	a3 01       	movw	r20, r6
    167e:	8c e3       	ldi	r24, 0x3C	; 60
    1680:	92 e0       	ldi	r25, 0x02	; 2
    1682:	0e 94 15 13 	call	0x262a	; 0x262a <LCDWIKI_GUI::Draw_Pixel(int, int)>
    1686:	a3 01       	movw	r20, r6
    1688:	41 50       	subi	r20, 0x01	; 1
    168a:	51 09       	sbc	r21, r1
    168c:	b2 01       	movw	r22, r4
    168e:	8c e3       	ldi	r24, 0x3C	; 60
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	0e 94 15 13 	call	0x262a	; 0x262a <LCDWIKI_GUI::Draw_Pixel(int, int)>
    1696:	a3 01       	movw	r20, r6
    1698:	4f 5f       	subi	r20, 0xFF	; 255
    169a:	5f 4f       	sbci	r21, 0xFF	; 255
    169c:	b2 01       	movw	r22, r4
    169e:	8c e3       	ldi	r24, 0x3C	; 60
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	bf 90       	pop	r11
    16b4:	af 90       	pop	r10
    16b6:	7f 90       	pop	r7
    16b8:	6f 90       	pop	r6
    16ba:	5f 90       	pop	r5
    16bc:	4f 90       	pop	r4
    16be:	0c 94 15 13 	jmp	0x262a	; 0x262a <LCDWIKI_GUI::Draw_Pixel(int, int)>
    16c2:	6c 01       	movw	r12, r24
    16c4:	91 e0       	ldi	r25, 0x01	; 1
    16c6:	c9 1a       	sub	r12, r25
    16c8:	d1 08       	sbc	r13, r1
    16ca:	b2 01       	movw	r22, r4
    16cc:	62 50       	subi	r22, 0x02	; 2
    16ce:	71 09       	sbc	r23, r1
    16d0:	23 e0       	ldi	r18, 0x03	; 3
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	a6 01       	movw	r20, r12
    16d6:	8c e3       	ldi	r24, 0x3C	; 60
    16d8:	92 e0       	ldi	r25, 0x02	; 2
    16da:	0e 94 20 13 	call	0x2640	; 0x2640 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
    16de:	72 01       	movw	r14, r4
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	e8 1a       	sub	r14, r24
    16e4:	f1 08       	sbc	r15, r1
    16e6:	a3 01       	movw	r20, r6
    16e8:	42 50       	subi	r20, 0x02	; 2
    16ea:	51 09       	sbc	r21, r1
    16ec:	23 e0       	ldi	r18, 0x03	; 3
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	b7 01       	movw	r22, r14
    16f2:	8c e3       	ldi	r24, 0x3C	; 60
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	0e 94 37 13 	call	0x266e	; 0x266e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    16fa:	b2 01       	movw	r22, r4
    16fc:	6e 5f       	subi	r22, 0xFE	; 254
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	23 e0       	ldi	r18, 0x03	; 3
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	a6 01       	movw	r20, r12
    1706:	8c e3       	ldi	r24, 0x3C	; 60
    1708:	92 e0       	ldi	r25, 0x02	; 2
    170a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
    170e:	a3 01       	movw	r20, r6
    1710:	4e 5f       	subi	r20, 0xFE	; 254
    1712:	5f 4f       	sbci	r21, 0xFF	; 255
    1714:	23 e0       	ldi	r18, 0x03	; 3
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	b7 01       	movw	r22, r14
    171a:	8c e3       	ldi	r24, 0x3C	; 60
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	7f 90       	pop	r7
    1734:	6f 90       	pop	r6
    1736:	5f 90       	pop	r5
    1738:	4f 90       	pop	r4
    173a:	0c 94 37 13 	jmp	0x266e	; 0x266e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>

0000173e <add_x_mark(graph, unsigned int)>:
_Z10add_x_mark5graphj():
    173e:	8f 92       	push	r8
    1740:	9f 92       	push	r9
    1742:	af 92       	push	r10
    1744:	bf 92       	push	r11
    1746:	cf 92       	push	r12
    1748:	df 92       	push	r13
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	e8 a4       	ldd	r14, Y+40	; 0x28
    175c:	f9 a4       	ldd	r15, Y+41	; 0x29
    175e:	1f 92       	push	r1
    1760:	1f 92       	push	r1
    1762:	ff 92       	push	r15
    1764:	ef 92       	push	r14
    1766:	8d b7       	in	r24, 0x3d	; 61
    1768:	9e b7       	in	r25, 0x3e	; 62
    176a:	49 97       	sbiw	r24, 0x19	; 25
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	9e bf       	out	0x3e, r25	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	8d bf       	out	0x3d, r24	; 61
    1776:	ad b7       	in	r26, 0x3d	; 61
    1778:	be b7       	in	r27, 0x3e	; 62
    177a:	11 96       	adiw	r26, 0x01	; 1
    177c:	89 e1       	ldi	r24, 0x19	; 25
    177e:	fe 01       	movw	r30, r28
    1780:	3f 96       	adiw	r30, 0x0f	; 15
    1782:	01 90       	ld	r0, Z+
    1784:	0d 92       	st	X+, r0
    1786:	8a 95       	dec	r24
    1788:	e1 f7       	brne	.-8      	; 0x1782 <add_x_mark(graph, unsigned int)+0x44>
    178a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <point_to_position(graph, unsigned int, unsigned int)>
    178e:	4b 01       	movw	r8, r22
    1790:	5c 01       	movw	r10, r24
    1792:	cf a0       	ldd	r12, Y+39	; 0x27
    1794:	c6 94       	lsr	r12
    1796:	c6 94       	lsr	r12
    1798:	c6 94       	lsr	r12
    179a:	c7 01       	movw	r24, r14
    179c:	0e 94 b7 12 	call	0x256e	; 0x256e <count_decimals(int)>
    17a0:	d8 2e       	mov	r13, r24
    17a2:	a5 01       	movw	r20, r10
    17a4:	42 50       	subi	r20, 0x02	; 2
    17a6:	51 09       	sbc	r21, r1
    17a8:	25 e0       	ldi	r18, 0x05	; 5
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	b4 01       	movw	r22, r8
    17ae:	8c e3       	ldi	r24, 0x3C	; 60
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	0e 94 20 13 	call	0x2640	; 0x2640 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
    17b6:	85 01       	movw	r16, r10
    17b8:	0e 5f       	subi	r16, 0xFE	; 254
    17ba:	1f 4f       	sbci	r17, 0xFF	; 255
    17bc:	d6 94       	lsr	r13
    17be:	26 e0       	ldi	r18, 0x06	; 6
    17c0:	d2 9e       	mul	r13, r18
    17c2:	c0 01       	movw	r24, r0
    17c4:	11 24       	eor	r1, r1
    17c6:	c8 9e       	mul	r12, r24
    17c8:	90 01       	movw	r18, r0
    17ca:	c9 9e       	mul	r12, r25
    17cc:	30 0d       	add	r19, r0
    17ce:	11 24       	eor	r1, r1
    17d0:	22 50       	subi	r18, 0x02	; 2
    17d2:	31 09       	sbc	r19, r1
    17d4:	c4 01       	movw	r24, r8
    17d6:	82 1b       	sub	r24, r18
    17d8:	93 0b       	sbc	r25, r19
    17da:	9c 01       	movw	r18, r24
    17dc:	a7 01       	movw	r20, r14
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	8a e0       	ldi	r24, 0x0A	; 10
    17e4:	a8 2e       	mov	r10, r24
    17e6:	b1 2c       	mov	r11, r1
    17e8:	90 e2       	ldi	r25, 0x20	; 32
    17ea:	c9 2e       	mov	r12, r25
    17ec:	ee 24       	eor	r14, r14
    17ee:	e3 94       	inc	r14
    17f0:	f1 2c       	mov	r15, r1
    17f2:	8c e3       	ldi	r24, 0x3C	; 60
    17f4:	92 e0       	ldi	r25, 0x02	; 2
    17f6:	0e 94 82 15 	call	0x2b04	; 0x2b04 <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)>
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	bf 90       	pop	r11
    1816:	af 90       	pop	r10
    1818:	9f 90       	pop	r9
    181a:	8f 90       	pop	r8
    181c:	08 95       	ret

0000181e <add_line(graph, float, float, float, float)>:
_Z8add_line5graphffff():
    181e:	cf 92       	push	r12
    1820:	df 92       	push	r13
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	68 a5       	ldd	r22, Y+40	; 0x28
    1834:	79 a5       	ldd	r23, Y+41	; 0x29
    1836:	8a a5       	ldd	r24, Y+42	; 0x2a
    1838:	9b a5       	ldd	r25, Y+43	; 0x2b
    183a:	0e 94 18 2b 	call	0x5630	; 0x5630 <__fixunssfsi>
    183e:	7f 93       	push	r23
    1840:	6f 93       	push	r22
    1842:	6c a1       	ldd	r22, Y+36	; 0x24
    1844:	7d a1       	ldd	r23, Y+37	; 0x25
    1846:	8e a1       	ldd	r24, Y+38	; 0x26
    1848:	9f a1       	ldd	r25, Y+39	; 0x27
    184a:	0e 94 18 2b 	call	0x5630	; 0x5630 <__fixunssfsi>
    184e:	7f 93       	push	r23
    1850:	6f 93       	push	r22
    1852:	2d b7       	in	r18, 0x3d	; 61
    1854:	3e b7       	in	r19, 0x3e	; 62
    1856:	29 51       	subi	r18, 0x19	; 25
    1858:	31 09       	sbc	r19, r1
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	3e bf       	out	0x3e, r19	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	2d bf       	out	0x3d, r18	; 61
    1864:	ad b7       	in	r26, 0x3d	; 61
    1866:	be b7       	in	r27, 0x3e	; 62
    1868:	11 96       	adiw	r26, 0x01	; 1
    186a:	89 e1       	ldi	r24, 0x19	; 25
    186c:	fe 01       	movw	r30, r28
    186e:	3b 96       	adiw	r30, 0x0b	; 11
    1870:	01 90       	ld	r0, Z+
    1872:	0d 92       	st	X+, r0
    1874:	8a 95       	dec	r24
    1876:	e1 f7       	brne	.-8      	; 0x1870 <add_line(graph, float, float, float, float)+0x52>
    1878:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <point_to_position(graph, unsigned int, unsigned int)>
    187c:	6b 01       	movw	r12, r22
    187e:	7c 01       	movw	r14, r24
    1880:	68 a9       	ldd	r22, Y+48	; 0x30
    1882:	79 a9       	ldd	r23, Y+49	; 0x31
    1884:	8a a9       	ldd	r24, Y+50	; 0x32
    1886:	9b a9       	ldd	r25, Y+51	; 0x33
    1888:	0e 94 18 2b 	call	0x5630	; 0x5630 <__fixunssfsi>
    188c:	7f 93       	push	r23
    188e:	6f 93       	push	r22
    1890:	6c a5       	ldd	r22, Y+44	; 0x2c
    1892:	7d a5       	ldd	r23, Y+45	; 0x2d
    1894:	8e a5       	ldd	r24, Y+46	; 0x2e
    1896:	9f a5       	ldd	r25, Y+47	; 0x2f
    1898:	0e 94 18 2b 	call	0x5630	; 0x5630 <__fixunssfsi>
    189c:	7f 93       	push	r23
    189e:	6f 93       	push	r22
    18a0:	8d b7       	in	r24, 0x3d	; 61
    18a2:	9e b7       	in	r25, 0x3e	; 62
    18a4:	49 97       	sbiw	r24, 0x19	; 25
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	9e bf       	out	0x3e, r25	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	8d bf       	out	0x3d, r24	; 61
    18b0:	ad b7       	in	r26, 0x3d	; 61
    18b2:	be b7       	in	r27, 0x3e	; 62
    18b4:	11 96       	adiw	r26, 0x01	; 1
    18b6:	89 e1       	ldi	r24, 0x19	; 25
    18b8:	fe 01       	movw	r30, r28
    18ba:	3b 96       	adiw	r30, 0x0b	; 11
    18bc:	01 90       	ld	r0, Z+
    18be:	0d 92       	st	X+, r0
    18c0:	8a 95       	dec	r24
    18c2:	e1 f7       	brne	.-8      	; 0x18bc <add_line(graph, float, float, float, float)+0x9e>
    18c4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <point_to_position(graph, unsigned int, unsigned int)>
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	8c 01       	movw	r16, r24
    18d4:	9b 01       	movw	r18, r22
    18d6:	a7 01       	movw	r20, r14
    18d8:	b6 01       	movw	r22, r12
    18da:	8c e3       	ldi	r24, 0x3C	; 60
    18dc:	92 e0       	ldi	r25, 0x02	; 2
    18de:	0e 94 4d 13 	call	0x269a	; 0x269a <LCDWIKI_GUI::Draw_Line(int, int, int, int)>
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	08 95       	ret

000018f4 <draw_graph(graph)>:
_Z10draw_graph5graph():
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:85

void draw_graph(graph graph) {
    18f4:	2f 92       	push	r2
    18f6:	3f 92       	push	r3
    18f8:	4f 92       	push	r4
    18fa:	5f 92       	push	r5
    18fc:	6f 92       	push	r6
    18fe:	7f 92       	push	r7
    1900:	8f 92       	push	r8
    1902:	9f 92       	push	r9
    1904:	af 92       	push	r10
    1906:	bf 92       	push	r11
    1908:	cf 92       	push	r12
    190a:	df 92       	push	r13
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	0d 89       	ldd	r16, Y+21	; 0x15
    191e:	1e 89       	ldd	r17, Y+22	; 0x16
    1920:	af 88       	ldd	r10, Y+23	; 0x17
    1922:	b8 8c       	ldd	r11, Y+24	; 0x18
    1924:	89 8c       	ldd	r8, Y+25	; 0x19
    1926:	9a 8c       	ldd	r9, Y+26	; 0x1a
    1928:	6b 8c       	ldd	r6, Y+27	; 0x1b
    192a:	7c 8c       	ldd	r7, Y+28	; 0x1c
    192c:	ed a4       	ldd	r14, Y+45	; 0x2d
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:86
  display.Draw_Fast_HLine(graph.pos.x, graph.pos.y + graph.height - graph.padding, graph.width); // x axis
    192e:	ce 2c       	mov	r12, r14
    1930:	d1 2c       	mov	r13, r1
    1932:	25 01       	movw	r4, r10
    1934:	46 0c       	add	r4, r6
    1936:	57 1c       	adc	r5, r7
    1938:	4c 18       	sub	r4, r12
    193a:	5d 08       	sbc	r5, r13
    193c:	94 01       	movw	r18, r8
    193e:	a2 01       	movw	r20, r4
    1940:	b8 01       	movw	r22, r16
    1942:	8c e3       	ldi	r24, 0x3C	; 60
    1944:	92 e0       	ldi	r25, 0x02	; 2
    1946:	0e 94 37 13 	call	0x266e	; 0x266e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:87
  display.Draw_Fast_VLine(graph.pos.x + graph.padding, graph.pos.y, graph.height); // y axis
    194a:	16 01       	movw	r2, r12
    194c:	20 0e       	add	r2, r16
    194e:	31 1e       	adc	r3, r17
    1950:	93 01       	movw	r18, r6
    1952:	a5 01       	movw	r20, r10
    1954:	b1 01       	movw	r22, r2
    1956:	8c e3       	ldi	r24, 0x3C	; 60
    1958:	92 e0       	ldi	r25, 0x02	; 2
    195a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:91

  uint8_t arrow_size = 5;

  draw_arrow({graph.pos.x + graph.width, graph.pos.y + graph.height - graph.padding}, 1, graph.padding, graph.padding/2); // x axis arrow
    195e:	e6 94       	lsr	r14
    1960:	f1 2c       	mov	r15, r1
    1962:	b8 01       	movw	r22, r16
    1964:	68 0d       	add	r22, r8
    1966:	79 1d       	adc	r23, r9
    1968:	c2 01       	movw	r24, r4
    196a:	87 01       	movw	r16, r14
    196c:	96 01       	movw	r18, r12
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <draw_arrow(position, unsigned char, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:92
  draw_arrow({graph.pos.x + graph.padding, graph.pos.y}, 0, graph.padding, graph.padding/2); // y axis arrow
    1974:	b1 01       	movw	r22, r2
    1976:	c5 01       	movw	r24, r10
    1978:	96 01       	movw	r18, r12
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <draw_arrow(position, unsigned char, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:93
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	df 90       	pop	r13
    198e:	cf 90       	pop	r12
    1990:	bf 90       	pop	r11
    1992:	af 90       	pop	r10
    1994:	9f 90       	pop	r9
    1996:	8f 90       	pop	r8
    1998:	7f 90       	pop	r7
    199a:	6f 90       	pop	r6
    199c:	5f 90       	pop	r5
    199e:	4f 90       	pop	r4
    19a0:	3f 90       	pop	r3
    19a2:	2f 90       	pop	r2
    19a4:	08 95       	ret

000019a6 <add_y_mark(graph, unsigned int)>:
_Z10add_y_mark5graphj():
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:46
      display.Draw_Fast_HLine(point.x - 1, point.y + 2, 3);
    break;
  }
}

void add_y_mark(graph graph, uint16_t y) {
    19a6:	4f 92       	push	r4
    19a8:	5f 92       	push	r5
    19aa:	6f 92       	push	r6
    19ac:	7f 92       	push	r7
    19ae:	9f 92       	push	r9
    19b0:	af 92       	push	r10
    19b2:	bf 92       	push	r11
    19b4:	cf 92       	push	r12
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	eb a4       	ldd	r14, Y+43	; 0x2b
    19ca:	fc a4       	ldd	r15, Y+44	; 0x2c
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:47
  uint8_t original_rotation = display.Get_Rotation();
    19cc:	8c e3       	ldi	r24, 0x3C	; 60
    19ce:	92 e0       	ldi	r25, 0x02	; 2
    19d0:	0e 94 00 23 	call	0x4600	; 0x4600 <LCDWIKI_SPI::Get_Rotation() const>
    19d4:	98 2e       	mov	r9, r24
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:50
  
  // calculations are made using coordinates without rotation
  position mark_pos = point_to_position(graph, 0, y);
    19d6:	ff 92       	push	r15
    19d8:	ef 92       	push	r14
    19da:	1f 92       	push	r1
    19dc:	1f 92       	push	r1
    19de:	2d b7       	in	r18, 0x3d	; 61
    19e0:	3e b7       	in	r19, 0x3e	; 62
    19e2:	29 51       	subi	r18, 0x19	; 25
    19e4:	31 09       	sbc	r19, r1
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	3e bf       	out	0x3e, r19	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	2d bf       	out	0x3d, r18	; 61
    19f0:	ad b7       	in	r26, 0x3d	; 61
    19f2:	be b7       	in	r27, 0x3e	; 62
    19f4:	11 96       	adiw	r26, 0x01	; 1
    19f6:	89 e1       	ldi	r24, 0x19	; 25
    19f8:	fe 01       	movw	r30, r28
    19fa:	72 96       	adiw	r30, 0x12	; 18
    19fc:	01 90       	ld	r0, Z+
    19fe:	0d 92       	st	X+, r0
    1a00:	8a 95       	dec	r24
    1a02:	e1 f7       	brne	.-8      	; 0x19fc <add_y_mark(graph, unsigned int)+0x56>
    1a04:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <point_to_position(graph, unsigned int, unsigned int)>
    1a08:	2b 01       	movw	r4, r22
    1a0a:	3c 01       	movw	r6, r24
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:51
  mark_pos.y = display.Get_Height() - mark_pos.y - 1;
    1a0c:	8c e3       	ldi	r24, 0x3C	; 60
    1a0e:	92 e0       	ldi	r25, 0x02	; 2
    1a10:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <LCDWIKI_SPI::Get_Height() const>
    1a14:	63 01       	movw	r12, r6
    1a16:	c0 94       	com	r12
    1a18:	d0 94       	com	r13
    1a1a:	c8 0e       	add	r12, r24
    1a1c:	d9 1e       	adc	r13, r25
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:52
  uint8_t text_size = graph.padding / 8;
    1a1e:	2a a5       	ldd	r18, Y+42	; 0x2a
    1a20:	12 2f       	mov	r17, r18
    1a22:	16 95       	lsr	r17
    1a24:	16 95       	lsr	r17
    1a26:	16 95       	lsr	r17
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:53
  uint16_t text_offset = 6 * (count_decimals(y) / 2) * text_size - 2;
    1a28:	c7 01       	movw	r24, r14
    1a2a:	0e 94 b7 12 	call	0x256e	; 0x256e <count_decimals(int)>
    1a2e:	b8 2e       	mov	r11, r24
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:56

  // x and y are switched because of the rotation
  display.Set_Rotation((original_rotation - 1) % 4);
    1a30:	29 2d       	mov	r18, r9
    1a32:	21 50       	subi	r18, 0x01	; 1
    1a34:	33 0b       	sbc	r19, r19
    1a36:	c9 01       	movw	r24, r18
    1a38:	64 e0       	ldi	r22, 0x04	; 4
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__divmodhi4>
    1a40:	68 2f       	mov	r22, r24
    1a42:	8c e3       	ldi	r24, 0x3C	; 60
    1a44:	92 e0       	ldi	r25, 0x02	; 2
    1a46:	0e 94 fe 20 	call	0x41fc	; 0x41fc <LCDWIKI_SPI::Set_Rotation(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:57
  display.Draw_Fast_VLine(mark_pos.y, mark_pos.x - 2, 5);
    1a4a:	a2 01       	movw	r20, r4
    1a4c:	42 50       	subi	r20, 0x02	; 2
    1a4e:	51 09       	sbc	r21, r1
    1a50:	25 e0       	ldi	r18, 0x05	; 5
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	b6 01       	movw	r22, r12
    1a56:	8c e3       	ldi	r24, 0x3C	; 60
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	0e 94 20 13 	call	0x2640	; 0x2640 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:58
  display.Print_Number_Int(y, mark_pos.y - text_offset, mark_pos.x - text_size * 8, 1, ' ', 10);
    1a5e:	21 2f       	mov	r18, r17
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	c9 01       	movw	r24, r18
    1a64:	43 e0       	ldi	r20, 0x03	; 3
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	4a 95       	dec	r20
    1a6c:	e1 f7       	brne	.-8      	; 0x1a66 <add_y_mark(graph, unsigned int)+0xc0>
    1a6e:	82 01       	movw	r16, r4
    1a70:	08 1b       	sub	r16, r24
    1a72:	19 0b       	sbc	r17, r25
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:53
  
  // calculations are made using coordinates without rotation
  position mark_pos = point_to_position(graph, 0, y);
  mark_pos.y = display.Get_Height() - mark_pos.y - 1;
  uint8_t text_size = graph.padding / 8;
  uint16_t text_offset = 6 * (count_decimals(y) / 2) * text_size - 2;
    1a74:	b6 94       	lsr	r11
    1a76:	46 e0       	ldi	r20, 0x06	; 6
    1a78:	b4 9e       	mul	r11, r20
    1a7a:	c0 01       	movw	r24, r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	82 9f       	mul	r24, r18
    1a80:	a0 01       	movw	r20, r0
    1a82:	83 9f       	mul	r24, r19
    1a84:	50 0d       	add	r21, r0
    1a86:	92 9f       	mul	r25, r18
    1a88:	50 0d       	add	r21, r0
    1a8a:	11 24       	eor	r1, r1
    1a8c:	42 50       	subi	r20, 0x02	; 2
    1a8e:	51 09       	sbc	r21, r1
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:58

  // x and y are switched because of the rotation
  display.Set_Rotation((original_rotation - 1) % 4);
  display.Draw_Fast_VLine(mark_pos.y, mark_pos.x - 2, 5);
  display.Print_Number_Int(y, mark_pos.y - text_offset, mark_pos.x - text_size * 8, 1, ' ', 10);
    1a90:	96 01       	movw	r18, r12
    1a92:	24 1b       	sub	r18, r20
    1a94:	35 0b       	sbc	r19, r21
    1a96:	a7 01       	movw	r20, r14
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	60 e0       	ldi	r22, 0x00	; 0
    1a9c:	ea e0       	ldi	r30, 0x0A	; 10
    1a9e:	ae 2e       	mov	r10, r30
    1aa0:	b1 2c       	mov	r11, r1
    1aa2:	f0 e2       	ldi	r31, 0x20	; 32
    1aa4:	cf 2e       	mov	r12, r31
    1aa6:	ee 24       	eor	r14, r14
    1aa8:	e3 94       	inc	r14
    1aaa:	f1 2c       	mov	r15, r1
    1aac:	8c e3       	ldi	r24, 0x3C	; 60
    1aae:	92 e0       	ldi	r25, 0x02	; 2
    1ab0:	0e 94 82 15 	call	0x2b04	; 0x2b04 <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)>
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:59
  display.Set_Rotation(original_rotation);
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	69 2d       	mov	r22, r9
    1ac0:	8c e3       	ldi	r24, 0x3C	; 60
    1ac2:	92 e0       	ldi	r25, 0x02	; 2
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:60
}
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	7f 90       	pop	r7
    1adc:	6f 90       	pop	r6
    1ade:	5f 90       	pop	r5
    1ae0:	4f 90       	pop	r4
/home/noah/Documents/basteln/ofen_v2/main/graph.cpp:59

  // x and y are switched because of the rotation
  display.Set_Rotation((original_rotation - 1) % 4);
  display.Draw_Fast_VLine(mark_pos.y, mark_pos.x - 2, 5);
  display.Print_Number_Int(y, mark_pos.y - text_offset, mark_pos.x - text_size * 8, 1, ' ', 10);
  display.Set_Rotation(original_rotation);
    1ae2:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <LCDWIKI_SPI::Set_Rotation(unsigned char)>

00001ae6 <temperature_to_color(unsigned int)>:
_Z20temperature_to_colorj():
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:8
#include <SPI.h>
#include "graphics.h"

LCDWIKI_SPI display(MODEL,CS,CD,RST,LED);

rgb_color temperature_to_color(uint16_t temp) { // gives a green-yellow-red gradient based on the given temperature
    1ae6:	cf 92       	push	r12
    1ae8:	df 92       	push	r13
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	6c 01       	movw	r12, r24
    1af0:	f1 2c       	mov	r15, r1
    1af2:	e1 2c       	mov	r14, r1
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:13
  uint8_t r = 255;
  uint8_t g = 255;
  uint8_t b = 30;

  if(temp * 2 > TEMP_MAX){
    1af4:	9c 01       	movw	r18, r24
    1af6:	22 0f       	add	r18, r18
    1af8:	33 1f       	adc	r19, r19
    1afa:	25 31       	cpi	r18, 0x15	; 21
    1afc:	35 40       	sbci	r19, 0x05	; 5
    1afe:	a0 f0       	brcs	.+40     	; 0x1b28 <temperature_to_color(unsigned int)+0x42>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:14
    g = 255 * (TEMP_MAX - (uint32_t)temp) / (uint32_t)temp;
    1b00:	a1 e0       	ldi	r26, 0x01	; 1
    1b02:	bf ef       	ldi	r27, 0xFF	; 255
    1b04:	a7 01       	movw	r20, r14
    1b06:	9c 01       	movw	r18, r24
    1b08:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <__mulohisi3>
    1b0c:	64 51       	subi	r22, 0x14	; 20
    1b0e:	71 4f       	sbci	r23, 0xF1	; 241
    1b10:	8a 4f       	sbci	r24, 0xFA	; 250
    1b12:	9f 4f       	sbci	r25, 0xFF	; 255
    1b14:	0e 94 86 2c 	call	0x590c	; 0x590c <__udivmodsi4>
    1b18:	72 2f       	mov	r23, r18
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:9
#include "graphics.h"

LCDWIKI_SPI display(MODEL,CS,CD,RST,LED);

rgb_color temperature_to_color(uint16_t temp) { // gives a green-yellow-red gradient based on the given temperature
  uint8_t r = 255;
    1b1a:	6f ef       	ldi	r22, 0xFF	; 255
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:24
  //   b = ((uint32_t)temp - TEMP_MAX / 2) * 40 / TEMP_MAX;
  // } else {
  //   b = (TEMP_MAX / 2 - (uint32_t)temp) * 40 / TEMP_MAX;
  // }
  return {r, g, b};
}
    1b1c:	8e e1       	ldi	r24, 0x1E	; 30
    1b1e:	ff 90       	pop	r15
    1b20:	ef 90       	pop	r14
    1b22:	df 90       	pop	r13
    1b24:	cf 90       	pop	r12
    1b26:	08 95       	ret
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:16
  uint8_t b = 30;

  if(temp * 2 > TEMP_MAX){
    g = 255 * (TEMP_MAX - (uint32_t)temp) / (uint32_t)temp;
  } else {
    r = 255 * (uint32_t)temp / (TEMP_MAX - (uint32_t)temp);
    1b28:	9c 01       	movw	r18, r24
    1b2a:	af ef       	ldi	r26, 0xFF	; 255
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	0e 94 c7 2c 	call	0x598e	; 0x598e <__umulhisi3>
    1b32:	24 e1       	ldi	r18, 0x14	; 20
    1b34:	35 e0       	ldi	r19, 0x05	; 5
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	2c 19       	sub	r18, r12
    1b3c:	3d 09       	sbc	r19, r13
    1b3e:	4e 09       	sbc	r20, r14
    1b40:	5f 09       	sbc	r21, r15
    1b42:	0e 94 86 2c 	call	0x590c	; 0x590c <__udivmodsi4>
    1b46:	62 2f       	mov	r22, r18
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:10

LCDWIKI_SPI display(MODEL,CS,CD,RST,LED);

rgb_color temperature_to_color(uint16_t temp) { // gives a green-yellow-red gradient based on the given temperature
  uint8_t r = 255;
  uint8_t g = 255;
    1b48:	7f ef       	ldi	r23, 0xFF	; 255
    1b4a:	e8 cf       	rjmp	.-48     	; 0x1b1c <temperature_to_color(unsigned int)+0x36>

00001b4c <draw_arrow(position, unsigned char, unsigned int, unsigned int)>:
_Z10draw_arrow8positionhjj():
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:26
  //   b = (TEMP_MAX / 2 - (uint32_t)temp) * 40 / TEMP_MAX;
  // }
  return {r, g, b};
}

void draw_arrow(position head, uint8_t direction, uint16_t length, uint16_t width) {
    1b4c:	8f 92       	push	r8
    1b4e:	9f 92       	push	r9
    1b50:	af 92       	push	r10
    1b52:	bf 92       	push	r11
    1b54:	df 92       	push	r13
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	4b 01       	movw	r8, r22
    1b64:	5c 01       	movw	r10, r24
    1b66:	d4 2e       	mov	r13, r20
    1b68:	78 01       	movw	r14, r16
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:27
  int16_t size_x = width;
    1b6a:	8f 2d       	mov	r24, r15
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:28
  int16_t size_y = length;
    1b6c:	e9 01       	movw	r28, r18
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:30

  switch(direction) {
    1b6e:	22 e0       	ldi	r18, 0x02	; 2
    1b70:	42 17       	cp	r20, r18
    1b72:	59 f1       	breq	.+86     	; 0x1bca <draw_arrow(position, unsigned char, unsigned int, unsigned int)+0x7e>
    1b74:	23 e0       	ldi	r18, 0x03	; 3
    1b76:	42 17       	cp	r20, r18
    1b78:	51 f0       	breq	.+20     	; 0x1b8e <draw_arrow(position, unsigned char, unsigned int, unsigned int)+0x42>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	48 13       	cpse	r20, r24
    1b7e:	0a c0       	rjmp	.+20     	; 0x1b94 <draw_arrow(position, unsigned char, unsigned int, unsigned int)+0x48>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:32
    case 1:
      size_x = -length;
    1b80:	88 27       	eor	r24, r24
    1b82:	99 27       	eor	r25, r25
    1b84:	8c 1b       	sub	r24, r28
    1b86:	9d 0b       	sbc	r25, r29
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:33
      size_y = width;
    1b88:	e8 01       	movw	r28, r16
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:32
  int16_t size_x = width;
  int16_t size_y = length;

  switch(direction) {
    case 1:
      size_x = -length;
    1b8a:	7c 01       	movw	r14, r24
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:34
      size_y = width;
    break;
    1b8c:	03 c0       	rjmp	.+6      	; 0x1b94 <draw_arrow(position, unsigned char, unsigned int, unsigned int)+0x48>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:39
    case 2:
      size_y = -length;
    break;
    case 3:
      size_x = length;
    1b8e:	7e 01       	movw	r14, r28
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:40
      size_y = width;
    1b90:	c0 2f       	mov	r28, r16
    1b92:	d8 2f       	mov	r29, r24
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:44
    break;
  }

  display.Draw_Line(head.x, head.y, head.x + size_x, head.y + size_y);
    1b94:	8e 01       	movw	r16, r28
    1b96:	0a 0d       	add	r16, r10
    1b98:	1b 1d       	adc	r17, r11
    1b9a:	97 01       	movw	r18, r14
    1b9c:	28 0d       	add	r18, r8
    1b9e:	39 1d       	adc	r19, r9
    1ba0:	a5 01       	movw	r20, r10
    1ba2:	b4 01       	movw	r22, r8
    1ba4:	8c e3       	ldi	r24, 0x3C	; 60
    1ba6:	92 e0       	ldi	r25, 0x02	; 2
    1ba8:	0e 94 4d 13 	call	0x269a	; 0x269a <LCDWIKI_GUI::Draw_Line(int, int, int, int)>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:46

  switch(direction) {
    1bac:	21 e0       	ldi	r18, 0x01	; 1
    1bae:	d2 16       	cp	r13, r18
    1bb0:	41 f0       	breq	.+16     	; 0x1bc2 <draw_arrow(position, unsigned char, unsigned int, unsigned int)+0x76>
    1bb2:	d2 16       	cp	r13, r18
    1bb4:	70 f0       	brcs	.+28     	; 0x1bd2 <draw_arrow(position, unsigned char, unsigned int, unsigned int)+0x86>
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	d8 16       	cp	r13, r24
    1bba:	59 f0       	breq	.+22     	; 0x1bd2 <draw_arrow(position, unsigned char, unsigned int, unsigned int)+0x86>
    1bbc:	23 e0       	ldi	r18, 0x03	; 3
    1bbe:	d2 12       	cpse	r13, r18
    1bc0:	0b c0       	rjmp	.+22     	; 0x1bd8 <draw_arrow(position, unsigned char, unsigned int, unsigned int)+0x8c>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:53
    case 2:
      size_x = -size_x;
    break;
    case 1:
    case 3:
      size_y = -size_y;
    1bc2:	d1 95       	neg	r29
    1bc4:	c1 95       	neg	r28
    1bc6:	d1 09       	sbc	r29, r1
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:54
    break;
    1bc8:	07 c0       	rjmp	.+14     	; 0x1bd8 <draw_arrow(position, unsigned char, unsigned int, unsigned int)+0x8c>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:36
    case 1:
      size_x = -length;
      size_y = width;
    break;
    case 2:
      size_y = -length;
    1bca:	d1 95       	neg	r29
    1bcc:	c1 95       	neg	r28
    1bce:	d1 09       	sbc	r29, r1
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:37
    break;
    1bd0:	e1 cf       	rjmp	.-62     	; 0x1b94 <draw_arrow(position, unsigned char, unsigned int, unsigned int)+0x48>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:49
  display.Draw_Line(head.x, head.y, head.x + size_x, head.y + size_y);

  switch(direction) {
    case 0:
    case 2:
      size_x = -size_x;
    1bd2:	f1 94       	neg	r15
    1bd4:	e1 94       	neg	r14
    1bd6:	f1 08       	sbc	r15, r1
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:57
    case 3:
      size_y = -size_y;
    break;
  }

  display.Draw_Line(head.x, head.y, head.x + size_x, head.y + size_y);
    1bd8:	8e 01       	movw	r16, r28
    1bda:	0a 0d       	add	r16, r10
    1bdc:	1b 1d       	adc	r17, r11
    1bde:	97 01       	movw	r18, r14
    1be0:	28 0d       	add	r18, r8
    1be2:	39 1d       	adc	r19, r9
    1be4:	a5 01       	movw	r20, r10
    1be6:	b4 01       	movw	r22, r8
    1be8:	8c e3       	ldi	r24, 0x3C	; 60
    1bea:	92 e0       	ldi	r25, 0x02	; 2
    1bec:	0e 94 4d 13 	call	0x269a	; 0x269a <LCDWIKI_GUI::Draw_Line(int, int, int, int)>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:58
}
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	ff 90       	pop	r15
    1bfa:	ef 90       	pop	r14
    1bfc:	df 90       	pop	r13
    1bfe:	bf 90       	pop	r11
    1c00:	af 90       	pop	r10
    1c02:	9f 90       	pop	r9
    1c04:	8f 90       	pop	r8
    1c06:	08 95       	ret

00001c08 <draw_pattern_line(int, int, int, int, char)>:
_Z17draw_pattern_lineiiiic():
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:60

void draw_pattern_line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, char pattern) {
    1c08:	2f 92       	push	r2
    1c0a:	3f 92       	push	r3
    1c0c:	4f 92       	push	r4
    1c0e:	5f 92       	push	r5
    1c10:	6f 92       	push	r6
    1c12:	7f 92       	push	r7
    1c14:	8f 92       	push	r8
    1c16:	9f 92       	push	r9
    1c18:	af 92       	push	r10
    1c1a:	bf 92       	push	r11
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	62 97       	sbiw	r28, 0x12	; 18
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	6c 01       	movw	r12, r24
    1c3e:	5b 01       	movw	r10, r22
    1c40:	7a 01       	movw	r14, r20
    1c42:	3a 83       	std	Y+2, r19	; 0x02
    1c44:	29 83       	std	Y+1, r18	; 0x01
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:61
  if(x2 == x1 && y2 == y1) {
    1c46:	48 17       	cp	r20, r24
    1c48:	59 07       	cpc	r21, r25
    1c4a:	49 f4       	brne	.+18     	; 0x1c5e <draw_pattern_line(int, int, int, int, char)+0x56>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:61 (discriminator 1)
    1c4c:	26 17       	cp	r18, r22
    1c4e:	37 07       	cpc	r19, r23
    1c50:	31 f4       	brne	.+12     	; 0x1c5e <draw_pattern_line(int, int, int, int, char)+0x56>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:62
    display.Draw_Pixel(x1, y1);
    1c52:	a9 01       	movw	r20, r18
    1c54:	b7 01       	movw	r22, r14
    1c56:	8c e3       	ldi	r24, 0x3C	; 60
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	0e 94 15 13 	call	0x262a	; 0x262a <LCDWIKI_GUI::Draw_Pixel(int, int)>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:65
  }

  int16_t Dx = x2 - x1;
    1c5e:	ec 18       	sub	r14, r12
    1c60:	fd 08       	sbc	r15, r13
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:66
  int16_t Dy = y2 - y1;
    1c62:	29 81       	ldd	r18, Y+1	; 0x01
    1c64:	3a 81       	ldd	r19, Y+2	; 0x02
    1c66:	2a 19       	sub	r18, r10
    1c68:	3b 09       	sbc	r19, r11
    1c6a:	3a 83       	std	Y+2, r19	; 0x02
    1c6c:	29 83       	std	Y+1, r18	; 0x01
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:73
  float dx = 1;
  float dy = 1;

  uint16_t i_max;

  if(abs(Dx) > abs(Dy)) {
    1c6e:	47 01       	movw	r8, r14
    1c70:	f7 fe       	sbrs	r15, 7
    1c72:	04 c0       	rjmp	.+8      	; 0x1c7c <draw_pattern_line(int, int, int, int, char)+0x74>
    1c74:	88 24       	eor	r8, r8
    1c76:	99 24       	eor	r9, r9
    1c78:	8e 18       	sub	r8, r14
    1c7a:	9f 08       	sbc	r9, r15
    1c7c:	29 80       	ldd	r2, Y+1	; 0x01
    1c7e:	3a 80       	ldd	r3, Y+2	; 0x02
    1c80:	37 fe       	sbrs	r3, 7
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <draw_pattern_line(int, int, int, int, char)+0x82>
    1c84:	31 94       	neg	r3
    1c86:	21 94       	neg	r2
    1c88:	31 08       	sbc	r3, r1
    1c8a:	b7 01       	movw	r22, r14
    1c8c:	0f 2c       	mov	r0, r15
    1c8e:	00 0c       	add	r0, r0
    1c90:	88 0b       	sbc	r24, r24
    1c92:	99 0b       	sbc	r25, r25
    1c94:	0e 94 49 2b 	call	0x5692	; 0x5692 <__floatsisf>
    1c98:	2b 01       	movw	r4, r22
    1c9a:	3c 01       	movw	r6, r24
    1c9c:	a9 81       	ldd	r26, Y+1	; 0x01
    1c9e:	ba 81       	ldd	r27, Y+2	; 0x02
    1ca0:	bd 01       	movw	r22, r26
    1ca2:	bb 0f       	add	r27, r27
    1ca4:	88 0b       	sbc	r24, r24
    1ca6:	99 0b       	sbc	r25, r25
    1ca8:	0e 94 49 2b 	call	0x5692	; 0x5692 <__floatsisf>
    1cac:	28 14       	cp	r2, r8
    1cae:	39 04       	cpc	r3, r9
    1cb0:	0c f0       	brlt	.+2      	; 0x1cb4 <draw_pattern_line(int, int, int, int, char)+0xac>
    1cb2:	83 c0       	rjmp	.+262    	; 0x1dba <draw_pattern_line(int, int, int, int, char)+0x1b2>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:74
    dy = (float)Dy / (float)Dx;
    1cb4:	a3 01       	movw	r20, r6
    1cb6:	92 01       	movw	r18, r4
    1cb8:	0e 94 9f 2a 	call	0x553e	; 0x553e <__divsf3>
    1cbc:	69 83       	std	Y+1, r22	; 0x01
    1cbe:	7a 83       	std	Y+2, r23	; 0x02
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	9c 83       	std	Y+4, r25	; 0x04
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:75
    i_max = abs(Dx);
    1cc4:	14 01       	movw	r2, r8
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:77

    if(Dx < 0) {
    1cc6:	f7 fe       	sbrs	r15, 7
    1cc8:	91 c0       	rjmp	.+290    	; 0x1dec <draw_pattern_line(int, int, int, int, char)+0x1e4>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:79
      dx = -1;
      dy = -dy;
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	b0 58       	subi	r27, 0x80	; 128
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	ab 83       	std	Y+3, r26	; 0x03
    1cd6:	bc 83       	std	Y+4, r27	; 0x04
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:78
  if(abs(Dx) > abs(Dy)) {
    dy = (float)Dy / (float)Dx;
    i_max = abs(Dx);

    if(Dx < 0) {
      dx = -1;
    1cd8:	41 2c       	mov	r4, r1
    1cda:	51 2c       	mov	r5, r1
    1cdc:	90 e8       	ldi	r25, 0x80	; 128
    1cde:	69 2e       	mov	r6, r25
    1ce0:	9f eb       	ldi	r25, 0xBF	; 191
    1ce2:	79 2e       	mov	r7, r25
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:91
      dx = -dx;
      dy = -1;
    }
  }

  for(uint16_t i = 0; i < i_max; i++) {
    1ce4:	1a 8a       	std	Y+18, r1	; 0x12
    1ce6:	19 8a       	std	Y+17, r1	; 0x11
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:92
    if(pattern & (0x1 << i % 8)) {
    1ce8:	00 2e       	mov	r0, r16
    1cea:	00 0c       	add	r0, r0
    1cec:	11 0b       	sbc	r17, r17
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:93
      display.Draw_Pixel(x1 + i * dx, y1 + i * dy);
    1cee:	c5 01       	movw	r24, r10
    1cf0:	bb 0c       	add	r11, r11
    1cf2:	aa 0b       	sbc	r26, r26
    1cf4:	bb 0b       	sbc	r27, r27
    1cf6:	89 87       	std	Y+9, r24	; 0x09
    1cf8:	9a 87       	std	Y+10, r25	; 0x0a
    1cfa:	ab 87       	std	Y+11, r26	; 0x0b
    1cfc:	bc 87       	std	Y+12, r27	; 0x0c
    1cfe:	c6 01       	movw	r24, r12
    1d00:	dd 0c       	add	r13, r13
    1d02:	aa 0b       	sbc	r26, r26
    1d04:	bb 0b       	sbc	r27, r27
    1d06:	8d 87       	std	Y+13, r24	; 0x0d
    1d08:	9e 87       	std	Y+14, r25	; 0x0e
    1d0a:	af 87       	std	Y+15, r26	; 0x0f
    1d0c:	b8 8b       	std	Y+16, r27	; 0x10
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:91 (discriminator 1)
      dx = -dx;
      dy = -1;
    }
  }

  for(uint16_t i = 0; i < i_max; i++) {
    1d0e:	a9 89       	ldd	r26, Y+17	; 0x11
    1d10:	ba 89       	ldd	r27, Y+18	; 0x12
    1d12:	2a 16       	cp	r2, r26
    1d14:	3b 06       	cpc	r3, r27
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <draw_pattern_line(int, int, int, int, char)+0x112>
    1d18:	75 c0       	rjmp	.+234    	; 0x1e04 <draw_pattern_line(int, int, int, int, char)+0x1fc>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:92
    if(pattern & (0x1 << i % 8)) {
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	87 70       	andi	r24, 0x07	; 7
    1d1e:	99 27       	eor	r25, r25
    1d20:	98 01       	movw	r18, r16
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <draw_pattern_line(int, int, int, int, char)+0x120>
    1d24:	35 95       	asr	r19
    1d26:	27 95       	ror	r18
    1d28:	8a 95       	dec	r24
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <draw_pattern_line(int, int, int, int, char)+0x11c>
    1d2c:	20 ff       	sbrs	r18, 0
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <draw_pattern_line(int, int, int, int, char)+0x1a6>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:93
      display.Draw_Pixel(x1 + i * dx, y1 + i * dy);
    1d30:	bd 01       	movw	r22, r26
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    1d3a:	6b 01       	movw	r12, r22
    1d3c:	7c 01       	movw	r14, r24
    1d3e:	69 85       	ldd	r22, Y+9	; 0x09
    1d40:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d42:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d44:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d46:	0e 94 49 2b 	call	0x5692	; 0x5692 <__floatsisf>
    1d4a:	4b 01       	movw	r8, r22
    1d4c:	5c 01       	movw	r10, r24
    1d4e:	29 81       	ldd	r18, Y+1	; 0x01
    1d50:	3a 81       	ldd	r19, Y+2	; 0x02
    1d52:	4b 81       	ldd	r20, Y+3	; 0x03
    1d54:	5c 81       	ldd	r21, Y+4	; 0x04
    1d56:	c7 01       	movw	r24, r14
    1d58:	b6 01       	movw	r22, r12
    1d5a:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <__mulsf3>
    1d5e:	9b 01       	movw	r18, r22
    1d60:	ac 01       	movw	r20, r24
    1d62:	c5 01       	movw	r24, r10
    1d64:	b4 01       	movw	r22, r8
    1d66:	0e 94 2e 2a 	call	0x545c	; 0x545c <__addsf3>
    1d6a:	0e 94 11 2b 	call	0x5622	; 0x5622 <__fixsfsi>
    1d6e:	6d 83       	std	Y+5, r22	; 0x05
    1d70:	7e 83       	std	Y+6, r23	; 0x06
    1d72:	8f 83       	std	Y+7, r24	; 0x07
    1d74:	98 87       	std	Y+8, r25	; 0x08
    1d76:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d78:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7c:	98 89       	ldd	r25, Y+16	; 0x10
    1d7e:	0e 94 49 2b 	call	0x5692	; 0x5692 <__floatsisf>
    1d82:	4b 01       	movw	r8, r22
    1d84:	5c 01       	movw	r10, r24
    1d86:	a3 01       	movw	r20, r6
    1d88:	92 01       	movw	r18, r4
    1d8a:	c7 01       	movw	r24, r14
    1d8c:	b6 01       	movw	r22, r12
    1d8e:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <__mulsf3>
    1d92:	9b 01       	movw	r18, r22
    1d94:	ac 01       	movw	r20, r24
    1d96:	c5 01       	movw	r24, r10
    1d98:	b4 01       	movw	r22, r8
    1d9a:	0e 94 2e 2a 	call	0x545c	; 0x545c <__addsf3>
    1d9e:	0e 94 11 2b 	call	0x5622	; 0x5622 <__fixsfsi>
    1da2:	4d 81       	ldd	r20, Y+5	; 0x05
    1da4:	5e 81       	ldd	r21, Y+6	; 0x06
    1da6:	8c e3       	ldi	r24, 0x3C	; 60
    1da8:	92 e0       	ldi	r25, 0x02	; 2
    1daa:	0e 94 15 13 	call	0x262a	; 0x262a <LCDWIKI_GUI::Draw_Pixel(int, int)>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:91 (discriminator 2)
      dx = -dx;
      dy = -1;
    }
  }

  for(uint16_t i = 0; i < i_max; i++) {
    1dae:	89 89       	ldd	r24, Y+17	; 0x11
    1db0:	9a 89       	ldd	r25, Y+18	; 0x12
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	9a 8b       	std	Y+18, r25	; 0x12
    1db6:	89 8b       	std	Y+17, r24	; 0x11
    1db8:	aa cf       	rjmp	.-172    	; 0x1d0e <draw_pattern_line(int, int, int, int, char)+0x106>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:82
    if(Dx < 0) {
      dx = -1;
      dy = -dy;
    }
  } else {
    dx = (float)Dx / (float)Dy;
    1dba:	9b 01       	movw	r18, r22
    1dbc:	ac 01       	movw	r20, r24
    1dbe:	c3 01       	movw	r24, r6
    1dc0:	b2 01       	movw	r22, r4
    1dc2:	0e 94 9f 2a 	call	0x553e	; 0x553e <__divsf3>
    1dc6:	2b 01       	movw	r4, r22
    1dc8:	3c 01       	movw	r6, r24
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:85
    i_max = abs(Dy);

    if(Dy < 0) {
    1dca:	a9 81       	ldd	r26, Y+1	; 0x01
    1dcc:	ba 81       	ldd	r27, Y+2	; 0x02
    1dce:	b7 ff       	sbrs	r27, 7
    1dd0:	14 c0       	rjmp	.+40     	; 0x1dfa <draw_pattern_line(int, int, int, int, char)+0x1f2>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:86
      dx = -dx;
    1dd2:	77 fa       	bst	r7, 7
    1dd4:	70 94       	com	r7
    1dd6:	77 f8       	bld	r7, 7
    1dd8:	70 94       	com	r7
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:87
      dy = -1;
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 e8       	ldi	r26, 0x80	; 128
    1de0:	bf eb       	ldi	r27, 0xBF	; 191
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:69

  int16_t Dx = x2 - x1;
  int16_t Dy = y2 - y1;

  float dx = 1;
  float dy = 1;
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	ab 83       	std	Y+3, r26	; 0x03
    1de8:	bc 83       	std	Y+4, r27	; 0x04
    1dea:	7c cf       	rjmp	.-264    	; 0x1ce4 <draw_pattern_line(int, int, int, int, char)+0xdc>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:68
  }

  int16_t Dx = x2 - x1;
  int16_t Dy = y2 - y1;

  float dx = 1;
    1dec:	41 2c       	mov	r4, r1
    1dee:	51 2c       	mov	r5, r1
    1df0:	80 e8       	ldi	r24, 0x80	; 128
    1df2:	68 2e       	mov	r6, r24
    1df4:	8f e3       	ldi	r24, 0x3F	; 63
    1df6:	78 2e       	mov	r7, r24
    1df8:	75 cf       	rjmp	.-278    	; 0x1ce4 <draw_pattern_line(int, int, int, int, char)+0xdc>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:69
  float dy = 1;
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 e8       	ldi	r26, 0x80	; 128
    1e00:	bf e3       	ldi	r27, 0x3F	; 63
    1e02:	ef cf       	rjmp	.-34     	; 0x1de2 <draw_pattern_line(int, int, int, int, char)+0x1da>
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:96
  for(uint16_t i = 0; i < i_max; i++) {
    if(pattern & (0x1 << i % 8)) {
      display.Draw_Pixel(x1 + i * dx, y1 + i * dy);
    }
  }
}
    1e04:	62 96       	adiw	r28, 0x12	; 18
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	bf 90       	pop	r11
    1e22:	af 90       	pop	r10
    1e24:	9f 90       	pop	r9
    1e26:	8f 90       	pop	r8
    1e28:	7f 90       	pop	r7
    1e2a:	6f 90       	pop	r6
    1e2c:	5f 90       	pop	r5
    1e2e:	4f 90       	pop	r4
    1e30:	3f 90       	pop	r3
    1e32:	2f 90       	pop	r2
    1e34:	08 95       	ret

00001e36 <_GLOBAL__sub_I_display>:
_GLOBAL__sub_I_display():
    1e36:	ef 92       	push	r14
    1e38:	0f 93       	push	r16
__static_initialization_and_destruction_0():
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:6
#include <LCDWIKI_GUI.h> //Core graphics library
#include <LCDWIKI_SPI.h> //Hardware-specific library
#include <SPI.h>
#include "graphics.h"

LCDWIKI_SPI display(MODEL,CS,CD,RST,LED);
    1e3a:	ee 24       	eor	r14, r14
    1e3c:	ea 94       	dec	r14
    1e3e:	08 e0       	ldi	r16, 0x08	; 8
    1e40:	29 e0       	ldi	r18, 0x09	; 9
    1e42:	47 e0       	ldi	r20, 0x07	; 7
    1e44:	6c e0       	ldi	r22, 0x0C	; 12
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	8c e3       	ldi	r24, 0x3C	; 60
    1e4a:	92 e0       	ldi	r25, 0x02	; 2
    1e4c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCDWIKI_SPI::LCDWIKI_SPI(unsigned int, signed char, signed char, signed char, signed char)>
_GLOBAL__sub_I_display():
/home/noah/Documents/basteln/ofen_v2/main/graphics.cpp:96
  for(uint16_t i = 0; i < i_max; i++) {
    if(pattern & (0x1 << i % 8)) {
      display.Draw_Pixel(x1 + i * dx, y1 + i * dy);
    }
  }
}
    1e50:	0f 91       	pop	r16
    1e52:	ef 90       	pop	r14
    1e54:	08 95       	ret

00001e56 <map_key(unsigned int)>:
_Z7map_keyj():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:45

uint8_t char_to_int(char character) {
  if(character < 48) {return 10;}
  if(character > 57) {return 10;}
  return character & 0x0F;
}
    1e56:	e6 e0       	ldi	r30, 0x06	; 6
    1e58:	f1 e0       	ldi	r31, 0x01	; 1
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	40 81       	ld	r20, Z
    1e60:	51 81       	ldd	r21, Z+1	; 0x01
    1e62:	48 23       	and	r20, r24
    1e64:	59 23       	and	r21, r25
    1e66:	45 2b       	or	r20, r21
    1e68:	49 f0       	breq	.+18     	; 0x1e7c <map_key(unsigned int)+0x26>
    1e6a:	f9 01       	movw	r30, r18
    1e6c:	ee 0f       	add	r30, r30
    1e6e:	ff 1f       	adc	r31, r31
    1e70:	e2 0f       	add	r30, r18
    1e72:	f3 1f       	adc	r31, r19
    1e74:	ea 5f       	subi	r30, 0xFA	; 250
    1e76:	fe 4f       	sbci	r31, 0xFE	; 254
    1e78:	82 81       	ldd	r24, Z+2	; 0x02
    1e7a:	08 95       	ret
    1e7c:	2f 5f       	subi	r18, 0xFF	; 255
    1e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e80:	33 96       	adiw	r30, 0x03	; 3
    1e82:	20 31       	cpi	r18, 0x10	; 16
    1e84:	31 05       	cpc	r19, r1
    1e86:	59 f7       	brne	.-42     	; 0x1e5e <map_key(unsigned int)+0x8>
    1e88:	08 95       	ret

00001e8a <get_keypad_state()>:
_Z16get_keypad_statev():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:48

uint8_t get_keypad_state() {
  uint8_t shift_reg = read_shift_reg();
    1e8a:	0e 94 10 10 	call	0x2020	; 0x2020 <read_shift_reg()>
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:50
  return shift_reg & 0b00001111;
}
    1e8e:	8f 70       	andi	r24, 0x0F	; 15
    1e90:	08 95       	ret

00001e92 <select_keypad_column(unsigned char)>:
_Z20select_keypad_columnh():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:52

void select_keypad_column(uint8_t column) {
    1e92:	cf 93       	push	r28
    1e94:	c8 2f       	mov	r28, r24
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:53
  write(DEMUX_A0_PIN, column & 0x01);
    1e96:	68 2f       	mov	r22, r24
    1e98:	61 70       	andi	r22, 0x01	; 1
    1e9a:	84 e2       	ldi	r24, 0x24	; 36
    1e9c:	0e 94 62 05 	call	0xac4	; 0xac4 <write(unsigned char, char)>
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:54
  write(DEMUX_A1_PIN, (column >> 1) & 0x01);
    1ea0:	c1 fb       	bst	r28, 1
    1ea2:	66 27       	eor	r22, r22
    1ea4:	60 f9       	bld	r22, 0
    1ea6:	83 e2       	ldi	r24, 0x23	; 35
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:55
}
    1ea8:	cf 91       	pop	r28
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:54
  return shift_reg & 0b00001111;
}

void select_keypad_column(uint8_t column) {
  write(DEMUX_A0_PIN, column & 0x01);
  write(DEMUX_A1_PIN, (column >> 1) & 0x01);
    1eaa:	0c 94 62 05 	jmp	0xac4	; 0xac4 <write(unsigned char, char)>

00001eae <add_event_listener(void* (*)(unsigned int))>:
_Z18add_event_listenerPFPvjE():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:58
}

void add_event_listener(event_listener *new_event_listener) {
  add_last(event_listener_list, (void *)new_event_listener);
    1eae:	bc 01       	movw	r22, r24
    1eb0:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <event_listener_list>
    1eb4:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <event_listener_list+0x1>
    1eb8:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <add_last(list*, void*)>

00001ebc <read_keypad()>:
_Z11read_keypadv():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:61
}

void read_keypad() {
    1ebc:	ef 92       	push	r14
    1ebe:	ff 92       	push	r15
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	f1 2c       	mov	r15, r1
    1eca:	e1 2c       	mov	r14, r1
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:64
  uint16_t keys = 0;

  for(uint8_t column = 0; column < 4; column++) {
    1ecc:	c0 e0       	ldi	r28, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:62
void add_event_listener(event_listener *new_event_listener) {
  add_last(event_listener_list, (void *)new_event_listener);
}

void read_keypad() {
  uint16_t keys = 0;
    1ece:	10 e0       	ldi	r17, 0x00	; 0
    1ed0:	00 e0       	ldi	r16, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:65 (discriminator 2)

  for(uint8_t column = 0; column < 4; column++) {
    select_keypad_column(column);
    1ed2:	8c 2f       	mov	r24, r28
    1ed4:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <select_keypad_column(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:66 (discriminator 2)
    uint16_t keypad_state = get_keypad_state();
    1ed8:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <get_keypad_state()>
    1edc:	90 e0       	ldi	r25, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:67 (discriminator 2)
    keys |= keypad_state << (4 * column);
    1ede:	0e 2c       	mov	r0, r14
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <read_keypad()+0x2a>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	0a 94       	dec	r0
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <read_keypad()+0x26>
    1eea:	08 2b       	or	r16, r24
    1eec:	19 2b       	or	r17, r25
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:64 (discriminator 2)
}

void read_keypad() {
  uint16_t keys = 0;

  for(uint8_t column = 0; column < 4; column++) {
    1eee:	cf 5f       	subi	r28, 0xFF	; 255
    1ef0:	84 e0       	ldi	r24, 0x04	; 4
    1ef2:	e8 0e       	add	r14, r24
    1ef4:	f1 1c       	adc	r15, r1
    1ef6:	c4 30       	cpi	r28, 0x04	; 4
    1ef8:	61 f7       	brne	.-40     	; 0x1ed2 <read_keypad()+0x16>
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:70
    select_keypad_column(column);
    uint16_t keypad_state = get_keypad_state();
    keys |= keypad_state << (4 * column);
  }

  uint16_t pressed_keys  = ~old_keys & keys; // all the keys that were not pressed on the last call but that are pressed now
    1efa:	c0 91 8a 02 	lds	r28, 0x028A	; 0x80028a <old_keys>
    1efe:	d0 91 8b 02 	lds	r29, 0x028B	; 0x80028b <old_keys+0x1>
    1f02:	c0 95       	com	r28
    1f04:	d0 95       	com	r29
    1f06:	c0 23       	and	r28, r16
    1f08:	d1 23       	and	r29, r17
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:76
  // released_keys =  keys & ~new_keys; // all the keys that were pressed on the last call but that are not pressed now
  // uint16_t clicked_keys =  // all the keys that were pressed only for a short amount auf time
  // uint16_t held_keys // all the keys that are currently pressed
  // uint16_t double_clicked_keys // all the keys that were pressed twice for a short time

  old_keys = keys;
    1f0a:	10 93 8b 02 	sts	0x028B, r17	; 0x80028b <old_keys+0x1>
    1f0e:	00 93 8a 02 	sts	0x028A, r16	; 0x80028a <old_keys>
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:78

  if(pressed_keys == 0) {return;}
    1f12:	20 97       	sbiw	r28, 0x00	; 0
    1f14:	99 f0       	breq	.+38     	; 0x1f3c <read_keypad()+0x80>
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:80

  struct list *current_event_listener = event_listener_list;
    1f16:	00 91 8c 02 	lds	r16, 0x028C	; 0x80028c <event_listener_list>
    1f1a:	10 91 8d 02 	lds	r17, 0x028D	; 0x80028d <event_listener_list+0x1>
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:81
  while(current_event_listener->next){
    1f1e:	d8 01       	movw	r26, r16
    1f20:	12 96       	adiw	r26, 0x02	; 2
    1f22:	8d 91       	ld	r24, X+
    1f24:	9c 91       	ld	r25, X
    1f26:	13 97       	sbiw	r26, 0x03	; 3
    1f28:	89 2b       	or	r24, r25
    1f2a:	41 f0       	breq	.+16     	; 0x1f3c <read_keypad()+0x80>
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:82
    (**((event_listener*)current_event_listener->data))(pressed_keys);
    1f2c:	ed 91       	ld	r30, X+
    1f2e:	fc 91       	ld	r31, X
    1f30:	ce 01       	movw	r24, r28
    1f32:	09 95       	icall
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:83
    current_event_listener = current_event_listener->next;
    1f34:	f8 01       	movw	r30, r16
    1f36:	02 81       	ldd	r16, Z+2	; 0x02
    1f38:	13 81       	ldd	r17, Z+3	; 0x03
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:81
  old_keys = keys;

  if(pressed_keys == 0) {return;}

  struct list *current_event_listener = event_listener_list;
  while(current_event_listener->next){
    1f3a:	f1 cf       	rjmp	.-30     	; 0x1f1e <read_keypad()+0x62>
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:87
    (**((event_listener*)current_event_listener->data))(pressed_keys);
    current_event_listener = current_event_listener->next;
  }

  // time_of_last_read = millis();
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	08 95       	ret

00001f4a <_GLOBAL__sub_I_event_listener_list>:
_GLOBAL__sub_I_event_listener_list():
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:8
#include "avrio.h"
#include "pins.h"
#include <stdlib.h>
#include <Arduino.h>

struct list *event_listener_list = new_list(); // this list contains all the callback functions which shall be called on a keystroke
    1f4a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <new_list()>
    1f4e:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <event_listener_list+0x1>
    1f52:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <event_listener_list>
/home/noah/Documents/basteln/ofen_v2/main/keypad.cpp:87
    (**((event_listener*)current_event_listener->data))(pressed_keys);
    current_event_listener = current_event_listener->next;
  }

  // time_of_last_read = millis();
    1f56:	08 95       	ret

00001f58 <new_list()>:
_Z8new_listv():
/home/noah/Documents/basteln/ofen_v2/main/list.cpp:5
#include "list.h"


struct list *new_list() {
  struct list *new_list = new struct list;
    1f58:	84 e0       	ldi	r24, 0x04	; 4
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 c3 28 	call	0x5186	; 0x5186 <operator new(unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/list.cpp:6
  new_list->data = 0;
    1f60:	fc 01       	movw	r30, r24
    1f62:	11 82       	std	Z+1, r1	; 0x01
    1f64:	10 82       	st	Z, r1
/home/noah/Documents/basteln/ofen_v2/main/list.cpp:7
  new_list->next = 0;
    1f66:	13 82       	std	Z+3, r1	; 0x03
    1f68:	12 82       	std	Z+2, r1	; 0x02
/home/noah/Documents/basteln/ofen_v2/main/list.cpp:9
  return new_list;
}
    1f6a:	08 95       	ret

00001f6c <add_last(list*, void*)>:
_Z8add_lastP4listPv():
/home/noah/Documents/basteln/ofen_v2/main/list.cpp:11

void add_last(struct list *list, void *data) {
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	ec 01       	movw	r28, r24
/home/noah/Documents/basteln/ofen_v2/main/list.cpp:13
  struct list *last_element = list;
  while(last_element->next) {
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	9b 81       	ldd	r25, Y+3	; 0x03
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	d9 f7       	brne	.-10     	; 0x1f70 <add_last(list*, void*)+0x4>
/home/noah/Documents/basteln/ofen_v2/main/list.cpp:16
    last_element = last_element->next;
  }
  last_element->data = data;
    1f7a:	79 83       	std	Y+1, r23	; 0x01
    1f7c:	68 83       	st	Y, r22
/home/noah/Documents/basteln/ofen_v2/main/list.cpp:17
  last_element->next = new_list();
    1f7e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <new_list()>
    1f82:	9b 83       	std	Y+3, r25	; 0x03
    1f84:	8a 83       	std	Y+2, r24	; 0x02
/home/noah/Documents/basteln/ofen_v2/main/list.cpp:18
}
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	08 95       	ret

00001f8c <key_event_listener(unsigned int)>:
_Z18key_event_listenerj():
/home/noah/Documents/basteln/ofen_v2/main/main.ino:12
#include "adc.h"
#include "list.h"
#include "keypad.h"

void key_event_listener(uint16_t keys) {
  Serial.println(map_key(keys));
    1f8c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <map_key(unsigned int)>
    1f90:	68 2f       	mov	r22, r24
    1f92:	82 e9       	ldi	r24, 0x92	; 146
    1f94:	96 e0       	ldi	r25, 0x06	; 6
    1f96:	0c 94 16 28 	jmp	0x502c	; 0x502c <Print::println(char)>

00001f9a <setup>:
setup():
/home/noah/Documents/basteln/ofen_v2/main/main.ino:16
}

void setup() {
  pin_config();
    1f9a:	0e 94 09 10 	call	0x2012	; 0x2012 <pin_config()>
_ZN14HardwareSerial5beginEm():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1f9e:	26 e0       	ldi	r18, 0x06	; 6
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	52 ec       	ldi	r21, 0xC2	; 194
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	82 e9       	ldi	r24, 0x92	; 146
    1faa:	96 e0       	ldi	r25, 0x06	; 6
    1fac:	0e 94 d7 26 	call	0x4dae	; 0x4dae <HardwareSerial::begin(unsigned long, unsigned char)>
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:182

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    1fb0:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <SPIClass::interruptMode>
    1fb4:	88 23       	and	r24, r24
    1fb6:	81 f0       	breq	.+32     	; 0x1fd8 <setup+0x3e>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:183
      uint8_t sreg = SREG;
    1fb8:	9f b7       	in	r25, 0x3f	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:184
      noInterrupts();
    1fba:	f8 94       	cli
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:187

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1fbc:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <SPIClass::interruptMode>
    1fc0:	81 30       	cpi	r24, 0x01	; 1
    1fc2:	e1 f4       	brne	.+56     	; 0x1ffc <setup+0x62>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:188
        interruptSave = SPI_AVR_EIMSK;
    1fc4:	8d b3       	in	r24, 0x1d	; 29
    1fc6:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <SPIClass::interruptSave>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:189
        SPI_AVR_EIMSK &= ~interruptMask;
    1fca:	2d b3       	in	r18, 0x1d	; 29
    1fcc:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <SPIClass::interruptMask>
    1fd0:	80 95       	com	r24
    1fd2:	82 23       	and	r24, r18
    1fd4:	8d bb       	out	0x1d, r24	; 29
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:190
        SREG = sreg;
    1fd6:	9f bf       	out	0x3f, r25	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:206
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1fd8:	80 e5       	ldi	r24, 0x50	; 80
    1fda:	8c bd       	out	0x2c, r24	; 44
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:207
    SPSR = settings.spsr;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	8d bd       	out	0x2d, r24	; 45
setup():
/home/noah/Documents/basteln/ofen_v2/main/main.ino:21

  Serial.begin(115200);
  SPI.beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0));

  adc_config();
    1fe0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <adc_config()>
/home/noah/Documents/basteln/ofen_v2/main/main.ino:23

  Serial.println("Hello!");
    1fe4:	68 ef       	ldi	r22, 0xF8	; 248
    1fe6:	71 e0       	ldi	r23, 0x01	; 1
    1fe8:	82 e9       	ldi	r24, 0x92	; 146
    1fea:	96 e0       	ldi	r25, 0x06	; 6
    1fec:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <Print::println(char const*)>
/home/noah/Documents/basteln/ofen_v2/main/main.ino:25

  add_event_listener((void* (*)(uint16_t))&key_event_listener);
    1ff0:	86 ec       	ldi	r24, 0xC6	; 198
    1ff2:	9f e0       	ldi	r25, 0x0F	; 15
    1ff4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <add_event_listener(void* (*)(unsigned int))>
/home/noah/Documents/basteln/ofen_v2/main/main.ino:33
  // TCCR1A =0x00;
	// TCCR1B |= (1<<CS01);		
	// TIMSK1 |= (1<<TOIE1);		// enable timer overflow interrupt
	// sei();

  draw_interface();
    1ff8:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <draw_interface()>
_ZN8SPIClass16beginTransactionE11SPISettings():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:194
        SPI_AVR_EIMSK &= ~interruptMask;
        SREG = sreg;
      } else
      #endif
      {
        interruptSave = sreg;
    1ffc:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <SPIClass::interruptSave>
    2000:	eb cf       	rjmp	.-42     	; 0x1fd8 <setup+0x3e>

00002002 <loop>:
loop():
/home/noah/Documents/basteln/ofen_v2/main/main.ino:40




void loop() {
  read_keypad();
    2002:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <read_keypad()>
/home/noah/Documents/basteln/ofen_v2/main/main.ino:41
  delay(10);
    2006:	6a e0       	ldi	r22, 0x0A	; 10
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0c 94 38 29 	jmp	0x5270	; 0x5270 <delay>

00002012 <pin_config()>:
_Z10pin_configv():
/home/noah/Documents/basteln/ofen_v2/main/pins.cpp:6
#include "pins.h"
#include "avrio.h"
#include "avr/io.h"

void pin_config() {
  DDRB = 0b11101111;
    2012:	8f ee       	ldi	r24, 0xEF	; 239
    2014:	84 b9       	out	0x04, r24	; 4
/home/noah/Documents/basteln/ofen_v2/main/pins.cpp:9
  // Shift CP (OUT), Shift PL (OUT), SCK (OUT), MISO (IN), MOSI (OUT), SD CS (OUT), LCD D/C (OUT), LCD RST (OUT)

  DDRC = 0b00111111;
    2016:	8f e3       	ldi	r24, 0x3F	; 63
    2018:	87 b9       	out	0x07, r24	; 7
/home/noah/Documents/basteln/ofen_v2/main/pins.cpp:12
  // RST (IN), HEATER (OUT), MUX A (OUT), MUX B (OUT), MUX C (OUT), ADC CS (OUT), Touch CS (OUT)

  DDRD = 0b11100010;
    201a:	82 ee       	ldi	r24, 0xE2	; 226
    201c:	8a b9       	out	0x0a, r24	; 10
/home/noah/Documents/basteln/ofen_v2/main/pins.cpp:14
  // LCD CS (OUT), DEMUX A0 (OUT), DEMUX A1 (OUT), Shift Q7 (IN), ADC IRQ (Interrupt IN), Touch IRQ (Interrupt IN), TXD (OUT), RXD (IN)
    201e:	08 95       	ret

00002020 <read_shift_reg()>:
_Z14read_shift_regv():
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:6
#include "shift_reg.h"
#include "avrio.h"
#include "pins.h"
#include <Arduino.h>

uint8_t read_shift_reg() {
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:8
  char shift_reg = 0;
  write(SHIFT_LOAD_PIN, 0);
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	80 e1       	ldi	r24, 0x10	; 16
    202a:	0e 94 62 05 	call	0xac4	; 0xac4 <write(unsigned char, char)>
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:9
  pulse(SHIFT_CLK_PIN);
    202e:	81 e1       	ldi	r24, 0x11	; 17
    2030:	0e 94 9a 05 	call	0xb34	; 0xb34 <pulse(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:10
  write(SHIFT_LOAD_PIN, 1);
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	80 e1       	ldi	r24, 0x10	; 16
    2038:	0e 94 62 05 	call	0xac4	; 0xac4 <write(unsigned char, char)>
    203c:	d0 e0       	ldi	r29, 0x00	; 0
    203e:	c0 e0       	ldi	r28, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:7
#include "avrio.h"
#include "pins.h"
#include <Arduino.h>

uint8_t read_shift_reg() {
  char shift_reg = 0;
    2040:	10 e0       	ldi	r17, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:12 (discriminator 2)
  write(SHIFT_LOAD_PIN, 0);
  pulse(SHIFT_CLK_PIN);
  write(SHIFT_LOAD_PIN, 1);
  for(uint8_t i = 0; i < 8; i++) {
    pulse(SHIFT_CLK_PIN);  
    2042:	81 e1       	ldi	r24, 0x11	; 17
    2044:	0e 94 9a 05 	call	0xb34	; 0xb34 <pulse(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:13 (discriminator 2)
    shift_reg |= read(SHIFT_Q_PIN) << i;
    2048:	82 e2       	ldi	r24, 0x22	; 34
    204a:	0e 94 a2 05 	call	0xb44	; 0xb44 <read(unsigned char)>
    204e:	08 2e       	mov	r0, r24
    2050:	00 0c       	add	r0, r0
    2052:	99 0b       	sbc	r25, r25
    2054:	0c 2e       	mov	r0, r28
    2056:	01 c0       	rjmp	.+2      	; 0x205a <read_shift_reg()+0x3a>
    2058:	88 0f       	add	r24, r24
    205a:	0a 94       	dec	r0
    205c:	ea f7       	brpl	.-6      	; 0x2058 <read_shift_reg()+0x38>
    205e:	18 2b       	or	r17, r24
    2060:	21 96       	adiw	r28, 0x01	; 1
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:11 (discriminator 2)
uint8_t read_shift_reg() {
  char shift_reg = 0;
  write(SHIFT_LOAD_PIN, 0);
  pulse(SHIFT_CLK_PIN);
  write(SHIFT_LOAD_PIN, 1);
  for(uint8_t i = 0; i < 8; i++) {
    2062:	c8 30       	cpi	r28, 0x08	; 8
    2064:	d1 05       	cpc	r29, r1
    2066:	69 f7       	brne	.-38     	; 0x2042 <read_shift_reg()+0x22>
/home/noah/Documents/basteln/ofen_v2/main/shift_reg.cpp:17
    pulse(SHIFT_CLK_PIN);  
    shift_reg |= read(SHIFT_Q_PIN) << i;
  }

  return shift_reg;
}
    2068:	81 2f       	mov	r24, r17
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	08 95       	ret

00002072 <draw_table(table)>:
_Z10draw_table5table():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:3
#include "table.h"

void draw_table(table table) {  
    2072:	2f 92       	push	r2
    2074:	3f 92       	push	r3
    2076:	4f 92       	push	r4
    2078:	5f 92       	push	r5
    207a:	6f 92       	push	r6
    207c:	7f 92       	push	r7
    207e:	8f 92       	push	r8
    2080:	9f 92       	push	r9
    2082:	af 92       	push	r10
    2084:	bf 92       	push	r11
    2086:	cf 92       	push	r12
    2088:	df 92       	push	r13
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	68 97       	sbiw	r28, 0x18	; 24
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	c9 82       	std	Y+1, r12	; 0x01
    20a8:	da 82       	std	Y+2, r13	; 0x02
    20aa:	eb 82       	std	Y+3, r14	; 0x03
    20ac:	fc 82       	std	Y+4, r15	; 0x04
    20ae:	0d 83       	std	Y+5, r16	; 0x05
    20b0:	1e 83       	std	Y+6, r17	; 0x06
    20b2:	2f 83       	std	Y+7, r18	; 0x07
    20b4:	38 87       	std	Y+8, r19	; 0x08
    20b6:	49 87       	std	Y+9, r20	; 0x09
    20b8:	5a 87       	std	Y+10, r21	; 0x0a
    20ba:	6b 87       	std	Y+11, r22	; 0x0b
    20bc:	7c 87       	std	Y+12, r23	; 0x0c
    20be:	8d 87       	std	Y+13, r24	; 0x0d
    20c0:	9e 87       	std	Y+14, r25	; 0x0e
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	98 8b       	std	Y+16, r25	; 0x10
    20c8:	8f 87       	std	Y+15, r24	; 0x0f
    20ca:	eb 81       	ldd	r30, Y+3	; 0x03
    20cc:	fc 81       	ldd	r31, Y+4	; 0x04
    20ce:	fa 8b       	std	Y+18, r31	; 0x12
    20d0:	e9 8b       	std	Y+17, r30	; 0x11
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	9c 8b       	std	Y+20, r25	; 0x14
    20d8:	8b 8b       	std	Y+19, r24	; 0x13
    20da:	ef 81       	ldd	r30, Y+7	; 0x07
    20dc:	f8 85       	ldd	r31, Y+8	; 0x08
    20de:	fe 8b       	std	Y+22, r31	; 0x16
    20e0:	ed 8b       	std	Y+21, r30	; 0x15
    20e2:	6f 8b       	std	Y+23, r22	; 0x17
    20e4:	78 8f       	std	Y+24, r23	; 0x18
    20e6:	0d 85       	ldd	r16, Y+13	; 0x0d
    20e8:	1e 85       	ldd	r17, Y+14	; 0x0e
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:4
  for(uint16_t i = 0; i < table.columns; i++) {
    20ea:	31 2c       	mov	r3, r1
    20ec:	21 2c       	mov	r2, r1
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:14

    if((table.vlines)[i] <= 1) {
      (table.vlines)[i] = (table.vlines)[i] * table.width;
    }

    display.Draw_Fast_VLine(table.pos.x + (table.vlines)[i], table.pos.y, table.height);
    20ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    20f0:	f8 89       	ldd	r31, Y+16	; 0x10
    20f2:	4f 01       	movw	r8, r30
    20f4:	b1 2c       	mov	r11, r1
    20f6:	a1 2c       	mov	r10, r1
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:11
      (table.vlines)[i] = 0;
      continue;      
    }

    if((table.vlines)[i] <= 1) {
      (table.vlines)[i] = (table.vlines)[i] * table.width;
    20f8:	8b 89       	ldd	r24, Y+19	; 0x13
    20fa:	9c 89       	ldd	r25, Y+20	; 0x14
    20fc:	2c 01       	movw	r4, r24
    20fe:	71 2c       	mov	r7, r1
    2100:	61 2c       	mov	r6, r1
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:4 (discriminator 1)
#include "table.h"

void draw_table(table table) {  
  for(uint16_t i = 0; i < table.columns; i++) {
    2102:	8a 85       	ldd	r24, Y+10	; 0x0a
    2104:	82 15       	cp	r24, r2
    2106:	13 04       	cpc	r1, r3
    2108:	09 f0       	breq	.+2      	; 0x210c <draw_table(table)+0x9a>
    210a:	68 f5       	brcc	.+90     	; 0x2166 <draw_table(table)+0xf4>
    210c:	0f 89       	ldd	r16, Y+23	; 0x17
    210e:	18 8d       	ldd	r17, Y+24	; 0x18
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:17
    }

    display.Draw_Fast_VLine(table.pos.x + (table.vlines)[i], table.pos.y, table.height);
  }

  for(uint16_t i = 0; i < table.rows; i++) {
    2110:	31 2c       	mov	r3, r1
    2112:	21 2c       	mov	r2, r1
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:27

    if((table.hlines)[i] <= 1) {
      (table.hlines)[i] = (table.hlines)[i] * table.height;
    }

    display.Draw_Fast_HLine(table.pos.x, table.pos.y + (table.hlines)[i], table.width);
    2114:	e9 89       	ldd	r30, Y+17	; 0x11
    2116:	fa 89       	ldd	r31, Y+18	; 0x12
    2118:	6f 01       	movw	r12, r30
    211a:	f1 2c       	mov	r15, r1
    211c:	e1 2c       	mov	r14, r1
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:24
      (table.hlines)[i] = 0;
      continue;
    }

    if((table.hlines)[i] <= 1) {
      (table.hlines)[i] = (table.hlines)[i] * table.height;
    211e:	8d 89       	ldd	r24, Y+21	; 0x15
    2120:	9e 89       	ldd	r25, Y+22	; 0x16
    2122:	4c 01       	movw	r8, r24
    2124:	b1 2c       	mov	r11, r1
    2126:	a1 2c       	mov	r10, r1
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:17 (discriminator 1)
    }

    display.Draw_Fast_VLine(table.pos.x + (table.vlines)[i], table.pos.y, table.height);
  }

  for(uint16_t i = 0; i < table.rows; i++) {
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	82 15       	cp	r24, r2
    212c:	13 04       	cpc	r1, r3
    212e:	09 f0       	breq	.+2      	; 0x2132 <draw_table(table)+0xc0>
    2130:	08 f4       	brcc	.+2      	; 0x2134 <draw_table(table)+0xc2>
    2132:	8d c0       	rjmp	.+282    	; 0x224e <draw_table(table)+0x1dc>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:18
    if((table.hlines)[i] < 0) {
    2134:	f8 01       	movw	r30, r16
    2136:	40 80       	ld	r4, Z
    2138:	51 80       	ldd	r5, Z+1	; 0x01
    213a:	62 80       	ldd	r6, Z+2	; 0x02
    213c:	73 80       	ldd	r7, Z+3	; 0x03
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	a9 01       	movw	r20, r18
    2144:	c3 01       	movw	r24, r6
    2146:	b2 01       	movw	r22, r4
    2148:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__cmpsf2>
    214c:	87 ff       	sbrs	r24, 7
    214e:	51 c0       	rjmp	.+162    	; 0x21f2 <draw_table(table)+0x180>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:19 (discriminator 1)
      (table.hlines)[i] = 0;
    2150:	f8 01       	movw	r30, r16
    2152:	10 82       	st	Z, r1
    2154:	11 82       	std	Z+1, r1	; 0x01
    2156:	12 82       	std	Z+2, r1	; 0x02
    2158:	13 82       	std	Z+3, r1	; 0x03
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:17 (discriminator 2)
    }

    display.Draw_Fast_VLine(table.pos.x + (table.vlines)[i], table.pos.y, table.height);
  }

  for(uint16_t i = 0; i < table.rows; i++) {
    215a:	ff ef       	ldi	r31, 0xFF	; 255
    215c:	2f 1a       	sub	r2, r31
    215e:	3f 0a       	sbc	r3, r31
    2160:	0c 5f       	subi	r16, 0xFC	; 252
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	e1 cf       	rjmp	.-62     	; 0x2128 <draw_table(table)+0xb6>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:5
#include "table.h"

void draw_table(table table) {  
  for(uint16_t i = 0; i < table.columns; i++) {
    if((table.vlines)[i] < 0) {
    2166:	f8 01       	movw	r30, r16
    2168:	c0 80       	ld	r12, Z
    216a:	d1 80       	ldd	r13, Z+1	; 0x01
    216c:	e2 80       	ldd	r14, Z+2	; 0x02
    216e:	f3 80       	ldd	r15, Z+3	; 0x03
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	a9 01       	movw	r20, r18
    2176:	c7 01       	movw	r24, r14
    2178:	b6 01       	movw	r22, r12
    217a:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__cmpsf2>
    217e:	87 ff       	sbrs	r24, 7
    2180:	0b c0       	rjmp	.+22     	; 0x2198 <draw_table(table)+0x126>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:6 (discriminator 1)
      (table.vlines)[i] = 0;
    2182:	f8 01       	movw	r30, r16
    2184:	10 82       	st	Z, r1
    2186:	11 82       	std	Z+1, r1	; 0x01
    2188:	12 82       	std	Z+2, r1	; 0x02
    218a:	13 82       	std	Z+3, r1	; 0x03
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:4 (discriminator 2)
#include "table.h"

void draw_table(table table) {  
  for(uint16_t i = 0; i < table.columns; i++) {
    218c:	ff ef       	ldi	r31, 0xFF	; 255
    218e:	2f 1a       	sub	r2, r31
    2190:	3f 0a       	sbc	r3, r31
    2192:	0c 5f       	subi	r16, 0xFC	; 252
    2194:	1f 4f       	sbci	r17, 0xFF	; 255
    2196:	b5 cf       	rjmp	.-150    	; 0x2102 <draw_table(table)+0x90>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:10
    if((table.vlines)[i] < 0) {
      (table.vlines)[i] = 0;
      continue;      
    }

    if((table.vlines)[i] <= 1) {
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	c7 01       	movw	r24, r14
    21a2:	b6 01       	movw	r22, r12
    21a4:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__cmpsf2>
    21a8:	18 16       	cp	r1, r24
    21aa:	6c f0       	brlt	.+26     	; 0x21c6 <draw_table(table)+0x154>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:11
      (table.vlines)[i] = (table.vlines)[i] * table.width;
    21ac:	c3 01       	movw	r24, r6
    21ae:	b2 01       	movw	r22, r4
    21b0:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    21b4:	a7 01       	movw	r20, r14
    21b6:	96 01       	movw	r18, r12
    21b8:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <__mulsf3>
    21bc:	f8 01       	movw	r30, r16
    21be:	60 83       	st	Z, r22
    21c0:	71 83       	std	Z+1, r23	; 0x01
    21c2:	82 83       	std	Z+2, r24	; 0x02
    21c4:	93 83       	std	Z+3, r25	; 0x03
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:14
    }

    display.Draw_Fast_VLine(table.pos.x + (table.vlines)[i], table.pos.y, table.height);
    21c6:	c5 01       	movw	r24, r10
    21c8:	b4 01       	movw	r22, r8
    21ca:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    21ce:	f8 01       	movw	r30, r16
    21d0:	20 81       	ld	r18, Z
    21d2:	31 81       	ldd	r19, Z+1	; 0x01
    21d4:	42 81       	ldd	r20, Z+2	; 0x02
    21d6:	53 81       	ldd	r21, Z+3	; 0x03
    21d8:	0e 94 2e 2a 	call	0x545c	; 0x545c <__addsf3>
    21dc:	0e 94 11 2b 	call	0x5622	; 0x5622 <__fixsfsi>
    21e0:	2d 89       	ldd	r18, Y+21	; 0x15
    21e2:	3e 89       	ldd	r19, Y+22	; 0x16
    21e4:	49 89       	ldd	r20, Y+17	; 0x11
    21e6:	5a 89       	ldd	r21, Y+18	; 0x12
    21e8:	8c e3       	ldi	r24, 0x3C	; 60
    21ea:	92 e0       	ldi	r25, 0x02	; 2
    21ec:	0e 94 20 13 	call	0x2640	; 0x2640 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>
    21f0:	cd cf       	rjmp	.-102    	; 0x218c <draw_table(table)+0x11a>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:23
    if((table.hlines)[i] < 0) {
      (table.hlines)[i] = 0;
      continue;
    }

    if((table.hlines)[i] <= 1) {
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	c3 01       	movw	r24, r6
    21fc:	b2 01       	movw	r22, r4
    21fe:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__cmpsf2>
    2202:	18 16       	cp	r1, r24
    2204:	6c f0       	brlt	.+26     	; 0x2220 <draw_table(table)+0x1ae>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:24
      (table.hlines)[i] = (table.hlines)[i] * table.height;
    2206:	c5 01       	movw	r24, r10
    2208:	b4 01       	movw	r22, r8
    220a:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    220e:	a3 01       	movw	r20, r6
    2210:	92 01       	movw	r18, r4
    2212:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <__mulsf3>
    2216:	f8 01       	movw	r30, r16
    2218:	60 83       	st	Z, r22
    221a:	71 83       	std	Z+1, r23	; 0x01
    221c:	82 83       	std	Z+2, r24	; 0x02
    221e:	93 83       	std	Z+3, r25	; 0x03
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:27
    }

    display.Draw_Fast_HLine(table.pos.x, table.pos.y + (table.hlines)[i], table.width);
    2220:	c7 01       	movw	r24, r14
    2222:	b6 01       	movw	r22, r12
    2224:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    2228:	f8 01       	movw	r30, r16
    222a:	20 81       	ld	r18, Z
    222c:	31 81       	ldd	r19, Z+1	; 0x01
    222e:	42 81       	ldd	r20, Z+2	; 0x02
    2230:	53 81       	ldd	r21, Z+3	; 0x03
    2232:	0e 94 2e 2a 	call	0x545c	; 0x545c <__addsf3>
    2236:	0e 94 11 2b 	call	0x5622	; 0x5622 <__fixsfsi>
    223a:	2b 89       	ldd	r18, Y+19	; 0x13
    223c:	3c 89       	ldd	r19, Y+20	; 0x14
    223e:	ab 01       	movw	r20, r22
    2240:	6f 85       	ldd	r22, Y+15	; 0x0f
    2242:	78 89       	ldd	r23, Y+16	; 0x10
    2244:	8c e3       	ldi	r24, 0x3C	; 60
    2246:	92 e0       	ldi	r25, 0x02	; 2
    2248:	0e 94 37 13 	call	0x266e	; 0x266e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>
    224c:	86 cf       	rjmp	.-244    	; 0x215a <draw_table(table)+0xe8>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:29
  }
}
    224e:	68 96       	adiw	r28, 0x18	; 24
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	ff 90       	pop	r15
    2264:	ef 90       	pop	r14
    2266:	df 90       	pop	r13
    2268:	cf 90       	pop	r12
    226a:	bf 90       	pop	r11
    226c:	af 90       	pop	r10
    226e:	9f 90       	pop	r9
    2270:	8f 90       	pop	r8
    2272:	7f 90       	pop	r7
    2274:	6f 90       	pop	r6
    2276:	5f 90       	pop	r5
    2278:	4f 90       	pop	r4
    227a:	3f 90       	pop	r3
    227c:	2f 90       	pop	r2
    227e:	08 95       	ret

00002280 <get_table_entry_position(table, unsigned int, unsigned int)>:
_Z24get_table_entry_position5tablejj():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:31

position get_table_entry_position(table table, uint16_t column, uint16_t row) {
    2280:	8f 92       	push	r8
    2282:	9f 92       	push	r9
    2284:	af 92       	push	r10
    2286:	bf 92       	push	r11
    2288:	cf 92       	push	r12
    228a:	df 92       	push	r13
    228c:	ef 92       	push	r14
    228e:	ff 92       	push	r15
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	2e 97       	sbiw	r28, 0x0e	; 14
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	c9 82       	std	Y+1, r12	; 0x01
    22aa:	da 82       	std	Y+2, r13	; 0x02
    22ac:	eb 82       	std	Y+3, r14	; 0x03
    22ae:	fc 82       	std	Y+4, r15	; 0x04
    22b0:	0d 83       	std	Y+5, r16	; 0x05
    22b2:	1e 83       	std	Y+6, r17	; 0x06
    22b4:	2f 83       	std	Y+7, r18	; 0x07
    22b6:	38 87       	std	Y+8, r19	; 0x08
    22b8:	49 87       	std	Y+9, r20	; 0x09
    22ba:	5a 87       	std	Y+10, r21	; 0x0a
    22bc:	6b 87       	std	Y+11, r22	; 0x0b
    22be:	7c 87       	std	Y+12, r23	; 0x0c
    22c0:	8d 87       	std	Y+13, r24	; 0x0d
    22c2:	9e 87       	std	Y+14, r25	; 0x0e
    22c4:	69 81       	ldd	r22, Y+1	; 0x01
    22c6:	7a 81       	ldd	r23, Y+2	; 0x02
    22c8:	0b 81       	ldd	r16, Y+3	; 0x03
    22ca:	1c 81       	ldd	r17, Y+4	; 0x04
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:32
  uint16_t x = column < table.columns ? table.pos.x + table.vlines[column] : table.pos.x + table.width;
    22cc:	5a 15       	cp	r21, r10
    22ce:	1b 04       	cpc	r1, r11
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <get_table_entry_position(table, unsigned int, unsigned int)+0x54>
    22d2:	08 f4       	brcc	.+2      	; 0x22d6 <get_table_entry_position(table, unsigned int, unsigned int)+0x56>
    22d4:	47 c0       	rjmp	.+142    	; 0x2364 <get_table_entry_position(table, unsigned int, unsigned int)+0xe4>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:32 (discriminator 1)
    22d6:	aa 0c       	add	r10, r10
    22d8:	bb 1c       	adc	r11, r11
    22da:	aa 0c       	add	r10, r10
    22dc:	bb 1c       	adc	r11, r11
    22de:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e2:	a8 0e       	add	r10, r24
    22e4:	b9 1e       	adc	r11, r25
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    22ee:	f5 01       	movw	r30, r10
    22f0:	20 81       	ld	r18, Z
    22f2:	31 81       	ldd	r19, Z+1	; 0x01
    22f4:	42 81       	ldd	r20, Z+2	; 0x02
    22f6:	53 81       	ldd	r21, Z+3	; 0x03
    22f8:	0e 94 2e 2a 	call	0x545c	; 0x545c <__addsf3>
    22fc:	0e 94 18 2b 	call	0x5630	; 0x5630 <__fixunssfsi>
    2300:	7b 01       	movw	r14, r22
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:33 (discriminator 4)
  uint16_t y = row < table.rows ? table.pos.y + table.hlines[row] : table.pos.y + table.height;
    2302:	89 85       	ldd	r24, Y+9	; 0x09
    2304:	88 15       	cp	r24, r8
    2306:	19 04       	cpc	r1, r9
    2308:	91 f1       	breq	.+100    	; 0x236e <get_table_entry_position(table, unsigned int, unsigned int)+0xee>
    230a:	88 f1       	brcs	.+98     	; 0x236e <get_table_entry_position(table, unsigned int, unsigned int)+0xee>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:33 (discriminator 1)
    230c:	88 0c       	add	r8, r8
    230e:	99 1c       	adc	r9, r9
    2310:	88 0c       	add	r8, r8
    2312:	99 1c       	adc	r9, r9
    2314:	8b 85       	ldd	r24, Y+11	; 0x0b
    2316:	9c 85       	ldd	r25, Y+12	; 0x0c
    2318:	88 0e       	add	r8, r24
    231a:	99 1e       	adc	r9, r25
    231c:	b8 01       	movw	r22, r16
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	0e 94 47 2b 	call	0x568e	; 0x568e <__floatunsisf>
    2326:	f4 01       	movw	r30, r8
    2328:	20 81       	ld	r18, Z
    232a:	31 81       	ldd	r19, Z+1	; 0x01
    232c:	42 81       	ldd	r20, Z+2	; 0x02
    232e:	53 81       	ldd	r21, Z+3	; 0x03
    2330:	0e 94 2e 2a 	call	0x545c	; 0x545c <__addsf3>
    2334:	0e 94 18 2b 	call	0x5630	; 0x5630 <__fixunssfsi>
    2338:	8b 01       	movw	r16, r22
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:35 (discriminator 4)
    
  return {x,y};
    233a:	b7 01       	movw	r22, r14
    233c:	c8 01       	movw	r24, r16
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:36 (discriminator 4)
}
    233e:	2e 96       	adiw	r28, 0x0e	; 14
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	ff 90       	pop	r15
    2354:	ef 90       	pop	r14
    2356:	df 90       	pop	r13
    2358:	cf 90       	pop	r12
    235a:	bf 90       	pop	r11
    235c:	af 90       	pop	r10
    235e:	9f 90       	pop	r9
    2360:	8f 90       	pop	r8
    2362:	08 95       	ret
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:32 (discriminator 2)
    display.Draw_Fast_HLine(table.pos.x, table.pos.y + (table.hlines)[i], table.width);
  }
}

position get_table_entry_position(table table, uint16_t column, uint16_t row) {
  uint16_t x = column < table.columns ? table.pos.x + table.vlines[column] : table.pos.x + table.width;
    2364:	ed 80       	ldd	r14, Y+5	; 0x05
    2366:	fe 80       	ldd	r15, Y+6	; 0x06
    2368:	e6 0e       	add	r14, r22
    236a:	f7 1e       	adc	r15, r23
    236c:	ca cf       	rjmp	.-108    	; 0x2302 <get_table_entry_position(table, unsigned int, unsigned int)+0x82>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:33 (discriminator 2)
  uint16_t y = row < table.rows ? table.pos.y + table.hlines[row] : table.pos.y + table.height;
    236e:	6f 81       	ldd	r22, Y+7	; 0x07
    2370:	78 85       	ldd	r23, Y+8	; 0x08
    2372:	06 0f       	add	r16, r22
    2374:	17 1f       	adc	r17, r23
    2376:	e1 cf       	rjmp	.-62     	; 0x233a <get_table_entry_position(table, unsigned int, unsigned int)+0xba>

00002378 <write_text_to_field(table, unsigned int, unsigned int, char*)>:
_Z19write_text_to_field5tablejjPc():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:38
    
  return {x,y};
}

void write_text_to_field(table table, uint16_t column, uint16_t row, char *text) {
    2378:	8f 92       	push	r8
    237a:	9f 92       	push	r9
    237c:	af 92       	push	r10
    237e:	bf 92       	push	r11
    2380:	cf 92       	push	r12
    2382:	df 92       	push	r13
    2384:	ef 92       	push	r14
    2386:	ff 92       	push	r15
    2388:	0f 93       	push	r16
    238a:	1f 93       	push	r17
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	64 97       	sbiw	r28, 0x14	; 20
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	cf 82       	std	Y+7, r12	; 0x07
    23a2:	d8 86       	std	Y+8, r13	; 0x08
    23a4:	e9 86       	std	Y+9, r14	; 0x09
    23a6:	fa 86       	std	Y+10, r15	; 0x0a
    23a8:	0b 87       	std	Y+11, r16	; 0x0b
    23aa:	1c 87       	std	Y+12, r17	; 0x0c
    23ac:	2d 87       	std	Y+13, r18	; 0x0d
    23ae:	3e 87       	std	Y+14, r19	; 0x0e
    23b0:	4f 87       	std	Y+15, r20	; 0x0f
    23b2:	58 8b       	std	Y+16, r21	; 0x10
    23b4:	69 8b       	std	Y+17, r22	; 0x11
    23b6:	7a 8b       	std	Y+18, r23	; 0x12
    23b8:	8b 8b       	std	Y+19, r24	; 0x13
    23ba:	9c 8b       	std	Y+20, r25	; 0x14
    23bc:	09 89       	ldd	r16, Y+17	; 0x11
    23be:	1a 89       	ldd	r17, Y+18	; 0x12
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:39
  display.Set_Text_Mode(1);
    23c0:	61 e0       	ldi	r22, 0x01	; 1
    23c2:	8c e3       	ldi	r24, 0x3C	; 60
    23c4:	92 e0       	ldi	r25, 0x02	; 2
    23c6:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCDWIKI_GUI::Set_Text_Mode(bool)>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:40
  display.Set_Text_Size((table.hlines[row + 1] - table.hlines[row]) / 8);
    23ca:	f4 01       	movw	r30, r8
    23cc:	31 96       	adiw	r30, 0x01	; 1
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	ee 0f       	add	r30, r30
    23d4:	ff 1f       	adc	r31, r31
    23d6:	e0 0f       	add	r30, r16
    23d8:	f1 1f       	adc	r31, r17
    23da:	df 01       	movw	r26, r30
    23dc:	14 97       	sbiw	r26, 0x04	; 4
    23de:	2d 91       	ld	r18, X+
    23e0:	3d 91       	ld	r19, X+
    23e2:	4d 91       	ld	r20, X+
    23e4:	5c 91       	ld	r21, X
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	93 81       	ldd	r25, Z+3	; 0x03
    23ee:	0e 94 2d 2a 	call	0x545a	; 0x545a <__subsf3>
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	5e e3       	ldi	r21, 0x3E	; 62
    23fa:	0e 94 f9 2b 	call	0x57f2	; 0x57f2 <__mulsf3>
    23fe:	0e 94 18 2b 	call	0x5630	; 0x5630 <__fixunssfsi>
    2402:	8c e3       	ldi	r24, 0x3C	; 60
    2404:	92 e0       	ldi	r25, 0x02	; 2
    2406:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <LCDWIKI_GUI::Set_Text_Size(unsigned char)>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:41
  position entry_position = get_table_entry_position(table, column, row);
    240a:	cf 80       	ldd	r12, Y+7	; 0x07
    240c:	d8 84       	ldd	r13, Y+8	; 0x08
    240e:	e9 84       	ldd	r14, Y+9	; 0x09
    2410:	fa 84       	ldd	r15, Y+10	; 0x0a
    2412:	0b 85       	ldd	r16, Y+11	; 0x0b
    2414:	1c 85       	ldd	r17, Y+12	; 0x0c
    2416:	2d 85       	ldd	r18, Y+13	; 0x0d
    2418:	3e 85       	ldd	r19, Y+14	; 0x0e
    241a:	4f 85       	ldd	r20, Y+15	; 0x0f
    241c:	58 89       	ldd	r21, Y+16	; 0x10
    241e:	69 89       	ldd	r22, Y+17	; 0x11
    2420:	7a 89       	ldd	r23, Y+18	; 0x12
    2422:	8b 89       	ldd	r24, Y+19	; 0x13
    2424:	9c 89       	ldd	r25, Y+20	; 0x14
    2426:	0e 94 40 11 	call	0x2280	; 0x2280 <get_table_entry_position(table, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:42
  display.Print_String(text, entry_position.x+4, entry_position.y+4);
    242a:	5c 01       	movw	r10, r24
    242c:	24 e0       	ldi	r18, 0x04	; 4
    242e:	a2 0e       	add	r10, r18
    2430:	b1 1c       	adc	r11, r1
    2432:	8b 01       	movw	r16, r22
    2434:	0c 5f       	subi	r16, 0xFC	; 252
    2436:	1f 4f       	sbci	r17, 0xFF	; 255
    2438:	6b a1       	ldd	r22, Y+35	; 0x23
    243a:	7c a1       	ldd	r23, Y+36	; 0x24
    243c:	ce 01       	movw	r24, r28
    243e:	01 96       	adiw	r24, 0x01	; 1
    2440:	0e 94 9a 28 	call	0x5134	; 0x5134 <String::String(char const*)>
    2444:	95 01       	movw	r18, r10
    2446:	a8 01       	movw	r20, r16
    2448:	be 01       	movw	r22, r28
    244a:	6f 5f       	subi	r22, 0xFF	; 255
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	8c e3       	ldi	r24, 0x3C	; 60
    2450:	92 e0       	ldi	r25, 0x02	; 2
    2452:	0e 94 7d 15 	call	0x2afa	; 0x2afa <LCDWIKI_GUI::Print_String(String, int, int)>
    2456:	ce 01       	movw	r24, r28
    2458:	01 96       	adiw	r24, 0x01	; 1
    245a:	0e 94 28 28 	call	0x5050	; 0x5050 <String::~String()>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:43
}
    245e:	64 96       	adiw	r28, 0x14	; 20
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	1f 91       	pop	r17
    2470:	0f 91       	pop	r16
    2472:	ff 90       	pop	r15
    2474:	ef 90       	pop	r14
    2476:	df 90       	pop	r13
    2478:	cf 90       	pop	r12
    247a:	bf 90       	pop	r11
    247c:	af 90       	pop	r10
    247e:	9f 90       	pop	r9
    2480:	8f 90       	pop	r8
    2482:	08 95       	ret

00002484 <change_field_color(table, unsigned int, unsigned int, rgb_color)>:
_Z18change_field_color5tablejj9rgb_color():
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:45

void change_field_color(table table, uint16_t column, uint16_t row, rgb_color color) {
    2484:	2f 92       	push	r2
    2486:	3f 92       	push	r3
    2488:	4f 92       	push	r4
    248a:	5f 92       	push	r5
    248c:	6f 92       	push	r6
    248e:	7f 92       	push	r7
    2490:	8f 92       	push	r8
    2492:	9f 92       	push	r9
    2494:	af 92       	push	r10
    2496:	bf 92       	push	r11
    2498:	cf 92       	push	r12
    249a:	df 92       	push	r13
    249c:	ef 92       	push	r14
    249e:	ff 92       	push	r15
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	67 97       	sbiw	r28, 0x17	; 23
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	32 2e       	mov	r3, r18
    24ba:	2f 83       	std	Y+7, r18	; 0x07
    24bc:	38 87       	std	Y+8, r19	; 0x08
    24be:	49 87       	std	Y+9, r20	; 0x09
    24c0:	5a 87       	std	Y+10, r21	; 0x0a
    24c2:	6b 87       	std	Y+11, r22	; 0x0b
    24c4:	7c 87       	std	Y+12, r23	; 0x0c
    24c6:	8d 87       	std	Y+13, r24	; 0x0d
    24c8:	9e 87       	std	Y+14, r25	; 0x0e
    24ca:	2c a5       	ldd	r18, Y+44	; 0x2c
    24cc:	29 8b       	std	Y+17, r18	; 0x11
    24ce:	2d a5       	ldd	r18, Y+45	; 0x2d
    24d0:	2a 8b       	std	Y+18, r18	; 0x12
    24d2:	2e a5       	ldd	r18, Y+46	; 0x2e
    24d4:	2b 8b       	std	Y+19, r18	; 0x13
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:46
  position entry_position = get_table_entry_position(table, column, row);
    24d6:	23 2d       	mov	r18, r3
    24d8:	0e 94 40 11 	call	0x2280	; 0x2280 <get_table_entry_position(table, unsigned int, unsigned int)>
    24dc:	1b 01       	movw	r2, r22
    24de:	2c 01       	movw	r4, r24
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:47
  position next_entry_position = get_table_entry_position(table, column + 1, row + 1);
    24e0:	8f ef       	ldi	r24, 0xFF	; 255
    24e2:	88 1a       	sub	r8, r24
    24e4:	98 0a       	sbc	r9, r24
    24e6:	2f ef       	ldi	r18, 0xFF	; 255
    24e8:	a2 1a       	sub	r10, r18
    24ea:	b2 0a       	sbc	r11, r18
    24ec:	2f 81       	ldd	r18, Y+7	; 0x07
    24ee:	38 85       	ldd	r19, Y+8	; 0x08
    24f0:	49 85       	ldd	r20, Y+9	; 0x09
    24f2:	5a 85       	ldd	r21, Y+10	; 0x0a
    24f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fc:	0e 94 40 11 	call	0x2280	; 0x2280 <get_table_entry_position(table, unsigned int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:49
  
  uint16_t rect_width = next_entry_position.x - entry_position.x - 1;
    2500:	5b 01       	movw	r10, r22
    2502:	21 e0       	ldi	r18, 0x01	; 1
    2504:	a2 1a       	sub	r10, r18
    2506:	b1 08       	sbc	r11, r1
    2508:	a2 18       	sub	r10, r2
    250a:	b3 08       	sbc	r11, r3
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:50
  uint16_t rect_height = next_entry_position.y - entry_position.y - 1;
    250c:	8c 01       	movw	r16, r24
    250e:	01 50       	subi	r16, 0x01	; 1
    2510:	11 09       	sbc	r17, r1
    2512:	04 19       	sub	r16, r4
    2514:	15 09       	sbc	r17, r5
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:52

  display.Fill_Rect(entry_position.x+1, entry_position.y+1, rect_width, rect_height, display.Color_To_565(color.r, color.g, color.b));
    2516:	2b 89       	ldd	r18, Y+19	; 0x13
    2518:	4a 89       	ldd	r20, Y+18	; 0x12
    251a:	69 89       	ldd	r22, Y+17	; 0x11
    251c:	8c e3       	ldi	r24, 0x3C	; 60
    251e:	92 e0       	ldi	r25, 0x02	; 2
    2520:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <LCDWIKI_SPI::Color_To_565(unsigned char, unsigned char, unsigned char)>
    2524:	a2 01       	movw	r20, r4
    2526:	4f 5f       	subi	r20, 0xFF	; 255
    2528:	5f 4f       	sbci	r21, 0xFF	; 255
    252a:	b1 01       	movw	r22, r2
    252c:	6f 5f       	subi	r22, 0xFF	; 255
    252e:	7f 4f       	sbci	r23, 0xFF	; 255
    2530:	7c 01       	movw	r14, r24
    2532:	95 01       	movw	r18, r10
    2534:	8c e3       	ldi	r24, 0x3C	; 60
    2536:	92 e0       	ldi	r25, 0x02	; 2
    2538:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)>
/home/noah/Documents/basteln/ofen_v2/main/table.cpp:53
    253c:	67 96       	adiw	r28, 0x17	; 23
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    254c:	1f 91       	pop	r17
    254e:	0f 91       	pop	r16
    2550:	ff 90       	pop	r15
    2552:	ef 90       	pop	r14
    2554:	df 90       	pop	r13
    2556:	cf 90       	pop	r12
    2558:	bf 90       	pop	r11
    255a:	af 90       	pop	r10
    255c:	9f 90       	pop	r9
    255e:	8f 90       	pop	r8
    2560:	7f 90       	pop	r7
    2562:	6f 90       	pop	r6
    2564:	5f 90       	pop	r5
    2566:	4f 90       	pop	r4
    2568:	3f 90       	pop	r3
    256a:	2f 90       	pop	r2
    256c:	08 95       	ret

0000256e <count_decimals(int)>:
_Z14count_decimalsi():
/home/noah/Documents/basteln/ofen_v2/main/utils.cpp:3
#include "utils.h"

uint8_t count_decimals(int16_t num) {
    256e:	20 e0       	ldi	r18, 0x00	; 0
/home/noah/Documents/basteln/ofen_v2/main/utils.cpp:7
  if(num < 10 && num > -10) {
    return 1;
  } else {
    return count_decimals(num / 10) + 1;
    2570:	ea e0       	ldi	r30, 0x0A	; 10
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	2f 5f       	subi	r18, 0xFF	; 255
/home/noah/Documents/basteln/ofen_v2/main/utils.cpp:4
#include "utils.h"

uint8_t count_decimals(int16_t num) {
  if(num < 10 && num > -10) {
    2576:	ac 01       	movw	r20, r24
    2578:	47 5f       	subi	r20, 0xF7	; 247
    257a:	5f 4f       	sbci	r21, 0xFF	; 255
    257c:	43 31       	cpi	r20, 0x13	; 19
    257e:	51 05       	cpc	r21, r1
    2580:	28 f0       	brcs	.+10     	; 0x258c <count_decimals(int)+0x1e>
/home/noah/Documents/basteln/ofen_v2/main/utils.cpp:7
    return 1;
  } else {
    return count_decimals(num / 10) + 1;
    2582:	bf 01       	movw	r22, r30
    2584:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__divmodhi4>
    2588:	cb 01       	movw	r24, r22
    258a:	f4 cf       	rjmp	.-24     	; 0x2574 <count_decimals(int)+0x6>
/home/noah/Documents/basteln/ofen_v2/main/utils.cpp:9
  }
    258c:	82 2f       	mov	r24, r18
    258e:	08 95       	ret

00002590 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    2590:	cf 93       	push	r28
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    2592:	cf b7       	in	r28, 0x3f	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2594:	f8 94       	cli
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    2596:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <SPIClass::initialized>
    259a:	81 11       	cpse	r24, r1
    259c:	27 c0       	rjmp	.+78     	; 0x25ec <SPIClass::begin()+0x5c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    259e:	ee e4       	ldi	r30, 0x4E	; 78
    25a0:	f9 e0       	ldi	r31, 0x09	; 9
    25a2:	84 91       	lpm	r24, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    25a4:	e7 e3       	ldi	r30, 0x37	; 55
    25a6:	f9 e0       	ldi	r31, 0x09	; 9
    25a8:	94 91       	lpm	r25, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    25aa:	e8 2f       	mov	r30, r24
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	ee 0f       	add	r30, r30
    25b0:	ff 1f       	adc	r31, r31
    25b2:	eb 59       	subi	r30, 0x9B	; 155
    25b4:	f6 4f       	sbci	r31, 0xF6	; 246
    25b6:	a5 91       	lpm	r26, Z+
    25b8:	b4 91       	lpm	r27, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    25ba:	ec 91       	ld	r30, X
    25bc:	e9 23       	and	r30, r25
    25be:	21 f4       	brne	.+8      	; 0x25c8 <SPIClass::begin()+0x38>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	8a e0       	ldi	r24, 0x0A	; 10
    25c4:	0e 94 fe 29 	call	0x53fc	; 0x53fc <digitalWrite>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    25c8:	61 e0       	ldi	r22, 0x01	; 1
    25ca:	8a e0       	ldi	r24, 0x0A	; 10
    25cc:	0e 94 c2 29 	call	0x5384	; 0x5384 <pinMode>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    25d0:	8c b5       	in	r24, 0x2c	; 44
    25d2:	80 61       	ori	r24, 0x10	; 16
    25d4:	8c bd       	out	0x2c, r24	; 44
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    25d6:	8c b5       	in	r24, 0x2c	; 44
    25d8:	80 64       	ori	r24, 0x40	; 64
    25da:	8c bd       	out	0x2c, r24	; 44
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    25dc:	61 e0       	ldi	r22, 0x01	; 1
    25de:	8d e0       	ldi	r24, 0x0D	; 13
    25e0:	0e 94 c2 29 	call	0x5384	; 0x5384 <pinMode>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    25e4:	61 e0       	ldi	r22, 0x01	; 1
    25e6:	8b e0       	ldi	r24, 0x0B	; 11
    25e8:	0e 94 c2 29 	call	0x5384	; 0x5384 <pinMode>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    25ec:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <SPIClass::initialized>
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <SPIClass::initialized>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    25f6:	cf bf       	out	0x3f, r28	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:64
}
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <LCDWIKI_GUI::LCDWIKI_GUI()>:
_ZN11LCDWIKI_GUIC2Ev():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:647
}

//print string
void LCDWIKI_GUI::Print_String(const uint8_t *st, int16_t x, int16_t y)
{
	Print((uint8_t *)st, x, y);
    25fc:	fc 01       	movw	r30, r24
    25fe:	83 e0       	ldi	r24, 0x03	; 3
    2600:	92 e0       	ldi	r25, 0x02	; 2
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	80 83       	st	Z, r24
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	98 ef       	ldi	r25, 0xF8	; 248
    260a:	91 87       	std	Z+9, r25	; 0x09
    260c:	80 87       	std	Z+8, r24	; 0x08
    260e:	20 ee       	ldi	r18, 0xE0	; 224
    2610:	37 e0       	ldi	r19, 0x07	; 7
    2612:	37 83       	std	Z+7, r19	; 0x07
    2614:	26 83       	std	Z+6, r18	; 0x06
    2616:	93 87       	std	Z+11, r25	; 0x0b
    2618:	82 87       	std	Z+10, r24	; 0x0a
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	84 87       	std	Z+12, r24	; 0x0c
    261e:	15 86       	std	Z+13, r1	; 0x0d
    2620:	08 95       	ret

00002622 <LCDWIKI_GUI::Set_Draw_color(unsigned int)>:
_ZN11LCDWIKI_GUI14Set_Draw_colorEj():
    2622:	fc 01       	movw	r30, r24
    2624:	73 87       	std	Z+11, r23	; 0x0b
    2626:	62 87       	std	Z+10, r22	; 0x0a
    2628:	08 95       	ret

0000262a <LCDWIKI_GUI::Draw_Pixel(int, int)>:
_ZN11LCDWIKI_GUI10Draw_PixelEii():
    262a:	dc 01       	movw	r26, r24
    262c:	1a 96       	adiw	r26, 0x0a	; 10
    262e:	2d 91       	ld	r18, X+
    2630:	3c 91       	ld	r19, X
    2632:	1b 97       	sbiw	r26, 0x0b	; 11
    2634:	ed 91       	ld	r30, X+
    2636:	fc 91       	ld	r31, X
    2638:	02 80       	ldd	r0, Z+2	; 0x02
    263a:	f3 81       	ldd	r31, Z+3	; 0x03
    263c:	e0 2d       	mov	r30, r0
    263e:	09 94       	ijmp

00002640 <LCDWIKI_GUI::Draw_Fast_VLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_VLineEiii():
    2640:	ef 92       	push	r14
    2642:	ff 92       	push	r15
    2644:	0f 93       	push	r16
    2646:	1f 93       	push	r17
    2648:	dc 01       	movw	r26, r24
    264a:	1a 96       	adiw	r26, 0x0a	; 10
    264c:	ed 90       	ld	r14, X+
    264e:	fc 90       	ld	r15, X
    2650:	1b 97       	sbiw	r26, 0x0b	; 11
    2652:	ed 91       	ld	r30, X+
    2654:	fc 91       	ld	r31, X
    2656:	04 80       	ldd	r0, Z+4	; 0x04
    2658:	f5 81       	ldd	r31, Z+5	; 0x05
    265a:	e0 2d       	mov	r30, r0
    265c:	89 01       	movw	r16, r18
    265e:	21 e0       	ldi	r18, 0x01	; 1
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	09 95       	icall
    2664:	1f 91       	pop	r17
    2666:	0f 91       	pop	r16
    2668:	ff 90       	pop	r15
    266a:	ef 90       	pop	r14
    266c:	08 95       	ret

0000266e <LCDWIKI_GUI::Draw_Fast_HLine(int, int, int)>:
_ZN11LCDWIKI_GUI15Draw_Fast_HLineEiii():
    266e:	ef 92       	push	r14
    2670:	ff 92       	push	r15
    2672:	0f 93       	push	r16
    2674:	1f 93       	push	r17
    2676:	dc 01       	movw	r26, r24
    2678:	1a 96       	adiw	r26, 0x0a	; 10
    267a:	ed 90       	ld	r14, X+
    267c:	fc 90       	ld	r15, X
    267e:	1b 97       	sbiw	r26, 0x0b	; 11
    2680:	ed 91       	ld	r30, X+
    2682:	fc 91       	ld	r31, X
    2684:	04 80       	ldd	r0, Z+4	; 0x04
    2686:	f5 81       	ldd	r31, Z+5	; 0x05
    2688:	e0 2d       	mov	r30, r0
    268a:	01 e0       	ldi	r16, 0x01	; 1
    268c:	10 e0       	ldi	r17, 0x00	; 0
    268e:	09 95       	icall
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	ff 90       	pop	r15
    2696:	ef 90       	pop	r14
    2698:	08 95       	ret

0000269a <LCDWIKI_GUI::Draw_Line(int, int, int, int)>:
_ZN11LCDWIKI_GUI9Draw_LineEiiii():
    269a:	2f 92       	push	r2
    269c:	3f 92       	push	r3
    269e:	4f 92       	push	r4
    26a0:	5f 92       	push	r5
    26a2:	6f 92       	push	r6
    26a4:	7f 92       	push	r7
    26a6:	8f 92       	push	r8
    26a8:	9f 92       	push	r9
    26aa:	af 92       	push	r10
    26ac:	bf 92       	push	r11
    26ae:	cf 92       	push	r12
    26b0:	df 92       	push	r13
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0x26>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0x28>
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	7c 83       	std	Y+4, r23	; 0x04
    26cc:	6b 83       	std	Y+3, r22	; 0x03
    26ce:	7a 01       	movw	r14, r20
    26d0:	69 01       	movw	r12, r18
    26d2:	58 01       	movw	r10, r16
    26d4:	a4 1a       	sub	r10, r20
    26d6:	b5 0a       	sbc	r11, r21
    26d8:	b7 fe       	sbrs	r11, 7
    26da:	03 c0       	rjmp	.+6      	; 0x26e2 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0x48>
    26dc:	b1 94       	neg	r11
    26de:	a1 94       	neg	r10
    26e0:	b1 08       	sbc	r11, r1
    26e2:	46 01       	movw	r8, r12
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	9c 81       	ldd	r25, Y+4	; 0x04
    26e8:	88 1a       	sub	r8, r24
    26ea:	99 0a       	sbc	r9, r25
    26ec:	97 fe       	sbrs	r9, 7
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0x5c>
    26f0:	91 94       	neg	r9
    26f2:	81 94       	neg	r8
    26f4:	91 08       	sbc	r9, r1
    26f6:	8a 14       	cp	r8, r10
    26f8:	9b 04       	cpc	r9, r11
    26fa:	5c f4       	brge	.+22     	; 0x2712 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0x78>
    26fc:	9c 2d       	mov	r25, r12
    26fe:	8d 2d       	mov	r24, r13
    2700:	68 01       	movw	r12, r16
    2702:	09 2f       	mov	r16, r25
    2704:	18 2f       	mov	r17, r24
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	8c 81       	ldd	r24, Y+4	; 0x04
    270a:	fc 82       	std	Y+4, r15	; 0x04
    270c:	eb 82       	std	Y+3, r14	; 0x03
    270e:	e9 2e       	mov	r14, r25
    2710:	f8 2e       	mov	r15, r24
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	9c 81       	ldd	r25, Y+4	; 0x04
    2716:	c8 16       	cp	r12, r24
    2718:	d9 06       	cpc	r13, r25
    271a:	5c f4       	brge	.+22     	; 0x2732 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0x98>
    271c:	9e 2d       	mov	r25, r14
    271e:	8f 2d       	mov	r24, r15
    2720:	78 01       	movw	r14, r16
    2722:	09 2f       	mov	r16, r25
    2724:	18 2f       	mov	r17, r24
    2726:	9b 81       	ldd	r25, Y+3	; 0x03
    2728:	8c 81       	ldd	r24, Y+4	; 0x04
    272a:	dc 82       	std	Y+4, r13	; 0x04
    272c:	cb 82       	std	Y+3, r12	; 0x03
    272e:	c9 2e       	mov	r12, r25
    2730:	d8 2e       	mov	r13, r24
    2732:	16 01       	movw	r2, r12
    2734:	8b 81       	ldd	r24, Y+3	; 0x03
    2736:	9c 81       	ldd	r25, Y+4	; 0x04
    2738:	28 1a       	sub	r2, r24
    273a:	39 0a       	sbc	r3, r25
    273c:	28 01       	movw	r4, r16
    273e:	4e 18       	sub	r4, r14
    2740:	5f 08       	sbc	r5, r15
    2742:	57 fe       	sbrs	r5, 7
    2744:	03 c0       	rjmp	.+6      	; 0x274c <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0xb2>
    2746:	51 94       	neg	r5
    2748:	41 94       	neg	r4
    274a:	51 08       	sbc	r5, r1
    274c:	31 01       	movw	r6, r2
    274e:	37 fe       	sbrs	r3, 7
    2750:	03 c0       	rjmp	.+6      	; 0x2758 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0xbe>
    2752:	9f ef       	ldi	r25, 0xFF	; 255
    2754:	69 1a       	sub	r6, r25
    2756:	79 0a       	sbc	r7, r25
    2758:	75 94       	asr	r7
    275a:	67 94       	ror	r6
    275c:	e0 16       	cp	r14, r16
    275e:	f1 06       	cpc	r15, r17
    2760:	0c f1       	brlt	.+66     	; 0x27a4 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0x10a>
    2762:	0f ef       	ldi	r16, 0xFF	; 255
    2764:	1f ef       	ldi	r17, 0xFF	; 255
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	9c 81       	ldd	r25, Y+4	; 0x04
    276a:	c8 16       	cp	r12, r24
    276c:	d9 06       	cpc	r13, r25
    276e:	ec f0       	brlt	.+58     	; 0x27aa <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0x110>
    2770:	ac 01       	movw	r20, r24
    2772:	b7 01       	movw	r22, r14
    2774:	8a 14       	cp	r8, r10
    2776:	9b 04       	cpc	r9, r11
    2778:	1c f0       	brlt	.+6      	; 0x2780 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0xe6>
    277a:	a7 01       	movw	r20, r14
    277c:	6b 81       	ldd	r22, Y+3	; 0x03
    277e:	7c 81       	ldd	r23, Y+4	; 0x04
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	9a 81       	ldd	r25, Y+2	; 0x02
    2784:	0e 94 15 13 	call	0x262a	; 0x262a <LCDWIKI_GUI::Draw_Pixel(int, int)>
    2788:	64 18       	sub	r6, r4
    278a:	75 08       	sbc	r7, r5
    278c:	77 fe       	sbrs	r7, 7
    278e:	04 c0       	rjmp	.+8      	; 0x2798 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0xfe>
    2790:	e0 0e       	add	r14, r16
    2792:	f1 1e       	adc	r15, r17
    2794:	62 0c       	add	r6, r2
    2796:	73 1c       	adc	r7, r3
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	9c 81       	ldd	r25, Y+4	; 0x04
    279c:	01 96       	adiw	r24, 0x01	; 1
    279e:	9c 83       	std	Y+4, r25	; 0x04
    27a0:	8b 83       	std	Y+3, r24	; 0x03
    27a2:	e1 cf       	rjmp	.-62     	; 0x2766 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0xcc>
    27a4:	01 e0       	ldi	r16, 0x01	; 1
    27a6:	10 e0       	ldi	r17, 0x00	; 0
    27a8:	de cf       	rjmp	.-68     	; 0x2766 <LCDWIKI_GUI::Draw_Line(int, int, int, int)+0xcc>
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
    27ba:	ff 90       	pop	r15
    27bc:	ef 90       	pop	r14
    27be:	df 90       	pop	r13
    27c0:	cf 90       	pop	r12
    27c2:	bf 90       	pop	r11
    27c4:	af 90       	pop	r10
    27c6:	9f 90       	pop	r9
    27c8:	8f 90       	pop	r8
    27ca:	7f 90       	pop	r7
    27cc:	6f 90       	pop	r6
    27ce:	5f 90       	pop	r5
    27d0:	4f 90       	pop	r4
    27d2:	3f 90       	pop	r3
    27d4:	2f 90       	pop	r2
    27d6:	08 95       	ret

000027d8 <LCDWIKI_GUI::Set_Text_colour(unsigned int)>:
_ZN11LCDWIKI_GUI15Set_Text_colourEj():
    27d8:	fc 01       	movw	r30, r24
    27da:	77 83       	std	Z+7, r23	; 0x07
    27dc:	66 83       	std	Z+6, r22	; 0x06
    27de:	08 95       	ret

000027e0 <LCDWIKI_GUI::Set_Text_Back_colour(unsigned int)>:
_ZN11LCDWIKI_GUI20Set_Text_Back_colourEj():
    27e0:	fc 01       	movw	r30, r24
    27e2:	71 87       	std	Z+9, r23	; 0x09
    27e4:	60 87       	std	Z+8, r22	; 0x08
    27e6:	08 95       	ret

000027e8 <LCDWIKI_GUI::Set_Text_Size(unsigned char)>:
_ZN11LCDWIKI_GUI13Set_Text_SizeEh():
    27e8:	fc 01       	movw	r30, r24
    27ea:	64 87       	std	Z+12, r22	; 0x0c
    27ec:	08 95       	ret

000027ee <LCDWIKI_GUI::Set_Text_Mode(bool)>:
_ZN11LCDWIKI_GUI13Set_Text_ModeEb():
    27ee:	fc 01       	movw	r30, r24
    27f0:	65 87       	std	Z+13, r22	; 0x0d
    27f2:	08 95       	ret

000027f4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>:
_ZN11LCDWIKI_GUI9Draw_CharEiihjjhb():
    27f4:	2f 92       	push	r2
    27f6:	3f 92       	push	r3
    27f8:	4f 92       	push	r4
    27fa:	5f 92       	push	r5
    27fc:	6f 92       	push	r6
    27fe:	7f 92       	push	r7
    2800:	8f 92       	push	r8
    2802:	9f 92       	push	r9
    2804:	af 92       	push	r10
    2806:	bf 92       	push	r11
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	2d 97       	sbiw	r28, 0x0d	; 13
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	3c 01       	movw	r6, r24
    282a:	4b 01       	movw	r8, r22
    282c:	2a 01       	movw	r4, r20
    282e:	d2 2e       	mov	r13, r18
    2830:	1c 83       	std	Y+4, r17	; 0x04
    2832:	0b 83       	std	Y+3, r16	; 0x03
    2834:	fe 82       	std	Y+6, r15	; 0x06
    2836:	ed 82       	std	Y+5, r14	; 0x05
    2838:	ca 82       	std	Y+2, r12	; 0x02
    283a:	a9 86       	std	Y+9, r10	; 0x09
    283c:	dc 01       	movw	r26, r24
    283e:	ed 91       	ld	r30, X+
    2840:	fc 91       	ld	r31, X
    2842:	06 84       	ldd	r0, Z+14	; 0x0e
    2844:	f7 85       	ldd	r31, Z+15	; 0x0f
    2846:	e0 2d       	mov	r30, r0
    2848:	09 95       	icall
    284a:	88 16       	cp	r8, r24
    284c:	99 06       	cpc	r9, r25
    284e:	0c f0       	brlt	.+2      	; 0x2852 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x5e>
    2850:	7a c0       	rjmp	.+244    	; 0x2946 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
    2852:	d3 01       	movw	r26, r6
    2854:	ed 91       	ld	r30, X+
    2856:	fc 91       	ld	r31, X
    2858:	04 84       	ldd	r0, Z+12	; 0x0c
    285a:	f5 85       	ldd	r31, Z+13	; 0x0d
    285c:	e0 2d       	mov	r30, r0
    285e:	c3 01       	movw	r24, r6
    2860:	09 95       	icall
    2862:	48 16       	cp	r4, r24
    2864:	59 06       	cpc	r5, r25
    2866:	0c f0       	brlt	.+2      	; 0x286a <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x76>
    2868:	6e c0       	rjmp	.+220    	; 0x2946 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
    286a:	3a 81       	ldd	r19, Y+2	; 0x02
    286c:	23 2f       	mov	r18, r19
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	3d 87       	std	Y+13, r19	; 0x0d
    2872:	2c 87       	std	Y+12, r18	; 0x0c
    2874:	c4 01       	movw	r24, r8
    2876:	aa 81       	ldd	r26, Y+2	; 0x02
    2878:	46 e0       	ldi	r20, 0x06	; 6
    287a:	a4 9f       	mul	r26, r20
    287c:	80 0d       	add	r24, r0
    287e:	91 1d       	adc	r25, r1
    2880:	11 24       	eor	r1, r1
    2882:	18 16       	cp	r1, r24
    2884:	19 06       	cpc	r1, r25
    2886:	0c f0       	brlt	.+2      	; 0x288a <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x96>
    2888:	5e c0       	rjmp	.+188    	; 0x2946 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
    288a:	c9 01       	movw	r24, r18
    288c:	23 e0       	ldi	r18, 0x03	; 3
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	2a 95       	dec	r18
    2894:	e1 f7       	brne	.-8      	; 0x288e <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x9a>
    2896:	84 0d       	add	r24, r4
    2898:	95 1d       	adc	r25, r5
    289a:	18 16       	cp	r1, r24
    289c:	19 06       	cpc	r1, r25
    289e:	0c f0       	brlt	.+2      	; 0x28a2 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xae>
    28a0:	52 c0       	rjmp	.+164    	; 0x2946 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
    28a2:	bf ea       	ldi	r27, 0xAF	; 175
    28a4:	bd 15       	cp	r27, r13
    28a6:	08 f4       	brcc	.+2      	; 0x28aa <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xb6>
    28a8:	d3 94       	inc	r13
    28aa:	54 01       	movw	r10, r8
    28ac:	19 82       	std	Y+1, r1	; 0x01
    28ae:	88 e6       	ldi	r24, 0x68	; 104
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	88 19       	sub	r24, r8
    28b4:	99 09       	sbc	r25, r9
    28b6:	9c 01       	movw	r18, r24
    28b8:	45 e0       	ldi	r20, 0x05	; 5
    28ba:	d4 9e       	mul	r13, r20
    28bc:	20 0d       	add	r18, r0
    28be:	31 1d       	adc	r19, r1
    28c0:	11 24       	eor	r1, r1
    28c2:	3b 87       	std	Y+11, r19	; 0x0b
    28c4:	2a 87       	std	Y+10, r18	; 0x0a
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	e0 e0       	ldi	r30, 0x00	; 0
    28ca:	85 30       	cpi	r24, 0x05	; 5
    28cc:	29 f0       	breq	.+10     	; 0x28d8 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xe4>
    28ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    28d0:	fb 85       	ldd	r31, Y+11	; 0x0b
    28d2:	ea 0d       	add	r30, r10
    28d4:	fb 1d       	adc	r31, r11
    28d6:	e4 91       	lpm	r30, Z
    28d8:	62 01       	movw	r12, r4
    28da:	31 2c       	mov	r3, r1
    28dc:	21 2c       	mov	r2, r1
    28de:	ae 2f       	mov	r26, r30
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	b8 87       	std	Y+8, r27	; 0x08
    28e4:	af 83       	std	Y+7, r26	; 0x07
    28e6:	e0 ff       	sbrs	r30, 0
    28e8:	54 c0       	rjmp	.+168    	; 0x2992 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x19e>
    28ea:	d3 01       	movw	r26, r6
    28ec:	ed 91       	ld	r30, X+
    28ee:	fc 91       	ld	r31, X
    28f0:	ba 81       	ldd	r27, Y+2	; 0x02
    28f2:	b1 30       	cpi	r27, 0x01	; 1
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x104>
    28f6:	40 c0       	rjmp	.+128    	; 0x2978 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x184>
    28f8:	02 80       	ldd	r0, Z+2	; 0x02
    28fa:	f3 81       	ldd	r31, Z+3	; 0x03
    28fc:	e0 2d       	mov	r30, r0
    28fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2900:	3c 81       	ldd	r19, Y+4	; 0x04
    2902:	a2 01       	movw	r20, r4
    2904:	42 0d       	add	r20, r2
    2906:	53 1d       	adc	r21, r3
    2908:	b5 01       	movw	r22, r10
    290a:	c3 01       	movw	r24, r6
    290c:	09 95       	icall
    290e:	ef 81       	ldd	r30, Y+7	; 0x07
    2910:	f8 85       	ldd	r31, Y+8	; 0x08
    2912:	f5 95       	asr	r31
    2914:	e7 95       	ror	r30
    2916:	2f ef       	ldi	r18, 0xFF	; 255
    2918:	22 1a       	sub	r2, r18
    291a:	32 0a       	sbc	r3, r18
    291c:	8c 85       	ldd	r24, Y+12	; 0x0c
    291e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2920:	c8 0e       	add	r12, r24
    2922:	d9 1e       	adc	r13, r25
    2924:	98 e0       	ldi	r25, 0x08	; 8
    2926:	29 16       	cp	r2, r25
    2928:	31 04       	cpc	r3, r1
    292a:	c9 f6       	brne	.-78     	; 0x28de <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xea>
    292c:	af ef       	ldi	r26, 0xFF	; 255
    292e:	aa 1a       	sub	r10, r26
    2930:	ba 0a       	sbc	r11, r26
    2932:	2c 85       	ldd	r18, Y+12	; 0x0c
    2934:	3d 85       	ldd	r19, Y+13	; 0x0d
    2936:	82 0e       	add	r8, r18
    2938:	93 1e       	adc	r9, r19
    293a:	39 81       	ldd	r19, Y+1	; 0x01
    293c:	3f 5f       	subi	r19, 0xFF	; 255
    293e:	39 83       	std	Y+1, r19	; 0x01
    2940:	36 30       	cpi	r19, 0x06	; 6
    2942:	09 f0       	breq	.+2      	; 0x2946 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x152>
    2944:	c0 cf       	rjmp	.-128    	; 0x28c6 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0xd2>
    2946:	2d 96       	adiw	r28, 0x0d	; 13
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	df 90       	pop	r13
    2960:	cf 90       	pop	r12
    2962:	bf 90       	pop	r11
    2964:	af 90       	pop	r10
    2966:	9f 90       	pop	r9
    2968:	8f 90       	pop	r8
    296a:	7f 90       	pop	r7
    296c:	6f 90       	pop	r6
    296e:	5f 90       	pop	r5
    2970:	4f 90       	pop	r4
    2972:	3f 90       	pop	r3
    2974:	2f 90       	pop	r2
    2976:	08 95       	ret
    2978:	04 80       	ldd	r0, Z+4	; 0x04
    297a:	f5 81       	ldd	r31, Z+5	; 0x05
    297c:	e0 2d       	mov	r30, r0
    297e:	eb 80       	ldd	r14, Y+3	; 0x03
    2980:	fc 80       	ldd	r15, Y+4	; 0x04
    2982:	0c 85       	ldd	r16, Y+12	; 0x0c
    2984:	1d 85       	ldd	r17, Y+13	; 0x0d
    2986:	98 01       	movw	r18, r16
    2988:	a6 01       	movw	r20, r12
    298a:	b4 01       	movw	r22, r8
    298c:	c3 01       	movw	r24, r6
    298e:	09 95       	icall
    2990:	be cf       	rjmp	.-132    	; 0x290e <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
    2992:	2d 81       	ldd	r18, Y+5	; 0x05
    2994:	3e 81       	ldd	r19, Y+6	; 0x06
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	9c 81       	ldd	r25, Y+4	; 0x04
    299a:	28 17       	cp	r18, r24
    299c:	39 07       	cpc	r19, r25
    299e:	09 f4       	brne	.+2      	; 0x29a2 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1ae>
    29a0:	b6 cf       	rjmp	.-148    	; 0x290e <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
    29a2:	99 85       	ldd	r25, Y+9	; 0x09
    29a4:	91 11       	cpse	r25, r1
    29a6:	b3 cf       	rjmp	.-154    	; 0x290e <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x11a>
    29a8:	d3 01       	movw	r26, r6
    29aa:	ed 91       	ld	r30, X+
    29ac:	fc 91       	ld	r31, X
    29ae:	ba 81       	ldd	r27, Y+2	; 0x02
    29b0:	b1 30       	cpi	r27, 0x01	; 1
    29b2:	21 f4       	brne	.+8      	; 0x29bc <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x1c8>
    29b4:	02 80       	ldd	r0, Z+2	; 0x02
    29b6:	f3 81       	ldd	r31, Z+3	; 0x03
    29b8:	e0 2d       	mov	r30, r0
    29ba:	a3 cf       	rjmp	.-186    	; 0x2902 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x10e>
    29bc:	04 80       	ldd	r0, Z+4	; 0x04
    29be:	f5 81       	ldd	r31, Z+5	; 0x05
    29c0:	e0 2d       	mov	r30, r0
    29c2:	ed 80       	ldd	r14, Y+5	; 0x05
    29c4:	fe 80       	ldd	r15, Y+6	; 0x06
    29c6:	dd cf       	rjmp	.-70     	; 0x2982 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)+0x18e>

000029c8 <LCDWIKI_GUI::write(unsigned char)>:
_ZN11LCDWIKI_GUI5writeEh():
    29c8:	af 92       	push	r10
    29ca:	cf 92       	push	r12
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	ec 01       	movw	r28, r24
    29da:	6a 30       	cpi	r22, 0x0A	; 10
    29dc:	c1 f4       	brne	.+48     	; 0x2a0e <LCDWIKI_GUI::write(unsigned char)+0x46>
    29de:	8c 85       	ldd	r24, Y+12	; 0x0c
    29e0:	98 e0       	ldi	r25, 0x08	; 8
    29e2:	89 9f       	mul	r24, r25
    29e4:	90 01       	movw	r18, r0
    29e6:	11 24       	eor	r1, r1
    29e8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ea:	9d 81       	ldd	r25, Y+5	; 0x05
    29ec:	82 0f       	add	r24, r18
    29ee:	93 1f       	adc	r25, r19
    29f0:	9d 83       	std	Y+5, r25	; 0x05
    29f2:	8c 83       	std	Y+4, r24	; 0x04
    29f4:	1b 82       	std	Y+3, r1	; 0x03
    29f6:	1a 82       	std	Y+2, r1	; 0x02
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	1f 91       	pop	r17
    2a02:	0f 91       	pop	r16
    2a04:	ff 90       	pop	r15
    2a06:	ef 90       	pop	r14
    2a08:	cf 90       	pop	r12
    2a0a:	af 90       	pop	r10
    2a0c:	08 95       	ret
    2a0e:	6d 30       	cpi	r22, 0x0D	; 13
    2a10:	99 f3       	breq	.-26     	; 0x29f8 <LCDWIKI_GUI::write(unsigned char)+0x30>
    2a12:	26 2f       	mov	r18, r22
    2a14:	e8 84       	ldd	r14, Y+8	; 0x08
    2a16:	f9 84       	ldd	r15, Y+9	; 0x09
    2a18:	0e 81       	ldd	r16, Y+6	; 0x06
    2a1a:	1f 81       	ldd	r17, Y+7	; 0x07
    2a1c:	4c 81       	ldd	r20, Y+4	; 0x04
    2a1e:	5d 81       	ldd	r21, Y+5	; 0x05
    2a20:	6a 81       	ldd	r22, Y+2	; 0x02
    2a22:	7b 81       	ldd	r23, Y+3	; 0x03
    2a24:	ad 84       	ldd	r10, Y+13	; 0x0d
    2a26:	cc 84       	ldd	r12, Y+12	; 0x0c
    2a28:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <LCDWIKI_GUI::Draw_Char(int, int, unsigned char, unsigned int, unsigned int, unsigned char, bool)>
    2a2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	9b 81       	ldd	r25, Y+3	; 0x03
    2a32:	36 e0       	ldi	r19, 0x06	; 6
    2a34:	23 9f       	mul	r18, r19
    2a36:	80 0d       	add	r24, r0
    2a38:	91 1d       	adc	r25, r1
    2a3a:	11 24       	eor	r1, r1
    2a3c:	9b 83       	std	Y+3, r25	; 0x03
    2a3e:	8a 83       	std	Y+2, r24	; 0x02
    2a40:	db cf       	rjmp	.-74     	; 0x29f8 <LCDWIKI_GUI::write(unsigned char)+0x30>

00002a42 <LCDWIKI_GUI::Get_Display_Width() const>:
_ZNK11LCDWIKI_GUI17Get_Display_WidthEv():
    2a42:	dc 01       	movw	r26, r24
    2a44:	ed 91       	ld	r30, X+
    2a46:	fc 91       	ld	r31, X
    2a48:	06 84       	ldd	r0, Z+14	; 0x0e
    2a4a:	f7 85       	ldd	r31, Z+15	; 0x0f
    2a4c:	e0 2d       	mov	r30, r0
    2a4e:	09 94       	ijmp

00002a50 <LCDWIKI_GUI::Print(unsigned char*, int, int)>:
_ZN11LCDWIKI_GUI5PrintEPhii():
    2a50:	af 92       	push	r10
    2a52:	bf 92       	push	r11
    2a54:	cf 92       	push	r12
    2a56:	df 92       	push	r13
    2a58:	ef 92       	push	r14
    2a5a:	ff 92       	push	r15
    2a5c:	0f 93       	push	r16
    2a5e:	1f 93       	push	r17
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	ec 01       	movw	r28, r24
    2a66:	6b 01       	movw	r12, r22
    2a68:	8a 01       	movw	r16, r20
    2a6a:	79 01       	movw	r14, r18
    2a6c:	ca 01       	movw	r24, r20
    2a6e:	8e 50       	subi	r24, 0x0E	; 14
    2a70:	97 42       	sbci	r25, 0x27	; 39
    2a72:	02 97       	sbiw	r24, 0x02	; 2
    2a74:	00 f5       	brcc	.+64     	; 0x2ab6 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>
    2a76:	fb 01       	movw	r30, r22
    2a78:	01 90       	ld	r0, Z+
    2a7a:	00 20       	and	r0, r0
    2a7c:	e9 f7       	brne	.-6      	; 0x2a78 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x28>
    2a7e:	31 97       	sbiw	r30, 0x01	; 1
    2a80:	e6 1b       	sub	r30, r22
    2a82:	f7 0b       	sbc	r31, r23
    2a84:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a86:	26 e0       	ldi	r18, 0x06	; 6
    2a88:	82 9f       	mul	r24, r18
    2a8a:	c0 01       	movw	r24, r0
    2a8c:	11 24       	eor	r1, r1
    2a8e:	8e 9f       	mul	r24, r30
    2a90:	50 01       	movw	r10, r0
    2a92:	8f 9f       	mul	r24, r31
    2a94:	b0 0c       	add	r11, r0
    2a96:	9e 9f       	mul	r25, r30
    2a98:	b0 0c       	add	r11, r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <LCDWIKI_GUI::Get_Display_Width() const>
    2aa2:	8a 19       	sub	r24, r10
    2aa4:	9b 09       	sbc	r25, r11
    2aa6:	0e 30       	cpi	r16, 0x0E	; 14
    2aa8:	17 42       	sbci	r17, 0x27	; 39
    2aaa:	19 f5       	brne	.+70     	; 0x2af2 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0xa2>
    2aac:	97 fd       	sbrc	r25, 7
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	8c 01       	movw	r16, r24
    2ab2:	15 95       	asr	r17
    2ab4:	07 95       	ror	r16
_ZN11LCDWIKI_GUI15Set_Text_CousurEii():
    2ab6:	1b 83       	std	Y+3, r17	; 0x03
    2ab8:	0a 83       	std	Y+2, r16	; 0x02
    2aba:	fd 82       	std	Y+5, r15	; 0x05
    2abc:	ec 82       	std	Y+4, r14	; 0x04
    2abe:	86 01       	movw	r16, r12
    2ac0:	78 01       	movw	r14, r16
    2ac2:	ec 18       	sub	r14, r12
    2ac4:	fd 08       	sbc	r15, r13
_ZN11LCDWIKI_GUI5PrintEPhii():
    2ac6:	f8 01       	movw	r30, r16
    2ac8:	61 91       	ld	r22, Z+
    2aca:	8f 01       	movw	r16, r30
    2acc:	66 23       	and	r22, r22
    2ace:	29 f0       	breq	.+10     	; 0x2ada <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x8a>
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <LCDWIKI_GUI::write(unsigned char)>
    2ad6:	89 2b       	or	r24, r25
    2ad8:	99 f7       	brne	.-26     	; 0x2ac0 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x70>
    2ada:	c7 01       	movw	r24, r14
    2adc:	df 91       	pop	r29
    2ade:	cf 91       	pop	r28
    2ae0:	1f 91       	pop	r17
    2ae2:	0f 91       	pop	r16
    2ae4:	ff 90       	pop	r15
    2ae6:	ef 90       	pop	r14
    2ae8:	df 90       	pop	r13
    2aea:	cf 90       	pop	r12
    2aec:	bf 90       	pop	r11
    2aee:	af 90       	pop	r10
    2af0:	08 95       	ret
    2af2:	8c 01       	movw	r16, r24
    2af4:	01 50       	subi	r16, 0x01	; 1
    2af6:	11 09       	sbc	r17, r1
    2af8:	de cf       	rjmp	.-68     	; 0x2ab6 <LCDWIKI_GUI::Print(unsigned char*, int, int)+0x66>

00002afa <LCDWIKI_GUI::Print_String(String, int, int)>:
_ZN11LCDWIKI_GUI12Print_StringE6Stringii():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:659
}

//print string
void LCDWIKI_GUI::Print_String(String st, int16_t x, int16_t y)
{
	Print((uint8_t *)(st.c_str()), x, y);
    2afa:	fb 01       	movw	r30, r22
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <LCDWIKI_GUI::Print(unsigned char*, int, int)>

00002b04 <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)>:
_ZN11LCDWIKI_GUI16Print_Number_IntEliiihi():
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:664
}

//print int number
void LCDWIKI_GUI::Print_Number_Int(long num, int16_t x, int16_t y, int16_t length, uint8_t filler, int16_t system)
{
    2b04:	2f 92       	push	r2
    2b06:	3f 92       	push	r3
    2b08:	4f 92       	push	r4
    2b0a:	5f 92       	push	r5
    2b0c:	6f 92       	push	r6
    2b0e:	7f 92       	push	r7
    2b10:	8f 92       	push	r8
    2b12:	9f 92       	push	r9
    2b14:	af 92       	push	r10
    2b16:	bf 92       	push	r11
    2b18:	cf 92       	push	r12
    2b1a:	df 92       	push	r13
    2b1c:	ef 92       	push	r14
    2b1e:	ff 92       	push	r15
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	6f 97       	sbiw	r28, 0x1f	; 31
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	9d 8f       	std	Y+29, r25	; 0x1d
    2b3a:	8c 8f       	std	Y+28, r24	; 0x1c
    2b3c:	3f 8f       	std	Y+31, r19	; 0x1f
    2b3e:	2e 8f       	std	Y+30, r18	; 0x1e
    2b40:	18 01       	movw	r2, r16
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:665
	uint8_t st[27] = {0};
    2b42:	ce 01       	movw	r24, r28
    2b44:	01 96       	adiw	r24, 0x01	; 1
    2b46:	2c 01       	movw	r4, r24
    2b48:	8b e1       	ldi	r24, 0x1B	; 27
    2b4a:	d2 01       	movw	r26, r4
    2b4c:	1d 92       	st	X+, r1
    2b4e:	8a 95       	dec	r24
    2b50:	e9 f7       	brne	.-6      	; 0x2b4c <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x48>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:670
	uint8_t *p = st+26;
	boolean flag = false;
	int16_t len = 0,nlen = 0,left_len = 0,i = 0;
	*p = '\0';
	if(0 == num)
    2b52:	41 15       	cp	r20, r1
    2b54:	51 05       	cpc	r21, r1
    2b56:	61 05       	cpc	r22, r1
    2b58:	71 05       	cpc	r23, r1
    2b5a:	49 f5       	brne	.+82     	; 0x2bae <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0xaa>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:672
	{
		*(--p) = '0';
    2b5c:	80 e3       	ldi	r24, 0x30	; 48
    2b5e:	8a 8f       	std	Y+26, r24	; 0x1a
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:667
//print int number
void LCDWIKI_GUI::Print_Number_Int(long num, int16_t x, int16_t y, int16_t length, uint8_t filler, int16_t system)
{
	uint8_t st[27] = {0};
	uint8_t *p = st+26;
	boolean flag = false;
    2b60:	d1 2c       	mov	r13, r1
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:673
	int16_t len = 0,nlen = 0,left_len = 0,i = 0;
	*p = '\0';
	if(0 == num)
	{
		*(--p) = '0';
		len = 1;
    2b62:	66 24       	eor	r6, r6
    2b64:	63 94       	inc	r6
    2b66:	71 2c       	mov	r7, r1
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:672
	boolean flag = false;
	int16_t len = 0,nlen = 0,left_len = 0,i = 0;
	*p = '\0';
	if(0 == num)
	{
		*(--p) = '0';
    2b68:	8e 01       	movw	r16, r28
    2b6a:	06 5e       	subi	r16, 0xE6	; 230
    2b6c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:700
	}
	if(flag)
	{
		*(--p) = '-';
	}
	if(length > (len + flag + 1))
    2b6e:	2d 2d       	mov	r18, r13
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	a9 01       	movw	r20, r18
    2b74:	46 0d       	add	r20, r6
    2b76:	57 1d       	adc	r21, r7
    2b78:	ca 01       	movw	r24, r20
    2b7a:	01 96       	adiw	r24, 0x01	; 1
    2b7c:	8e 15       	cp	r24, r14
    2b7e:	9f 05       	cpc	r25, r15
    2b80:	0c f0       	brlt	.+2      	; 0x2b84 <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x80>
    2b82:	76 c0       	rjmp	.+236    	; 0x2c70 <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x16c>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:702
	{
		if(length > sizeof(st))
    2b84:	ec e1       	ldi	r30, 0x1C	; 28
    2b86:	ee 16       	cp	r14, r30
    2b88:	f1 04       	cpc	r15, r1
    2b8a:	0c f4       	brge	.+2      	; 0x2b8e <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x8a>
    2b8c:	4e c0       	rjmp	.+156    	; 0x2c2a <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x126>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:704
		{
			nlen = sizeof(st) - len - flag - 1;
    2b8e:	8a e1       	ldi	r24, 0x1A	; 26
    2b90:	e8 2e       	mov	r14, r24
    2b92:	f1 2c       	mov	r15, r1
    2b94:	e4 1a       	sub	r14, r20
    2b96:	f5 0a       	sbc	r15, r21
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:710
		}
		else
		{
			nlen = length - len - flag - 1;
		}
		for(i = 0;i< nlen;i++)
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:710 (discriminator 3)
    2b9c:	8e 15       	cp	r24, r14
    2b9e:	9f 05       	cpc	r25, r15
    2ba0:	0c f0       	brlt	.+2      	; 0x2ba4 <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0xa0>
    2ba2:	4b c0       	rjmp	.+150    	; 0x2c3a <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x136>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:712 (discriminator 2)
		{
			*(--p) = filler;
    2ba4:	d8 01       	movw	r26, r16
    2ba6:	ce 92       	st	-X, r12
    2ba8:	8d 01       	movw	r16, r26
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:710 (discriminator 2)
		}
		else
		{
			nlen = length - len - flag - 1;
		}
		for(i = 0;i< nlen;i++)
    2baa:	01 96       	adiw	r24, 0x01	; 1
    2bac:	f7 cf       	rjmp	.-18     	; 0x2b9c <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x98>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:667
//print int number
void LCDWIKI_GUI::Print_Number_Int(long num, int16_t x, int16_t y, int16_t length, uint8_t filler, int16_t system)
{
	uint8_t st[27] = {0};
	uint8_t *p = st+26;
	boolean flag = false;
    2bae:	d1 2c       	mov	r13, r1
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:677
		*(--p) = '0';
		len = 1;
	}
	else
	{
		if(num < 0)
    2bb0:	77 ff       	sbrs	r23, 7
    2bb2:	09 c0       	rjmp	.+18     	; 0x2bc6 <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0xc2>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:679
		{
			num = -num;
    2bb4:	70 95       	com	r23
    2bb6:	60 95       	com	r22
    2bb8:	50 95       	com	r21
    2bba:	41 95       	neg	r20
    2bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bbe:	6f 4f       	sbci	r22, 0xFF	; 255
    2bc0:	7f 4f       	sbci	r23, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:680
			flag = true;
    2bc2:	dd 24       	eor	r13, r13
    2bc4:	d3 94       	inc	r13
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:667
//print int number
void LCDWIKI_GUI::Print_Number_Int(long num, int16_t x, int16_t y, int16_t length, uint8_t filler, int16_t system)
{
	uint8_t st[27] = {0};
	uint8_t *p = st+26;
	boolean flag = false;
    2bc6:	71 2c       	mov	r7, r1
    2bc8:	61 2c       	mov	r6, r1
    2bca:	8e 01       	movw	r16, r28
    2bcc:	05 5e       	subi	r16, 0xE5	; 229
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:685
			flag = true;
		}		
	}
	while((num > 0) && (len < 10))
	{
		if(num%system > 9)
    2bd0:	45 01       	movw	r8, r10
    2bd2:	bb 0c       	add	r11, r11
    2bd4:	aa 08       	sbc	r10, r10
    2bd6:	bb 08       	sbc	r11, r11
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:683 (discriminator 1)
		{
			num = -num;
			flag = true;
		}		
	}
	while((num > 0) && (len < 10))
    2bd8:	ba e0       	ldi	r27, 0x0A	; 10
    2bda:	6b 16       	cp	r6, r27
    2bdc:	71 04       	cpc	r7, r1
    2bde:	d9 f0       	breq	.+54     	; 0x2c16 <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x112>
    2be0:	cb 01       	movw	r24, r22
    2be2:	ba 01       	movw	r22, r20
    2be4:	a5 01       	movw	r20, r10
    2be6:	94 01       	movw	r18, r8
    2be8:	0e 94 a8 2c 	call	0x5950	; 0x5950 <__divmodsi4>
    2bec:	fa 01       	movw	r30, r20
    2bee:	01 50       	subi	r16, 0x01	; 1
    2bf0:	11 09       	sbc	r17, r1
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:685
	{
		if(num%system > 9)
    2bf2:	6a 30       	cpi	r22, 0x0A	; 10
    2bf4:	71 05       	cpc	r23, r1
    2bf6:	81 05       	cpc	r24, r1
    2bf8:	91 05       	cpc	r25, r1
    2bfa:	ac f0       	brlt	.+42     	; 0x2c26 <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x122>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:687
		{
			*(--p) = 'A' + (num%system-10);
    2bfc:	69 5c       	subi	r22, 0xC9	; 201
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:691
		}
		else
		{
			*(--p) = '0' + num%system;
    2bfe:	d8 01       	movw	r26, r16
    2c00:	6c 93       	st	X, r22
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:693
		}
		num = num/system;
    2c02:	a9 01       	movw	r20, r18
    2c04:	bf 01       	movw	r22, r30
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:694
		len++;
    2c06:	bf ef       	ldi	r27, 0xFF	; 255
    2c08:	6b 1a       	sub	r6, r27
    2c0a:	7b 0a       	sbc	r7, r27
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:683
		{
			num = -num;
			flag = true;
		}		
	}
	while((num > 0) && (len < 10))
    2c0c:	14 16       	cp	r1, r20
    2c0e:	15 06       	cpc	r1, r21
    2c10:	16 06       	cpc	r1, r22
    2c12:	17 06       	cpc	r1, r23
    2c14:	0c f3       	brlt	.-62     	; 0x2bd8 <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0xd4>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:696
			*(--p) = '0' + num%system;
		}
		num = num/system;
		len++;
	}
	if(flag)
    2c16:	dd 20       	and	r13, r13
    2c18:	09 f4       	brne	.+2      	; 0x2c1c <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x118>
    2c1a:	a9 cf       	rjmp	.-174    	; 0x2b6e <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x6a>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:698
	{
		*(--p) = '-';
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	8d e2       	ldi	r24, 0x2D	; 45
    2c20:	82 93       	st	-Z, r24
    2c22:	8f 01       	movw	r16, r30
    2c24:	a4 cf       	rjmp	.-184    	; 0x2b6e <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x6a>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:691
		{
			*(--p) = 'A' + (num%system-10);
		}
		else
		{
			*(--p) = '0' + num%system;
    2c26:	60 5d       	subi	r22, 0xD0	; 208
    2c28:	ea cf       	rjmp	.-44     	; 0x2bfe <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0xfa>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:708
		{
			nlen = sizeof(st) - len - flag - 1;
		}
		else
		{
			nlen = length - len - flag - 1;
    2c2a:	e6 18       	sub	r14, r6
    2c2c:	f7 08       	sbc	r15, r7
    2c2e:	e2 1a       	sub	r14, r18
    2c30:	f3 0a       	sbc	r15, r19
    2c32:	f1 e0       	ldi	r31, 0x01	; 1
    2c34:	ef 1a       	sub	r14, r31
    2c36:	f1 08       	sbc	r15, r1
    2c38:	af cf       	rjmp	.-162    	; 0x2b98 <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x94>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:714
		}
		for(i = 0;i< nlen;i++)
		{
			*(--p) = filler;
		}
		left_len = sizeof(st) - nlen - len - flag - 1;
    2c3a:	8a e1       	ldi	r24, 0x1A	; 26
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	82 1b       	sub	r24, r18
    2c40:	93 0b       	sbc	r25, r19
    2c42:	86 19       	sub	r24, r6
    2c44:	97 09       	sbc	r25, r7
    2c46:	8e 19       	sub	r24, r14
    2c48:	9f 09       	sbc	r25, r15
    2c4a:	d2 01       	movw	r26, r4
    2c4c:	a8 0f       	add	r26, r24
    2c4e:	b9 1f       	adc	r27, r25
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:710
		}
		else
		{
			nlen = length - len - flag - 1;
		}
		for(i = 0;i< nlen;i++)
    2c50:	f2 01       	movw	r30, r4
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:720
	}	
	else
	{
		left_len = sizeof(st) - len - flag - 1;
	}
	for(i = 0; i < (sizeof(st) - left_len);i++)
    2c52:	2b e1       	ldi	r18, 0x1B	; 27
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	a9 01       	movw	r20, r18
    2c58:	48 1b       	sub	r20, r24
    2c5a:	59 0b       	sbc	r21, r25
    2c5c:	ca 01       	movw	r24, r20
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:720 (discriminator 3)
    2c5e:	9f 01       	movw	r18, r30
    2c60:	24 19       	sub	r18, r4
    2c62:	35 09       	sbc	r19, r5
    2c64:	28 17       	cp	r18, r24
    2c66:	39 07       	cpc	r19, r25
    2c68:	40 f4       	brcc	.+16     	; 0x2c7a <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x176>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:722 (discriminator 2)
	{
		st[i] = st[left_len + i];
    2c6a:	2d 91       	ld	r18, X+
    2c6c:	21 93       	st	Z+, r18
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:720 (discriminator 2)
	}	
	else
	{
		left_len = sizeof(st) - len - flag - 1;
	}
	for(i = 0; i < (sizeof(st) - left_len);i++)
    2c6e:	f7 cf       	rjmp	.-18     	; 0x2c5e <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x15a>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:718
		}
		left_len = sizeof(st) - nlen - len - flag - 1;
	}	
	else
	{
		left_len = sizeof(st) - len - flag - 1;
    2c70:	8a e1       	ldi	r24, 0x1A	; 26
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	84 1b       	sub	r24, r20
    2c76:	95 0b       	sbc	r25, r21
    2c78:	e8 cf       	rjmp	.-48     	; 0x2c4a <LCDWIKI_GUI::Print_Number_Int(long, int, int, int, unsigned char, int)+0x146>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:724
	}
	for(i = 0; i < (sizeof(st) - left_len);i++)
	{
		st[i] = st[left_len + i];
	}
	st[i] = '\0';
    2c7a:	84 0d       	add	r24, r4
    2c7c:	95 1d       	adc	r25, r5
    2c7e:	dc 01       	movw	r26, r24
    2c80:	1c 92       	st	X, r1
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:725
	Print(st, x, y);
    2c82:	91 01       	movw	r18, r2
    2c84:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2c86:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2c88:	b2 01       	movw	r22, r4
    2c8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c8c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c8e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <LCDWIKI_GUI::Print(unsigned char*, int, int)>
/home/noah/Arduino/libraries/LCDWIKI_GUI/LCDWIKI_GUI.cpp:726
}
    2c92:	6f 96       	adiw	r28, 0x1f	; 31
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	f8 94       	cli
    2c98:	de bf       	out	0x3e, r29	; 62
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	cd bf       	out	0x3d, r28	; 61
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	df 90       	pop	r13
    2cac:	cf 90       	pop	r12
    2cae:	bf 90       	pop	r11
    2cb0:	af 90       	pop	r10
    2cb2:	9f 90       	pop	r9
    2cb4:	8f 90       	pop	r8
    2cb6:	7f 90       	pop	r7
    2cb8:	6f 90       	pop	r6
    2cba:	5f 90       	pop	r5
    2cbc:	4f 90       	pop	r4
    2cbe:	3f 90       	pop	r3
    2cc0:	2f 90       	pop	r2
    2cc2:	08 95       	ret

00002cc4 <LCDWIKI_SPI::Color_To_565(unsigned char, unsigned char, unsigned char)>:
_ZN11LCDWIKI_SPI12Color_To_565Ehhh():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1387
		{
			writeData8(SH1106_buffer[i*WIDTH+n]); 
		}
	} 
	CS_IDLE;
}
    2cc4:	38 e0       	ldi	r19, 0x08	; 8
    2cc6:	43 9f       	mul	r20, r19
    2cc8:	c0 01       	movw	r24, r0
    2cca:	11 24       	eor	r1, r1
    2ccc:	80 7e       	andi	r24, 0xE0	; 224
    2cce:	97 70       	andi	r25, 0x07	; 7
    2cd0:	26 95       	lsr	r18
    2cd2:	26 95       	lsr	r18
    2cd4:	26 95       	lsr	r18
    2cd6:	82 2b       	or	r24, r18
    2cd8:	70 e0       	ldi	r23, 0x00	; 0
    2cda:	76 2f       	mov	r23, r22
    2cdc:	66 27       	eor	r22, r22
    2cde:	66 27       	eor	r22, r22
    2ce0:	78 7f       	andi	r23, 0xF8	; 248
    2ce2:	86 2b       	or	r24, r22
    2ce4:	97 2b       	or	r25, r23
    2ce6:	08 95       	ret

00002ce8 <LCDWIKI_SPI::Get_Width() const>:
_ZNK11LCDWIKI_SPI9Get_WidthEv():
    2ce8:	fc 01       	movw	r30, r24
    2cea:	84 89       	ldd	r24, Z+20	; 0x14
    2cec:	95 89       	ldd	r25, Z+21	; 0x15
    2cee:	08 95       	ret

00002cf0 <LCDWIKI_SPI::Get_Height() const>:
_ZNK11LCDWIKI_SPI10Get_HeightEv():
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	86 89       	ldd	r24, Z+22	; 0x16
    2cf4:	97 89       	ldd	r25, Z+23	; 0x17
    2cf6:	08 95       	ret

00002cf8 <SPIClass::setClockDivider(unsigned char)>:
_ZN8SPIClass15setClockDividerEh():
    2cf8:	9c b5       	in	r25, 0x2c	; 44
    2cfa:	9c 7f       	andi	r25, 0xFC	; 252
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	23 70       	andi	r18, 0x03	; 3
    2d00:	92 2b       	or	r25, r18
    2d02:	9c bd       	out	0x2c, r25	; 44
    2d04:	9d b5       	in	r25, 0x2d	; 45
    2d06:	82 fb       	bst	r24, 2
    2d08:	22 27       	eor	r18, r18
    2d0a:	20 f9       	bld	r18, 0
    2d0c:	89 2f       	mov	r24, r25
    2d0e:	8e 7f       	andi	r24, 0xFE	; 254
    2d10:	82 2b       	or	r24, r18
    2d12:	8d bd       	out	0x2d, r24	; 45
    2d14:	08 95       	ret

00002d16 <LCDWIKI_SPI::LCDWIKI_SPI(unsigned int, signed char, signed char, signed char, signed char)>:
_ZN11LCDWIKI_SPIC2Ejaaaa():
    2d16:	cf 92       	push	r12
    2d18:	df 92       	push	r13
    2d1a:	ef 92       	push	r14
    2d1c:	ff 92       	push	r15
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	ec 01       	movw	r28, r24
    2d28:	6b 01       	movw	r12, r22
    2d2a:	f4 2e       	mov	r15, r20
    2d2c:	12 2f       	mov	r17, r18
    2d2e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <LCDWIKI_GUI::LCDWIKI_GUI()>
    2d32:	87 e1       	ldi	r24, 0x17	; 23
    2d34:	92 e0       	ldi	r25, 0x02	; 2
    2d36:	99 83       	std	Y+1, r25	; 0x01
    2d38:	88 83       	st	Y, r24
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e9 5b       	subi	r30, 0xB9	; 185
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	f0 82       	st	Z, r15
    2d42:	31 96       	adiw	r30, 0x01	; 1
    2d44:	10 83       	st	Z, r17
    2d46:	31 96       	adiw	r30, 0x01	; 1
    2d48:	8f ef       	ldi	r24, 0xFF	; 255
    2d4a:	80 83       	st	Z, r24
    2d4c:	31 96       	adiw	r30, 0x01	; 1
    2d4e:	80 83       	st	Z, r24
    2d50:	31 96       	adiw	r30, 0x01	; 1
    2d52:	80 83       	st	Z, r24
    2d54:	31 96       	adiw	r30, 0x01	; 1
    2d56:	00 83       	st	Z, r16
    2d58:	31 96       	adiw	r30, 0x01	; 1
    2d5a:	e0 82       	st	Z, r14
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	8e 8f       	std	Y+30, r24	; 0x1e
    2d60:	da aa       	std	Y+50, r13	; 0x32
    2d62:	c9 aa       	std	Y+49, r12	; 0x31
    2d64:	8f 2d       	mov	r24, r15
    2d66:	0f 2c       	mov	r0, r15
    2d68:	00 0c       	add	r0, r0
    2d6a:	99 0b       	sbc	r25, r25
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	ec 5b       	subi	r30, 0xBC	; 188
    2d70:	f6 4f       	sbci	r31, 0xF6	; 246
    2d72:	e4 91       	lpm	r30, Z
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	ee 0f       	add	r30, r30
    2d78:	ff 1f       	adc	r31, r31
    2d7a:	e5 5a       	subi	r30, 0xA5	; 165
    2d7c:	f6 4f       	sbci	r31, 0xF6	; 246
    2d7e:	a5 91       	lpm	r26, Z+
    2d80:	b4 91       	lpm	r27, Z
    2d82:	bc ab       	std	Y+52, r27	; 0x34
    2d84:	ab ab       	std	Y+51, r26	; 0x33
    2d86:	fc 01       	movw	r30, r24
    2d88:	e3 5d       	subi	r30, 0xD3	; 211
    2d8a:	f6 4f       	sbci	r31, 0xF6	; 246
    2d8c:	64 91       	lpm	r22, Z
    2d8e:	6d af       	std	Y+61, r22	; 0x3d
    2d90:	fe 01       	movw	r30, r28
    2d92:	ee 5b       	subi	r30, 0xBE	; 190
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	86 2f       	mov	r24, r22
    2d98:	80 95       	com	r24
    2d9a:	80 83       	st	Z, r24
    2d9c:	9e 01       	movw	r18, r28
    2d9e:	2d 5b       	subi	r18, 0xBD	; 189
    2da0:	3f 4f       	sbci	r19, 0xFF	; 255
    2da2:	17 ff       	sbrs	r17, 7
    2da4:	69 c0       	rjmp	.+210    	; 0x2e78 <LCDWIKI_SPI::LCDWIKI_SPI(unsigned int, signed char, signed char, signed char, signed char)+0x162>
    2da6:	1e aa       	std	Y+54, r1	; 0x36
    2da8:	1d aa       	std	Y+53, r1	; 0x35
    2daa:	1e ae       	std	Y+62, r1	; 0x3e
    2dac:	f9 01       	movw	r30, r18
    2dae:	10 82       	st	Z, r1
    2db0:	18 ae       	std	Y+56, r1	; 0x38
    2db2:	1f aa       	std	Y+55, r1	; 0x37
    2db4:	1f ae       	std	Y+63, r1	; 0x3f
    2db6:	fe 01       	movw	r30, r28
    2db8:	ec 5b       	subi	r30, 0xBC	; 188
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	10 82       	st	Z, r1
    2dbe:	1a ae       	std	Y+58, r1	; 0x3a
    2dc0:	19 ae       	std	Y+57, r1	; 0x39
    2dc2:	34 97       	sbiw	r30, 0x04	; 4
    2dc4:	10 82       	st	Z, r1
    2dc6:	35 96       	adiw	r30, 0x05	; 5
    2dc8:	10 82       	st	Z, r1
    2dca:	1c ae       	std	Y+60, r1	; 0x3c
    2dcc:	1b ae       	std	Y+59, r1	; 0x3b
    2dce:	34 97       	sbiw	r30, 0x04	; 4
    2dd0:	10 82       	st	Z, r1
    2dd2:	35 96       	adiw	r30, 0x05	; 5
    2dd4:	10 82       	st	Z, r1
    2dd6:	8c 91       	ld	r24, X
    2dd8:	68 2b       	or	r22, r24
    2dda:	6c 93       	st	X, r22
    2ddc:	ed a9       	ldd	r30, Y+53	; 0x35
    2dde:	fe a9       	ldd	r31, Y+54	; 0x36
    2de0:	80 81       	ld	r24, Z
    2de2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2de4:	89 2b       	or	r24, r25
    2de6:	80 83       	st	Z, r24
    2de8:	61 e0       	ldi	r22, 0x01	; 1
    2dea:	8f 2d       	mov	r24, r15
    2dec:	0e 94 c2 29 	call	0x5384	; 0x5384 <pinMode>
    2df0:	61 e0       	ldi	r22, 0x01	; 1
    2df2:	81 2f       	mov	r24, r17
    2df4:	0e 94 c2 29 	call	0x5384	; 0x5384 <pinMode>
    2df8:	07 fd       	sbrc	r16, 7
    2dfa:	08 c0       	rjmp	.+16     	; 0x2e0c <LCDWIKI_SPI::LCDWIKI_SPI(unsigned int, signed char, signed char, signed char, signed char)+0xf6>
    2dfc:	61 e0       	ldi	r22, 0x01	; 1
    2dfe:	80 2f       	mov	r24, r16
    2e00:	0e 94 fe 29 	call	0x53fc	; 0x53fc <digitalWrite>
    2e04:	61 e0       	ldi	r22, 0x01	; 1
    2e06:	80 2f       	mov	r24, r16
    2e08:	0e 94 c2 29 	call	0x5384	; 0x5384 <pinMode>
    2e0c:	e7 fc       	sbrc	r14, 7
    2e0e:	04 c0       	rjmp	.+8      	; 0x2e18 <LCDWIKI_SPI::LCDWIKI_SPI(unsigned int, signed char, signed char, signed char, signed char)+0x102>
    2e10:	61 e0       	ldi	r22, 0x01	; 1
    2e12:	8e 2d       	mov	r24, r14
    2e14:	0e 94 c2 29 	call	0x5384	; 0x5384 <pinMode>
    2e18:	0e 94 c8 12 	call	0x2590	; 0x2590 <SPIClass::begin()>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <SPIClass::setClockDivider(unsigned char)>
_ZN8SPIClass11setBitOrderEh():
    2e22:	8c b5       	in	r24, 0x2c	; 44
    2e24:	8f 7d       	andi	r24, 0xDF	; 223
    2e26:	8c bd       	out	0x2c, r24	; 44
_ZN8SPIClass11setDataModeEh():
    2e28:	8c b5       	in	r24, 0x2c	; 44
    2e2a:	83 7f       	andi	r24, 0xF3	; 243
    2e2c:	8c bd       	out	0x2c, r24	; 44
_ZN11LCDWIKI_SPIC2Ejaaaa():
    2e2e:	1e 86       	std	Y+14, r1	; 0x0e
    2e30:	1f 86       	std	Y+15, r1	; 0x0f
    2e32:	19 8e       	std	Y+25, r1	; 0x19
    2e34:	18 8e       	std	Y+24, r1	; 0x18
    2e36:	86 e0       	ldi	r24, 0x06	; 6
    2e38:	8c 9d       	mul	r24, r12
    2e3a:	f0 01       	movw	r30, r0
    2e3c:	8d 9d       	mul	r24, r13
    2e3e:	f0 0d       	add	r31, r0
    2e40:	11 24       	eor	r1, r1
    2e42:	ea 5c       	subi	r30, 0xCA	; 202
    2e44:	fe 4f       	sbci	r31, 0xFE	; 254
    2e46:	80 81       	ld	r24, Z
    2e48:	91 81       	ldd	r25, Z+1	; 0x01
    2e4a:	9d 8f       	std	Y+29, r25	; 0x1d
    2e4c:	8c 8f       	std	Y+28, r24	; 0x1c
    2e4e:	22 81       	ldd	r18, Z+2	; 0x02
    2e50:	33 81       	ldd	r19, Z+3	; 0x03
    2e52:	39 8b       	std	Y+17, r19	; 0x11
    2e54:	28 8b       	std	Y+16, r18	; 0x10
    2e56:	84 81       	ldd	r24, Z+4	; 0x04
    2e58:	95 81       	ldd	r25, Z+5	; 0x05
    2e5a:	9b 8b       	std	Y+19, r25	; 0x13
    2e5c:	8a 8b       	std	Y+18, r24	; 0x12
    2e5e:	3d 8b       	std	Y+21, r19	; 0x15
    2e60:	2c 8b       	std	Y+20, r18	; 0x14
    2e62:	9f 8b       	std	Y+23, r25	; 0x17
    2e64:	8e 8b       	std	Y+22, r24	; 0x16
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	1f 91       	pop	r17
    2e6c:	0f 91       	pop	r16
    2e6e:	ff 90       	pop	r15
    2e70:	ef 90       	pop	r14
    2e72:	df 90       	pop	r13
    2e74:	cf 90       	pop	r12
    2e76:	08 95       	ret
    2e78:	81 2f       	mov	r24, r17
    2e7a:	01 2e       	mov	r0, r17
    2e7c:	00 0c       	add	r0, r0
    2e7e:	99 0b       	sbc	r25, r25
    2e80:	fc 01       	movw	r30, r24
    2e82:	ec 5b       	subi	r30, 0xBC	; 188
    2e84:	f6 4f       	sbci	r31, 0xF6	; 246
    2e86:	e4 91       	lpm	r30, Z
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	ee 0f       	add	r30, r30
    2e8c:	ff 1f       	adc	r31, r31
    2e8e:	e5 5a       	subi	r30, 0xA5	; 165
    2e90:	f6 4f       	sbci	r31, 0xF6	; 246
    2e92:	45 91       	lpm	r20, Z+
    2e94:	54 91       	lpm	r21, Z
    2e96:	5e ab       	std	Y+54, r21	; 0x36
    2e98:	4d ab       	std	Y+53, r20	; 0x35
    2e9a:	fc 01       	movw	r30, r24
    2e9c:	e3 5d       	subi	r30, 0xD3	; 211
    2e9e:	f6 4f       	sbci	r31, 0xF6	; 246
    2ea0:	e4 91       	lpm	r30, Z
    2ea2:	ee af       	std	Y+62, r30	; 0x3e
    2ea4:	8e 2f       	mov	r24, r30
    2ea6:	80 95       	com	r24
    2ea8:	f9 01       	movw	r30, r18
    2eaa:	80 83       	st	Z, r24
    2eac:	81 cf       	rjmp	.-254    	; 0x2db0 <LCDWIKI_SPI::LCDWIKI_SPI(unsigned int, signed char, signed char, signed char, signed char)+0x9a>

00002eae <LCDWIKI_SPI::Led_control(bool)>:
_ZN11LCDWIKI_SPI11Led_controlEb():
    2eae:	83 5b       	subi	r24, 0xB3	; 179
    2eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	80 81       	ld	r24, Z
    2eb6:	87 fd       	sbrc	r24, 7
    2eb8:	07 c0       	rjmp	.+14     	; 0x2ec8 <LCDWIKI_SPI::Led_control(bool)+0x1a>
    2eba:	66 23       	and	r22, r22
    2ebc:	19 f0       	breq	.+6      	; 0x2ec4 <LCDWIKI_SPI::Led_control(bool)+0x16>
    2ebe:	61 e0       	ldi	r22, 0x01	; 1
    2ec0:	0c 94 fe 29 	jmp	0x53fc	; 0x53fc <digitalWrite>
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	fc cf       	rjmp	.-8      	; 0x2ec0 <LCDWIKI_SPI::Led_control(bool)+0x12>
    2ec8:	08 95       	ret

00002eca <LCDWIKI_SPI::Spi_Write(unsigned char)>:
_ZN11LCDWIKI_SPI9Spi_WriteEh():
    2eca:	cf 92       	push	r12
    2ecc:	df 92       	push	r13
    2ece:	ef 92       	push	r14
    2ed0:	ff 92       	push	r15
    2ed2:	0f 93       	push	r16
    2ed4:	1f 93       	push	r17
    2ed6:	cf 93       	push	r28
    2ed8:	df 93       	push	r29
    2eda:	fc 01       	movw	r30, r24
    2edc:	86 8d       	ldd	r24, Z+30	; 0x1e
    2ede:	88 23       	and	r24, r24
    2ee0:	79 f0       	breq	.+30     	; 0x2f00 <LCDWIKI_SPI::Spi_Write(unsigned char)+0x36>
_ZN8SPIClass8transferEh():
    2ee2:	6e bd       	out	0x2e, r22	; 46
    2ee4:	00 00       	nop
    2ee6:	0d b4       	in	r0, 0x2d	; 45
    2ee8:	07 fe       	sbrs	r0, 7
    2eea:	fd cf       	rjmp	.-6      	; 0x2ee6 <LCDWIKI_SPI::Spi_Write(unsigned char)+0x1c>
    2eec:	8e b5       	in	r24, 0x2e	; 46
_ZN11LCDWIKI_SPI9Spi_WriteEh():
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	1f 91       	pop	r17
    2ef4:	0f 91       	pop	r16
    2ef6:	ff 90       	pop	r15
    2ef8:	ef 90       	pop	r14
    2efa:	df 90       	pop	r13
    2efc:	cf 90       	pop	r12
    2efe:	08 95       	ret
    2f00:	88 e0       	ldi	r24, 0x08	; 8
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	20 e8       	ldi	r18, 0x80	; 128
    2f06:	8f 01       	movw	r16, r30
    2f08:	0b 5b       	subi	r16, 0xBB	; 187
    2f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0c:	7f 01       	movw	r14, r30
    2f0e:	30 e4       	ldi	r19, 0x40	; 64
    2f10:	e3 0e       	add	r14, r19
    2f12:	f1 1c       	adc	r15, r1
    2f14:	af 01       	movw	r20, r30
    2f16:	4a 5b       	subi	r20, 0xBA	; 186
    2f18:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1a:	6f 01       	movw	r12, r30
    2f1c:	c1 e4       	ldi	r28, 0x41	; 65
    2f1e:	cc 0e       	add	r12, r28
    2f20:	d1 1c       	adc	r13, r1
    2f22:	a1 ad       	ldd	r26, Z+57	; 0x39
    2f24:	b2 ad       	ldd	r27, Z+58	; 0x3a
    2f26:	32 2f       	mov	r19, r18
    2f28:	36 23       	and	r19, r22
    2f2a:	b9 f0       	breq	.+46     	; 0x2f5a <LCDWIKI_SPI::Spi_Write(unsigned char)+0x90>
    2f2c:	3c 91       	ld	r19, X
    2f2e:	e7 01       	movw	r28, r14
    2f30:	78 81       	ld	r23, Y
    2f32:	37 2b       	or	r19, r23
    2f34:	3c 93       	st	X, r19
    2f36:	a3 ad       	ldd	r26, Z+59	; 0x3b
    2f38:	b4 ad       	ldd	r27, Z+60	; 0x3c
    2f3a:	3c 91       	ld	r19, X
    2f3c:	ea 01       	movw	r28, r20
    2f3e:	78 81       	ld	r23, Y
    2f40:	37 23       	and	r19, r23
    2f42:	3c 93       	st	X, r19
    2f44:	a3 ad       	ldd	r26, Z+59	; 0x3b
    2f46:	b4 ad       	ldd	r27, Z+60	; 0x3c
    2f48:	3c 91       	ld	r19, X
    2f4a:	e6 01       	movw	r28, r12
    2f4c:	78 81       	ld	r23, Y
    2f4e:	37 2b       	or	r19, r23
    2f50:	3c 93       	st	X, r19
    2f52:	26 95       	lsr	r18
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	29 f7       	brne	.-54     	; 0x2f22 <LCDWIKI_SPI::Spi_Write(unsigned char)+0x58>
    2f58:	ca cf       	rjmp	.-108    	; 0x2eee <LCDWIKI_SPI::Spi_Write(unsigned char)+0x24>
    2f5a:	3c 91       	ld	r19, X
    2f5c:	e8 01       	movw	r28, r16
    2f5e:	78 81       	ld	r23, Y
    2f60:	37 23       	and	r19, r23
    2f62:	e8 cf       	rjmp	.-48     	; 0x2f34 <LCDWIKI_SPI::Spi_Write(unsigned char)+0x6a>

00002f64 <LCDWIKI_SPI::reset()>:
_ZN11LCDWIKI_SPI5resetEv():
    2f64:	0f 93       	push	r16
    2f66:	1f 93       	push	r17
    2f68:	cf 93       	push	r28
    2f6a:	df 93       	push	r29
    2f6c:	ec 01       	movw	r28, r24
    2f6e:	eb a9       	ldd	r30, Y+51	; 0x33
    2f70:	fc a9       	ldd	r31, Y+52	; 0x34
    2f72:	80 81       	ld	r24, Z
    2f74:	9d ad       	ldd	r25, Y+61	; 0x3d
    2f76:	89 2b       	or	r24, r25
    2f78:	80 83       	st	Z, r24
    2f7a:	8e 01       	movw	r16, r28
    2f7c:	04 5b       	subi	r16, 0xB4	; 180
    2f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f80:	f8 01       	movw	r30, r16
    2f82:	80 81       	ld	r24, Z
    2f84:	87 fd       	sbrc	r24, 7
    2f86:	0e c0       	rjmp	.+28     	; 0x2fa4 <LCDWIKI_SPI::reset()+0x40>
    2f88:	60 e0       	ldi	r22, 0x00	; 0
    2f8a:	0e 94 fe 29 	call	0x53fc	; 0x53fc <digitalWrite>
    2f8e:	62 e0       	ldi	r22, 0x02	; 2
    2f90:	70 e0       	ldi	r23, 0x00	; 0
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	0e 94 38 29 	call	0x5270	; 0x5270 <delay>
    2f9a:	61 e0       	ldi	r22, 0x01	; 1
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	80 81       	ld	r24, Z
    2fa0:	0e 94 fe 29 	call	0x53fc	; 0x53fc <digitalWrite>
    2fa4:	eb a9       	ldd	r30, Y+51	; 0x33
    2fa6:	fc a9       	ldd	r31, Y+52	; 0x34
    2fa8:	80 81       	ld	r24, Z
    2faa:	de 01       	movw	r26, r28
    2fac:	ae 5b       	subi	r26, 0xBE	; 190
    2fae:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb0:	9c 91       	ld	r25, X
    2fb2:	89 23       	and	r24, r25
    2fb4:	80 83       	st	Z, r24
    2fb6:	ed a9       	ldd	r30, Y+53	; 0x35
    2fb8:	fe a9       	ldd	r31, Y+54	; 0x36
    2fba:	80 81       	ld	r24, Z
    2fbc:	11 96       	adiw	r26, 0x01	; 1
    2fbe:	9c 91       	ld	r25, X
    2fc0:	89 23       	and	r24, r25
    2fc2:	80 83       	st	Z, r24
    2fc4:	60 e0       	ldi	r22, 0x00	; 0
    2fc6:	ce 01       	movw	r24, r28
    2fc8:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    2fcc:	eb a9       	ldd	r30, Y+51	; 0x33
    2fce:	fc a9       	ldd	r31, Y+52	; 0x34
    2fd0:	80 81       	ld	r24, Z
    2fd2:	9d ad       	ldd	r25, Y+61	; 0x3d
    2fd4:	89 2b       	or	r24, r25
    2fd6:	80 83       	st	Z, r24
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	1f 91       	pop	r17
    2fde:	0f 91       	pop	r16
    2fe0:	08 95       	ret

00002fe2 <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)>:
_ZN11LCDWIKI_SPI14Push_Any_ColorEPjibh():
    2fe2:	9f 92       	push	r9
    2fe4:	af 92       	push	r10
    2fe6:	bf 92       	push	r11
    2fe8:	cf 92       	push	r12
    2fea:	df 92       	push	r13
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	ec 01       	movw	r28, r24
    2ffa:	6b 01       	movw	r12, r22
    2ffc:	94 2e       	mov	r9, r20
    2ffe:	a5 2e       	mov	r10, r21
    3000:	01 70       	andi	r16, 0x01	; 1
    3002:	b0 2e       	mov	r11, r16
    3004:	eb a9       	ldd	r30, Y+51	; 0x33
    3006:	fc a9       	ldd	r31, Y+52	; 0x34
    3008:	80 81       	ld	r24, Z
    300a:	de 01       	movw	r26, r28
    300c:	ae 5b       	subi	r26, 0xBE	; 190
    300e:	bf 4f       	sbci	r27, 0xFF	; 255
    3010:	9c 91       	ld	r25, X
    3012:	89 23       	and	r24, r25
    3014:	80 83       	st	Z, r24
    3016:	22 23       	and	r18, r18
    3018:	e9 f0       	breq	.+58     	; 0x3054 <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x72>
    301a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    301c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    301e:	8e 01       	movw	r16, r28
    3020:	0d 5b       	subi	r16, 0xBD	; 189
    3022:	1f 4f       	sbci	r17, 0xFF	; 255
    3024:	89 2b       	or	r24, r25
    3026:	59 f4       	brne	.+22     	; 0x303e <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x5c>
    3028:	ed a9       	ldd	r30, Y+53	; 0x35
    302a:	fe a9       	ldd	r31, Y+54	; 0x36
    302c:	80 81       	ld	r24, Z
    302e:	d8 01       	movw	r26, r16
    3030:	9c 91       	ld	r25, X
    3032:	89 23       	and	r24, r25
    3034:	80 83       	st	Z, r24
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	ce 01       	movw	r24, r28
    303a:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    303e:	ed a9       	ldd	r30, Y+53	; 0x35
    3040:	fe a9       	ldd	r31, Y+54	; 0x36
    3042:	80 81       	ld	r24, Z
    3044:	d8 01       	movw	r26, r16
    3046:	9c 91       	ld	r25, X
    3048:	89 23       	and	r24, r25
    304a:	80 83       	st	Z, r24
    304c:	6b a1       	ldd	r22, Y+35	; 0x23
    304e:	ce 01       	movw	r24, r28
    3050:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3054:	76 01       	movw	r14, r12
    3056:	c9 2c       	mov	r12, r9
    3058:	da 2c       	mov	r13, r10
    305a:	1c 14       	cp	r1, r12
    305c:	1d 04       	cpc	r1, r13
    305e:	b4 f5       	brge	.+108    	; 0x30cc <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xea>
    3060:	bb 20       	and	r11, r11
    3062:	59 f1       	breq	.+86     	; 0x30ba <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xd8>
    3064:	f7 01       	movw	r30, r14
    3066:	05 91       	lpm	r16, Z+
    3068:	14 91       	lpm	r17, Z
    306a:	ed a9       	ldd	r30, Y+53	; 0x35
    306c:	fe a9       	ldd	r31, Y+54	; 0x36
    306e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3070:	29 a9       	ldd	r18, Y+49	; 0x31
    3072:	3a a9       	ldd	r19, Y+50	; 0x32
    3074:	80 81       	ld	r24, Z
    3076:	89 2b       	or	r24, r25
    3078:	80 83       	st	Z, r24
    307a:	61 2f       	mov	r22, r17
    307c:	2c 30       	cpi	r18, 0x0C	; 12
    307e:	31 05       	cpc	r19, r1
    3080:	01 f5       	brne	.+64     	; 0x30c2 <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xe0>
    3082:	68 7f       	andi	r22, 0xF8	; 248
    3084:	ce 01       	movw	r24, r28
    3086:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    308a:	b8 01       	movw	r22, r16
    308c:	83 e0       	ldi	r24, 0x03	; 3
    308e:	76 95       	lsr	r23
    3090:	67 95       	ror	r22
    3092:	8a 95       	dec	r24
    3094:	e1 f7       	brne	.-8      	; 0x308e <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xac>
    3096:	6c 7f       	andi	r22, 0xFC	; 252
    3098:	ce 01       	movw	r24, r28
    309a:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    309e:	60 2f       	mov	r22, r16
    30a0:	66 0f       	add	r22, r22
    30a2:	66 0f       	add	r22, r22
    30a4:	66 0f       	add	r22, r22
    30a6:	ce 01       	movw	r24, r28
    30a8:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    30ac:	b2 e0       	ldi	r27, 0x02	; 2
    30ae:	eb 0e       	add	r14, r27
    30b0:	f1 1c       	adc	r15, r1
    30b2:	e1 e0       	ldi	r30, 0x01	; 1
    30b4:	ce 1a       	sub	r12, r30
    30b6:	d1 08       	sbc	r13, r1
    30b8:	d0 cf       	rjmp	.-96     	; 0x305a <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x78>
    30ba:	d7 01       	movw	r26, r14
    30bc:	0d 91       	ld	r16, X+
    30be:	1c 91       	ld	r17, X
    30c0:	d4 cf       	rjmp	.-88     	; 0x306a <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0x88>
    30c2:	ce 01       	movw	r24, r28
    30c4:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    30c8:	60 2f       	mov	r22, r16
    30ca:	ed cf       	rjmp	.-38     	; 0x30a6 <LCDWIKI_SPI::Push_Any_Color(unsigned int*, int, bool, unsigned char)+0xc4>
    30cc:	eb a9       	ldd	r30, Y+51	; 0x33
    30ce:	fc a9       	ldd	r31, Y+52	; 0x34
    30d0:	80 81       	ld	r24, Z
    30d2:	9d ad       	ldd	r25, Y+61	; 0x3d
    30d4:	89 2b       	or	r24, r25
    30d6:	80 83       	st	Z, r24
    30d8:	df 91       	pop	r29
    30da:	cf 91       	pop	r28
    30dc:	1f 91       	pop	r17
    30de:	0f 91       	pop	r16
    30e0:	ff 90       	pop	r15
    30e2:	ef 90       	pop	r14
    30e4:	df 90       	pop	r13
    30e6:	cf 90       	pop	r12
    30e8:	bf 90       	pop	r11
    30ea:	af 90       	pop	r10
    30ec:	9f 90       	pop	r9
    30ee:	08 95       	ret

000030f0 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)>:
_ZN11LCDWIKI_SPI9Draw_PixeEiij():
    30f0:	af 92       	push	r10
    30f2:	bf 92       	push	r11
    30f4:	cf 92       	push	r12
    30f6:	df 92       	push	r13
    30f8:	ef 92       	push	r14
    30fa:	ff 92       	push	r15
    30fc:	0f 93       	push	r16
    30fe:	1f 93       	push	r17
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	77 fd       	sbrc	r23, 7
    3106:	6d c0       	rjmp	.+218    	; 0x31e2 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xf2>
    3108:	57 fd       	sbrc	r21, 7
    310a:	6b c0       	rjmp	.+214    	; 0x31e2 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xf2>
    310c:	79 01       	movw	r14, r18
    310e:	6a 01       	movw	r12, r20
    3110:	5b 01       	movw	r10, r22
    3112:	ec 01       	movw	r28, r24
    3114:	e8 81       	ld	r30, Y
    3116:	f9 81       	ldd	r31, Y+1	; 0x01
    3118:	06 84       	ldd	r0, Z+14	; 0x0e
    311a:	f7 85       	ldd	r31, Z+15	; 0x0f
    311c:	e0 2d       	mov	r30, r0
    311e:	09 95       	icall
    3120:	8a 15       	cp	r24, r10
    3122:	9b 05       	cpc	r25, r11
    3124:	0c f4       	brge	.+2      	; 0x3128 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x38>
    3126:	5d c0       	rjmp	.+186    	; 0x31e2 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xf2>
    3128:	e8 81       	ld	r30, Y
    312a:	f9 81       	ldd	r31, Y+1	; 0x01
    312c:	04 84       	ldd	r0, Z+12	; 0x0c
    312e:	f5 85       	ldd	r31, Z+13	; 0x0d
    3130:	e0 2d       	mov	r30, r0
    3132:	ce 01       	movw	r24, r28
    3134:	09 95       	icall
    3136:	8c 15       	cp	r24, r12
    3138:	9d 05       	cpc	r25, r13
    313a:	0c f4       	brge	.+2      	; 0x313e <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x4e>
    313c:	52 c0       	rjmp	.+164    	; 0x31e2 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xf2>
    313e:	e8 81       	ld	r30, Y
    3140:	f9 81       	ldd	r31, Y+1	; 0x01
    3142:	06 80       	ldd	r0, Z+6	; 0x06
    3144:	f7 81       	ldd	r31, Z+7	; 0x07
    3146:	e0 2d       	mov	r30, r0
    3148:	86 01       	movw	r16, r12
    314a:	95 01       	movw	r18, r10
    314c:	a6 01       	movw	r20, r12
    314e:	b5 01       	movw	r22, r10
    3150:	ce 01       	movw	r24, r28
    3152:	09 95       	icall
    3154:	eb a9       	ldd	r30, Y+51	; 0x33
    3156:	fc a9       	ldd	r31, Y+52	; 0x34
    3158:	80 81       	ld	r24, Z
    315a:	de 01       	movw	r26, r28
    315c:	ae 5b       	subi	r26, 0xBE	; 190
    315e:	bf 4f       	sbci	r27, 0xFF	; 255
    3160:	9c 91       	ld	r25, X
    3162:	89 23       	and	r24, r25
    3164:	80 83       	st	Z, r24
    3166:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3168:	7b 8d       	ldd	r23, Y+27	; 0x1b
    316a:	67 30       	cpi	r22, 0x07	; 7
    316c:	71 05       	cpc	r23, r1
    316e:	61 f4       	brne	.+24     	; 0x3188 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x98>
    3170:	ed a9       	ldd	r30, Y+53	; 0x35
    3172:	fe a9       	ldd	r31, Y+54	; 0x36
    3174:	80 81       	ld	r24, Z
    3176:	9e ad       	ldd	r25, Y+62	; 0x3e
    3178:	89 2b       	or	r24, r25
    317a:	80 83       	st	Z, r24
    317c:	6f 2d       	mov	r22, r15
    317e:	ce 01       	movw	r24, r28
    3180:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3184:	6e 2d       	mov	r22, r14
    3186:	66 c0       	rjmp	.+204    	; 0x3254 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x164>
    3188:	68 30       	cpi	r22, 0x08	; 8
    318a:	71 05       	cpc	r23, r1
    318c:	c1 f5       	brne	.+112    	; 0x31fe <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x10e>
    318e:	96 01       	movw	r18, r12
    3190:	93 e0       	ldi	r25, 0x03	; 3
    3192:	35 95       	asr	r19
    3194:	27 95       	ror	r18
    3196:	9a 95       	dec	r25
    3198:	e1 f7       	brne	.-8      	; 0x3192 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xa2>
    319a:	88 89       	ldd	r24, Y+16	; 0x10
    319c:	99 89       	ldd	r25, Y+17	; 0x11
    319e:	28 9f       	mul	r18, r24
    31a0:	f0 01       	movw	r30, r0
    31a2:	29 9f       	mul	r18, r25
    31a4:	f0 0d       	add	r31, r0
    31a6:	38 9f       	mul	r19, r24
    31a8:	f0 0d       	add	r31, r0
    31aa:	11 24       	eor	r1, r1
    31ac:	ea 0d       	add	r30, r10
    31ae:	fb 1d       	adc	r31, r11
    31b0:	ee 56       	subi	r30, 0x6E	; 110
    31b2:	fd 4f       	sbci	r31, 0xFD	; 253
    31b4:	20 81       	ld	r18, Z
    31b6:	c6 01       	movw	r24, r12
    31b8:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__divmodhi4>
    31bc:	41 e0       	ldi	r20, 0x01	; 1
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	ba 01       	movw	r22, r20
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xd8>
    31c4:	66 0f       	add	r22, r22
    31c6:	77 1f       	adc	r23, r23
    31c8:	8a 95       	dec	r24
    31ca:	e2 f7       	brpl	.-8      	; 0x31c4 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xd4>
    31cc:	cb 01       	movw	r24, r22
    31ce:	ef 28       	or	r14, r15
    31d0:	99 f0       	breq	.+38     	; 0x31f8 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x108>
    31d2:	82 2b       	or	r24, r18
    31d4:	80 83       	st	Z, r24
    31d6:	eb a9       	ldd	r30, Y+51	; 0x33
    31d8:	fc a9       	ldd	r31, Y+52	; 0x34
    31da:	80 81       	ld	r24, Z
    31dc:	9d ad       	ldd	r25, Y+61	; 0x3d
    31de:	89 2b       	or	r24, r25
    31e0:	80 83       	st	Z, r24
    31e2:	df 91       	pop	r29
    31e4:	cf 91       	pop	r28
    31e6:	1f 91       	pop	r17
    31e8:	0f 91       	pop	r16
    31ea:	ff 90       	pop	r15
    31ec:	ef 90       	pop	r14
    31ee:	df 90       	pop	r13
    31f0:	cf 90       	pop	r12
    31f2:	bf 90       	pop	r11
    31f4:	af 90       	pop	r10
    31f6:	08 95       	ret
    31f8:	80 95       	com	r24
    31fa:	82 23       	and	r24, r18
    31fc:	eb cf       	rjmp	.-42     	; 0x31d4 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xe4>
    31fe:	ed a9       	ldd	r30, Y+53	; 0x35
    3200:	fe a9       	ldd	r31, Y+54	; 0x36
    3202:	de 01       	movw	r26, r28
    3204:	ad 5b       	subi	r26, 0xBD	; 189
    3206:	bf 4f       	sbci	r27, 0xFF	; 255
    3208:	9c 91       	ld	r25, X
    320a:	29 a9       	ldd	r18, Y+49	; 0x31
    320c:	3a a9       	ldd	r19, Y+50	; 0x32
    320e:	80 81       	ld	r24, Z
    3210:	89 23       	and	r24, r25
    3212:	80 83       	st	Z, r24
    3214:	2c 30       	cpi	r18, 0x0C	; 12
    3216:	31 05       	cpc	r19, r1
    3218:	09 f5       	brne	.+66     	; 0x325c <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x16c>
    321a:	6b a1       	ldd	r22, Y+35	; 0x23
    321c:	ce 01       	movw	r24, r28
    321e:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3222:	ed a9       	ldd	r30, Y+53	; 0x35
    3224:	fe a9       	ldd	r31, Y+54	; 0x36
    3226:	80 81       	ld	r24, Z
    3228:	9e ad       	ldd	r25, Y+62	; 0x3e
    322a:	89 2b       	or	r24, r25
    322c:	80 83       	st	Z, r24
    322e:	6f 2d       	mov	r22, r15
    3230:	68 7f       	andi	r22, 0xF8	; 248
    3232:	ce 01       	movw	r24, r28
    3234:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3238:	b7 01       	movw	r22, r14
    323a:	83 e0       	ldi	r24, 0x03	; 3
    323c:	76 95       	lsr	r23
    323e:	67 95       	ror	r22
    3240:	8a 95       	dec	r24
    3242:	e1 f7       	brne	.-8      	; 0x323c <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x14c>
    3244:	6c 7f       	andi	r22, 0xFC	; 252
    3246:	ce 01       	movw	r24, r28
    3248:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    324c:	6e 2d       	mov	r22, r14
    324e:	66 0f       	add	r22, r22
    3250:	66 0f       	add	r22, r22
    3252:	66 0f       	add	r22, r22
    3254:	ce 01       	movw	r24, r28
    3256:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    325a:	bd cf       	rjmp	.-134    	; 0x31d6 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0xe6>
    325c:	6c a1       	ldd	r22, Y+36	; 0x24
    325e:	ce 01       	movw	r24, r28
    3260:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3264:	6b a1       	ldd	r22, Y+35	; 0x23
    3266:	ce 01       	movw	r24, r28
    3268:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    326c:	81 cf       	rjmp	.-254    	; 0x3170 <LCDWIKI_SPI::Draw_Pixe(int, int, unsigned int)+0x80>

0000326e <LCDWIKI_SPI::Spi_Read()>:
_ZN11LCDWIKI_SPI8Spi_ReadEv():
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	fc 01       	movw	r30, r24
    3274:	86 8d       	ldd	r24, Z+30	; 0x1e
    3276:	88 23       	and	r24, r24
    3278:	59 f0       	breq	.+22     	; 0x3290 <LCDWIKI_SPI::Spi_Read()+0x22>
_ZN8SPIClass8transferEh():
    327a:	8f ef       	ldi	r24, 0xFF	; 255
    327c:	8e bd       	out	0x2e, r24	; 46
    327e:	00 00       	nop
    3280:	0d b4       	in	r0, 0x2d	; 45
    3282:	07 fe       	sbrs	r0, 7
    3284:	fd cf       	rjmp	.-6      	; 0x3280 <LCDWIKI_SPI::Spi_Read()+0x12>
    3286:	2e b5       	in	r18, 0x2e	; 46
_ZN11LCDWIKI_SPI8Spi_ReadEv():
    3288:	82 2f       	mov	r24, r18
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	08 95       	ret
    3290:	88 e0       	ldi	r24, 0x08	; 8
    3292:	bf 01       	movw	r22, r30
    3294:	6a 5b       	subi	r22, 0xBA	; 186
    3296:	7f 4f       	sbci	r23, 0xFF	; 255
    3298:	af 01       	movw	r20, r30
    329a:	4f 5b       	subi	r20, 0xBF	; 191
    329c:	5f 4f       	sbci	r21, 0xFF	; 255
    329e:	a3 ad       	ldd	r26, Z+59	; 0x3b
    32a0:	b4 ad       	ldd	r27, Z+60	; 0x3c
    32a2:	9c 91       	ld	r25, X
    32a4:	eb 01       	movw	r28, r22
    32a6:	38 81       	ld	r19, Y
    32a8:	93 23       	and	r25, r19
    32aa:	9c 93       	st	X, r25
    32ac:	a3 ad       	ldd	r26, Z+59	; 0x3b
    32ae:	b4 ad       	ldd	r27, Z+60	; 0x3c
    32b0:	9c 91       	ld	r25, X
    32b2:	ea 01       	movw	r28, r20
    32b4:	38 81       	ld	r19, Y
    32b6:	93 2b       	or	r25, r19
    32b8:	9c 93       	st	X, r25
    32ba:	22 0f       	add	r18, r18
    32bc:	a7 a9       	ldd	r26, Z+55	; 0x37
    32be:	b0 ad       	ldd	r27, Z+56	; 0x38
    32c0:	9c 91       	ld	r25, X
    32c2:	37 ad       	ldd	r19, Z+63	; 0x3f
    32c4:	93 23       	and	r25, r19
    32c6:	09 f0       	breq	.+2      	; 0x32ca <LCDWIKI_SPI::Spi_Read()+0x5c>
    32c8:	21 60       	ori	r18, 0x01	; 1
    32ca:	81 50       	subi	r24, 0x01	; 1
    32cc:	41 f7       	brne	.-48     	; 0x329e <LCDWIKI_SPI::Spi_Read()+0x30>
    32ce:	dc cf       	rjmp	.-72     	; 0x3288 <LCDWIKI_SPI::Spi_Read()+0x1a>

000032d0 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)>:
_ZN11LCDWIKI_SPI9Read_GRAMEiiPjii():
    32d0:	3f 92       	push	r3
    32d2:	4f 92       	push	r4
    32d4:	5f 92       	push	r5
    32d6:	6f 92       	push	r6
    32d8:	7f 92       	push	r7
    32da:	8f 92       	push	r8
    32dc:	9f 92       	push	r9
    32de:	af 92       	push	r10
    32e0:	bf 92       	push	r11
    32e2:	cf 92       	push	r12
    32e4:	df 92       	push	r13
    32e6:	ef 92       	push	r14
    32e8:	ff 92       	push	r15
    32ea:	0f 93       	push	r16
    32ec:	1f 93       	push	r17
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	ec 01       	movw	r28, r24
    32f4:	59 01       	movw	r10, r18
    32f6:	98 01       	movw	r18, r16
    32f8:	0e 9d       	mul	r16, r14
    32fa:	60 01       	movw	r12, r0
    32fc:	0f 9d       	mul	r16, r15
    32fe:	d0 0c       	add	r13, r0
    3300:	1e 9d       	mul	r17, r14
    3302:	d0 0c       	add	r13, r0
    3304:	11 24       	eor	r1, r1
    3306:	87 01       	movw	r16, r14
    3308:	04 0f       	add	r16, r20
    330a:	15 1f       	adc	r17, r21
    330c:	01 50       	subi	r16, 0x01	; 1
    330e:	11 09       	sbc	r17, r1
    3310:	26 0f       	add	r18, r22
    3312:	37 1f       	adc	r19, r23
    3314:	21 50       	subi	r18, 0x01	; 1
    3316:	31 09       	sbc	r19, r1
    3318:	e8 81       	ld	r30, Y
    331a:	f9 81       	ldd	r31, Y+1	; 0x01
    331c:	06 80       	ldd	r0, Z+6	; 0x06
    331e:	f7 81       	ldd	r31, Z+7	; 0x07
    3320:	e0 2d       	mov	r30, r0
    3322:	09 95       	icall
    3324:	2e 01       	movw	r4, r28
    3326:	82 e4       	ldi	r24, 0x42	; 66
    3328:	48 0e       	add	r4, r24
    332a:	51 1c       	adc	r5, r1
    332c:	3e 01       	movw	r6, r28
    332e:	a3 e4       	ldi	r26, 0x43	; 67
    3330:	6a 0e       	add	r6, r26
    3332:	71 1c       	adc	r7, r1
    3334:	1c 14       	cp	r1, r12
    3336:	1d 04       	cpc	r1, r13
    3338:	0c f0       	brlt	.+2      	; 0x333c <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x6c>
    333a:	96 c0       	rjmp	.+300    	; 0x3468 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x198>
    333c:	eb a9       	ldd	r30, Y+51	; 0x33
    333e:	fc a9       	ldd	r31, Y+52	; 0x34
    3340:	80 81       	ld	r24, Z
    3342:	d2 01       	movw	r26, r4
    3344:	9c 91       	ld	r25, X
    3346:	89 23       	and	r24, r25
    3348:	80 83       	st	Z, r24
    334a:	ed a9       	ldd	r30, Y+53	; 0x35
    334c:	fe a9       	ldd	r31, Y+54	; 0x36
    334e:	80 81       	ld	r24, Z
    3350:	d3 01       	movw	r26, r6
    3352:	9c 91       	ld	r25, X
    3354:	89 23       	and	r24, r25
    3356:	80 83       	st	Z, r24
    3358:	6e a1       	ldd	r22, Y+38	; 0x26
    335a:	ce 01       	movw	r24, r28
    335c:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3360:	6d a1       	ldd	r22, Y+37	; 0x25
    3362:	ce 01       	movw	r24, r28
    3364:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3368:	8a 8d       	ldd	r24, Y+26	; 0x1a
    336a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    336c:	89 2b       	or	r24, r25
    336e:	09 f0       	breq	.+2      	; 0x3372 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0xa2>
    3370:	43 c0       	rjmp	.+134    	; 0x33f8 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x128>
    3372:	75 01       	movw	r14, r10
    3374:	86 01       	movw	r16, r12
    3376:	ce 01       	movw	r24, r28
    3378:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    337c:	ce 01       	movw	r24, r28
    337e:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    3382:	ce 01       	movw	r24, r28
    3384:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    3388:	ce 01       	movw	r24, r28
    338a:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    338e:	ce 01       	movw	r24, r28
    3390:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    3394:	ce 01       	movw	r24, r28
    3396:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    339a:	ce 01       	movw	r24, r28
    339c:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    33a0:	38 2e       	mov	r3, r24
    33a2:	ce 01       	movw	r24, r28
    33a4:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    33a8:	93 2d       	mov	r25, r3
    33aa:	f7 01       	movw	r30, r14
    33ac:	81 93       	st	Z+, r24
    33ae:	91 93       	st	Z+, r25
    33b0:	7f 01       	movw	r14, r30
    33b2:	01 50       	subi	r16, 0x01	; 1
    33b4:	11 09       	sbc	r17, r1
    33b6:	f9 f6       	brne	.-66     	; 0x3376 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0xa6>
    33b8:	cc 0c       	add	r12, r12
    33ba:	dd 1c       	adc	r13, r13
    33bc:	ac 0c       	add	r10, r12
    33be:	bd 1c       	adc	r11, r13
    33c0:	0e 89       	ldd	r16, Y+22	; 0x16
    33c2:	1f 89       	ldd	r17, Y+23	; 0x17
    33c4:	01 50       	subi	r16, 0x01	; 1
    33c6:	11 09       	sbc	r17, r1
    33c8:	2c 89       	ldd	r18, Y+20	; 0x14
    33ca:	3d 89       	ldd	r19, Y+21	; 0x15
    33cc:	21 50       	subi	r18, 0x01	; 1
    33ce:	31 09       	sbc	r19, r1
    33d0:	e8 81       	ld	r30, Y
    33d2:	f9 81       	ldd	r31, Y+1	; 0x01
    33d4:	06 80       	ldd	r0, Z+6	; 0x06
    33d6:	f7 81       	ldd	r31, Z+7	; 0x07
    33d8:	e0 2d       	mov	r30, r0
    33da:	50 e0       	ldi	r21, 0x00	; 0
    33dc:	40 e0       	ldi	r20, 0x00	; 0
    33de:	70 e0       	ldi	r23, 0x00	; 0
    33e0:	60 e0       	ldi	r22, 0x00	; 0
    33e2:	ce 01       	movw	r24, r28
    33e4:	09 95       	icall
    33e6:	eb a9       	ldd	r30, Y+51	; 0x33
    33e8:	fc a9       	ldd	r31, Y+52	; 0x34
    33ea:	80 81       	ld	r24, Z
    33ec:	9d ad       	ldd	r25, Y+61	; 0x3d
    33ee:	89 2b       	or	r24, r25
    33f0:	80 83       	st	Z, r24
    33f2:	d1 2c       	mov	r13, r1
    33f4:	c1 2c       	mov	r12, r1
    33f6:	9e cf       	rjmp	.-196    	; 0x3334 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x64>
    33f8:	ce 01       	movw	r24, r28
    33fa:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    33fe:	75 01       	movw	r14, r10
    3400:	86 01       	movw	r16, r12
    3402:	8f a5       	ldd	r24, Y+47	; 0x2f
    3404:	98 a9       	ldd	r25, Y+48	; 0x30
    3406:	81 30       	cpi	r24, 0x01	; 1
    3408:	91 05       	cpc	r25, r1
    340a:	11 f5       	brne	.+68     	; 0x3450 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x180>
    340c:	ce 01       	movw	r24, r28
    340e:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    3412:	98 2e       	mov	r9, r24
    3414:	ce 01       	movw	r24, r28
    3416:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    341a:	88 2e       	mov	r8, r24
    341c:	ce 01       	movw	r24, r28
    341e:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    3422:	e8 81       	ld	r30, Y
    3424:	f9 81       	ldd	r31, Y+1	; 0x01
    3426:	01 90       	ld	r0, Z+
    3428:	f0 81       	ld	r31, Z
    342a:	e0 2d       	mov	r30, r0
    342c:	28 2f       	mov	r18, r24
    342e:	48 2d       	mov	r20, r8
    3430:	69 2d       	mov	r22, r9
    3432:	ce 01       	movw	r24, r28
    3434:	09 95       	icall
    3436:	4c 01       	movw	r8, r24
    3438:	d7 01       	movw	r26, r14
    343a:	8d 92       	st	X+, r8
    343c:	9d 92       	st	X+, r9
    343e:	7d 01       	movw	r14, r26
    3440:	01 50       	subi	r16, 0x01	; 1
    3442:	11 09       	sbc	r17, r1
    3444:	f1 f6       	brne	.-68     	; 0x3402 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x132>
    3446:	cc 0c       	add	r12, r12
    3448:	dd 1c       	adc	r13, r13
    344a:	ac 0c       	add	r10, r12
    344c:	bd 1c       	adc	r11, r13
    344e:	cb cf       	rjmp	.-106    	; 0x33e6 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x116>
    3450:	89 2b       	or	r24, r25
    3452:	91 f7       	brne	.-28     	; 0x3438 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x168>
    3454:	ce 01       	movw	r24, r28
    3456:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    345a:	88 2e       	mov	r8, r24
    345c:	ce 01       	movw	r24, r28
    345e:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    3462:	98 2c       	mov	r9, r8
    3464:	88 2e       	mov	r8, r24
    3466:	e8 cf       	rjmp	.-48     	; 0x3438 <LCDWIKI_SPI::Read_GRAM(int, int, unsigned int*, int, int)+0x168>
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	1f 91       	pop	r17
    3472:	0f 91       	pop	r16
    3474:	ff 90       	pop	r15
    3476:	ef 90       	pop	r14
    3478:	df 90       	pop	r13
    347a:	cf 90       	pop	r12
    347c:	bf 90       	pop	r11
    347e:	af 90       	pop	r10
    3480:	9f 90       	pop	r9
    3482:	8f 90       	pop	r8
    3484:	7f 90       	pop	r7
    3486:	6f 90       	pop	r6
    3488:	5f 90       	pop	r5
    348a:	4f 90       	pop	r4
    348c:	3f 90       	pop	r3
    348e:	08 95       	ret

00003490 <LCDWIKI_SPI::Write_Cmd_Data(unsigned int, unsigned int)>:
_ZN11LCDWIKI_SPI14Write_Cmd_DataEjj():
    3490:	ff 92       	push	r15
    3492:	0f 93       	push	r16
    3494:	1f 93       	push	r17
    3496:	cf 93       	push	r28
    3498:	df 93       	push	r29
    349a:	ec 01       	movw	r28, r24
    349c:	f6 2e       	mov	r15, r22
    349e:	67 2f       	mov	r22, r23
    34a0:	14 2f       	mov	r17, r20
    34a2:	05 2f       	mov	r16, r21
    34a4:	eb a9       	ldd	r30, Y+51	; 0x33
    34a6:	fc a9       	ldd	r31, Y+52	; 0x34
    34a8:	80 81       	ld	r24, Z
    34aa:	de 01       	movw	r26, r28
    34ac:	ae 5b       	subi	r26, 0xBE	; 190
    34ae:	bf 4f       	sbci	r27, 0xFF	; 255
    34b0:	9c 91       	ld	r25, X
    34b2:	89 23       	and	r24, r25
    34b4:	80 83       	st	Z, r24
    34b6:	ed a9       	ldd	r30, Y+53	; 0x35
    34b8:	fe a9       	ldd	r31, Y+54	; 0x36
    34ba:	80 81       	ld	r24, Z
    34bc:	11 96       	adiw	r26, 0x01	; 1
    34be:	9c 91       	ld	r25, X
    34c0:	89 23       	and	r24, r25
    34c2:	80 83       	st	Z, r24
    34c4:	ce 01       	movw	r24, r28
    34c6:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    34ca:	6f 2d       	mov	r22, r15
    34cc:	ce 01       	movw	r24, r28
    34ce:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    34d2:	ed a9       	ldd	r30, Y+53	; 0x35
    34d4:	fe a9       	ldd	r31, Y+54	; 0x36
    34d6:	80 81       	ld	r24, Z
    34d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    34da:	89 2b       	or	r24, r25
    34dc:	80 83       	st	Z, r24
    34de:	60 2f       	mov	r22, r16
    34e0:	ce 01       	movw	r24, r28
    34e2:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    34e6:	61 2f       	mov	r22, r17
    34e8:	ce 01       	movw	r24, r28
    34ea:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    34ee:	eb a9       	ldd	r30, Y+51	; 0x33
    34f0:	fc a9       	ldd	r31, Y+52	; 0x34
    34f2:	80 81       	ld	r24, Z
    34f4:	9d ad       	ldd	r25, Y+61	; 0x3d
    34f6:	89 2b       	or	r24, r25
    34f8:	80 83       	st	Z, r24
    34fa:	df 91       	pop	r29
    34fc:	cf 91       	pop	r28
    34fe:	1f 91       	pop	r17
    3500:	0f 91       	pop	r16
    3502:	ff 90       	pop	r15
    3504:	08 95       	ret

00003506 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>:
_ZN11LCDWIKI_SPI12Push_CommandEhPha():
    3506:	af 92       	push	r10
    3508:	bf 92       	push	r11
    350a:	cf 92       	push	r12
    350c:	df 92       	push	r13
    350e:	ef 92       	push	r14
    3510:	ff 92       	push	r15
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	ec 01       	movw	r28, r24
    351c:	16 2f       	mov	r17, r22
    351e:	b4 2e       	mov	r11, r20
    3520:	a5 2e       	mov	r10, r21
    3522:	02 2f       	mov	r16, r18
    3524:	eb a9       	ldd	r30, Y+51	; 0x33
    3526:	fc a9       	ldd	r31, Y+52	; 0x34
    3528:	80 81       	ld	r24, Z
    352a:	de 01       	movw	r26, r28
    352c:	ae 5b       	subi	r26, 0xBE	; 190
    352e:	bf 4f       	sbci	r27, 0xFF	; 255
    3530:	9c 91       	ld	r25, X
    3532:	89 23       	and	r24, r25
    3534:	80 83       	st	Z, r24
    3536:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3538:	9b 8d       	ldd	r25, Y+27	; 0x1b
    353a:	ed a9       	ldd	r30, Y+53	; 0x35
    353c:	fe a9       	ldd	r31, Y+54	; 0x36
    353e:	9e 01       	movw	r18, r28
    3540:	2d 5b       	subi	r18, 0xBD	; 189
    3542:	3f 4f       	sbci	r19, 0xFF	; 255
    3544:	69 01       	movw	r12, r18
    3546:	08 97       	sbiw	r24, 0x08	; 8
    3548:	a1 f5       	brne	.+104    	; 0x35b2 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0xac>
    354a:	80 81       	ld	r24, Z
    354c:	d9 01       	movw	r26, r18
    354e:	9c 91       	ld	r25, X
    3550:	89 23       	and	r24, r25
    3552:	80 83       	st	Z, r24
    3554:	61 2f       	mov	r22, r17
    3556:	ce 01       	movw	r24, r28
    3558:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    355c:	eb 2c       	mov	r14, r11
    355e:	fa 2c       	mov	r15, r10
    3560:	bb 24       	eor	r11, r11
    3562:	ba 94       	dec	r11
    3564:	b0 0e       	add	r11, r16
    3566:	10 16       	cp	r1, r16
    3568:	74 f5       	brge	.+92     	; 0x35c6 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0xc0>
    356a:	f7 01       	movw	r30, r14
    356c:	61 91       	ld	r22, Z+
    356e:	7f 01       	movw	r14, r30
    3570:	ed a9       	ldd	r30, Y+53	; 0x35
    3572:	fe a9       	ldd	r31, Y+54	; 0x36
    3574:	80 81       	ld	r24, Z
    3576:	9e ad       	ldd	r25, Y+62	; 0x3e
    3578:	89 2b       	or	r24, r25
    357a:	80 83       	st	Z, r24
    357c:	ce 01       	movw	r24, r28
    357e:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3582:	bb 20       	and	r11, r11
    3584:	a1 f0       	breq	.+40     	; 0x35ae <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0xa8>
    3586:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3588:	9b 8d       	ldd	r25, Y+27	; 0x1b
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	81 f4       	brne	.+32     	; 0x35ae <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0xa8>
    358e:	1f 5f       	subi	r17, 0xFF	; 255
    3590:	ed a9       	ldd	r30, Y+53	; 0x35
    3592:	fe a9       	ldd	r31, Y+54	; 0x36
    3594:	80 81       	ld	r24, Z
    3596:	d6 01       	movw	r26, r12
    3598:	9c 91       	ld	r25, X
    359a:	89 23       	and	r24, r25
    359c:	80 83       	st	Z, r24
    359e:	60 e0       	ldi	r22, 0x00	; 0
    35a0:	ce 01       	movw	r24, r28
    35a2:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    35a6:	61 2f       	mov	r22, r17
    35a8:	ce 01       	movw	r24, r28
    35aa:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    35ae:	0b 2d       	mov	r16, r11
    35b0:	d7 cf       	rjmp	.-82     	; 0x3560 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0x5a>
    35b2:	80 81       	ld	r24, Z
    35b4:	d9 01       	movw	r26, r18
    35b6:	9c 91       	ld	r25, X
    35b8:	89 23       	and	r24, r25
    35ba:	80 83       	st	Z, r24
    35bc:	60 e0       	ldi	r22, 0x00	; 0
    35be:	ce 01       	movw	r24, r28
    35c0:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    35c4:	c7 cf       	rjmp	.-114    	; 0x3554 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)+0x4e>
    35c6:	eb a9       	ldd	r30, Y+51	; 0x33
    35c8:	fc a9       	ldd	r31, Y+52	; 0x34
    35ca:	80 81       	ld	r24, Z
    35cc:	9d ad       	ldd	r25, Y+61	; 0x3d
    35ce:	89 2b       	or	r24, r25
    35d0:	80 83       	st	Z, r24
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	ff 90       	pop	r15
    35dc:	ef 90       	pop	r14
    35de:	df 90       	pop	r13
    35e0:	cf 90       	pop	r12
    35e2:	bf 90       	pop	r11
    35e4:	af 90       	pop	r10
    35e6:	08 95       	ret

000035e8 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)>:
_ZN11LCDWIKI_SPI15Set_Addr_WindowEiiii():
    35e8:	2f 92       	push	r2
    35ea:	3f 92       	push	r3
    35ec:	4f 92       	push	r4
    35ee:	5f 92       	push	r5
    35f0:	6f 92       	push	r6
    35f2:	7f 92       	push	r7
    35f4:	8f 92       	push	r8
    35f6:	9f 92       	push	r9
    35f8:	af 92       	push	r10
    35fa:	bf 92       	push	r11
    35fc:	cf 92       	push	r12
    35fe:	df 92       	push	r13
    3600:	ef 92       	push	r14
    3602:	ff 92       	push	r15
    3604:	0f 93       	push	r16
    3606:	1f 93       	push	r17
    3608:	cf 93       	push	r28
    360a:	df 93       	push	r29
    360c:	cd b7       	in	r28, 0x3d	; 61
    360e:	de b7       	in	r29, 0x3e	; 62
    3610:	28 97       	sbiw	r28, 0x08	; 8
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	de bf       	out	0x3e, r29	; 62
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	cd bf       	out	0x3d, r28	; 61
    361c:	7c 01       	movw	r14, r24
    361e:	5b 01       	movw	r10, r22
    3620:	6a 01       	movw	r12, r20
    3622:	49 01       	movw	r8, r18
    3624:	dc 01       	movw	r26, r24
    3626:	d3 96       	adiw	r26, 0x33	; 51
    3628:	ed 91       	ld	r30, X+
    362a:	fc 91       	ld	r31, X
    362c:	d4 97       	sbiw	r26, 0x34	; 52
    362e:	80 81       	ld	r24, Z
    3630:	ae 5b       	subi	r26, 0xBE	; 190
    3632:	bf 4f       	sbci	r27, 0xFF	; 255
    3634:	9c 91       	ld	r25, X
    3636:	89 23       	and	r24, r25
    3638:	80 83       	st	Z, r24
    363a:	f7 01       	movw	r30, r14
    363c:	82 8d       	ldd	r24, Z+26	; 0x1a
    363e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	09 f0       	breq	.+2      	; 0x3646 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x5e>
    3644:	46 c1       	rjmp	.+652    	; 0x38d2 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x2ea>
    3646:	80 8d       	ldd	r24, Z+24	; 0x18
    3648:	91 8d       	ldd	r25, Z+25	; 0x19
    364a:	82 30       	cpi	r24, 0x02	; 2
    364c:	91 05       	cpc	r25, r1
    364e:	09 f4       	brne	.+2      	; 0x3652 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x6a>
    3650:	12 c1       	rjmp	.+548    	; 0x3876 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x28e>
    3652:	83 30       	cpi	r24, 0x03	; 3
    3654:	91 05       	cpc	r25, r1
    3656:	09 f4       	brne	.+2      	; 0x365a <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x72>
    3658:	2a c1       	rjmp	.+596    	; 0x38ae <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x2c6>
    365a:	2a 01       	movw	r4, r20
    365c:	3b 01       	movw	r6, r22
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	89 f4       	brne	.+34     	; 0x3684 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x9c>
    3662:	80 89       	ldd	r24, Z+16	; 0x10
    3664:	91 89       	ldd	r25, Z+17	; 0x11
    3666:	98 01       	movw	r18, r16
    3668:	20 95       	com	r18
    366a:	30 95       	com	r19
    366c:	c0 94       	com	r12
    366e:	d0 94       	com	r13
    3670:	36 01       	movw	r6, r12
    3672:	68 0e       	add	r6, r24
    3674:	79 1e       	adc	r7, r25
    3676:	2b 01       	movw	r4, r22
    3678:	84 01       	movw	r16, r8
    367a:	43 01       	movw	r8, r6
    367c:	65 01       	movw	r12, r10
    367e:	59 01       	movw	r10, r18
    3680:	a8 0e       	add	r10, r24
    3682:	b9 1e       	adc	r11, r25
    3684:	d7 01       	movw	r26, r14
    3686:	d5 96       	adiw	r26, 0x35	; 53
    3688:	ed 91       	ld	r30, X+
    368a:	fc 91       	ld	r31, X
    368c:	80 81       	ld	r24, Z
    368e:	17 01       	movw	r2, r14
    3690:	b3 e4       	ldi	r27, 0x43	; 67
    3692:	2b 0e       	add	r2, r27
    3694:	31 1c       	adc	r3, r1
    3696:	d1 01       	movw	r26, r2
    3698:	9c 91       	ld	r25, X
    369a:	89 23       	and	r24, r25
    369c:	80 83       	st	Z, r24
    369e:	60 e0       	ldi	r22, 0x00	; 0
    36a0:	c7 01       	movw	r24, r14
    36a2:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    36a6:	60 e5       	ldi	r22, 0x50	; 80
    36a8:	c7 01       	movw	r24, r14
    36aa:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    36ae:	d7 01       	movw	r26, r14
    36b0:	d5 96       	adiw	r26, 0x35	; 53
    36b2:	ed 91       	ld	r30, X+
    36b4:	fc 91       	ld	r31, X
    36b6:	d6 97       	sbiw	r26, 0x36	; 54
    36b8:	80 81       	ld	r24, Z
    36ba:	de 96       	adiw	r26, 0x3e	; 62
    36bc:	9c 91       	ld	r25, X
    36be:	89 2b       	or	r24, r25
    36c0:	80 83       	st	Z, r24
    36c2:	6b 2d       	mov	r22, r11
    36c4:	c7 01       	movw	r24, r14
    36c6:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    36ca:	6a 2d       	mov	r22, r10
    36cc:	c7 01       	movw	r24, r14
    36ce:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    36d2:	d7 01       	movw	r26, r14
    36d4:	d5 96       	adiw	r26, 0x35	; 53
    36d6:	ed 91       	ld	r30, X+
    36d8:	fc 91       	ld	r31, X
    36da:	80 81       	ld	r24, Z
    36dc:	d1 01       	movw	r26, r2
    36de:	9c 91       	ld	r25, X
    36e0:	89 23       	and	r24, r25
    36e2:	80 83       	st	Z, r24
    36e4:	60 e0       	ldi	r22, 0x00	; 0
    36e6:	c7 01       	movw	r24, r14
    36e8:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    36ec:	61 e5       	ldi	r22, 0x51	; 81
    36ee:	c7 01       	movw	r24, r14
    36f0:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    36f4:	d7 01       	movw	r26, r14
    36f6:	d5 96       	adiw	r26, 0x35	; 53
    36f8:	ed 91       	ld	r30, X+
    36fa:	fc 91       	ld	r31, X
    36fc:	d6 97       	sbiw	r26, 0x36	; 54
    36fe:	80 81       	ld	r24, Z
    3700:	de 96       	adiw	r26, 0x3e	; 62
    3702:	9c 91       	ld	r25, X
    3704:	89 2b       	or	r24, r25
    3706:	80 83       	st	Z, r24
    3708:	69 2d       	mov	r22, r9
    370a:	c7 01       	movw	r24, r14
    370c:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3710:	68 2d       	mov	r22, r8
    3712:	c7 01       	movw	r24, r14
    3714:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3718:	d7 01       	movw	r26, r14
    371a:	d5 96       	adiw	r26, 0x35	; 53
    371c:	ed 91       	ld	r30, X+
    371e:	fc 91       	ld	r31, X
    3720:	80 81       	ld	r24, Z
    3722:	d1 01       	movw	r26, r2
    3724:	9c 91       	ld	r25, X
    3726:	89 23       	and	r24, r25
    3728:	80 83       	st	Z, r24
    372a:	60 e0       	ldi	r22, 0x00	; 0
    372c:	c7 01       	movw	r24, r14
    372e:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3732:	62 e5       	ldi	r22, 0x52	; 82
    3734:	c7 01       	movw	r24, r14
    3736:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    373a:	d7 01       	movw	r26, r14
    373c:	d5 96       	adiw	r26, 0x35	; 53
    373e:	ed 91       	ld	r30, X+
    3740:	fc 91       	ld	r31, X
    3742:	d6 97       	sbiw	r26, 0x36	; 54
    3744:	80 81       	ld	r24, Z
    3746:	de 96       	adiw	r26, 0x3e	; 62
    3748:	9c 91       	ld	r25, X
    374a:	89 2b       	or	r24, r25
    374c:	80 83       	st	Z, r24
    374e:	6d 2d       	mov	r22, r13
    3750:	c7 01       	movw	r24, r14
    3752:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3756:	6c 2d       	mov	r22, r12
    3758:	c7 01       	movw	r24, r14
    375a:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    375e:	d7 01       	movw	r26, r14
    3760:	d5 96       	adiw	r26, 0x35	; 53
    3762:	ed 91       	ld	r30, X+
    3764:	fc 91       	ld	r31, X
    3766:	80 81       	ld	r24, Z
    3768:	d1 01       	movw	r26, r2
    376a:	9c 91       	ld	r25, X
    376c:	89 23       	and	r24, r25
    376e:	80 83       	st	Z, r24
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	c7 01       	movw	r24, r14
    3774:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3778:	63 e5       	ldi	r22, 0x53	; 83
    377a:	c7 01       	movw	r24, r14
    377c:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3780:	d7 01       	movw	r26, r14
    3782:	d5 96       	adiw	r26, 0x35	; 53
    3784:	ed 91       	ld	r30, X+
    3786:	fc 91       	ld	r31, X
    3788:	d6 97       	sbiw	r26, 0x36	; 54
    378a:	80 81       	ld	r24, Z
    378c:	de 96       	adiw	r26, 0x3e	; 62
    378e:	9c 91       	ld	r25, X
    3790:	89 2b       	or	r24, r25
    3792:	80 83       	st	Z, r24
    3794:	61 2f       	mov	r22, r17
    3796:	c7 01       	movw	r24, r14
    3798:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    379c:	60 2f       	mov	r22, r16
    379e:	c7 01       	movw	r24, r14
    37a0:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    37a4:	d7 01       	movw	r26, r14
    37a6:	d5 96       	adiw	r26, 0x35	; 53
    37a8:	ed 91       	ld	r30, X+
    37aa:	fc 91       	ld	r31, X
    37ac:	80 81       	ld	r24, Z
    37ae:	d1 01       	movw	r26, r2
    37b0:	9c 91       	ld	r25, X
    37b2:	89 23       	and	r24, r25
    37b4:	80 83       	st	Z, r24
    37b6:	60 e0       	ldi	r22, 0x00	; 0
    37b8:	c7 01       	movw	r24, r14
    37ba:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    37be:	60 e2       	ldi	r22, 0x20	; 32
    37c0:	c7 01       	movw	r24, r14
    37c2:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    37c6:	d7 01       	movw	r26, r14
    37c8:	d5 96       	adiw	r26, 0x35	; 53
    37ca:	ed 91       	ld	r30, X+
    37cc:	fc 91       	ld	r31, X
    37ce:	d6 97       	sbiw	r26, 0x36	; 54
    37d0:	80 81       	ld	r24, Z
    37d2:	de 96       	adiw	r26, 0x3e	; 62
    37d4:	9c 91       	ld	r25, X
    37d6:	89 2b       	or	r24, r25
    37d8:	80 83       	st	Z, r24
    37da:	67 2d       	mov	r22, r7
    37dc:	c7 01       	movw	r24, r14
    37de:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    37e2:	66 2d       	mov	r22, r6
    37e4:	c7 01       	movw	r24, r14
    37e6:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    37ea:	d7 01       	movw	r26, r14
    37ec:	d5 96       	adiw	r26, 0x35	; 53
    37ee:	ed 91       	ld	r30, X+
    37f0:	fc 91       	ld	r31, X
    37f2:	80 81       	ld	r24, Z
    37f4:	d1 01       	movw	r26, r2
    37f6:	9c 91       	ld	r25, X
    37f8:	89 23       	and	r24, r25
    37fa:	80 83       	st	Z, r24
    37fc:	60 e0       	ldi	r22, 0x00	; 0
    37fe:	c7 01       	movw	r24, r14
    3800:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3804:	61 e2       	ldi	r22, 0x21	; 33
    3806:	c7 01       	movw	r24, r14
    3808:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    380c:	d7 01       	movw	r26, r14
    380e:	d5 96       	adiw	r26, 0x35	; 53
    3810:	ed 91       	ld	r30, X+
    3812:	fc 91       	ld	r31, X
    3814:	d6 97       	sbiw	r26, 0x36	; 54
    3816:	80 81       	ld	r24, Z
    3818:	de 96       	adiw	r26, 0x3e	; 62
    381a:	9c 91       	ld	r25, X
    381c:	89 2b       	or	r24, r25
    381e:	80 83       	st	Z, r24
    3820:	65 2d       	mov	r22, r5
    3822:	c7 01       	movw	r24, r14
    3824:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3828:	64 2d       	mov	r22, r4
    382a:	c7 01       	movw	r24, r14
    382c:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3830:	d7 01       	movw	r26, r14
    3832:	d3 96       	adiw	r26, 0x33	; 51
    3834:	ed 91       	ld	r30, X+
    3836:	fc 91       	ld	r31, X
    3838:	d4 97       	sbiw	r26, 0x34	; 52
    383a:	80 81       	ld	r24, Z
    383c:	dd 96       	adiw	r26, 0x3d	; 61
    383e:	9c 91       	ld	r25, X
    3840:	89 2b       	or	r24, r25
    3842:	80 83       	st	Z, r24
    3844:	28 96       	adiw	r28, 0x08	; 8
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	f8 94       	cli
    384a:	de bf       	out	0x3e, r29	; 62
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	cd bf       	out	0x3d, r28	; 61
    3850:	df 91       	pop	r29
    3852:	cf 91       	pop	r28
    3854:	1f 91       	pop	r17
    3856:	0f 91       	pop	r16
    3858:	ff 90       	pop	r15
    385a:	ef 90       	pop	r14
    385c:	df 90       	pop	r13
    385e:	cf 90       	pop	r12
    3860:	bf 90       	pop	r11
    3862:	af 90       	pop	r10
    3864:	9f 90       	pop	r9
    3866:	8f 90       	pop	r8
    3868:	7f 90       	pop	r7
    386a:	6f 90       	pop	r6
    386c:	5f 90       	pop	r5
    386e:	4f 90       	pop	r4
    3870:	3f 90       	pop	r3
    3872:	2f 90       	pop	r2
    3874:	08 95       	ret
    3876:	80 89       	ldd	r24, Z+16	; 0x10
    3878:	91 89       	ldd	r25, Z+17	; 0x11
    387a:	a9 01       	movw	r20, r18
    387c:	40 95       	com	r20
    387e:	50 95       	com	r21
    3880:	4c 01       	movw	r8, r24
    3882:	86 1a       	sub	r8, r22
    3884:	97 0a       	sbc	r9, r23
    3886:	b1 e0       	ldi	r27, 0x01	; 1
    3888:	8b 1a       	sub	r8, r27
    388a:	91 08       	sbc	r9, r1
    388c:	22 89       	ldd	r18, Z+18	; 0x12
    388e:	33 89       	ldd	r19, Z+19	; 0x13
    3890:	b8 01       	movw	r22, r16
    3892:	60 95       	com	r22
    3894:	70 95       	com	r23
    3896:	86 01       	movw	r16, r12
    3898:	00 95       	com	r16
    389a:	10 95       	com	r17
    389c:	02 0f       	add	r16, r18
    389e:	13 1f       	adc	r17, r19
    38a0:	28 01       	movw	r4, r16
    38a2:	34 01       	movw	r6, r8
    38a4:	6b 01       	movw	r12, r22
    38a6:	c2 0e       	add	r12, r18
    38a8:	d3 1e       	adc	r13, r19
    38aa:	5a 01       	movw	r10, r20
    38ac:	e9 ce       	rjmp	.-558    	; 0x3680 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x98>
    38ae:	82 89       	ldd	r24, Z+18	; 0x12
    38b0:	93 89       	ldd	r25, Z+19	; 0x13
    38b2:	20 95       	com	r18
    38b4:	30 95       	com	r19
    38b6:	2c 01       	movw	r4, r24
    38b8:	46 1a       	sub	r4, r22
    38ba:	57 0a       	sbc	r5, r23
    38bc:	b1 e0       	ldi	r27, 0x01	; 1
    38be:	4b 1a       	sub	r4, r27
    38c0:	51 08       	sbc	r5, r1
    38c2:	3a 01       	movw	r6, r20
    38c4:	48 01       	movw	r8, r16
    38c6:	82 01       	movw	r16, r4
    38c8:	56 01       	movw	r10, r12
    38ca:	69 01       	movw	r12, r18
    38cc:	c8 0e       	add	r12, r24
    38ce:	d9 1e       	adc	r13, r25
    38d0:	d9 ce       	rjmp	.-590    	; 0x3684 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x9c>
    38d2:	81 30       	cpi	r24, 0x01	; 1
    38d4:	91 05       	cpc	r25, r1
    38d6:	09 f0       	breq	.+2      	; 0x38da <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x2f2>
    38d8:	d9 c0       	rjmp	.+434    	; 0x3a8c <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4a4>
    38da:	05 a8       	ldd	r0, Z+53	; 0x35
    38dc:	f6 a9       	ldd	r31, Z+54	; 0x36
    38de:	e0 2d       	mov	r30, r0
    38e0:	80 81       	ld	r24, Z
    38e2:	37 01       	movw	r6, r14
    38e4:	b3 e4       	ldi	r27, 0x43	; 67
    38e6:	6b 0e       	add	r6, r27
    38e8:	71 1c       	adc	r7, r1
    38ea:	d3 01       	movw	r26, r6
    38ec:	9c 91       	ld	r25, X
    38ee:	89 23       	and	r24, r25
    38f0:	80 83       	st	Z, r24
    38f2:	62 e0       	ldi	r22, 0x02	; 2
    38f4:	c7 01       	movw	r24, r14
    38f6:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    38fa:	d7 01       	movw	r26, r14
    38fc:	d5 96       	adiw	r26, 0x35	; 53
    38fe:	ed 91       	ld	r30, X+
    3900:	fc 91       	ld	r31, X
    3902:	d6 97       	sbiw	r26, 0x36	; 54
    3904:	80 81       	ld	r24, Z
    3906:	de 96       	adiw	r26, 0x3e	; 62
    3908:	9c 91       	ld	r25, X
    390a:	89 2b       	or	r24, r25
    390c:	80 83       	st	Z, r24
    390e:	6b 2d       	mov	r22, r11
    3910:	c7 01       	movw	r24, r14
    3912:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3916:	d7 01       	movw	r26, r14
    3918:	d5 96       	adiw	r26, 0x35	; 53
    391a:	ed 91       	ld	r30, X+
    391c:	fc 91       	ld	r31, X
    391e:	80 81       	ld	r24, Z
    3920:	d3 01       	movw	r26, r6
    3922:	9c 91       	ld	r25, X
    3924:	89 23       	and	r24, r25
    3926:	80 83       	st	Z, r24
    3928:	63 e0       	ldi	r22, 0x03	; 3
    392a:	c7 01       	movw	r24, r14
    392c:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3930:	d7 01       	movw	r26, r14
    3932:	d5 96       	adiw	r26, 0x35	; 53
    3934:	ed 91       	ld	r30, X+
    3936:	fc 91       	ld	r31, X
    3938:	d6 97       	sbiw	r26, 0x36	; 54
    393a:	80 81       	ld	r24, Z
    393c:	de 96       	adiw	r26, 0x3e	; 62
    393e:	9c 91       	ld	r25, X
    3940:	89 2b       	or	r24, r25
    3942:	80 83       	st	Z, r24
    3944:	6a 2d       	mov	r22, r10
    3946:	c7 01       	movw	r24, r14
    3948:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    394c:	d7 01       	movw	r26, r14
    394e:	d5 96       	adiw	r26, 0x35	; 53
    3950:	ed 91       	ld	r30, X+
    3952:	fc 91       	ld	r31, X
    3954:	80 81       	ld	r24, Z
    3956:	d3 01       	movw	r26, r6
    3958:	9c 91       	ld	r25, X
    395a:	89 23       	and	r24, r25
    395c:	80 83       	st	Z, r24
    395e:	66 e0       	ldi	r22, 0x06	; 6
    3960:	c7 01       	movw	r24, r14
    3962:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3966:	d7 01       	movw	r26, r14
    3968:	d5 96       	adiw	r26, 0x35	; 53
    396a:	ed 91       	ld	r30, X+
    396c:	fc 91       	ld	r31, X
    396e:	d6 97       	sbiw	r26, 0x36	; 54
    3970:	80 81       	ld	r24, Z
    3972:	de 96       	adiw	r26, 0x3e	; 62
    3974:	9c 91       	ld	r25, X
    3976:	89 2b       	or	r24, r25
    3978:	80 83       	st	Z, r24
    397a:	6d 2d       	mov	r22, r13
    397c:	c7 01       	movw	r24, r14
    397e:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3982:	d7 01       	movw	r26, r14
    3984:	d5 96       	adiw	r26, 0x35	; 53
    3986:	ed 91       	ld	r30, X+
    3988:	fc 91       	ld	r31, X
    398a:	80 81       	ld	r24, Z
    398c:	d3 01       	movw	r26, r6
    398e:	9c 91       	ld	r25, X
    3990:	89 23       	and	r24, r25
    3992:	80 83       	st	Z, r24
    3994:	67 e0       	ldi	r22, 0x07	; 7
    3996:	c7 01       	movw	r24, r14
    3998:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    399c:	d7 01       	movw	r26, r14
    399e:	d5 96       	adiw	r26, 0x35	; 53
    39a0:	ed 91       	ld	r30, X+
    39a2:	fc 91       	ld	r31, X
    39a4:	d6 97       	sbiw	r26, 0x36	; 54
    39a6:	80 81       	ld	r24, Z
    39a8:	de 96       	adiw	r26, 0x3e	; 62
    39aa:	9c 91       	ld	r25, X
    39ac:	89 2b       	or	r24, r25
    39ae:	80 83       	st	Z, r24
    39b0:	6c 2d       	mov	r22, r12
    39b2:	c7 01       	movw	r24, r14
    39b4:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    39b8:	d7 01       	movw	r26, r14
    39ba:	d5 96       	adiw	r26, 0x35	; 53
    39bc:	ed 91       	ld	r30, X+
    39be:	fc 91       	ld	r31, X
    39c0:	80 81       	ld	r24, Z
    39c2:	d3 01       	movw	r26, r6
    39c4:	9c 91       	ld	r25, X
    39c6:	89 23       	and	r24, r25
    39c8:	80 83       	st	Z, r24
    39ca:	64 e0       	ldi	r22, 0x04	; 4
    39cc:	c7 01       	movw	r24, r14
    39ce:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    39d2:	d7 01       	movw	r26, r14
    39d4:	d5 96       	adiw	r26, 0x35	; 53
    39d6:	ed 91       	ld	r30, X+
    39d8:	fc 91       	ld	r31, X
    39da:	d6 97       	sbiw	r26, 0x36	; 54
    39dc:	80 81       	ld	r24, Z
    39de:	de 96       	adiw	r26, 0x3e	; 62
    39e0:	9c 91       	ld	r25, X
    39e2:	89 2b       	or	r24, r25
    39e4:	80 83       	st	Z, r24
    39e6:	69 2d       	mov	r22, r9
    39e8:	c7 01       	movw	r24, r14
    39ea:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    39ee:	d7 01       	movw	r26, r14
    39f0:	d5 96       	adiw	r26, 0x35	; 53
    39f2:	ed 91       	ld	r30, X+
    39f4:	fc 91       	ld	r31, X
    39f6:	80 81       	ld	r24, Z
    39f8:	d3 01       	movw	r26, r6
    39fa:	9c 91       	ld	r25, X
    39fc:	89 23       	and	r24, r25
    39fe:	80 83       	st	Z, r24
    3a00:	65 e0       	ldi	r22, 0x05	; 5
    3a02:	c7 01       	movw	r24, r14
    3a04:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3a08:	d7 01       	movw	r26, r14
    3a0a:	d5 96       	adiw	r26, 0x35	; 53
    3a0c:	ed 91       	ld	r30, X+
    3a0e:	fc 91       	ld	r31, X
    3a10:	d6 97       	sbiw	r26, 0x36	; 54
    3a12:	80 81       	ld	r24, Z
    3a14:	de 96       	adiw	r26, 0x3e	; 62
    3a16:	9c 91       	ld	r25, X
    3a18:	89 2b       	or	r24, r25
    3a1a:	80 83       	st	Z, r24
    3a1c:	68 2d       	mov	r22, r8
    3a1e:	c7 01       	movw	r24, r14
    3a20:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3a24:	d7 01       	movw	r26, r14
    3a26:	d5 96       	adiw	r26, 0x35	; 53
    3a28:	ed 91       	ld	r30, X+
    3a2a:	fc 91       	ld	r31, X
    3a2c:	80 81       	ld	r24, Z
    3a2e:	d3 01       	movw	r26, r6
    3a30:	9c 91       	ld	r25, X
    3a32:	89 23       	and	r24, r25
    3a34:	80 83       	st	Z, r24
    3a36:	68 e0       	ldi	r22, 0x08	; 8
    3a38:	c7 01       	movw	r24, r14
    3a3a:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3a3e:	d7 01       	movw	r26, r14
    3a40:	d5 96       	adiw	r26, 0x35	; 53
    3a42:	ed 91       	ld	r30, X+
    3a44:	fc 91       	ld	r31, X
    3a46:	d6 97       	sbiw	r26, 0x36	; 54
    3a48:	80 81       	ld	r24, Z
    3a4a:	de 96       	adiw	r26, 0x3e	; 62
    3a4c:	9c 91       	ld	r25, X
    3a4e:	89 2b       	or	r24, r25
    3a50:	80 83       	st	Z, r24
    3a52:	61 2f       	mov	r22, r17
    3a54:	c7 01       	movw	r24, r14
    3a56:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3a5a:	d7 01       	movw	r26, r14
    3a5c:	d5 96       	adiw	r26, 0x35	; 53
    3a5e:	ed 91       	ld	r30, X+
    3a60:	fc 91       	ld	r31, X
    3a62:	80 81       	ld	r24, Z
    3a64:	d3 01       	movw	r26, r6
    3a66:	9c 91       	ld	r25, X
    3a68:	89 23       	and	r24, r25
    3a6a:	80 83       	st	Z, r24
    3a6c:	69 e0       	ldi	r22, 0x09	; 9
    3a6e:	c7 01       	movw	r24, r14
    3a70:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3a74:	d7 01       	movw	r26, r14
    3a76:	d5 96       	adiw	r26, 0x35	; 53
    3a78:	ed 91       	ld	r30, X+
    3a7a:	fc 91       	ld	r31, X
    3a7c:	d6 97       	sbiw	r26, 0x36	; 54
    3a7e:	80 81       	ld	r24, Z
    3a80:	de 96       	adiw	r26, 0x3e	; 62
    3a82:	9c 91       	ld	r25, X
    3a84:	89 2b       	or	r24, r25
    3a86:	80 83       	st	Z, r24
    3a88:	60 2f       	mov	r22, r16
    3a8a:	cf ce       	rjmp	.-610    	; 0x382a <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x242>
    3a8c:	87 30       	cpi	r24, 0x07	; 7
    3a8e:	91 05       	cpc	r25, r1
    3a90:	09 f0       	breq	.+2      	; 0x3a94 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4ac>
    3a92:	ac c0       	rjmp	.+344    	; 0x3bec <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x604>
    3a94:	80 8d       	ldd	r24, Z+24	; 0x18
    3a96:	91 8d       	ldd	r25, Z+25	; 0x19
    3a98:	81 30       	cpi	r24, 0x01	; 1
    3a9a:	91 05       	cpc	r25, r1
    3a9c:	31 f0       	breq	.+12     	; 0x3aaa <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4c2>
    3a9e:	58 f0       	brcs	.+22     	; 0x3ab6 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4ce>
    3aa0:	82 30       	cpi	r24, 0x02	; 2
    3aa2:	91 05       	cpc	r25, r1
    3aa4:	41 f0       	breq	.+16     	; 0x3ab6 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4ce>
    3aa6:	03 97       	sbiw	r24, 0x03	; 3
    3aa8:	a1 f4       	brne	.+40     	; 0x3ad2 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4ea>
    3aaa:	22 e0       	ldi	r18, 0x02	; 2
    3aac:	c2 0e       	add	r12, r18
    3aae:	d1 1c       	adc	r13, r1
    3ab0:	0e 5f       	subi	r16, 0xFE	; 254
    3ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab4:	0e c0       	rjmp	.+28     	; 0x3ad2 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x4ea>
    3ab6:	c6 01       	movw	r24, r12
    3ab8:	02 96       	adiw	r24, 0x02	; 2
    3aba:	98 01       	movw	r18, r16
    3abc:	2e 5f       	subi	r18, 0xFE	; 254
    3abe:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac0:	65 01       	movw	r12, r10
    3ac2:	f2 e0       	ldi	r31, 0x02	; 2
    3ac4:	cf 0e       	add	r12, r31
    3ac6:	d1 1c       	adc	r13, r1
    3ac8:	84 01       	movw	r16, r8
    3aca:	0e 5f       	subi	r16, 0xFE	; 254
    3acc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ace:	49 01       	movw	r8, r18
    3ad0:	5c 01       	movw	r10, r24
    3ad2:	d7 01       	movw	r26, r14
    3ad4:	d5 96       	adiw	r26, 0x35	; 53
    3ad6:	ed 91       	ld	r30, X+
    3ad8:	fc 91       	ld	r31, X
    3ada:	80 81       	ld	r24, Z
    3adc:	37 01       	movw	r6, r14
    3ade:	b3 e4       	ldi	r27, 0x43	; 67
    3ae0:	6b 0e       	add	r6, r27
    3ae2:	71 1c       	adc	r7, r1
    3ae4:	d3 01       	movw	r26, r6
    3ae6:	9c 91       	ld	r25, X
    3ae8:	89 23       	and	r24, r25
    3aea:	80 83       	st	Z, r24
    3aec:	f7 01       	movw	r30, r14
    3aee:	67 8d       	ldd	r22, Z+31	; 0x1f
    3af0:	c7 01       	movw	r24, r14
    3af2:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3af6:	d7 01       	movw	r26, r14
    3af8:	d5 96       	adiw	r26, 0x35	; 53
    3afa:	ed 91       	ld	r30, X+
    3afc:	fc 91       	ld	r31, X
    3afe:	d6 97       	sbiw	r26, 0x36	; 54
    3b00:	80 81       	ld	r24, Z
    3b02:	de 96       	adiw	r26, 0x3e	; 62
    3b04:	9c 91       	ld	r25, X
    3b06:	89 2b       	or	r24, r25
    3b08:	80 83       	st	Z, r24
    3b0a:	68 2d       	mov	r22, r8
    3b0c:	c7 01       	movw	r24, r14
    3b0e:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3b12:	d7 01       	movw	r26, r14
    3b14:	d5 96       	adiw	r26, 0x35	; 53
    3b16:	ed 91       	ld	r30, X+
    3b18:	fc 91       	ld	r31, X
    3b1a:	d6 97       	sbiw	r26, 0x36	; 54
    3b1c:	80 81       	ld	r24, Z
    3b1e:	de 96       	adiw	r26, 0x3e	; 62
    3b20:	9c 91       	ld	r25, X
    3b22:	89 2b       	or	r24, r25
    3b24:	80 83       	st	Z, r24
    3b26:	6a 2d       	mov	r22, r10
    3b28:	c7 01       	movw	r24, r14
    3b2a:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3b2e:	d7 01       	movw	r26, r14
    3b30:	d5 96       	adiw	r26, 0x35	; 53
    3b32:	ed 91       	ld	r30, X+
    3b34:	fc 91       	ld	r31, X
    3b36:	80 81       	ld	r24, Z
    3b38:	d3 01       	movw	r26, r6
    3b3a:	9c 91       	ld	r25, X
    3b3c:	89 23       	and	r24, r25
    3b3e:	80 83       	st	Z, r24
    3b40:	f7 01       	movw	r30, r14
    3b42:	61 a1       	ldd	r22, Z+33	; 0x21
    3b44:	c7 01       	movw	r24, r14
    3b46:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3b4a:	d7 01       	movw	r26, r14
    3b4c:	d5 96       	adiw	r26, 0x35	; 53
    3b4e:	ed 91       	ld	r30, X+
    3b50:	fc 91       	ld	r31, X
    3b52:	d6 97       	sbiw	r26, 0x36	; 54
    3b54:	80 81       	ld	r24, Z
    3b56:	de 96       	adiw	r26, 0x3e	; 62
    3b58:	9c 91       	ld	r25, X
    3b5a:	89 2b       	or	r24, r25
    3b5c:	80 83       	st	Z, r24
    3b5e:	60 2f       	mov	r22, r16
    3b60:	c7 01       	movw	r24, r14
    3b62:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3b66:	d7 01       	movw	r26, r14
    3b68:	d5 96       	adiw	r26, 0x35	; 53
    3b6a:	ed 91       	ld	r30, X+
    3b6c:	fc 91       	ld	r31, X
    3b6e:	d6 97       	sbiw	r26, 0x36	; 54
    3b70:	80 81       	ld	r24, Z
    3b72:	de 96       	adiw	r26, 0x3e	; 62
    3b74:	9c 91       	ld	r25, X
    3b76:	89 2b       	or	r24, r25
    3b78:	80 83       	st	Z, r24
    3b7a:	6c 2d       	mov	r22, r12
    3b7c:	c7 01       	movw	r24, r14
    3b7e:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3b82:	d7 01       	movw	r26, r14
    3b84:	d5 96       	adiw	r26, 0x35	; 53
    3b86:	ed 91       	ld	r30, X+
    3b88:	fc 91       	ld	r31, X
    3b8a:	80 81       	ld	r24, Z
    3b8c:	d3 01       	movw	r26, r6
    3b8e:	9c 91       	ld	r25, X
    3b90:	89 23       	and	r24, r25
    3b92:	80 83       	st	Z, r24
    3b94:	61 e2       	ldi	r22, 0x21	; 33
    3b96:	c7 01       	movw	r24, r14
    3b98:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3b9c:	d7 01       	movw	r26, r14
    3b9e:	d5 96       	adiw	r26, 0x35	; 53
    3ba0:	ed 91       	ld	r30, X+
    3ba2:	fc 91       	ld	r31, X
    3ba4:	d6 97       	sbiw	r26, 0x36	; 54
    3ba6:	80 81       	ld	r24, Z
    3ba8:	de 96       	adiw	r26, 0x3e	; 62
    3baa:	9c 91       	ld	r25, X
    3bac:	89 2b       	or	r24, r25
    3bae:	80 83       	st	Z, r24
    3bb0:	6a 2d       	mov	r22, r10
    3bb2:	c7 01       	movw	r24, r14
    3bb4:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3bb8:	d7 01       	movw	r26, r14
    3bba:	d5 96       	adiw	r26, 0x35	; 53
    3bbc:	ed 91       	ld	r30, X+
    3bbe:	fc 91       	ld	r31, X
    3bc0:	d6 97       	sbiw	r26, 0x36	; 54
    3bc2:	80 81       	ld	r24, Z
    3bc4:	de 96       	adiw	r26, 0x3e	; 62
    3bc6:	9c 91       	ld	r25, X
    3bc8:	89 2b       	or	r24, r25
    3bca:	80 83       	st	Z, r24
    3bcc:	6c 2d       	mov	r22, r12
    3bce:	c7 01       	movw	r24, r14
    3bd0:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3bd4:	d7 01       	movw	r26, r14
    3bd6:	d5 96       	adiw	r26, 0x35	; 53
    3bd8:	ed 91       	ld	r30, X+
    3bda:	fc 91       	ld	r31, X
    3bdc:	80 81       	ld	r24, Z
    3bde:	d3 01       	movw	r26, r6
    3be0:	9c 91       	ld	r25, X
    3be2:	89 23       	and	r24, r25
    3be4:	80 83       	st	Z, r24
    3be6:	f7 01       	movw	r30, r14
    3be8:	63 a1       	ldd	r22, Z+35	; 0x23
    3bea:	1f ce       	rjmp	.-962    	; 0x382a <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x242>
    3bec:	88 30       	cpi	r24, 0x08	; 8
    3bee:	91 05       	cpc	r25, r1
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x60c>
    3bf2:	28 ce       	rjmp	.-944    	; 0x3844 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x25c>
    3bf4:	67 8d       	ldd	r22, Z+31	; 0x1f
    3bf6:	09 97       	sbiw	r24, 0x09	; 9
    3bf8:	69 f5       	brne	.+90     	; 0x3c54 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x66c>
    3bfa:	86 85       	ldd	r24, Z+14	; 0x0e
    3bfc:	28 2f       	mov	r18, r24
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	a9 01       	movw	r20, r18
    3c02:	4a 0d       	add	r20, r10
    3c04:	5b 1d       	adc	r21, r11
    3c06:	5d 83       	std	Y+5, r21	; 0x05
    3c08:	a8 0e       	add	r10, r24
    3c0a:	ae 82       	std	Y+6, r10	; 0x06
    3c0c:	28 0d       	add	r18, r8
    3c0e:	39 1d       	adc	r19, r9
    3c10:	3f 83       	std	Y+7, r19	; 0x07
    3c12:	88 0e       	add	r8, r24
    3c14:	88 86       	std	Y+8, r8	; 0x08
    3c16:	87 85       	ldd	r24, Z+15	; 0x0f
    3c18:	28 2f       	mov	r18, r24
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	a9 01       	movw	r20, r18
    3c1e:	4c 0d       	add	r20, r12
    3c20:	5d 1d       	adc	r21, r13
    3c22:	59 83       	std	Y+1, r21	; 0x01
    3c24:	c8 0e       	add	r12, r24
    3c26:	ca 82       	std	Y+2, r12	; 0x02
    3c28:	20 0f       	add	r18, r16
    3c2a:	31 1f       	adc	r19, r17
    3c2c:	3b 83       	std	Y+3, r19	; 0x03
    3c2e:	08 0f       	add	r16, r24
    3c30:	0c 83       	std	Y+4, r16	; 0x04
    3c32:	24 e0       	ldi	r18, 0x04	; 4
    3c34:	ae 01       	movw	r20, r28
    3c36:	4b 5f       	subi	r20, 0xFB	; 251
    3c38:	5f 4f       	sbci	r21, 0xFF	; 255
    3c3a:	c7 01       	movw	r24, r14
    3c3c:	0e 94 83 1a 	call	0x3506	; 0x3506 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
    3c40:	24 e0       	ldi	r18, 0x04	; 4
    3c42:	ae 01       	movw	r20, r28
    3c44:	4f 5f       	subi	r20, 0xFF	; 255
    3c46:	5f 4f       	sbci	r21, 0xFF	; 255
    3c48:	f7 01       	movw	r30, r14
    3c4a:	61 a1       	ldd	r22, Z+33	; 0x21
    3c4c:	c7 01       	movw	r24, r14
    3c4e:	0e 94 83 1a 	call	0x3506	; 0x3506 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
    3c52:	ee cd       	rjmp	.-1060   	; 0x3830 <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x248>
    3c54:	bd 82       	std	Y+5, r11	; 0x05
    3c56:	ae 82       	std	Y+6, r10	; 0x06
    3c58:	9f 82       	std	Y+7, r9	; 0x07
    3c5a:	28 87       	std	Y+8, r18	; 0x08
    3c5c:	d9 82       	std	Y+1, r13	; 0x01
    3c5e:	4a 83       	std	Y+2, r20	; 0x02
    3c60:	1b 83       	std	Y+3, r17	; 0x03
    3c62:	0c 83       	std	Y+4, r16	; 0x04
    3c64:	24 e0       	ldi	r18, 0x04	; 4
    3c66:	ae 01       	movw	r20, r28
    3c68:	4b 5f       	subi	r20, 0xFB	; 251
    3c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c6c:	c7 01       	movw	r24, r14
    3c6e:	0e 94 83 1a 	call	0x3506	; 0x3506 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
    3c72:	24 e0       	ldi	r18, 0x04	; 4
    3c74:	ae 01       	movw	r20, r28
    3c76:	4f 5f       	subi	r20, 0xFF	; 255
    3c78:	5f 4f       	sbci	r21, 0xFF	; 255
    3c7a:	d7 01       	movw	r26, r14
    3c7c:	91 96       	adiw	r26, 0x21	; 33
    3c7e:	6c 91       	ld	r22, X
    3c80:	e5 cf       	rjmp	.-54     	; 0x3c4c <LCDWIKI_SPI::Set_Addr_Window(int, int, int, int)+0x664>

00003c82 <LCDWIKI_SPI::Set_LR()>:
_ZN11LCDWIKI_SPI6Set_LREv():
    3c82:	0f 93       	push	r16
    3c84:	1f 93       	push	r17
    3c86:	cf 93       	push	r28
    3c88:	df 93       	push	r29
    3c8a:	ec 01       	movw	r28, r24
    3c8c:	eb a9       	ldd	r30, Y+51	; 0x33
    3c8e:	fc a9       	ldd	r31, Y+52	; 0x34
    3c90:	80 81       	ld	r24, Z
    3c92:	de 01       	movw	r26, r28
    3c94:	ae 5b       	subi	r26, 0xBE	; 190
    3c96:	bf 4f       	sbci	r27, 0xFF	; 255
    3c98:	9c 91       	ld	r25, X
    3c9a:	89 23       	and	r24, r25
    3c9c:	80 83       	st	Z, r24
    3c9e:	ed a9       	ldd	r30, Y+53	; 0x35
    3ca0:	fe a9       	ldd	r31, Y+54	; 0x36
    3ca2:	80 81       	ld	r24, Z
    3ca4:	8e 01       	movw	r16, r28
    3ca6:	0d 5b       	subi	r16, 0xBD	; 189
    3ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    3caa:	d8 01       	movw	r26, r16
    3cac:	9c 91       	ld	r25, X
    3cae:	89 23       	and	r24, r25
    3cb0:	80 83       	st	Z, r24
    3cb2:	64 e0       	ldi	r22, 0x04	; 4
    3cb4:	ce 01       	movw	r24, r28
    3cb6:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3cba:	ed a9       	ldd	r30, Y+53	; 0x35
    3cbc:	fe a9       	ldd	r31, Y+54	; 0x36
    3cbe:	80 81       	ld	r24, Z
    3cc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cc2:	89 2b       	or	r24, r25
    3cc4:	80 83       	st	Z, r24
    3cc6:	8c 89       	ldd	r24, Y+20	; 0x14
    3cc8:	9d 89       	ldd	r25, Y+21	; 0x15
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	69 2f       	mov	r22, r25
    3cce:	ce 01       	movw	r24, r28
    3cd0:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3cd4:	ed a9       	ldd	r30, Y+53	; 0x35
    3cd6:	fe a9       	ldd	r31, Y+54	; 0x36
    3cd8:	80 81       	ld	r24, Z
    3cda:	d8 01       	movw	r26, r16
    3cdc:	9c 91       	ld	r25, X
    3cde:	89 23       	and	r24, r25
    3ce0:	80 83       	st	Z, r24
    3ce2:	65 e0       	ldi	r22, 0x05	; 5
    3ce4:	ce 01       	movw	r24, r28
    3ce6:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3cea:	ed a9       	ldd	r30, Y+53	; 0x35
    3cec:	fe a9       	ldd	r31, Y+54	; 0x36
    3cee:	80 81       	ld	r24, Z
    3cf0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cf2:	89 2b       	or	r24, r25
    3cf4:	80 83       	st	Z, r24
    3cf6:	6c 89       	ldd	r22, Y+20	; 0x14
    3cf8:	61 50       	subi	r22, 0x01	; 1
    3cfa:	ce 01       	movw	r24, r28
    3cfc:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3d00:	ed a9       	ldd	r30, Y+53	; 0x35
    3d02:	fe a9       	ldd	r31, Y+54	; 0x36
    3d04:	80 81       	ld	r24, Z
    3d06:	d8 01       	movw	r26, r16
    3d08:	9c 91       	ld	r25, X
    3d0a:	89 23       	and	r24, r25
    3d0c:	80 83       	st	Z, r24
    3d0e:	68 e0       	ldi	r22, 0x08	; 8
    3d10:	ce 01       	movw	r24, r28
    3d12:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3d16:	ed a9       	ldd	r30, Y+53	; 0x35
    3d18:	fe a9       	ldd	r31, Y+54	; 0x36
    3d1a:	80 81       	ld	r24, Z
    3d1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d1e:	89 2b       	or	r24, r25
    3d20:	80 83       	st	Z, r24
    3d22:	8e 89       	ldd	r24, Y+22	; 0x16
    3d24:	9f 89       	ldd	r25, Y+23	; 0x17
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	69 2f       	mov	r22, r25
    3d2a:	ce 01       	movw	r24, r28
    3d2c:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3d30:	ed a9       	ldd	r30, Y+53	; 0x35
    3d32:	fe a9       	ldd	r31, Y+54	; 0x36
    3d34:	80 81       	ld	r24, Z
    3d36:	d8 01       	movw	r26, r16
    3d38:	9c 91       	ld	r25, X
    3d3a:	89 23       	and	r24, r25
    3d3c:	80 83       	st	Z, r24
    3d3e:	69 e0       	ldi	r22, 0x09	; 9
    3d40:	ce 01       	movw	r24, r28
    3d42:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3d46:	ed a9       	ldd	r30, Y+53	; 0x35
    3d48:	fe a9       	ldd	r31, Y+54	; 0x36
    3d4a:	80 81       	ld	r24, Z
    3d4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d4e:	89 2b       	or	r24, r25
    3d50:	80 83       	st	Z, r24
    3d52:	6e 89       	ldd	r22, Y+22	; 0x16
    3d54:	61 50       	subi	r22, 0x01	; 1
    3d56:	ce 01       	movw	r24, r28
    3d58:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3d5c:	eb a9       	ldd	r30, Y+51	; 0x33
    3d5e:	fc a9       	ldd	r31, Y+52	; 0x34
    3d60:	80 81       	ld	r24, Z
    3d62:	9d ad       	ldd	r25, Y+61	; 0x3d
    3d64:	89 2b       	or	r24, r25
    3d66:	80 83       	st	Z, r24
    3d68:	df 91       	pop	r29
    3d6a:	cf 91       	pop	r28
    3d6c:	1f 91       	pop	r17
    3d6e:	0f 91       	pop	r16
    3d70:	08 95       	ret

00003d72 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)>:
_ZN11LCDWIKI_SPI9Fill_RectEiiiij():
    3d72:	4f 92       	push	r4
    3d74:	5f 92       	push	r5
    3d76:	6f 92       	push	r6
    3d78:	7f 92       	push	r7
    3d7a:	8f 92       	push	r8
    3d7c:	9f 92       	push	r9
    3d7e:	af 92       	push	r10
    3d80:	bf 92       	push	r11
    3d82:	cf 92       	push	r12
    3d84:	df 92       	push	r13
    3d86:	ef 92       	push	r14
    3d88:	ff 92       	push	r15
    3d8a:	0f 93       	push	r16
    3d8c:	1f 93       	push	r17
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    3d92:	ec 01       	movw	r28, r24
    3d94:	4a 01       	movw	r8, r20
    3d96:	27 01       	movw	r4, r14
    3d98:	37 ff       	sbrs	r19, 7
    3d9a:	05 c0       	rjmp	.+10     	; 0x3da6 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x34>
    3d9c:	62 0f       	add	r22, r18
    3d9e:	73 1f       	adc	r23, r19
    3da0:	31 95       	neg	r19
    3da2:	21 95       	neg	r18
    3da4:	31 09       	sbc	r19, r1
    3da6:	7b 01       	movw	r14, r22
    3da8:	e2 0e       	add	r14, r18
    3daa:	f3 1e       	adc	r15, r19
    3dac:	5b 01       	movw	r10, r22
    3dae:	77 ff       	sbrs	r23, 7
    3db0:	02 c0       	rjmp	.+4      	; 0x3db6 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x44>
    3db2:	b1 2c       	mov	r11, r1
    3db4:	a1 2c       	mov	r10, r1
    3db6:	e8 81       	ld	r30, Y
    3db8:	f9 81       	ldd	r31, Y+1	; 0x01
    3dba:	06 84       	ldd	r0, Z+14	; 0x0e
    3dbc:	f7 85       	ldd	r31, Z+15	; 0x0f
    3dbe:	e0 2d       	mov	r30, r0
    3dc0:	ce 01       	movw	r24, r28
    3dc2:	09 95       	icall
    3dc4:	8e 15       	cp	r24, r14
    3dc6:	9f 05       	cpc	r25, r15
    3dc8:	44 f4       	brge	.+16     	; 0x3dda <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x68>
    3dca:	e8 81       	ld	r30, Y
    3dcc:	f9 81       	ldd	r31, Y+1	; 0x01
    3dce:	06 84       	ldd	r0, Z+14	; 0x0e
    3dd0:	f7 85       	ldd	r31, Z+15	; 0x0f
    3dd2:	e0 2d       	mov	r30, r0
    3dd4:	ce 01       	movw	r24, r28
    3dd6:	09 95       	icall
    3dd8:	7c 01       	movw	r14, r24
    3dda:	67 01       	movw	r12, r14
    3ddc:	ca 18       	sub	r12, r10
    3dde:	db 08       	sbc	r13, r11
    3de0:	17 ff       	sbrs	r17, 7
    3de2:	05 c0       	rjmp	.+10     	; 0x3dee <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x7c>
    3de4:	80 0e       	add	r8, r16
    3de6:	91 1e       	adc	r9, r17
    3de8:	11 95       	neg	r17
    3dea:	01 95       	neg	r16
    3dec:	11 09       	sbc	r17, r1
    3dee:	08 0d       	add	r16, r8
    3df0:	19 1d       	adc	r17, r9
    3df2:	97 fe       	sbrs	r9, 7
    3df4:	02 c0       	rjmp	.+4      	; 0x3dfa <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x88>
    3df6:	91 2c       	mov	r9, r1
    3df8:	81 2c       	mov	r8, r1
    3dfa:	e8 81       	ld	r30, Y
    3dfc:	f9 81       	ldd	r31, Y+1	; 0x01
    3dfe:	04 84       	ldd	r0, Z+12	; 0x0c
    3e00:	f5 85       	ldd	r31, Z+13	; 0x0d
    3e02:	e0 2d       	mov	r30, r0
    3e04:	ce 01       	movw	r24, r28
    3e06:	09 95       	icall
    3e08:	80 17       	cp	r24, r16
    3e0a:	91 07       	cpc	r25, r17
    3e0c:	44 f4       	brge	.+16     	; 0x3e1e <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0xac>
    3e0e:	e8 81       	ld	r30, Y
    3e10:	f9 81       	ldd	r31, Y+1	; 0x01
    3e12:	04 84       	ldd	r0, Z+12	; 0x0c
    3e14:	f5 85       	ldd	r31, Z+13	; 0x0d
    3e16:	e0 2d       	mov	r30, r0
    3e18:	ce 01       	movw	r24, r28
    3e1a:	09 95       	icall
    3e1c:	8c 01       	movw	r16, r24
    3e1e:	38 01       	movw	r6, r16
    3e20:	68 18       	sub	r6, r8
    3e22:	79 08       	sbc	r7, r9
    3e24:	01 50       	subi	r16, 0x01	; 1
    3e26:	11 09       	sbc	r17, r1
    3e28:	97 01       	movw	r18, r14
    3e2a:	21 50       	subi	r18, 0x01	; 1
    3e2c:	31 09       	sbc	r19, r1
    3e2e:	e8 81       	ld	r30, Y
    3e30:	f9 81       	ldd	r31, Y+1	; 0x01
    3e32:	06 80       	ldd	r0, Z+6	; 0x06
    3e34:	f7 81       	ldd	r31, Z+7	; 0x07
    3e36:	e0 2d       	mov	r30, r0
    3e38:	a4 01       	movw	r20, r8
    3e3a:	b5 01       	movw	r22, r10
    3e3c:	ce 01       	movw	r24, r28
    3e3e:	09 95       	icall
    3e40:	eb a9       	ldd	r30, Y+51	; 0x33
    3e42:	fc a9       	ldd	r31, Y+52	; 0x34
    3e44:	80 81       	ld	r24, Z
    3e46:	de 01       	movw	r26, r28
    3e48:	ae 5b       	subi	r26, 0xBE	; 190
    3e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e4c:	9c 91       	ld	r25, X
    3e4e:	89 23       	and	r24, r25
    3e50:	80 83       	st	Z, r24
    3e52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e54:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e56:	88 30       	cpi	r24, 0x08	; 8
    3e58:	91 05       	cpc	r25, r1
    3e5a:	01 f5       	brne	.+64     	; 0x3e9c <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x12a>
    3e5c:	74 01       	movw	r14, r8
    3e5e:	c7 01       	movw	r24, r14
    3e60:	88 19       	sub	r24, r8
    3e62:	99 09       	sbc	r25, r9
    3e64:	86 15       	cp	r24, r6
    3e66:	97 05       	cpc	r25, r7
    3e68:	0c f0       	brlt	.+2      	; 0x3e6c <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0xfa>
    3e6a:	8a c0       	rjmp	.+276    	; 0x3f80 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x20e>
    3e6c:	10 e0       	ldi	r17, 0x00	; 0
    3e6e:	00 e0       	ldi	r16, 0x00	; 0
    3e70:	0c 15       	cp	r16, r12
    3e72:	1d 05       	cpc	r17, r13
    3e74:	7c f4       	brge	.+30     	; 0x3e94 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x122>
    3e76:	b5 01       	movw	r22, r10
    3e78:	60 0f       	add	r22, r16
    3e7a:	71 1f       	adc	r23, r17
    3e7c:	e8 81       	ld	r30, Y
    3e7e:	f9 81       	ldd	r31, Y+1	; 0x01
    3e80:	02 80       	ldd	r0, Z+2	; 0x02
    3e82:	f3 81       	ldd	r31, Z+3	; 0x03
    3e84:	e0 2d       	mov	r30, r0
    3e86:	92 01       	movw	r18, r4
    3e88:	a7 01       	movw	r20, r14
    3e8a:	ce 01       	movw	r24, r28
    3e8c:	09 95       	icall
    3e8e:	0f 5f       	subi	r16, 0xFF	; 255
    3e90:	1f 4f       	sbci	r17, 0xFF	; 255
    3e92:	ee cf       	rjmp	.-36     	; 0x3e70 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0xfe>
    3e94:	8f ef       	ldi	r24, 0xFF	; 255
    3e96:	e8 1a       	sub	r14, r24
    3e98:	f8 0a       	sbc	r15, r24
    3e9a:	e1 cf       	rjmp	.-62     	; 0x3e5e <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0xec>
    3e9c:	8e 01       	movw	r16, r28
    3e9e:	0d 5b       	subi	r16, 0xBD	; 189
    3ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea2:	89 2b       	or	r24, r25
    3ea4:	59 f4       	brne	.+22     	; 0x3ebc <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x14a>
    3ea6:	ed a9       	ldd	r30, Y+53	; 0x35
    3ea8:	fe a9       	ldd	r31, Y+54	; 0x36
    3eaa:	80 81       	ld	r24, Z
    3eac:	d8 01       	movw	r26, r16
    3eae:	9c 91       	ld	r25, X
    3eb0:	89 23       	and	r24, r25
    3eb2:	80 83       	st	Z, r24
    3eb4:	60 e0       	ldi	r22, 0x00	; 0
    3eb6:	ce 01       	movw	r24, r28
    3eb8:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3ebc:	ed a9       	ldd	r30, Y+53	; 0x35
    3ebe:	fe a9       	ldd	r31, Y+54	; 0x36
    3ec0:	80 81       	ld	r24, Z
    3ec2:	d8 01       	movw	r26, r16
    3ec4:	9c 91       	ld	r25, X
    3ec6:	89 23       	and	r24, r25
    3ec8:	80 83       	st	Z, r24
    3eca:	6b a1       	ldd	r22, Y+35	; 0x23
    3ecc:	ce 01       	movw	r24, r28
    3ece:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3ed2:	c6 14       	cp	r12, r6
    3ed4:	d7 04       	cpc	r13, r7
    3ed6:	2c f0       	brlt	.+10     	; 0x3ee2 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x170>
    3ed8:	96 2d       	mov	r25, r6
    3eda:	87 2d       	mov	r24, r7
    3edc:	36 01       	movw	r6, r12
    3ede:	c9 2e       	mov	r12, r25
    3ee0:	d8 2e       	mov	r13, r24
    3ee2:	f5 2c       	mov	r15, r5
    3ee4:	05 2d       	mov	r16, r5
    3ee6:	08 7f       	andi	r16, 0xF8	; 248
    3ee8:	c2 01       	movw	r24, r4
    3eea:	23 e0       	ldi	r18, 0x03	; 3
    3eec:	96 95       	lsr	r25
    3eee:	87 95       	ror	r24
    3ef0:	2a 95       	dec	r18
    3ef2:	e1 f7       	brne	.-8      	; 0x3eec <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x17a>
    3ef4:	18 2f       	mov	r17, r24
    3ef6:	1c 7f       	andi	r17, 0xFC	; 252
    3ef8:	94 2c       	mov	r9, r4
    3efa:	44 0c       	add	r4, r4
    3efc:	44 0c       	add	r4, r4
    3efe:	44 0c       	add	r4, r4
    3f00:	1c 14       	cp	r1, r12
    3f02:	1d 04       	cpc	r1, r13
    3f04:	34 f5       	brge	.+76     	; 0x3f52 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x1e0>
    3f06:	53 01       	movw	r10, r6
    3f08:	ed a9       	ldd	r30, Y+53	; 0x35
    3f0a:	fe a9       	ldd	r31, Y+54	; 0x36
    3f0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f0e:	29 a9       	ldd	r18, Y+49	; 0x31
    3f10:	3a a9       	ldd	r19, Y+50	; 0x32
    3f12:	80 81       	ld	r24, Z
    3f14:	89 2b       	or	r24, r25
    3f16:	80 83       	st	Z, r24
    3f18:	2c 30       	cpi	r18, 0x0C	; 12
    3f1a:	31 05       	cpc	r19, r1
    3f1c:	a1 f4       	brne	.+40     	; 0x3f46 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x1d4>
    3f1e:	60 2f       	mov	r22, r16
    3f20:	ce 01       	movw	r24, r28
    3f22:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3f26:	61 2f       	mov	r22, r17
    3f28:	ce 01       	movw	r24, r28
    3f2a:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3f2e:	64 2d       	mov	r22, r4
    3f30:	ce 01       	movw	r24, r28
    3f32:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3f36:	b1 e0       	ldi	r27, 0x01	; 1
    3f38:	ab 1a       	sub	r10, r27
    3f3a:	b1 08       	sbc	r11, r1
    3f3c:	29 f7       	brne	.-54     	; 0x3f08 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x196>
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	c8 1a       	sub	r12, r24
    3f42:	d1 08       	sbc	r13, r1
    3f44:	dd cf       	rjmp	.-70     	; 0x3f00 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x18e>
    3f46:	6f 2d       	mov	r22, r15
    3f48:	ce 01       	movw	r24, r28
    3f4a:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3f4e:	69 2d       	mov	r22, r9
    3f50:	ef cf       	rjmp	.-34     	; 0x3f30 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x1be>
    3f52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f54:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f56:	00 97       	sbiw	r24, 0x00	; 0
    3f58:	51 f5       	brne	.+84     	; 0x3fae <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x23c>
    3f5a:	0e 89       	ldd	r16, Y+22	; 0x16
    3f5c:	1f 89       	ldd	r17, Y+23	; 0x17
    3f5e:	01 50       	subi	r16, 0x01	; 1
    3f60:	11 09       	sbc	r17, r1
    3f62:	2c 89       	ldd	r18, Y+20	; 0x14
    3f64:	3d 89       	ldd	r19, Y+21	; 0x15
    3f66:	21 50       	subi	r18, 0x01	; 1
    3f68:	31 09       	sbc	r19, r1
    3f6a:	e8 81       	ld	r30, Y
    3f6c:	f9 81       	ldd	r31, Y+1	; 0x01
    3f6e:	06 80       	ldd	r0, Z+6	; 0x06
    3f70:	f7 81       	ldd	r31, Z+7	; 0x07
    3f72:	e0 2d       	mov	r30, r0
    3f74:	50 e0       	ldi	r21, 0x00	; 0
    3f76:	40 e0       	ldi	r20, 0x00	; 0
    3f78:	70 e0       	ldi	r23, 0x00	; 0
    3f7a:	60 e0       	ldi	r22, 0x00	; 0
    3f7c:	ce 01       	movw	r24, r28
    3f7e:	09 95       	icall
    3f80:	eb a9       	ldd	r30, Y+51	; 0x33
    3f82:	fc a9       	ldd	r31, Y+52	; 0x34
    3f84:	80 81       	ld	r24, Z
    3f86:	9d ad       	ldd	r25, Y+61	; 0x3d
    3f88:	89 2b       	or	r24, r25
    3f8a:	80 83       	st	Z, r24
    3f8c:	df 91       	pop	r29
    3f8e:	cf 91       	pop	r28
    3f90:	1f 91       	pop	r17
    3f92:	0f 91       	pop	r16
    3f94:	ff 90       	pop	r15
    3f96:	ef 90       	pop	r14
    3f98:	df 90       	pop	r13
    3f9a:	cf 90       	pop	r12
    3f9c:	bf 90       	pop	r11
    3f9e:	af 90       	pop	r10
    3fa0:	9f 90       	pop	r9
    3fa2:	8f 90       	pop	r8
    3fa4:	7f 90       	pop	r7
    3fa6:	6f 90       	pop	r6
    3fa8:	5f 90       	pop	r5
    3faa:	4f 90       	pop	r4
    3fac:	08 95       	ret
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	39 f7       	brne	.-50     	; 0x3f80 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x20e>
    3fb2:	ce 01       	movw	r24, r28
    3fb4:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <LCDWIKI_SPI::Set_LR()>
    3fb8:	e3 cf       	rjmp	.-58     	; 0x3f80 <LCDWIKI_SPI::Fill_Rect(int, int, int, int, unsigned int)+0x20e>

00003fba <LCDWIKI_SPI::Read_Reg(unsigned int, signed char)>:
_ZN11LCDWIKI_SPI8Read_RegEja():
    3fba:	0f 93       	push	r16
    3fbc:	1f 93       	push	r17
    3fbe:	cf 93       	push	r28
    3fc0:	df 93       	push	r29
    3fc2:	ec 01       	movw	r28, r24
    3fc4:	06 2f       	mov	r16, r22
    3fc6:	67 2f       	mov	r22, r23
    3fc8:	14 2f       	mov	r17, r20
    3fca:	eb a9       	ldd	r30, Y+51	; 0x33
    3fcc:	fc a9       	ldd	r31, Y+52	; 0x34
    3fce:	80 81       	ld	r24, Z
    3fd0:	de 01       	movw	r26, r28
    3fd2:	ae 5b       	subi	r26, 0xBE	; 190
    3fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    3fd6:	9c 91       	ld	r25, X
    3fd8:	89 23       	and	r24, r25
    3fda:	80 83       	st	Z, r24
    3fdc:	ed a9       	ldd	r30, Y+53	; 0x35
    3fde:	fe a9       	ldd	r31, Y+54	; 0x36
    3fe0:	80 81       	ld	r24, Z
    3fe2:	11 96       	adiw	r26, 0x01	; 1
    3fe4:	9c 91       	ld	r25, X
    3fe6:	89 23       	and	r24, r25
    3fe8:	80 83       	st	Z, r24
    3fea:	ce 01       	movw	r24, r28
    3fec:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3ff0:	60 2f       	mov	r22, r16
    3ff2:	ce 01       	movw	r24, r28
    3ff4:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    3ff8:	61 e0       	ldi	r22, 0x01	; 1
    3ffa:	70 e0       	ldi	r23, 0x00	; 0
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 38 29 	call	0x5270	; 0x5270 <delay>
    4004:	ce 01       	movw	r24, r28
    4006:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    400a:	08 2f       	mov	r16, r24
    400c:	ce 01       	movw	r24, r28
    400e:	0e 94 37 19 	call	0x326e	; 0x326e <LCDWIKI_SPI::Spi_Read()>
    4012:	11 50       	subi	r17, 0x01	; 1
    4014:	17 ff       	sbrs	r17, 7
    4016:	f6 cf       	rjmp	.-20     	; 0x4004 <LCDWIKI_SPI::Read_Reg(unsigned int, signed char)+0x4a>
    4018:	eb a9       	ldd	r30, Y+51	; 0x33
    401a:	fc a9       	ldd	r31, Y+52	; 0x34
    401c:	90 81       	ld	r25, Z
    401e:	2d ad       	ldd	r18, Y+61	; 0x3d
    4020:	92 2b       	or	r25, r18
    4022:	90 83       	st	Z, r25
    4024:	90 2f       	mov	r25, r16
    4026:	df 91       	pop	r29
    4028:	cf 91       	pop	r28
    402a:	1f 91       	pop	r17
    402c:	0f 91       	pop	r16
    402e:	08 95       	ret

00004030 <LCDWIKI_SPI::Read_ID()>:
_ZN11LCDWIKI_SPI7Read_IDEv():
    4030:	0f 93       	push	r16
    4032:	1f 93       	push	r17
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	00 d0       	rcall	.+0      	; 0x403a <LCDWIKI_SPI::Read_ID()+0xa>
    403a:	1f 92       	push	r1
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
    4040:	8c 01       	movw	r16, r24
    4042:	40 e0       	ldi	r20, 0x00	; 0
    4044:	64 e0       	ldi	r22, 0x04	; 4
    4046:	70 e0       	ldi	r23, 0x00	; 0
    4048:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <LCDWIKI_SPI::Read_Reg(unsigned int, signed char)>
    404c:	89 2b       	or	r24, r25
    404e:	31 f5       	brne	.+76     	; 0x409c <LCDWIKI_SPI::Read_ID()+0x6c>
    4050:	41 e0       	ldi	r20, 0x01	; 1
    4052:	64 e0       	ldi	r22, 0x04	; 4
    4054:	70 e0       	ldi	r23, 0x00	; 0
    4056:	c8 01       	movw	r24, r16
    4058:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <LCDWIKI_SPI::Read_Reg(unsigned int, signed char)>
    405c:	81 15       	cp	r24, r1
    405e:	90 48       	sbci	r25, 0x80	; 128
    4060:	e9 f4       	brne	.+58     	; 0x409c <LCDWIKI_SPI::Read_ID()+0x6c>
    4062:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <current_lcd_info+0xa3>
    4066:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <current_lcd_info+0xa4>
    406a:	a0 91 db 01 	lds	r26, 0x01DB	; 0x8001db <current_lcd_info+0xa5>
    406e:	89 83       	std	Y+1, r24	; 0x01
    4070:	9a 83       	std	Y+2, r25	; 0x02
    4072:	ab 83       	std	Y+3, r26	; 0x03
    4074:	23 e0       	ldi	r18, 0x03	; 3
    4076:	ae 01       	movw	r20, r28
    4078:	4f 5f       	subi	r20, 0xFF	; 255
    407a:	5f 4f       	sbci	r21, 0xFF	; 255
    407c:	69 eb       	ldi	r22, 0xB9	; 185
    407e:	c8 01       	movw	r24, r16
    4080:	0e 94 83 1a 	call	0x3506	; 0x3506 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
    4084:	40 e0       	ldi	r20, 0x00	; 0
    4086:	60 ed       	ldi	r22, 0xD0	; 208
    4088:	70 e0       	ldi	r23, 0x00	; 0
    408a:	c8 01       	movw	r24, r16
    408c:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <LCDWIKI_SPI::Read_Reg(unsigned int, signed char)>
    4090:	41 e0       	ldi	r20, 0x01	; 1
    4092:	60 ed       	ldi	r22, 0xD0	; 208
    4094:	70 e0       	ldi	r23, 0x00	; 0
    4096:	c8 01       	movw	r24, r16
    4098:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <LCDWIKI_SPI::Read_Reg(unsigned int, signed char)>
    409c:	41 e0       	ldi	r20, 0x01	; 1
    409e:	63 ed       	ldi	r22, 0xD3	; 211
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	c8 01       	movw	r24, r16
    40a4:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <LCDWIKI_SPI::Read_Reg(unsigned int, signed char)>
    40a8:	81 34       	cpi	r24, 0x41	; 65
    40aa:	23 e9       	ldi	r18, 0x93	; 147
    40ac:	92 07       	cpc	r25, r18
    40ae:	71 f0       	breq	.+28     	; 0x40cc <LCDWIKI_SPI::Read_ID()+0x9c>
    40b0:	86 38       	cpi	r24, 0x86	; 134
    40b2:	24 e9       	ldi	r18, 0x94	; 148
    40b4:	92 07       	cpc	r25, r18
    40b6:	51 f0       	breq	.+20     	; 0x40cc <LCDWIKI_SPI::Read_ID()+0x9c>
    40b8:	88 38       	cpi	r24, 0x88	; 136
    40ba:	24 e9       	ldi	r18, 0x94	; 148
    40bc:	92 07       	cpc	r25, r18
    40be:	31 f0       	breq	.+12     	; 0x40cc <LCDWIKI_SPI::Read_ID()+0x9c>
    40c0:	40 e0       	ldi	r20, 0x00	; 0
    40c2:	70 e0       	ldi	r23, 0x00	; 0
    40c4:	60 e0       	ldi	r22, 0x00	; 0
    40c6:	c8 01       	movw	r24, r16
    40c8:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <LCDWIKI_SPI::Read_Reg(unsigned int, signed char)>
    40cc:	0f 90       	pop	r0
    40ce:	0f 90       	pop	r0
    40d0:	0f 90       	pop	r0
    40d2:	df 91       	pop	r29
    40d4:	cf 91       	pop	r28
    40d6:	1f 91       	pop	r17
    40d8:	0f 91       	pop	r16
    40da:	08 95       	ret

000040dc <LCDWIKI_SPI::Vert_Scroll(int, int, int)>:
_ZN11LCDWIKI_SPI11Vert_ScrollEiii():
    40dc:	cf 92       	push	r12
    40de:	df 92       	push	r13
    40e0:	ef 92       	push	r14
    40e2:	ff 92       	push	r15
    40e4:	0f 93       	push	r16
    40e6:	1f 93       	push	r17
    40e8:	cf 93       	push	r28
    40ea:	df 93       	push	r29
    40ec:	00 d0       	rcall	.+0      	; 0x40ee <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x12>
    40ee:	00 d0       	rcall	.+0      	; 0x40f0 <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x14>
    40f0:	00 d0       	rcall	.+0      	; 0x40f2 <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x16>
    40f2:	cd b7       	in	r28, 0x3d	; 61
    40f4:	de b7       	in	r29, 0x3e	; 62
    40f6:	8c 01       	movw	r16, r24
    40f8:	79 01       	movw	r14, r18
    40fa:	fc 01       	movw	r30, r24
    40fc:	22 8d       	ldd	r18, Z+26	; 0x1a
    40fe:	33 8d       	ldd	r19, Z+27	; 0x1b
    4100:	82 89       	ldd	r24, Z+18	; 0x12
    4102:	93 89       	ldd	r25, Z+19	; 0x13
    4104:	86 1b       	sub	r24, r22
    4106:	97 0b       	sbc	r25, r23
    4108:	84 1b       	sub	r24, r20
    410a:	95 0b       	sbc	r25, r21
    410c:	29 30       	cpi	r18, 0x09	; 9
    410e:	31 05       	cpc	r19, r1
    4110:	09 f4       	brne	.+2      	; 0x4114 <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x38>
    4112:	04 96       	adiw	r24, 0x04	; 4
    4114:	ee 27       	eor	r30, r30
    4116:	ff 27       	eor	r31, r31
    4118:	e4 1b       	sub	r30, r20
    411a:	f5 0b       	sbc	r31, r21
    411c:	6b 01       	movw	r12, r22
    411e:	ee 15       	cp	r30, r14
    4120:	ff 05       	cpc	r31, r15
    4122:	54 f5       	brge	.+84     	; 0x4178 <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x9c>
    4124:	e4 16       	cp	r14, r20
    4126:	f5 06       	cpc	r15, r21
    4128:	3c f5       	brge	.+78     	; 0x4178 <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x9c>
    412a:	ce 0c       	add	r12, r14
    412c:	df 1c       	adc	r13, r15
    412e:	f7 fe       	sbrs	r15, 7
    4130:	02 c0       	rjmp	.+4      	; 0x4136 <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x5a>
    4132:	c4 0e       	add	r12, r20
    4134:	d5 1e       	adc	r13, r21
    4136:	21 15       	cp	r18, r1
    4138:	31 05       	cpc	r19, r1
    413a:	09 f5       	brne	.+66     	; 0x417e <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0xa2>
    413c:	f8 01       	movw	r30, r16
    413e:	67 a1       	ldd	r22, Z+39	; 0x27
    4140:	70 a5       	ldd	r23, Z+40	; 0x28
    4142:	43 e0       	ldi	r20, 0x03	; 3
    4144:	50 e0       	ldi	r21, 0x00	; 0
    4146:	c8 01       	movw	r24, r16
    4148:	0e 94 48 1a 	call	0x3490	; 0x3490 <LCDWIKI_SPI::Write_Cmd_Data(unsigned int, unsigned int)>
    414c:	f8 01       	movw	r30, r16
    414e:	61 a5       	ldd	r22, Z+41	; 0x29
    4150:	72 a5       	ldd	r23, Z+42	; 0x2a
    4152:	a6 01       	movw	r20, r12
    4154:	c8 01       	movw	r24, r16
    4156:	0e 94 48 1a 	call	0x3490	; 0x3490 <LCDWIKI_SPI::Write_Cmd_Data(unsigned int, unsigned int)>
    415a:	26 96       	adiw	r28, 0x06	; 6
    415c:	0f b6       	in	r0, 0x3f	; 63
    415e:	f8 94       	cli
    4160:	de bf       	out	0x3e, r29	; 62
    4162:	0f be       	out	0x3f, r0	; 63
    4164:	cd bf       	out	0x3d, r28	; 61
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	1f 91       	pop	r17
    416c:	0f 91       	pop	r16
    416e:	ff 90       	pop	r15
    4170:	ef 90       	pop	r14
    4172:	df 90       	pop	r13
    4174:	cf 90       	pop	r12
    4176:	08 95       	ret
    4178:	f1 2c       	mov	r15, r1
    417a:	e1 2c       	mov	r14, r1
    417c:	dc cf       	rjmp	.-72     	; 0x4136 <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x5a>
    417e:	27 30       	cpi	r18, 0x07	; 7
    4180:	31 05       	cpc	r19, r1
    4182:	21 f4       	brne	.+8      	; 0x418c <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0xb0>
    4184:	f8 01       	movw	r30, r16
    4186:	67 a1       	ldd	r22, Z+39	; 0x27
    4188:	70 a5       	ldd	r23, Z+40	; 0x28
    418a:	e3 cf       	rjmp	.-58     	; 0x4152 <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x76>
    418c:	28 30       	cpi	r18, 0x08	; 8
    418e:	31 05       	cpc	r19, r1
    4190:	21 f3       	breq	.-56     	; 0x415a <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x7e>
    4192:	79 83       	std	Y+1, r23	; 0x01
    4194:	6a 83       	std	Y+2, r22	; 0x02
    4196:	5b 83       	std	Y+3, r21	; 0x03
    4198:	4c 83       	std	Y+4, r20	; 0x04
    419a:	9d 83       	std	Y+5, r25	; 0x05
    419c:	8e 83       	std	Y+6, r24	; 0x06
    419e:	26 e0       	ldi	r18, 0x06	; 6
    41a0:	ae 01       	movw	r20, r28
    41a2:	4f 5f       	subi	r20, 0xFF	; 255
    41a4:	5f 4f       	sbci	r21, 0xFF	; 255
    41a6:	f8 01       	movw	r30, r16
    41a8:	67 a1       	ldd	r22, Z+39	; 0x27
    41aa:	c8 01       	movw	r24, r16
    41ac:	0e 94 83 1a 	call	0x3506	; 0x3506 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
    41b0:	d9 82       	std	Y+1, r13	; 0x01
    41b2:	ca 82       	std	Y+2, r12	; 0x02
    41b4:	22 e0       	ldi	r18, 0x02	; 2
    41b6:	ae 01       	movw	r20, r28
    41b8:	4f 5f       	subi	r20, 0xFF	; 255
    41ba:	5f 4f       	sbci	r21, 0xFF	; 255
    41bc:	f8 01       	movw	r30, r16
    41be:	61 a5       	ldd	r22, Z+41	; 0x29
    41c0:	c8 01       	movw	r24, r16
    41c2:	0e 94 83 1a 	call	0x3506	; 0x3506 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
    41c6:	f8 01       	movw	r30, r16
    41c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    41ca:	93 8d       	ldd	r25, Z+27	; 0x1b
    41cc:	01 97       	sbiw	r24, 0x01	; 1
    41ce:	71 f4       	brne	.+28     	; 0x41ec <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x110>
    41d0:	88 e0       	ldi	r24, 0x08	; 8
    41d2:	ef 28       	or	r14, r15
    41d4:	09 f4       	brne	.+2      	; 0x41d8 <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0xfc>
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	89 83       	std	Y+1, r24	; 0x01
    41da:	21 e0       	ldi	r18, 0x01	; 1
    41dc:	ae 01       	movw	r20, r28
    41de:	4f 5f       	subi	r20, 0xFF	; 255
    41e0:	5f 4f       	sbci	r21, 0xFF	; 255
    41e2:	61 e0       	ldi	r22, 0x01	; 1
    41e4:	c8 01       	movw	r24, r16
    41e6:	0e 94 83 1a 	call	0x3506	; 0x3506 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
    41ea:	b7 cf       	rjmp	.-146    	; 0x415a <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x7e>
    41ec:	ef 28       	or	r14, r15
    41ee:	09 f0       	breq	.+2      	; 0x41f2 <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x116>
    41f0:	b4 cf       	rjmp	.-152    	; 0x415a <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x7e>
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	50 e0       	ldi	r21, 0x00	; 0
    41f6:	40 e0       	ldi	r20, 0x00	; 0
    41f8:	63 e1       	ldi	r22, 0x13	; 19
    41fa:	f4 cf       	rjmp	.-24     	; 0x41e4 <LCDWIKI_SPI::Vert_Scroll(int, int, int)+0x108>

000041fc <LCDWIKI_SPI::Set_Rotation(unsigned char)>:
_ZN11LCDWIKI_SPI12Set_RotationEh():
    41fc:	cf 92       	push	r12
    41fe:	df 92       	push	r13
    4200:	ef 92       	push	r14
    4202:	ff 92       	push	r15
    4204:	0f 93       	push	r16
    4206:	1f 93       	push	r17
    4208:	cf 93       	push	r28
    420a:	df 93       	push	r29
    420c:	ec 01       	movw	r28, r24
    420e:	86 2f       	mov	r24, r22
    4210:	83 70       	andi	r24, 0x03	; 3
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	99 8f       	std	Y+25, r25	; 0x19
    4216:	88 8f       	std	Y+24, r24	; 0x18
    4218:	26 2f       	mov	r18, r22
    421a:	21 70       	andi	r18, 0x01	; 1
    421c:	60 ff       	sbrs	r22, 0
    421e:	73 c0       	rjmp	.+230    	; 0x4306 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x10a>
    4220:	8a 89       	ldd	r24, Y+18	; 0x12
    4222:	9b 89       	ldd	r25, Y+19	; 0x13
    4224:	9d 8b       	std	Y+21, r25	; 0x15
    4226:	8c 8b       	std	Y+20, r24	; 0x14
    4228:	22 23       	and	r18, r18
    422a:	09 f4       	brne	.+2      	; 0x422e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x32>
    422c:	6f c0       	rjmp	.+222    	; 0x430c <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x110>
    422e:	88 89       	ldd	r24, Y+16	; 0x10
    4230:	99 89       	ldd	r25, Y+17	; 0x11
    4232:	9f 8b       	std	Y+23, r25	; 0x17
    4234:	8e 8b       	std	Y+22, r24	; 0x16
    4236:	eb a9       	ldd	r30, Y+51	; 0x33
    4238:	fc a9       	ldd	r31, Y+52	; 0x34
    423a:	80 81       	ld	r24, Z
    423c:	de 01       	movw	r26, r28
    423e:	ae 5b       	subi	r26, 0xBE	; 190
    4240:	bf 4f       	sbci	r27, 0xFF	; 255
    4242:	9c 91       	ld	r25, X
    4244:	89 23       	and	r24, r25
    4246:	80 83       	st	Z, r24
    4248:	2a 8d       	ldd	r18, Y+26	; 0x1a
    424a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    424c:	21 15       	cp	r18, r1
    424e:	31 05       	cpc	r19, r1
    4250:	09 f0       	breq	.+2      	; 0x4254 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x58>
    4252:	6a c0       	rjmp	.+212    	; 0x4328 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x12c>
    4254:	88 8d       	ldd	r24, Y+24	; 0x18
    4256:	99 8d       	ldd	r25, Y+25	; 0x19
    4258:	81 30       	cpi	r24, 0x01	; 1
    425a:	91 05       	cpc	r25, r1
    425c:	09 f4       	brne	.+2      	; 0x4260 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x64>
    425e:	59 c0       	rjmp	.+178    	; 0x4312 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x116>
    4260:	08 f4       	brcc	.+2      	; 0x4264 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x68>
    4262:	5f c0       	rjmp	.+190    	; 0x4322 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x126>
    4264:	82 30       	cpi	r24, 0x02	; 2
    4266:	91 05       	cpc	r25, r1
    4268:	09 f4       	brne	.+2      	; 0x426c <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x70>
    426a:	56 c0       	rjmp	.+172    	; 0x4318 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x11c>
    426c:	03 97       	sbiw	r24, 0x03	; 3
    426e:	09 f4       	brne	.+2      	; 0x4272 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x76>
    4270:	55 c0       	rjmp	.+170    	; 0x431c <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x120>
    4272:	ed a9       	ldd	r30, Y+53	; 0x35
    4274:	fe a9       	ldd	r31, Y+54	; 0x36
    4276:	80 81       	ld	r24, Z
    4278:	de 01       	movw	r26, r28
    427a:	ad 5b       	subi	r26, 0xBD	; 189
    427c:	bf 4f       	sbci	r27, 0xFF	; 255
    427e:	9c 91       	ld	r25, X
    4280:	89 23       	and	r24, r25
    4282:	80 83       	st	Z, r24
    4284:	6c a5       	ldd	r22, Y+44	; 0x2c
    4286:	ce 01       	movw	r24, r28
    4288:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    428c:	6b a5       	ldd	r22, Y+43	; 0x2b
    428e:	ce 01       	movw	r24, r28
    4290:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    4294:	ed a9       	ldd	r30, Y+53	; 0x35
    4296:	fe a9       	ldd	r31, Y+54	; 0x36
    4298:	80 81       	ld	r24, Z
    429a:	9e ad       	ldd	r25, Y+62	; 0x3e
    429c:	89 2b       	or	r24, r25
    429e:	80 83       	st	Z, r24
    42a0:	60 e1       	ldi	r22, 0x10	; 16
    42a2:	ce 01       	movw	r24, r28
    42a4:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    42a8:	6c 2d       	mov	r22, r12
    42aa:	ce 01       	movw	r24, r28
    42ac:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    42b0:	0e 89       	ldd	r16, Y+22	; 0x16
    42b2:	1f 89       	ldd	r17, Y+23	; 0x17
    42b4:	01 50       	subi	r16, 0x01	; 1
    42b6:	11 09       	sbc	r17, r1
    42b8:	2c 89       	ldd	r18, Y+20	; 0x14
    42ba:	3d 89       	ldd	r19, Y+21	; 0x15
    42bc:	21 50       	subi	r18, 0x01	; 1
    42be:	31 09       	sbc	r19, r1
    42c0:	e8 81       	ld	r30, Y
    42c2:	f9 81       	ldd	r31, Y+1	; 0x01
    42c4:	06 80       	ldd	r0, Z+6	; 0x06
    42c6:	f7 81       	ldd	r31, Z+7	; 0x07
    42c8:	e0 2d       	mov	r30, r0
    42ca:	50 e0       	ldi	r21, 0x00	; 0
    42cc:	40 e0       	ldi	r20, 0x00	; 0
    42ce:	70 e0       	ldi	r23, 0x00	; 0
    42d0:	60 e0       	ldi	r22, 0x00	; 0
    42d2:	ce 01       	movw	r24, r28
    42d4:	09 95       	icall
    42d6:	4a 89       	ldd	r20, Y+18	; 0x12
    42d8:	5b 89       	ldd	r21, Y+19	; 0x13
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	60 e0       	ldi	r22, 0x00	; 0
    42e2:	ce 01       	movw	r24, r28
    42e4:	0e 94 6e 20 	call	0x40dc	; 0x40dc <LCDWIKI_SPI::Vert_Scroll(int, int, int)>
    42e8:	eb a9       	ldd	r30, Y+51	; 0x33
    42ea:	fc a9       	ldd	r31, Y+52	; 0x34
    42ec:	80 81       	ld	r24, Z
    42ee:	9d ad       	ldd	r25, Y+61	; 0x3d
    42f0:	89 2b       	or	r24, r25
    42f2:	80 83       	st	Z, r24
    42f4:	df 91       	pop	r29
    42f6:	cf 91       	pop	r28
    42f8:	1f 91       	pop	r17
    42fa:	0f 91       	pop	r16
    42fc:	ff 90       	pop	r15
    42fe:	ef 90       	pop	r14
    4300:	df 90       	pop	r13
    4302:	cf 90       	pop	r12
    4304:	08 95       	ret
    4306:	88 89       	ldd	r24, Y+16	; 0x10
    4308:	99 89       	ldd	r25, Y+17	; 0x11
    430a:	8c cf       	rjmp	.-232    	; 0x4224 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x28>
    430c:	8a 89       	ldd	r24, Y+18	; 0x12
    430e:	9b 89       	ldd	r25, Y+19	; 0x13
    4310:	90 cf       	rjmp	.-224    	; 0x4232 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x36>
    4312:	08 e2       	ldi	r16, 0x28	; 40
    4314:	c0 2e       	mov	r12, r16
    4316:	ad cf       	rjmp	.-166    	; 0x4272 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x76>
    4318:	c1 2c       	mov	r12, r1
    431a:	ab cf       	rjmp	.-170    	; 0x4272 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x76>
    431c:	18 e1       	ldi	r17, 0x18	; 24
    431e:	c1 2e       	mov	r12, r17
    4320:	a8 cf       	rjmp	.-176    	; 0x4272 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x76>
    4322:	b0 e3       	ldi	r27, 0x30	; 48
    4324:	cb 2e       	mov	r12, r27
    4326:	a5 cf       	rjmp	.-182    	; 0x4272 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x76>
    4328:	26 30       	cpi	r18, 0x06	; 6
    432a:	31 05       	cpc	r19, r1
    432c:	59 f5       	brne	.+86     	; 0x4384 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x188>
    432e:	88 8d       	ldd	r24, Y+24	; 0x18
    4330:	99 8d       	ldd	r25, Y+25	; 0x19
    4332:	81 30       	cpi	r24, 0x01	; 1
    4334:	91 05       	cpc	r25, r1
    4336:	d9 f0       	breq	.+54     	; 0x436e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x172>
    4338:	10 f1       	brcs	.+68     	; 0x437e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x182>
    433a:	82 30       	cpi	r24, 0x02	; 2
    433c:	91 05       	cpc	r25, r1
    433e:	d1 f0       	breq	.+52     	; 0x4374 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x178>
    4340:	03 97       	sbiw	r24, 0x03	; 3
    4342:	d1 f0       	breq	.+52     	; 0x4378 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x17c>
    4344:	ed a9       	ldd	r30, Y+53	; 0x35
    4346:	fe a9       	ldd	r31, Y+54	; 0x36
    4348:	80 81       	ld	r24, Z
    434a:	de 01       	movw	r26, r28
    434c:	ad 5b       	subi	r26, 0xBD	; 189
    434e:	bf 4f       	sbci	r27, 0xFF	; 255
    4350:	9c 91       	ld	r25, X
    4352:	89 23       	and	r24, r25
    4354:	80 83       	st	Z, r24
    4356:	6b a5       	ldd	r22, Y+43	; 0x2b
    4358:	ce 01       	movw	r24, r28
    435a:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    435e:	ed a9       	ldd	r30, Y+53	; 0x35
    4360:	fe a9       	ldd	r31, Y+54	; 0x36
    4362:	80 81       	ld	r24, Z
    4364:	9e ad       	ldd	r25, Y+62	; 0x3e
    4366:	89 2b       	or	r24, r25
    4368:	80 83       	st	Z, r24
    436a:	6d 2d       	mov	r22, r13
    436c:	9e cf       	rjmp	.-196    	; 0x42aa <LCDWIKI_SPI::Set_Rotation(unsigned char)+0xae>
    436e:	a0 ea       	ldi	r26, 0xA0	; 160
    4370:	da 2e       	mov	r13, r26
    4372:	e8 cf       	rjmp	.-48     	; 0x4344 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x148>
    4374:	d1 2c       	mov	r13, r1
    4376:	e6 cf       	rjmp	.-52     	; 0x4344 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x148>
    4378:	f0 e6       	ldi	r31, 0x60	; 96
    437a:	df 2e       	mov	r13, r31
    437c:	e3 cf       	rjmp	.-58     	; 0x4344 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x148>
    437e:	e0 ed       	ldi	r30, 0xD0	; 208
    4380:	de 2e       	mov	r13, r30
    4382:	e0 cf       	rjmp	.-64     	; 0x4344 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x148>
    4384:	29 30       	cpi	r18, 0x09	; 9
    4386:	31 05       	cpc	r19, r1
    4388:	e1 f5       	brne	.+120    	; 0x4402 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x206>
    438a:	88 8d       	ldd	r24, Y+24	; 0x18
    438c:	99 8d       	ldd	r25, Y+25	; 0x19
    438e:	81 30       	cpi	r24, 0x01	; 1
    4390:	91 05       	cpc	r25, r1
    4392:	11 f1       	breq	.+68     	; 0x43d8 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x1dc>
    4394:	d0 f0       	brcs	.+52     	; 0x43ca <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x1ce>
    4396:	82 30       	cpi	r24, 0x02	; 2
    4398:	91 05       	cpc	r25, r1
    439a:	29 f1       	breq	.+74     	; 0x43e6 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x1ea>
    439c:	03 97       	sbiw	r24, 0x03	; 3
    439e:	51 f1       	breq	.+84     	; 0x43f4 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x1f8>
    43a0:	ed a9       	ldd	r30, Y+53	; 0x35
    43a2:	fe a9       	ldd	r31, Y+54	; 0x36
    43a4:	80 81       	ld	r24, Z
    43a6:	de 01       	movw	r26, r28
    43a8:	ad 5b       	subi	r26, 0xBD	; 189
    43aa:	bf 4f       	sbci	r27, 0xFF	; 255
    43ac:	9c 91       	ld	r25, X
    43ae:	89 23       	and	r24, r25
    43b0:	80 83       	st	Z, r24
    43b2:	6b a5       	ldd	r22, Y+43	; 0x2b
    43b4:	ce 01       	movw	r24, r28
    43b6:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    43ba:	ed a9       	ldd	r30, Y+53	; 0x35
    43bc:	fe a9       	ldd	r31, Y+54	; 0x36
    43be:	80 81       	ld	r24, Z
    43c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    43c2:	89 2b       	or	r24, r25
    43c4:	80 83       	st	Z, r24
    43c6:	6e 2d       	mov	r22, r14
    43c8:	70 cf       	rjmp	.-288    	; 0x42aa <LCDWIKI_SPI::Set_Rotation(unsigned char)+0xae>
    43ca:	82 e0       	ldi	r24, 0x02	; 2
    43cc:	8e 87       	std	Y+14, r24	; 0x0e
    43ce:	83 e0       	ldi	r24, 0x03	; 3
    43d0:	8f 87       	std	Y+15, r24	; 0x0f
    43d2:	78 ed       	ldi	r23, 0xD8	; 216
    43d4:	e7 2e       	mov	r14, r23
    43d6:	e4 cf       	rjmp	.-56     	; 0x43a0 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x1a4>
    43d8:	83 e0       	ldi	r24, 0x03	; 3
    43da:	8e 87       	std	Y+14, r24	; 0x0e
    43dc:	82 e0       	ldi	r24, 0x02	; 2
    43de:	8f 87       	std	Y+15, r24	; 0x0f
    43e0:	68 ea       	ldi	r22, 0xA8	; 168
    43e2:	e6 2e       	mov	r14, r22
    43e4:	dd cf       	rjmp	.-70     	; 0x43a0 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x1a4>
    43e6:	82 e0       	ldi	r24, 0x02	; 2
    43e8:	8e 87       	std	Y+14, r24	; 0x0e
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	8f 87       	std	Y+15, r24	; 0x0f
    43ee:	58 e0       	ldi	r21, 0x08	; 8
    43f0:	e5 2e       	mov	r14, r21
    43f2:	d6 cf       	rjmp	.-84     	; 0x43a0 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x1a4>
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	8e 87       	std	Y+14, r24	; 0x0e
    43f8:	82 e0       	ldi	r24, 0x02	; 2
    43fa:	8f 87       	std	Y+15, r24	; 0x0f
    43fc:	48 e6       	ldi	r20, 0x68	; 104
    43fe:	e4 2e       	mov	r14, r20
    4400:	cf cf       	rjmp	.-98     	; 0x43a0 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x1a4>
    4402:	27 30       	cpi	r18, 0x07	; 7
    4404:	31 05       	cpc	r19, r1
    4406:	09 f0       	breq	.+2      	; 0x440a <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x20e>
    4408:	83 c0       	rjmp	.+262    	; 0x4510 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x314>
    440a:	88 8d       	ldd	r24, Y+24	; 0x18
    440c:	99 8d       	ldd	r25, Y+25	; 0x19
    440e:	81 30       	cpi	r24, 0x01	; 1
    4410:	91 05       	cpc	r25, r1
    4412:	41 f0       	breq	.+16     	; 0x4424 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x228>
    4414:	08 f4       	brcc	.+2      	; 0x4418 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x21c>
    4416:	41 c0       	rjmp	.+130    	; 0x449a <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x29e>
    4418:	82 30       	cpi	r24, 0x02	; 2
    441a:	91 05       	cpc	r25, r1
    441c:	f1 f1       	breq	.+124    	; 0x449a <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x29e>
    441e:	03 97       	sbiw	r24, 0x03	; 3
    4420:	09 f0       	breq	.+2      	; 0x4424 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x228>
    4422:	46 cf       	rjmp	.-372    	; 0x42b0 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0xb4>
    4424:	ed a9       	ldd	r30, Y+53	; 0x35
    4426:	fe a9       	ldd	r31, Y+54	; 0x36
    4428:	80 81       	ld	r24, Z
    442a:	8e 01       	movw	r16, r28
    442c:	0d 5b       	subi	r16, 0xBD	; 189
    442e:	1f 4f       	sbci	r17, 0xFF	; 255
    4430:	d8 01       	movw	r26, r16
    4432:	9c 91       	ld	r25, X
    4434:	89 23       	and	r24, r25
    4436:	80 83       	st	Z, r24
    4438:	60 e0       	ldi	r22, 0x00	; 0
    443a:	ce 01       	movw	r24, r28
    443c:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    4440:	61 e0       	ldi	r22, 0x01	; 1
    4442:	ce 01       	movw	r24, r28
    4444:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    4448:	ed a9       	ldd	r30, Y+53	; 0x35
    444a:	fe a9       	ldd	r31, Y+54	; 0x36
    444c:	80 81       	ld	r24, Z
    444e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4450:	89 2b       	or	r24, r25
    4452:	80 83       	st	Z, r24
    4454:	62 e2       	ldi	r22, 0x22	; 34
    4456:	ce 01       	movw	r24, r28
    4458:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    445c:	63 e8       	ldi	r22, 0x83	; 131
    445e:	ce 01       	movw	r24, r28
    4460:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    4464:	ed a9       	ldd	r30, Y+53	; 0x35
    4466:	fe a9       	ldd	r31, Y+54	; 0x36
    4468:	80 81       	ld	r24, Z
    446a:	d8 01       	movw	r26, r16
    446c:	9c 91       	ld	r25, X
    446e:	89 23       	and	r24, r25
    4470:	80 83       	st	Z, r24
    4472:	60 e0       	ldi	r22, 0x00	; 0
    4474:	ce 01       	movw	r24, r28
    4476:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    447a:	63 e0       	ldi	r22, 0x03	; 3
    447c:	ce 01       	movw	r24, r28
    447e:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    4482:	ed a9       	ldd	r30, Y+53	; 0x35
    4484:	fe a9       	ldd	r31, Y+54	; 0x36
    4486:	80 81       	ld	r24, Z
    4488:	9e ad       	ldd	r25, Y+62	; 0x3e
    448a:	89 2b       	or	r24, r25
    448c:	80 83       	st	Z, r24
    448e:	68 e6       	ldi	r22, 0x68	; 104
    4490:	ce 01       	movw	r24, r28
    4492:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    4496:	68 e3       	ldi	r22, 0x38	; 56
    4498:	08 cf       	rjmp	.-496    	; 0x42aa <LCDWIKI_SPI::Set_Rotation(unsigned char)+0xae>
    449a:	ed a9       	ldd	r30, Y+53	; 0x35
    449c:	fe a9       	ldd	r31, Y+54	; 0x36
    449e:	80 81       	ld	r24, Z
    44a0:	8e 01       	movw	r16, r28
    44a2:	0d 5b       	subi	r16, 0xBD	; 189
    44a4:	1f 4f       	sbci	r17, 0xFF	; 255
    44a6:	d8 01       	movw	r26, r16
    44a8:	9c 91       	ld	r25, X
    44aa:	89 23       	and	r24, r25
    44ac:	80 83       	st	Z, r24
    44ae:	60 e0       	ldi	r22, 0x00	; 0
    44b0:	ce 01       	movw	r24, r28
    44b2:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    44b6:	61 e0       	ldi	r22, 0x01	; 1
    44b8:	ce 01       	movw	r24, r28
    44ba:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    44be:	ed a9       	ldd	r30, Y+53	; 0x35
    44c0:	fe a9       	ldd	r31, Y+54	; 0x36
    44c2:	80 81       	ld	r24, Z
    44c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    44c6:	89 2b       	or	r24, r25
    44c8:	80 83       	st	Z, r24
    44ca:	61 e2       	ldi	r22, 0x21	; 33
    44cc:	ce 01       	movw	r24, r28
    44ce:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    44d2:	63 e8       	ldi	r22, 0x83	; 131
    44d4:	ce 01       	movw	r24, r28
    44d6:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    44da:	ed a9       	ldd	r30, Y+53	; 0x35
    44dc:	fe a9       	ldd	r31, Y+54	; 0x36
    44de:	80 81       	ld	r24, Z
    44e0:	d8 01       	movw	r26, r16
    44e2:	9c 91       	ld	r25, X
    44e4:	89 23       	and	r24, r25
    44e6:	80 83       	st	Z, r24
    44e8:	60 e0       	ldi	r22, 0x00	; 0
    44ea:	ce 01       	movw	r24, r28
    44ec:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    44f0:	63 e0       	ldi	r22, 0x03	; 3
    44f2:	ce 01       	movw	r24, r28
    44f4:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    44f8:	ed a9       	ldd	r30, Y+53	; 0x35
    44fa:	fe a9       	ldd	r31, Y+54	; 0x36
    44fc:	80 81       	ld	r24, Z
    44fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    4500:	89 2b       	or	r24, r25
    4502:	80 83       	st	Z, r24
    4504:	68 e6       	ldi	r22, 0x68	; 104
    4506:	ce 01       	movw	r24, r28
    4508:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    450c:	60 e3       	ldi	r22, 0x30	; 48
    450e:	cd ce       	rjmp	.-614    	; 0x42aa <LCDWIKI_SPI::Set_Rotation(unsigned char)+0xae>
    4510:	28 30       	cpi	r18, 0x08	; 8
    4512:	31 05       	cpc	r19, r1
    4514:	09 f4       	brne	.+2      	; 0x4518 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x31c>
    4516:	ee ce       	rjmp	.-548    	; 0x42f4 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0xf8>
    4518:	88 8d       	ldd	r24, Y+24	; 0x18
    451a:	99 8d       	ldd	r25, Y+25	; 0x19
    451c:	ed a9       	ldd	r30, Y+53	; 0x35
    451e:	fe a9       	ldd	r31, Y+54	; 0x36
    4520:	de 01       	movw	r26, r28
    4522:	ad 5b       	subi	r26, 0xBD	; 189
    4524:	bf 4f       	sbci	r27, 0xFF	; 255
    4526:	25 30       	cpi	r18, 0x05	; 5
    4528:	31 05       	cpc	r19, r1
    452a:	29 f5       	brne	.+74     	; 0x4576 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x37a>
    452c:	81 30       	cpi	r24, 0x01	; 1
    452e:	91 05       	cpc	r25, r1
    4530:	b1 f0       	breq	.+44     	; 0x455e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x362>
    4532:	f0 f0       	brcs	.+60     	; 0x4570 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x374>
    4534:	82 30       	cpi	r24, 0x02	; 2
    4536:	91 05       	cpc	r25, r1
    4538:	a9 f0       	breq	.+42     	; 0x4564 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x368>
    453a:	03 97       	sbiw	r24, 0x03	; 3
    453c:	b1 f0       	breq	.+44     	; 0x456a <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x36e>
    453e:	80 81       	ld	r24, Z
    4540:	9c 91       	ld	r25, X
    4542:	89 23       	and	r24, r25
    4544:	80 83       	st	Z, r24
    4546:	6b a5       	ldd	r22, Y+43	; 0x2b
    4548:	ce 01       	movw	r24, r28
    454a:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    454e:	ed a9       	ldd	r30, Y+53	; 0x35
    4550:	fe a9       	ldd	r31, Y+54	; 0x36
    4552:	80 81       	ld	r24, Z
    4554:	9e ad       	ldd	r25, Y+62	; 0x3e
    4556:	89 2b       	or	r24, r25
    4558:	80 83       	st	Z, r24
    455a:	6f 2d       	mov	r22, r15
    455c:	a6 ce       	rjmp	.-692    	; 0x42aa <LCDWIKI_SPI::Set_Rotation(unsigned char)+0xae>
    455e:	38 e7       	ldi	r19, 0x78	; 120
    4560:	f3 2e       	mov	r15, r19
    4562:	ed cf       	rjmp	.-38     	; 0x453e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x342>
    4564:	28 ec       	ldi	r18, 0xC8	; 200
    4566:	f2 2e       	mov	r15, r18
    4568:	ea cf       	rjmp	.-44     	; 0x453e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x342>
    456a:	98 ea       	ldi	r25, 0xA8	; 168
    456c:	f9 2e       	mov	r15, r25
    456e:	e7 cf       	rjmp	.-50     	; 0x453e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x342>
    4570:	88 e0       	ldi	r24, 0x08	; 8
    4572:	f8 2e       	mov	r15, r24
    4574:	e4 cf       	rjmp	.-56     	; 0x453e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x342>
    4576:	2a 30       	cpi	r18, 0x0A	; 10
    4578:	31 05       	cpc	r19, r1
    457a:	09 f5       	brne	.+66     	; 0x45be <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3c2>
    457c:	81 30       	cpi	r24, 0x01	; 1
    457e:	91 05       	cpc	r25, r1
    4580:	b1 f0       	breq	.+44     	; 0x45ae <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3b2>
    4582:	d8 f0       	brcs	.+54     	; 0x45ba <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3be>
    4584:	82 30       	cpi	r24, 0x02	; 2
    4586:	91 05       	cpc	r25, r1
    4588:	a1 f0       	breq	.+40     	; 0x45b2 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3b6>
    458a:	03 97       	sbiw	r24, 0x03	; 3
    458c:	a1 f0       	breq	.+40     	; 0x45b6 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3ba>
    458e:	80 81       	ld	r24, Z
    4590:	9c 91       	ld	r25, X
    4592:	89 23       	and	r24, r25
    4594:	80 83       	st	Z, r24
    4596:	6b a5       	ldd	r22, Y+43	; 0x2b
    4598:	ce 01       	movw	r24, r28
    459a:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    459e:	ed a9       	ldd	r30, Y+53	; 0x35
    45a0:	fe a9       	ldd	r31, Y+54	; 0x36
    45a2:	80 81       	ld	r24, Z
    45a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    45a6:	89 2b       	or	r24, r25
    45a8:	80 83       	st	Z, r24
    45aa:	60 2f       	mov	r22, r16
    45ac:	7e ce       	rjmp	.-772    	; 0x42aa <LCDWIKI_SPI::Set_Rotation(unsigned char)+0xae>
    45ae:	08 ea       	ldi	r16, 0xA8	; 168
    45b0:	ee cf       	rjmp	.-36     	; 0x458e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x392>
    45b2:	08 e1       	ldi	r16, 0x18	; 24
    45b4:	ec cf       	rjmp	.-40     	; 0x458e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x392>
    45b6:	08 e7       	ldi	r16, 0x78	; 120
    45b8:	ea cf       	rjmp	.-44     	; 0x458e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x392>
    45ba:	08 ec       	ldi	r16, 0xC8	; 200
    45bc:	e8 cf       	rjmp	.-48     	; 0x458e <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x392>
    45be:	81 30       	cpi	r24, 0x01	; 1
    45c0:	91 05       	cpc	r25, r1
    45c2:	b1 f0       	breq	.+44     	; 0x45f0 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3f4>
    45c4:	d8 f0       	brcs	.+54     	; 0x45fc <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x400>
    45c6:	82 30       	cpi	r24, 0x02	; 2
    45c8:	91 05       	cpc	r25, r1
    45ca:	a1 f0       	breq	.+40     	; 0x45f4 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3f8>
    45cc:	03 97       	sbiw	r24, 0x03	; 3
    45ce:	a1 f0       	breq	.+40     	; 0x45f8 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3fc>
    45d0:	80 81       	ld	r24, Z
    45d2:	9c 91       	ld	r25, X
    45d4:	89 23       	and	r24, r25
    45d6:	80 83       	st	Z, r24
    45d8:	6b a5       	ldd	r22, Y+43	; 0x2b
    45da:	ce 01       	movw	r24, r28
    45dc:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    45e0:	ed a9       	ldd	r30, Y+53	; 0x35
    45e2:	fe a9       	ldd	r31, Y+54	; 0x36
    45e4:	80 81       	ld	r24, Z
    45e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    45e8:	89 2b       	or	r24, r25
    45ea:	80 83       	st	Z, r24
    45ec:	61 2f       	mov	r22, r17
    45ee:	5d ce       	rjmp	.-838    	; 0x42aa <LCDWIKI_SPI::Set_Rotation(unsigned char)+0xae>
    45f0:	18 e2       	ldi	r17, 0x28	; 40
    45f2:	ee cf       	rjmp	.-36     	; 0x45d0 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3d4>
    45f4:	18 e9       	ldi	r17, 0x98	; 152
    45f6:	ec cf       	rjmp	.-40     	; 0x45d0 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3d4>
    45f8:	18 ef       	ldi	r17, 0xF8	; 248
    45fa:	ea cf       	rjmp	.-44     	; 0x45d0 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3d4>
    45fc:	18 e4       	ldi	r17, 0x48	; 72
    45fe:	e8 cf       	rjmp	.-48     	; 0x45d0 <LCDWIKI_SPI::Set_Rotation(unsigned char)+0x3d4>

00004600 <LCDWIKI_SPI::Get_Rotation() const>:
_ZNK11LCDWIKI_SPI12Get_RotationEv():
    4600:	fc 01       	movw	r30, r24
    4602:	80 8d       	ldd	r24, Z+24	; 0x18
    4604:	08 95       	ret

00004606 <LCDWIKI_SPI::Invert_Display(bool)>:
_ZN11LCDWIKI_SPI14Invert_DisplayEb():
    4606:	ff 92       	push	r15
    4608:	0f 93       	push	r16
    460a:	1f 93       	push	r17
    460c:	cf 93       	push	r28
    460e:	df 93       	push	r29
    4610:	ec 01       	movw	r28, r24
    4612:	06 2f       	mov	r16, r22
    4614:	eb a9       	ldd	r30, Y+51	; 0x33
    4616:	fc a9       	ldd	r31, Y+52	; 0x34
    4618:	80 81       	ld	r24, Z
    461a:	de 01       	movw	r26, r28
    461c:	ae 5b       	subi	r26, 0xBE	; 190
    461e:	bf 4f       	sbci	r27, 0xFF	; 255
    4620:	9c 91       	ld	r25, X
    4622:	89 23       	and	r24, r25
    4624:	80 83       	st	Z, r24
    4626:	1d a5       	ldd	r17, Y+45	; 0x2d
    4628:	2a 8d       	ldd	r18, Y+26	; 0x1a
    462a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    462c:	ed a9       	ldd	r30, Y+53	; 0x35
    462e:	fe a9       	ldd	r31, Y+54	; 0x36
    4630:	11 96       	adiw	r26, 0x01	; 1
    4632:	21 15       	cp	r18, r1
    4634:	31 05       	cpc	r19, r1
    4636:	f9 f4       	brne	.+62     	; 0x4676 <LCDWIKI_SPI::Invert_Display(bool)+0x70>
    4638:	80 81       	ld	r24, Z
    463a:	9c 91       	ld	r25, X
    463c:	89 23       	and	r24, r25
    463e:	80 83       	st	Z, r24
    4640:	61 e6       	ldi	r22, 0x61	; 97
    4642:	ce 01       	movw	r24, r28
    4644:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    4648:	ed a9       	ldd	r30, Y+53	; 0x35
    464a:	fe a9       	ldd	r31, Y+54	; 0x36
    464c:	80 81       	ld	r24, Z
    464e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4650:	89 2b       	or	r24, r25
    4652:	80 83       	st	Z, r24
    4654:	61 2f       	mov	r22, r17
    4656:	60 27       	eor	r22, r16
    4658:	ce 01       	movw	r24, r28
    465a:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    465e:	eb a9       	ldd	r30, Y+51	; 0x33
    4660:	fc a9       	ldd	r31, Y+52	; 0x34
    4662:	80 81       	ld	r24, Z
    4664:	9d ad       	ldd	r25, Y+61	; 0x3d
    4666:	89 2b       	or	r24, r25
    4668:	80 83       	st	Z, r24
    466a:	df 91       	pop	r29
    466c:	cf 91       	pop	r28
    466e:	1f 91       	pop	r17
    4670:	0f 91       	pop	r16
    4672:	ff 90       	pop	r15
    4674:	08 95       	ret
    4676:	8c 91       	ld	r24, X
    4678:	21 30       	cpi	r18, 0x01	; 1
    467a:	31 05       	cpc	r19, r1
    467c:	91 f4       	brne	.+36     	; 0x46a2 <LCDWIKI_SPI::Invert_Display(bool)+0x9c>
    467e:	90 81       	ld	r25, Z
    4680:	89 23       	and	r24, r25
    4682:	80 83       	st	Z, r24
    4684:	61 e0       	ldi	r22, 0x01	; 1
    4686:	ce 01       	movw	r24, r28
    4688:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    468c:	ed a9       	ldd	r30, Y+53	; 0x35
    468e:	fe a9       	ldd	r31, Y+54	; 0x36
    4690:	80 81       	ld	r24, Z
    4692:	9e ad       	ldd	r25, Y+62	; 0x3e
    4694:	89 2b       	or	r24, r25
    4696:	80 83       	st	Z, r24
    4698:	68 e0       	ldi	r22, 0x08	; 8
    469a:	10 13       	cpse	r17, r16
    469c:	dd cf       	rjmp	.-70     	; 0x4658 <LCDWIKI_SPI::Invert_Display(bool)+0x52>
    469e:	6a e0       	ldi	r22, 0x0A	; 10
    46a0:	db cf       	rjmp	.-74     	; 0x4658 <LCDWIKI_SPI::Invert_Display(bool)+0x52>
    46a2:	27 30       	cpi	r18, 0x07	; 7
    46a4:	31 05       	cpc	r19, r1
    46a6:	69 f5       	brne	.+90     	; 0x4702 <LCDWIKI_SPI::Invert_Display(bool)+0xfc>
    46a8:	28 8d       	ldd	r18, Y+24	; 0x18
    46aa:	39 8d       	ldd	r19, Y+25	; 0x19
    46ac:	2d 7f       	andi	r18, 0xFD	; 253
    46ae:	21 15       	cp	r18, r1
    46b0:	31 05       	cpc	r19, r1
    46b2:	e9 f4       	brne	.+58     	; 0x46ee <LCDWIKI_SPI::Invert_Display(bool)+0xe8>
    46b4:	31 e2       	ldi	r19, 0x21	; 33
    46b6:	f3 2e       	mov	r15, r19
    46b8:	16 13       	cpse	r17, r22
    46ba:	02 c0       	rjmp	.+4      	; 0x46c0 <LCDWIKI_SPI::Invert_Display(bool)+0xba>
    46bc:	ff 24       	eor	r15, r15
    46be:	f3 94       	inc	r15
    46c0:	90 81       	ld	r25, Z
    46c2:	89 23       	and	r24, r25
    46c4:	80 83       	st	Z, r24
    46c6:	60 e0       	ldi	r22, 0x00	; 0
    46c8:	ce 01       	movw	r24, r28
    46ca:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    46ce:	61 e0       	ldi	r22, 0x01	; 1
    46d0:	ce 01       	movw	r24, r28
    46d2:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    46d6:	ed a9       	ldd	r30, Y+53	; 0x35
    46d8:	fe a9       	ldd	r31, Y+54	; 0x36
    46da:	80 81       	ld	r24, Z
    46dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    46de:	89 2b       	or	r24, r25
    46e0:	80 83       	st	Z, r24
    46e2:	6f 2d       	mov	r22, r15
    46e4:	ce 01       	movw	r24, r28
    46e6:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCDWIKI_SPI::Spi_Write(unsigned char)>
    46ea:	63 e8       	ldi	r22, 0x83	; 131
    46ec:	b5 cf       	rjmp	.-150    	; 0x4658 <LCDWIKI_SPI::Invert_Display(bool)+0x52>
    46ee:	21 30       	cpi	r18, 0x01	; 1
    46f0:	31 05       	cpc	r19, r1
    46f2:	31 f7       	brne	.-52     	; 0x46c0 <LCDWIKI_SPI::Invert_Display(bool)+0xba>
    46f4:	22 e2       	ldi	r18, 0x22	; 34
    46f6:	f2 2e       	mov	r15, r18
    46f8:	16 13       	cpse	r17, r22
    46fa:	e2 cf       	rjmp	.-60     	; 0x46c0 <LCDWIKI_SPI::Invert_Display(bool)+0xba>
    46fc:	92 e0       	ldi	r25, 0x02	; 2
    46fe:	f9 2e       	mov	r15, r25
    4700:	df cf       	rjmp	.-66     	; 0x46c0 <LCDWIKI_SPI::Invert_Display(bool)+0xba>
    4702:	90 81       	ld	r25, Z
    4704:	89 23       	and	r24, r25
    4706:	80 83       	st	Z, r24
    4708:	28 30       	cpi	r18, 0x08	; 8
    470a:	31 05       	cpc	r19, r1
    470c:	29 f4       	brne	.+10     	; 0x4718 <LCDWIKI_SPI::Invert_Display(bool)+0x112>
    470e:	66 ea       	ldi	r22, 0xA6	; 166
    4710:	10 13       	cpse	r17, r16
    4712:	a2 cf       	rjmp	.-188    	; 0x4658 <LCDWIKI_SPI::Invert_Display(bool)+0x52>
    4714:	67 ea       	ldi	r22, 0xA7	; 167
    4716:	a0 cf       	rjmp	.-192    	; 0x4658 <LCDWIKI_SPI::Invert_Display(bool)+0x52>
    4718:	61 e2       	ldi	r22, 0x21	; 33
    471a:	10 13       	cpse	r17, r16
    471c:	9d cf       	rjmp	.-198    	; 0x4658 <LCDWIKI_SPI::Invert_Display(bool)+0x52>
    471e:	60 e2       	ldi	r22, 0x20	; 32
    4720:	9b cf       	rjmp	.-202    	; 0x4658 <LCDWIKI_SPI::Invert_Display(bool)+0x52>

00004722 <LCDWIKI_SPI::init_table8(void const*, int)>:
_ZN11LCDWIKI_SPI11init_table8EPKvi():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1390

void LCDWIKI_SPI:: init_table8(const void *table, int16_t size)
{
    4722:	bf 92       	push	r11
    4724:	cf 92       	push	r12
    4726:	df 92       	push	r13
    4728:	ef 92       	push	r14
    472a:	ff 92       	push	r15
    472c:	0f 93       	push	r16
    472e:	1f 93       	push	r17
    4730:	cf 93       	push	r28
    4732:	df 93       	push	r29
    4734:	cd b7       	in	r28, 0x3d	; 61
    4736:	de b7       	in	r29, 0x3e	; 62
    4738:	68 97       	sbiw	r28, 0x18	; 24
    473a:	0f b6       	in	r0, 0x3f	; 63
    473c:	f8 94       	cli
    473e:	de bf       	out	0x3e, r29	; 62
    4740:	0f be       	out	0x3f, r0	; 63
    4742:	cd bf       	out	0x3d, r28	; 61
    4744:	6c 01       	movw	r12, r24
    4746:	8b 01       	movw	r16, r22
    4748:	7a 01       	movw	r14, r20
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1393
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
    474a:	1e 14       	cp	r1, r14
    474c:	1f 04       	cpc	r1, r15
    474e:	5c f5       	brge	.+86     	; 0x47a6 <LCDWIKI_SPI::init_table8(void const*, int)+0x84>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1395
	{
        uint8_t cmd = pgm_read_byte(p++);
    4750:	f8 01       	movw	r30, r16
    4752:	64 91       	lpm	r22, Z
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1396
        uint8_t len = pgm_read_byte(p++);
    4754:	31 96       	adiw	r30, 0x01	; 1
    4756:	b4 90       	lpm	r11, Z
    4758:	0e 5f       	subi	r16, 0xFE	; 254
    475a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1397
        if (cmd == TFTLCD_DELAY8) 
    475c:	6f 37       	cpi	r22, 0x7F	; 127
    475e:	71 f0       	breq	.+28     	; 0x477c <LCDWIKI_SPI::init_table8(void const*, int)+0x5a>
    4760:	de 01       	movw	r26, r28
    4762:	11 96       	adiw	r26, 0x01	; 1
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	ad 01       	movw	r20, r26
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1404 (discriminator 3)
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
    476a:	8b 15       	cp	r24, r11
    476c:	a8 f4       	brcc	.+42     	; 0x4798 <LCDWIKI_SPI::init_table8(void const*, int)+0x76>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1406 (discriminator 2)
            {
                dat[i] = pgm_read_byte(p++);
    476e:	f8 01       	movw	r30, r16
    4770:	e8 0f       	add	r30, r24
    4772:	f9 1f       	adc	r31, r25
    4774:	e4 91       	lpm	r30, Z
    4776:	ed 93       	st	X+, r30
    4778:	01 96       	adiw	r24, 0x01	; 1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1404 (discriminator 2)
            delay(len);
            len = 0;
        } 
		else 
		{
            for (i = 0; i < len; i++)
    477a:	f7 cf       	rjmp	.-18     	; 0x476a <LCDWIKI_SPI::init_table8(void const*, int)+0x48>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1399
	{
        uint8_t cmd = pgm_read_byte(p++);
        uint8_t len = pgm_read_byte(p++);
        if (cmd == TFTLCD_DELAY8) 
		{
            delay(len);
    477c:	6b 2d       	mov	r22, r11
    477e:	70 e0       	ldi	r23, 0x00	; 0
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	0e 94 38 29 	call	0x5270	; 0x5270 <delay>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1400
            len = 0;
    4788:	b1 2c       	mov	r11, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1410
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
        }
        size -= len + 2;
    478a:	6b 2d       	mov	r22, r11
    478c:	70 e0       	ldi	r23, 0x00	; 0
    478e:	6e 5f       	subi	r22, 0xFE	; 254
    4790:	7f 4f       	sbci	r23, 0xFF	; 255
    4792:	e6 1a       	sub	r14, r22
    4794:	f7 0a       	sbc	r15, r23
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1393

void LCDWIKI_SPI:: init_table8(const void *table, int16_t size)
{
	uint8_t i;
    uint8_t *p = (uint8_t *) table, dat[MAX_REG_NUM];            //R61526 has GAMMA[22] 
    while (size > 0) 
    4796:	d9 cf       	rjmp	.-78     	; 0x474a <LCDWIKI_SPI::init_table8(void const*, int)+0x28>
    4798:	0b 0d       	add	r16, r11
    479a:	11 1d       	adc	r17, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1408
		{
            for (i = 0; i < len; i++)
            {
                dat[i] = pgm_read_byte(p++);
            }
			Push_Command(cmd,dat,len);
    479c:	2b 2d       	mov	r18, r11
    479e:	c6 01       	movw	r24, r12
    47a0:	0e 94 83 1a 	call	0x3506	; 0x3506 <LCDWIKI_SPI::Push_Command(unsigned char, unsigned char*, signed char)>
    47a4:	f2 cf       	rjmp	.-28     	; 0x478a <LCDWIKI_SPI::init_table8(void const*, int)+0x68>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1412
        }
        size -= len + 2;
    }
}
    47a6:	68 96       	adiw	r28, 0x18	; 24
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	f8 94       	cli
    47ac:	de bf       	out	0x3e, r29	; 62
    47ae:	0f be       	out	0x3f, r0	; 63
    47b0:	cd bf       	out	0x3d, r28	; 61
    47b2:	df 91       	pop	r29
    47b4:	cf 91       	pop	r28
    47b6:	1f 91       	pop	r17
    47b8:	0f 91       	pop	r16
    47ba:	ff 90       	pop	r15
    47bc:	ef 90       	pop	r14
    47be:	df 90       	pop	r13
    47c0:	cf 90       	pop	r12
    47c2:	bf 90       	pop	r11
    47c4:	08 95       	ret

000047c6 <LCDWIKI_SPI::init_table16(void const*, int)>:
_ZN11LCDWIKI_SPI12init_table16EPKvi():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1415

void LCDWIKI_SPI:: init_table16(const void *table, int16_t size)
{
    47c6:	ef 92       	push	r14
    47c8:	ff 92       	push	r15
    47ca:	0f 93       	push	r16
    47cc:	1f 93       	push	r17
    47ce:	cf 93       	push	r28
    47d0:	df 93       	push	r29
    47d2:	7c 01       	movw	r14, r24
    47d4:	eb 01       	movw	r28, r22
    47d6:	8a 01       	movw	r16, r20
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1417
    uint16_t *p = (uint16_t *) table;
    while (size > 0) 
    47d8:	10 16       	cp	r1, r16
    47da:	11 06       	cpc	r1, r17
    47dc:	bc f4       	brge	.+46     	; 0x480c <LCDWIKI_SPI::init_table16(void const*, int)+0x46>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1419
	{
        uint16_t cmd = pgm_read_word(p++);
    47de:	fe 01       	movw	r30, r28
    47e0:	65 91       	lpm	r22, Z+
    47e2:	74 91       	lpm	r23, Z
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1420
        uint16_t d = pgm_read_word(p++);
    47e4:	fe 01       	movw	r30, r28
    47e6:	32 96       	adiw	r30, 0x02	; 2
    47e8:	24 96       	adiw	r28, 0x04	; 4
    47ea:	45 91       	lpm	r20, Z+
    47ec:	54 91       	lpm	r21, Z
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1421
        if (cmd == TFTLCD_DELAY16)
    47ee:	6f 3f       	cpi	r22, 0xFF	; 255
    47f0:	76 07       	cpc	r23, r22
    47f2:	41 f4       	brne	.+16     	; 0x4804 <LCDWIKI_SPI::init_table16(void const*, int)+0x3e>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1423
        {
            delay(d);
    47f4:	ba 01       	movw	r22, r20
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	80 e0       	ldi	r24, 0x00	; 0
    47fa:	0e 94 38 29 	call	0x5270	; 0x5270 <delay>
    47fe:	04 50       	subi	r16, 0x04	; 4
    4800:	11 09       	sbc	r17, r1
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1417
}

void LCDWIKI_SPI:: init_table16(const void *table, int16_t size)
{
    uint16_t *p = (uint16_t *) table;
    while (size > 0) 
    4802:	ea cf       	rjmp	.-44     	; 0x47d8 <LCDWIKI_SPI::init_table16(void const*, int)+0x12>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1427
        {
            delay(d);
        }
        else 
		{
			Write_Cmd_Data(cmd, d);                      //static function
    4804:	c7 01       	movw	r24, r14
    4806:	0e 94 48 1a 	call	0x3490	; 0x3490 <LCDWIKI_SPI::Write_Cmd_Data(unsigned int, unsigned int)>
    480a:	f9 cf       	rjmp	.-14     	; 0x47fe <LCDWIKI_SPI::init_table16(void const*, int)+0x38>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1431
		}
        size -= 2 * sizeof(int16_t);
    }
}
    480c:	df 91       	pop	r29
    480e:	cf 91       	pop	r28
    4810:	1f 91       	pop	r17
    4812:	0f 91       	pop	r16
    4814:	ff 90       	pop	r15
    4816:	ef 90       	pop	r14
    4818:	08 95       	ret

0000481a <LCDWIKI_SPI::start(unsigned int)>:
_ZN11LCDWIKI_SPI5startEj():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1434

void LCDWIKI_SPI::start(uint16_t ID)
{
    481a:	0f 93       	push	r16
    481c:	1f 93       	push	r17
    481e:	cf 93       	push	r28
    4820:	df 93       	push	r29
    4822:	ec 01       	movw	r28, r24
    4824:	8b 01       	movw	r16, r22
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1435
	reset();
    4826:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCDWIKI_SPI::reset()>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1436
	delay(200);
    482a:	68 ec       	ldi	r22, 0xC8	; 200
    482c:	70 e0       	ldi	r23, 0x00	; 0
    482e:	80 e0       	ldi	r24, 0x00	; 0
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	0e 94 38 29 	call	0x5270	; 0x5270 <delay>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1437
	switch(ID)
    4836:	05 32       	cpi	r16, 0x25	; 37
    4838:	83 e9       	ldi	r24, 0x93	; 147
    483a:	18 07       	cpc	r17, r24
    483c:	09 f4       	brne	.+2      	; 0x4840 <LCDWIKI_SPI::start(unsigned int)+0x26>
    483e:	b2 c0       	rjmp	.+356    	; 0x49a4 <LCDWIKI_SPI::start(unsigned int)+0x18a>
    4840:	08 f0       	brcs	.+2      	; 0x4844 <LCDWIKI_SPI::start(unsigned int)+0x2a>
    4842:	47 c0       	rjmp	.+142    	; 0x48d2 <LCDWIKI_SPI::start(unsigned int)+0xb8>
    4844:	05 37       	cpi	r16, 0x75	; 117
    4846:	85 e7       	ldi	r24, 0x75	; 117
    4848:	18 07       	cpc	r17, r24
    484a:	09 f4       	brne	.+2      	; 0x484e <LCDWIKI_SPI::start(unsigned int)+0x34>
    484c:	88 c0       	rjmp	.+272    	; 0x495e <LCDWIKI_SPI::start(unsigned int)+0x144>
    484e:	70 f4       	brcc	.+28     	; 0x486c <LCDWIKI_SPI::start(unsigned int)+0x52>
    4850:	06 30       	cpi	r16, 0x06	; 6
    4852:	81 e1       	ldi	r24, 0x11	; 17
    4854:	18 07       	cpc	r17, r24
    4856:	09 f4       	brne	.+2      	; 0x485a <LCDWIKI_SPI::start(unsigned int)+0x40>
    4858:	96 c1       	rjmp	.+812    	; 0x4b86 <LCDWIKI_SPI::start(unsigned int)+0x36c>
    485a:	03 38       	cpi	r16, 0x83	; 131
    485c:	12 41       	sbci	r17, 0x12	; 18
    485e:	09 f4       	brne	.+2      	; 0x4862 <LCDWIKI_SPI::start(unsigned int)+0x48>
    4860:	67 c1       	rjmp	.+718    	; 0x4b30 <LCDWIKI_SPI::start(unsigned int)+0x316>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1824
            	0xAF, 0,
			};
			init_table8(SH1106_regValues, sizeof(SH1106_regValues));
			break;
		default:
			lcd_driver = ID_UNKNOWN;
    4862:	8f ef       	ldi	r24, 0xFF	; 255
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	9b 8f       	std	Y+27, r25	; 0x1b
    4868:	8a 8f       	std	Y+26, r24	; 0x1a
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1825
			break;		
    486a:	c1 c0       	rjmp	.+386    	; 0x49ee <LCDWIKI_SPI::start(unsigned int)+0x1d4>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1437

void LCDWIKI_SPI::start(uint16_t ID)
{
	reset();
	delay(200);
	switch(ID)
    486c:	05 33       	cpi	r16, 0x35	; 53
    486e:	87 e7       	ldi	r24, 0x77	; 119
    4870:	18 07       	cpc	r17, r24
    4872:	09 f4       	brne	.+2      	; 0x4876 <LCDWIKI_SPI::start(unsigned int)+0x5c>
    4874:	29 c1       	rjmp	.+594    	; 0x4ac8 <LCDWIKI_SPI::start(unsigned int)+0x2ae>
    4876:	00 39       	cpi	r16, 0x90	; 144
    4878:	10 49       	sbci	r17, 0x90	; 144
    487a:	99 f7       	brne	.-26     	; 0x4862 <LCDWIKI_SPI::start(unsigned int)+0x48>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1543
            	ILI9341_DISPLAYON, 0          //Display On
            };
			init_table8(ILI9341_regValues, sizeof(ILI9341_regValues));    
			break;
		case 0x9090:
			lcd_driver = ID_HX8357D;
    487c:	83 e0       	ldi	r24, 0x03	; 3
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	9b 8f       	std	Y+27, r25	; 0x1b
    4882:	8a 8f       	std	Y+26, r24	; 0x1a
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1546
			//WIDTH = 320,HEIGHT = 480;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=HX8357_RAMWR,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=HX8357_MADCTL,VL=1,R24BIT=1;
    4884:	8a e2       	ldi	r24, 0x2A	; 42
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	98 a3       	std	Y+32, r25	; 0x20
    488a:	8f 8f       	std	Y+31, r24	; 0x1f
    488c:	8b e2       	ldi	r24, 0x2B	; 43
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	9a a3       	std	Y+34, r25	; 0x22
    4892:	89 a3       	std	Y+33, r24	; 0x21
    4894:	8c e2       	ldi	r24, 0x2C	; 44
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	9c a3       	std	Y+36, r25	; 0x24
    489a:	8b a3       	std	Y+35, r24	; 0x23
    489c:	8e e2       	ldi	r24, 0x2E	; 46
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	9e a3       	std	Y+38, r25	; 0x26
    48a2:	8d a3       	std	Y+37, r24	; 0x25
    48a4:	83 e3       	ldi	r24, 0x33	; 51
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	98 a7       	std	Y+40, r25	; 0x28
    48aa:	8f a3       	std	Y+39, r24	; 0x27
    48ac:	87 e3       	ldi	r24, 0x37	; 55
    48ae:	90 e0       	ldi	r25, 0x00	; 0
    48b0:	9a a7       	std	Y+42, r25	; 0x2a
    48b2:	89 a7       	std	Y+41, r24	; 0x29
    48b4:	86 e3       	ldi	r24, 0x36	; 54
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	9c a7       	std	Y+44, r25	; 0x2c
    48ba:	8b a7       	std	Y+43, r24	; 0x2b
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	9e a7       	std	Y+46, r25	; 0x2e
    48c2:	8d a7       	std	Y+45, r24	; 0x2d
    48c4:	98 ab       	std	Y+48, r25	; 0x30
    48c6:	8f a7       	std	Y+47, r24	; 0x2f
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1569
  				HX8357_SLPOUT, 0,
  				TFTLCD_DELAY8, 150,
  				HX8357_DISPON, 0, 
  				TFTLCD_DELAY8, 50
			};
			init_table8(HX8357D_regValues, sizeof(HX8357D_regValues));
    48c8:	46 e4       	ldi	r20, 0x46	; 70
    48ca:	50 e0       	ldi	r21, 0x00	; 0
    48cc:	6a e8       	ldi	r22, 0x8A	; 138
    48ce:	77 e0       	ldi	r23, 0x07	; 7
    48d0:	39 c0       	rjmp	.+114    	; 0x4944 <LCDWIKI_SPI::start(unsigned int)+0x12a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1437

void LCDWIKI_SPI::start(uint16_t ID)
{
	reset();
	delay(200);
	switch(ID)
    48d2:	06 38       	cpi	r16, 0x86	; 134
    48d4:	84 e9       	ldi	r24, 0x94	; 148
    48d6:	18 07       	cpc	r17, r24
    48d8:	09 f4       	brne	.+2      	; 0x48dc <LCDWIKI_SPI::start(unsigned int)+0xc2>
    48da:	95 c0       	rjmp	.+298    	; 0x4a06 <LCDWIKI_SPI::start(unsigned int)+0x1ec>
    48dc:	b8 f5       	brcc	.+110    	; 0x494c <LCDWIKI_SPI::start(unsigned int)+0x132>
    48de:	08 32       	cpi	r16, 0x28	; 40
    48e0:	83 e9       	ldi	r24, 0x93	; 147
    48e2:	18 07       	cpc	r17, r24
    48e4:	09 f4       	brne	.+2      	; 0x48e8 <LCDWIKI_SPI::start(unsigned int)+0xce>
    48e6:	5e c0       	rjmp	.+188    	; 0x49a4 <LCDWIKI_SPI::start(unsigned int)+0x18a>
    48e8:	01 34       	cpi	r16, 0x41	; 65
    48ea:	13 49       	sbci	r17, 0x93	; 147
    48ec:	09 f0       	breq	.+2      	; 0x48f0 <LCDWIKI_SPI::start(unsigned int)+0xd6>
    48ee:	b9 cf       	rjmp	.-142    	; 0x4862 <LCDWIKI_SPI::start(unsigned int)+0x48>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1502
		  		ILI932X_DISP_CTRL1	   , 0x0133 // Main screen turn on		
			};
			init_table16(ILI932x_regValues, sizeof(ILI932x_regValues));
			break;
		case 0x9341:
			lcd_driver = ID_9341;
    48f0:	82 e0       	ldi	r24, 0x02	; 2
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	9b 8f       	std	Y+27, r25	; 0x1b
    48f6:	8a 8f       	std	Y+26, r24	; 0x1a
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1505
			//WIDTH = 240,HEIGHT = 320;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=1;
    48f8:	8a e2       	ldi	r24, 0x2A	; 42
    48fa:	90 e0       	ldi	r25, 0x00	; 0
    48fc:	98 a3       	std	Y+32, r25	; 0x20
    48fe:	8f 8f       	std	Y+31, r24	; 0x1f
    4900:	8b e2       	ldi	r24, 0x2B	; 43
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	9a a3       	std	Y+34, r25	; 0x22
    4906:	89 a3       	std	Y+33, r24	; 0x21
    4908:	8c e2       	ldi	r24, 0x2C	; 44
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	9c a3       	std	Y+36, r25	; 0x24
    490e:	8b a3       	std	Y+35, r24	; 0x23
    4910:	8e e2       	ldi	r24, 0x2E	; 46
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	9e a3       	std	Y+38, r25	; 0x26
    4916:	8d a3       	std	Y+37, r24	; 0x25
    4918:	83 e3       	ldi	r24, 0x33	; 51
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	98 a7       	std	Y+40, r25	; 0x28
    491e:	8f a3       	std	Y+39, r24	; 0x27
    4920:	87 e3       	ldi	r24, 0x37	; 55
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	9a a7       	std	Y+42, r25	; 0x2a
    4926:	89 a7       	std	Y+41, r24	; 0x29
    4928:	86 e3       	ldi	r24, 0x36	; 54
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	9c a7       	std	Y+44, r25	; 0x2c
    492e:	8b a7       	std	Y+43, r24	; 0x2b
    4930:	1e a6       	std	Y+46, r1	; 0x2e
    4932:	1d a6       	std	Y+45, r1	; 0x2d
    4934:	81 e0       	ldi	r24, 0x01	; 1
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	98 ab       	std	Y+48, r25	; 0x30
    493a:	8f a7       	std	Y+47, r24	; 0x2f
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1540
				ILI9341_ENTRYMODE, 1,0x07,
            	ILI9341_SLEEPOUT, 0,            //Sleep Out
            	TFTLCD_DELAY8, 150,
            	ILI9341_DISPLAYON, 0          //Display On
            };
			init_table8(ILI9341_regValues, sizeof(ILI9341_regValues));    
    493c:	4a e7       	ldi	r20, 0x7A	; 122
    493e:	50 e0       	ldi	r21, 0x00	; 0
    4940:	60 ed       	ldi	r22, 0xD0	; 208
    4942:	77 e0       	ldi	r23, 0x07	; 7
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1821
            	0x14, 0,
            	0xA4, 0,
            	0xA6, 0,
            	0xAF, 0,
			};
			init_table8(SH1106_regValues, sizeof(SH1106_regValues));
    4944:	ce 01       	movw	r24, r28
    4946:	0e 94 91 23 	call	0x4722	; 0x4722 <LCDWIKI_SPI::init_table8(void const*, int)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1822
			break;
    494a:	51 c0       	rjmp	.+162    	; 0x49ee <LCDWIKI_SPI::start(unsigned int)+0x1d4>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1437

void LCDWIKI_SPI::start(uint16_t ID)
{
	reset();
	delay(200);
	switch(ID)
    494c:	08 38       	cpi	r16, 0x88	; 136
    494e:	84 e9       	ldi	r24, 0x94	; 148
    4950:	18 07       	cpc	r17, r24
    4952:	09 f4       	brne	.+2      	; 0x4956 <LCDWIKI_SPI::start(unsigned int)+0x13c>
    4954:	81 c0       	rjmp	.+258    	; 0x4a58 <LCDWIKI_SPI::start(unsigned int)+0x23e>
    4956:	05 39       	cpi	r16, 0x95	; 149
    4958:	15 49       	sbci	r17, 0x95	; 149
    495a:	09 f0       	breq	.+2      	; 0x495e <LCDWIKI_SPI::start(unsigned int)+0x144>
    495c:	82 cf       	rjmp	.-252    	; 0x4862 <LCDWIKI_SPI::start(unsigned int)+0x48>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1573
			};
			init_table8(HX8357D_regValues, sizeof(HX8357D_regValues));
			break;
		case 0x7575:
		case 0x9595:
			lcd_driver = ID_7575;
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	9b 8f       	std	Y+27, r25	; 0x1b
    4964:	8a 8f       	std	Y+26, r24	; 0x1a
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1576
			//WIDTH = 240,HEIGHT = 320;
			//width = WIDTH, height = HEIGHT;
			XC=0,YC=0,CC=0x22,RC=ILI932X_RW_GRAM,SC1=0x0E,SC2=0x14,MD=HX8347G_MEMACCESS,VL=1,R24BIT=1;
    4966:	18 a2       	std	Y+32, r1	; 0x20
    4968:	1f 8e       	std	Y+31, r1	; 0x1f
    496a:	1a a2       	std	Y+34, r1	; 0x22
    496c:	19 a2       	std	Y+33, r1	; 0x21
    496e:	22 e2       	ldi	r18, 0x22	; 34
    4970:	30 e0       	ldi	r19, 0x00	; 0
    4972:	3c a3       	std	Y+36, r19	; 0x24
    4974:	2b a3       	std	Y+35, r18	; 0x23
    4976:	3e a3       	std	Y+38, r19	; 0x26
    4978:	2d a3       	std	Y+37, r18	; 0x25
    497a:	2e e0       	ldi	r18, 0x0E	; 14
    497c:	30 e0       	ldi	r19, 0x00	; 0
    497e:	38 a7       	std	Y+40, r19	; 0x28
    4980:	2f a3       	std	Y+39, r18	; 0x27
    4982:	24 e1       	ldi	r18, 0x14	; 20
    4984:	30 e0       	ldi	r19, 0x00	; 0
    4986:	3a a7       	std	Y+42, r19	; 0x2a
    4988:	29 a7       	std	Y+41, r18	; 0x29
    498a:	26 e1       	ldi	r18, 0x16	; 22
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	3c a7       	std	Y+44, r19	; 0x2c
    4990:	2b a7       	std	Y+43, r18	; 0x2b
    4992:	9e a7       	std	Y+46, r25	; 0x2e
    4994:	8d a7       	std	Y+45, r24	; 0x2d
    4996:	98 ab       	std	Y+48, r25	; 0x30
    4998:	8f a7       	std	Y+47, r24	; 0x2f
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1633
        		  0x06 , 1 , 0x00,
        		  0x07 , 1 , 0x00,
        		  0x08 , 1 , 0x01,
        		  0x09 , 1 , 0x3F
			};
		    init_table8(HX8347G_regValues, sizeof(HX8347G_regValues));
    499a:	4f e7       	ldi	r20, 0x7F	; 127
    499c:	50 e0       	ldi	r21, 0x00	; 0
    499e:	6b e0       	ldi	r22, 0x0B	; 11
    49a0:	77 e0       	ldi	r23, 0x07	; 7
    49a2:	d0 cf       	rjmp	.-96     	; 0x4944 <LCDWIKI_SPI::start(unsigned int)+0x12a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1441
	delay(200);
	switch(ID)
	{
		case 0x9325:
		case 0x9328:
			lcd_driver = ID_932X;
    49a4:	1b 8e       	std	Y+27, r1	; 0x1b
    49a6:	1a 8e       	std	Y+26, r1	; 0x1a
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1444
			//WIDTH = 240,HEIGHT = 320;
			//width = WIDTH, height = HEIGHT;
			XC=0,YC=0,CC=ILI932X_RW_GRAM,RC=ILI932X_RW_GRAM,SC1=ILI932X_GATE_SCAN_CTRL2,SC2=ILI932X_GATE_SCAN_CTRL3,MD=0x0003,VL=1,R24BIT=0;
    49a8:	18 a2       	std	Y+32, r1	; 0x20
    49aa:	1f 8e       	std	Y+31, r1	; 0x1f
    49ac:	1a a2       	std	Y+34, r1	; 0x22
    49ae:	19 a2       	std	Y+33, r1	; 0x21
    49b0:	82 e2       	ldi	r24, 0x22	; 34
    49b2:	90 e0       	ldi	r25, 0x00	; 0
    49b4:	9c a3       	std	Y+36, r25	; 0x24
    49b6:	8b a3       	std	Y+35, r24	; 0x23
    49b8:	9e a3       	std	Y+38, r25	; 0x26
    49ba:	8d a3       	std	Y+37, r24	; 0x25
    49bc:	81 e6       	ldi	r24, 0x61	; 97
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	98 a7       	std	Y+40, r25	; 0x28
    49c2:	8f a3       	std	Y+39, r24	; 0x27
    49c4:	8a e6       	ldi	r24, 0x6A	; 106
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	9a a7       	std	Y+42, r25	; 0x2a
    49ca:	89 a7       	std	Y+41, r24	; 0x29
    49cc:	83 e0       	ldi	r24, 0x03	; 3
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	9c a7       	std	Y+44, r25	; 0x2c
    49d2:	8b a7       	std	Y+43, r24	; 0x2b
    49d4:	81 e0       	ldi	r24, 0x01	; 1
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	9e a7       	std	Y+46, r25	; 0x2e
    49da:	8d a7       	std	Y+45, r24	; 0x2d
    49dc:	18 aa       	std	Y+48, r1	; 0x30
    49de:	1f a6       	std	Y+47, r1	; 0x2f
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1499
		  		ILI932X_PANEL_IF_CTRL4   , 0X1100,
		  		ILI932X_PANEL_IF_CTRL5   , 0X0000,
		  		ILI932X_PANEL_IF_CTRL6   , 0X0000,
		  		ILI932X_DISP_CTRL1	   , 0x0133 // Main screen turn on		
			};
			init_table16(ILI932x_regValues, sizeof(ILI932x_regValues));
    49e0:	4c ec       	ldi	r20, 0xCC	; 204
    49e2:	50 e0       	ldi	r21, 0x00	; 0
    49e4:	6a e4       	ldi	r22, 0x4A	; 74
    49e6:	78 e0       	ldi	r23, 0x08	; 8
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1783
            	0x02, 0x0300,
            	0x0B, 0x580C,
            	0x12, 0x0609,
            	0x13, 0x3100, 
			};
			init_table16(SSD1283A_regValues, sizeof(SSD1283A_regValues));
    49e8:	ce 01       	movw	r24, r28
    49ea:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <LCDWIKI_SPI::init_table16(void const*, int)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1827
			break;
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
    49ee:	68 8d       	ldd	r22, Y+24	; 0x18
    49f0:	ce 01       	movw	r24, r28
    49f2:	0e 94 fe 20 	call	0x41fc	; 0x41fc <LCDWIKI_SPI::Set_Rotation(unsigned char)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1828
	Invert_Display(false);
    49f6:	60 e0       	ldi	r22, 0x00	; 0
    49f8:	ce 01       	movw	r24, r28
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1829
}
    49fa:	df 91       	pop	r29
    49fc:	cf 91       	pop	r28
    49fe:	1f 91       	pop	r17
    4a00:	0f 91       	pop	r16
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1828
		default:
			lcd_driver = ID_UNKNOWN;
			break;		
	}
	Set_Rotation(rotation); 
	Invert_Display(false);
    4a02:	0c 94 03 23 	jmp	0x4606	; 0x4606 <LCDWIKI_SPI::Invert_Display(bool)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1636
        		  0x09 , 1 , 0x3F
			};
		    init_table8(HX8347G_regValues, sizeof(HX8347G_regValues));
			break;
		case 0x9486:
			lcd_driver = ID_9486;
    4a06:	85 e0       	ldi	r24, 0x05	; 5
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	9b 8f       	std	Y+27, r25	; 0x1b
    4a0c:	8a 8f       	std	Y+26, r24	; 0x1a
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1639
			//WIDTH = 320,HEIGHT = 480;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    4a0e:	8a e2       	ldi	r24, 0x2A	; 42
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	98 a3       	std	Y+32, r25	; 0x20
    4a14:	8f 8f       	std	Y+31, r24	; 0x1f
    4a16:	8b e2       	ldi	r24, 0x2B	; 43
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	9a a3       	std	Y+34, r25	; 0x22
    4a1c:	89 a3       	std	Y+33, r24	; 0x21
    4a1e:	8c e2       	ldi	r24, 0x2C	; 44
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	9c a3       	std	Y+36, r25	; 0x24
    4a24:	8b a3       	std	Y+35, r24	; 0x23
    4a26:	8e e2       	ldi	r24, 0x2E	; 46
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	9e a3       	std	Y+38, r25	; 0x26
    4a2c:	8d a3       	std	Y+37, r24	; 0x25
    4a2e:	83 e3       	ldi	r24, 0x33	; 51
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	98 a7       	std	Y+40, r25	; 0x28
    4a34:	8f a3       	std	Y+39, r24	; 0x27
    4a36:	87 e3       	ldi	r24, 0x37	; 55
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	9a a7       	std	Y+42, r25	; 0x2a
    4a3c:	89 a7       	std	Y+41, r24	; 0x29
    4a3e:	86 e3       	ldi	r24, 0x36	; 54
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	9c a7       	std	Y+44, r25	; 0x2c
    4a44:	8b a7       	std	Y+43, r24	; 0x2b
    4a46:	1e a6       	std	Y+46, r1	; 0x2e
    4a48:	1d a6       	std	Y+45, r1	; 0x2d
    4a4a:	18 aa       	std	Y+48, r1	; 0x30
    4a4c:	1f a6       	std	Y+47, r1	; 0x2f
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1678
            	0x11, 0,            //Sleep Out
            	TFTLCD_DELAY8, 150,
            	0x29, 0         //Display On
            */
			};
			init_table8(ILI9486_regValues, sizeof(ILI9486_regValues));
    4a4e:	45 e5       	ldi	r20, 0x55	; 85
    4a50:	50 e0       	ldi	r21, 0x00	; 0
    4a52:	66 eb       	ldi	r22, 0xB6	; 182
    4a54:	76 e0       	ldi	r23, 0x06	; 6
    4a56:	76 cf       	rjmp	.-276    	; 0x4944 <LCDWIKI_SPI::start(unsigned int)+0x12a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1681
			break;
		case 0x9488:
			lcd_driver = ID_9488;			
    4a58:	8a e0       	ldi	r24, 0x0A	; 10
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	9b 8f       	std	Y+27, r25	; 0x1b
    4a5e:	8a 8f       	std	Y+26, r24	; 0x1a
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1682
			if(MODEL == ILI9488_18)
    4a60:	89 a9       	ldd	r24, Y+49	; 0x31
    4a62:	9a a9       	ldd	r25, Y+50	; 0x32
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1685
			{
				static const uint8_t ILI9488_IPF[] PROGMEM ={0x3A,1,0x66};
				init_table8(ILI9488_IPF, sizeof(ILI9488_IPF));
    4a64:	43 e0       	ldi	r20, 0x03	; 3
    4a66:	50 e0       	ldi	r21, 0x00	; 0
    4a68:	63 eb       	ldi	r22, 0xB3	; 179
    4a6a:	76 e0       	ldi	r23, 0x06	; 6
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1682
			};
			init_table8(ILI9486_regValues, sizeof(ILI9486_regValues));
			break;
		case 0x9488:
			lcd_driver = ID_9488;			
			if(MODEL == ILI9488_18)
    4a6c:	0c 97       	sbiw	r24, 0x0c	; 12
    4a6e:	11 f0       	breq	.+4      	; 0x4a74 <LCDWIKI_SPI::start(unsigned int)+0x25a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1690
				init_table8(ILI9488_IPF, sizeof(ILI9488_IPF));
			}
			else
			{
				static const uint8_t ILI9488_IPF[] PROGMEM ={0x3A,1,0x55};
				init_table8(ILI9488_IPF, sizeof(ILI9488_IPF));
    4a70:	60 eb       	ldi	r22, 0xB0	; 176
    4a72:	76 e0       	ldi	r23, 0x06	; 6
    4a74:	ce 01       	movw	r24, r28
    4a76:	0e 94 91 23 	call	0x4722	; 0x4722 <LCDWIKI_SPI::init_table8(void const*, int)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1694
			}
			//WIDTH = 320,HEIGHT = 480;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=1;
    4a7a:	8a e2       	ldi	r24, 0x2A	; 42
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	98 a3       	std	Y+32, r25	; 0x20
    4a80:	8f 8f       	std	Y+31, r24	; 0x1f
    4a82:	8b e2       	ldi	r24, 0x2B	; 43
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	9a a3       	std	Y+34, r25	; 0x22
    4a88:	89 a3       	std	Y+33, r24	; 0x21
    4a8a:	8c e2       	ldi	r24, 0x2C	; 44
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	9c a3       	std	Y+36, r25	; 0x24
    4a90:	8b a3       	std	Y+35, r24	; 0x23
    4a92:	8e e2       	ldi	r24, 0x2E	; 46
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	9e a3       	std	Y+38, r25	; 0x26
    4a98:	8d a3       	std	Y+37, r24	; 0x25
    4a9a:	83 e3       	ldi	r24, 0x33	; 51
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	98 a7       	std	Y+40, r25	; 0x28
    4aa0:	8f a3       	std	Y+39, r24	; 0x27
    4aa2:	87 e3       	ldi	r24, 0x37	; 55
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	9a a7       	std	Y+42, r25	; 0x2a
    4aa8:	89 a7       	std	Y+41, r24	; 0x29
    4aaa:	86 e3       	ldi	r24, 0x36	; 54
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	9c a7       	std	Y+44, r25	; 0x2c
    4ab0:	8b a7       	std	Y+43, r24	; 0x2b
    4ab2:	1e a6       	std	Y+46, r1	; 0x2e
    4ab4:	1d a6       	std	Y+45, r1	; 0x2d
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	98 ab       	std	Y+48, r25	; 0x30
    4abc:	8f a7       	std	Y+47, r24	; 0x2f
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1714
				0xE1, 15, 0x00, 0x17, 0x1A, 0x04, 0x0E, 0x06, 0x2F, 0x45, 0x43, 0x02, 0x0A, 0x09, 0x32, 0x36, 0x0F,
				0x11, 0,
				TFTLCD_DELAY8, 120,
				0x29, 0
			};
			init_table8(ILI9488_regValues, sizeof(ILI9488_regValues));
    4abe:	42 e5       	ldi	r20, 0x52	; 82
    4ac0:	50 e0       	ldi	r21, 0x00	; 0
    4ac2:	6e e5       	ldi	r22, 0x5E	; 94
    4ac4:	76 e0       	ldi	r23, 0x06	; 6
    4ac6:	3e cf       	rjmp	.-388    	; 0x4944 <LCDWIKI_SPI::start(unsigned int)+0x12a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1717
			break;
		case 0x7735:
			if(HEIGHT == 160)
    4ac8:	8a 89       	ldd	r24, Y+18	; 0x12
    4aca:	9b 89       	ldd	r25, Y+19	; 0x13
    4acc:	80 3a       	cpi	r24, 0xA0	; 160
    4ace:	91 05       	cpc	r25, r1
    4ad0:	49 f5       	brne	.+82     	; 0x4b24 <LCDWIKI_SPI::start(unsigned int)+0x30a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1719
			{
				lcd_driver = ID_7735;
    4ad2:	86 e0       	ldi	r24, 0x06	; 6
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1723
			}
			else if(HEIGHT == 128)
			{
				lcd_driver = ID_7735_128;
    4ad6:	9b 8f       	std	Y+27, r25	; 0x1b
    4ad8:	8a 8f       	std	Y+26, r24	; 0x1a
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1727
			}
			//WIDTH = 128,HEIGHT = 160;
			//width = WIDTH, height = HEIGHT;
			XC=ILI9341_COLADDRSET,YC=ILI9341_PAGEADDRSET,CC=ILI9341_MEMORYWRITE,RC=HX8357_RAMRD,SC1=0x33,SC2=0x37,MD=ILI9341_MADCTL,VL=0,R24BIT=0;
    4ada:	8a e2       	ldi	r24, 0x2A	; 42
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	98 a3       	std	Y+32, r25	; 0x20
    4ae0:	8f 8f       	std	Y+31, r24	; 0x1f
    4ae2:	8b e2       	ldi	r24, 0x2B	; 43
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	9a a3       	std	Y+34, r25	; 0x22
    4ae8:	89 a3       	std	Y+33, r24	; 0x21
    4aea:	8c e2       	ldi	r24, 0x2C	; 44
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	9c a3       	std	Y+36, r25	; 0x24
    4af0:	8b a3       	std	Y+35, r24	; 0x23
    4af2:	8e e2       	ldi	r24, 0x2E	; 46
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	9e a3       	std	Y+38, r25	; 0x26
    4af8:	8d a3       	std	Y+37, r24	; 0x25
    4afa:	83 e3       	ldi	r24, 0x33	; 51
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	98 a7       	std	Y+40, r25	; 0x28
    4b00:	8f a3       	std	Y+39, r24	; 0x27
    4b02:	87 e3       	ldi	r24, 0x37	; 55
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	9a a7       	std	Y+42, r25	; 0x2a
    4b08:	89 a7       	std	Y+41, r24	; 0x29
    4b0a:	86 e3       	ldi	r24, 0x36	; 54
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	9c a7       	std	Y+44, r25	; 0x2c
    4b10:	8b a7       	std	Y+43, r24	; 0x2b
    4b12:	1e a6       	std	Y+46, r1	; 0x2e
    4b14:	1d a6       	std	Y+45, r1	; 0x2d
    4b16:	18 aa       	std	Y+48, r1	; 0x30
    4b18:	1f a6       	std	Y+47, r1	; 0x2f
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1751
            	//TFTLCD_DELAY8, 150,
            	0x3A, 1, 0x05,  
      //      	0x13, 0,
            	0x29, 0         
			};
			init_table8(ST7735S_regValues, sizeof(ST7735S_regValues));
    4b1a:	4f e5       	ldi	r20, 0x5F	; 95
    4b1c:	50 e0       	ldi	r21, 0x00	; 0
    4b1e:	6f ef       	ldi	r22, 0xFF	; 255
    4b20:	75 e0       	ldi	r23, 0x05	; 5
    4b22:	10 cf       	rjmp	.-480    	; 0x4944 <LCDWIKI_SPI::start(unsigned int)+0x12a>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1721
		case 0x7735:
			if(HEIGHT == 160)
			{
				lcd_driver = ID_7735;
			}
			else if(HEIGHT == 128)
    4b24:	80 38       	cpi	r24, 0x80	; 128
    4b26:	91 05       	cpc	r25, r1
    4b28:	c1 f6       	brne	.-80     	; 0x4ada <LCDWIKI_SPI::start(unsigned int)+0x2c0>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1723
			{
				lcd_driver = ID_7735_128;
    4b2a:	89 e0       	ldi	r24, 0x09	; 9
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	d3 cf       	rjmp	.-90     	; 0x4ad6 <LCDWIKI_SPI::start(unsigned int)+0x2bc>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1754
            	0x29, 0         
			};
			init_table8(ST7735S_regValues, sizeof(ST7735S_regValues));
			break;
		 case 0x1283:
		 	lcd_driver = ID_1283A;
    4b30:	87 e0       	ldi	r24, 0x07	; 7
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	9b 8f       	std	Y+27, r25	; 0x1b
    4b36:	8a 8f       	std	Y+26, r24	; 0x1a
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1755
			XC=0x45,YC=0x44,CC=0x22,RC=HX8357_RAMRD,SC1=0x41,SC2=0x42,MD=0x03,VL=1,R24BIT=0;
    4b38:	85 e4       	ldi	r24, 0x45	; 69
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	98 a3       	std	Y+32, r25	; 0x20
    4b3e:	8f 8f       	std	Y+31, r24	; 0x1f
    4b40:	84 e4       	ldi	r24, 0x44	; 68
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	9a a3       	std	Y+34, r25	; 0x22
    4b46:	89 a3       	std	Y+33, r24	; 0x21
    4b48:	82 e2       	ldi	r24, 0x22	; 34
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	9c a3       	std	Y+36, r25	; 0x24
    4b4e:	8b a3       	std	Y+35, r24	; 0x23
    4b50:	8e e2       	ldi	r24, 0x2E	; 46
    4b52:	90 e0       	ldi	r25, 0x00	; 0
    4b54:	9e a3       	std	Y+38, r25	; 0x26
    4b56:	8d a3       	std	Y+37, r24	; 0x25
    4b58:	81 e4       	ldi	r24, 0x41	; 65
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	98 a7       	std	Y+40, r25	; 0x28
    4b5e:	8f a3       	std	Y+39, r24	; 0x27
    4b60:	82 e4       	ldi	r24, 0x42	; 66
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	9a a7       	std	Y+42, r25	; 0x2a
    4b66:	89 a7       	std	Y+41, r24	; 0x29
    4b68:	83 e0       	ldi	r24, 0x03	; 3
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	9c a7       	std	Y+44, r25	; 0x2c
    4b6e:	8b a7       	std	Y+43, r24	; 0x2b
    4b70:	81 e0       	ldi	r24, 0x01	; 1
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	9e a7       	std	Y+46, r25	; 0x2e
    4b76:	8d a7       	std	Y+45, r24	; 0x2d
    4b78:	18 aa       	std	Y+48, r1	; 0x30
    4b7a:	1f a6       	std	Y+47, r1	; 0x2f
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1783
            	0x02, 0x0300,
            	0x0B, 0x580C,
            	0x12, 0x0609,
            	0x13, 0x3100, 
			};
			init_table16(SSD1283A_regValues, sizeof(SSD1283A_regValues));
    4b7c:	40 e6       	ldi	r20, 0x60	; 96
    4b7e:	50 e0       	ldi	r21, 0x00	; 0
    4b80:	6f e9       	ldi	r22, 0x9F	; 159
    4b82:	75 e0       	ldi	r23, 0x05	; 5
    4b84:	31 cf       	rjmp	.-414    	; 0x49e8 <LCDWIKI_SPI::start(unsigned int)+0x1ce>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1786
			break;
		case 0x1106:
		 	lcd_driver = ID_1106;
    4b86:	88 e0       	ldi	r24, 0x08	; 8
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	9b 8f       	std	Y+27, r25	; 0x1b
    4b8c:	8a 8f       	std	Y+26, r24	; 0x1a
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1787
			XC=0x10,YC=0xB0,CC=0,RC=0,SC1=0,SC2=0,MD=0,VL=1,R24BIT=0;
    4b8e:	80 e1       	ldi	r24, 0x10	; 16
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	98 a3       	std	Y+32, r25	; 0x20
    4b94:	8f 8f       	std	Y+31, r24	; 0x1f
    4b96:	80 eb       	ldi	r24, 0xB0	; 176
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	9a a3       	std	Y+34, r25	; 0x22
    4b9c:	89 a3       	std	Y+33, r24	; 0x21
    4b9e:	1c a2       	std	Y+36, r1	; 0x24
    4ba0:	1b a2       	std	Y+35, r1	; 0x23
    4ba2:	1e a2       	std	Y+38, r1	; 0x26
    4ba4:	1d a2       	std	Y+37, r1	; 0x25
    4ba6:	18 a6       	std	Y+40, r1	; 0x28
    4ba8:	1f a2       	std	Y+39, r1	; 0x27
    4baa:	1a a6       	std	Y+42, r1	; 0x2a
    4bac:	19 a6       	std	Y+41, r1	; 0x29
    4bae:	1c a6       	std	Y+44, r1	; 0x2c
    4bb0:	1b a6       	std	Y+43, r1	; 0x2b
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	9e a7       	std	Y+46, r25	; 0x2e
    4bb8:	8d a7       	std	Y+45, r24	; 0x2d
    4bba:	18 aa       	std	Y+48, r1	; 0x30
    4bbc:	1f a6       	std	Y+47, r1	; 0x2f
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:1821
            	0x14, 0,
            	0xA4, 0,
            	0xA6, 0,
            	0xAF, 0,
			};
			init_table8(SH1106_regValues, sizeof(SH1106_regValues));
    4bbe:	4c e3       	ldi	r20, 0x3C	; 60
    4bc0:	50 e0       	ldi	r21, 0x00	; 0
    4bc2:	63 e6       	ldi	r22, 0x63	; 99
    4bc4:	75 e0       	ldi	r23, 0x05	; 5
    4bc6:	be ce       	rjmp	.-644    	; 0x4944 <LCDWIKI_SPI::start(unsigned int)+0x12a>

00004bc8 <LCDWIKI_SPI::Init_LCD()>:
_ZN11LCDWIKI_SPI8Init_LCDEv():
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:433
	height = HEIGHT;
}

// Initialization lcd modules
void LCDWIKI_SPI::Init_LCD(void)
{
    4bc8:	cf 93       	push	r28
    4bca:	df 93       	push	r29
    4bcc:	ec 01       	movw	r28, r24
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:434
	reset();
    4bce:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <LCDWIKI_SPI::reset()>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:435
	Led_control(true);
    4bd2:	61 e0       	ldi	r22, 0x01	; 1
    4bd4:	ce 01       	movw	r24, r28
    4bd6:	0e 94 57 17 	call	0x2eae	; 0x2eae <LCDWIKI_SPI::Led_control(bool)>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:436
	if(lcd_model == 0xFFFF)
    4bda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4bdc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4bde:	01 96       	adiw	r24, 0x01	; 1
    4be0:	29 f4       	brne	.+10     	; 0x4bec <LCDWIKI_SPI::Init_LCD()+0x24>
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:438
	{
		lcd_model = Read_ID(); 
    4be2:	ce 01       	movw	r24, r28
    4be4:	0e 94 18 20 	call	0x4030	; 0x4030 <LCDWIKI_SPI::Read_ID()>
    4be8:	9d 8f       	std	Y+29, r25	; 0x1d
    4bea:	8c 8f       	std	Y+28, r24	; 0x1c
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:441
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
    4bec:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4bee:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4bf0:	ce 01       	movw	r24, r28
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:443
//	Set_Rotation(0);
}
    4bf2:	df 91       	pop	r29
    4bf4:	cf 91       	pop	r28
/home/noah/Arduino/libraries/LCDWIKI_SPI/LCDWIKI_SPI.cpp:441
	if(lcd_model == 0xFFFF)
	{
		lcd_model = Read_ID(); 
	}
//	uint16_t ID = Read_ID(); 
	start(lcd_model);
    4bf6:	0c 94 0d 24 	jmp	0x481a	; 0x481a <LCDWIKI_SPI::start(unsigned int)>

00004bfa <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    4bfa:	fc 01       	movw	r30, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4bfc:	91 8d       	ldd	r25, Z+25	; 0x19
    4bfe:	22 8d       	ldd	r18, Z+26	; 0x1a
    4c00:	89 2f       	mov	r24, r25
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	80 5c       	subi	r24, 0xC0	; 192
    4c06:	9f 4f       	sbci	r25, 0xFF	; 255
    4c08:	82 1b       	sub	r24, r18
    4c0a:	91 09       	sbc	r25, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
    4c0c:	8f 73       	andi	r24, 0x3F	; 63
    4c0e:	99 27       	eor	r25, r25
    4c10:	08 95       	ret

00004c12 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    4c12:	fc 01       	movw	r30, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    4c14:	91 8d       	ldd	r25, Z+25	; 0x19
    4c16:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c18:	98 17       	cp	r25, r24
    4c1a:	31 f0       	breq	.+12     	; 0x4c28 <HardwareSerial::peek()+0x16>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4c1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c1e:	e8 0f       	add	r30, r24
    4c20:	f1 1d       	adc	r31, r1
    4c22:	85 8d       	ldd	r24, Z+29	; 0x1d
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4c28:	8f ef       	ldi	r24, 0xFF	; 255
    4c2a:	9f ef       	ldi	r25, 0xFF	; 255
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4c2c:	08 95       	ret

00004c2e <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    4c2e:	fc 01       	movw	r30, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4c30:	91 8d       	ldd	r25, Z+25	; 0x19
    4c32:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c34:	98 17       	cp	r25, r24
    4c36:	61 f0       	breq	.+24     	; 0x4c50 <HardwareSerial::read()+0x22>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    4c38:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4c3a:	ae 0f       	add	r26, r30
    4c3c:	bf 2f       	mov	r27, r31
    4c3e:	b1 1d       	adc	r27, r1
    4c40:	5d 96       	adiw	r26, 0x1d	; 29
    4c42:	8c 91       	ld	r24, X
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4c44:	92 8d       	ldd	r25, Z+26	; 0x1a
    4c46:	9f 5f       	subi	r25, 0xFF	; 255
    4c48:	9f 73       	andi	r25, 0x3F	; 63
    4c4a:	92 8f       	std	Z+26, r25	; 0x1a
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4c50:	8f ef       	ldi	r24, 0xFF	; 255
    4c52:	9f ef       	ldi	r25, 0xFF	; 255
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4c54:	08 95       	ret

00004c56 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    4c56:	fc 01       	movw	r30, r24
    4c58:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    4c5a:	44 8d       	ldd	r20, Z+28	; 0x1c
    4c5c:	25 2f       	mov	r18, r21
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	84 2f       	mov	r24, r20
    4c62:	90 e0       	ldi	r25, 0x00	; 0
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    4c64:	82 1b       	sub	r24, r18
    4c66:	93 0b       	sbc	r25, r19
    4c68:	54 17       	cp	r21, r20
    4c6a:	10 f0       	brcs	.+4      	; 0x4c70 <HardwareSerial::availableForWrite()+0x1a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    4c6c:	cf 96       	adiw	r24, 0x3f	; 63
    4c6e:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    4c70:	01 97       	sbiw	r24, 0x01	; 1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
    4c72:	08 95       	ret

00004c74 <serialEventRun()>:
_Z14serialEventRunv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    4c74:	81 e8       	ldi	r24, 0x81	; 129
    4c76:	97 e2       	ldi	r25, 0x27	; 39
    4c78:	89 2b       	or	r24, r25
    4c7a:	49 f0       	breq	.+18     	; 0x4c8e <serialEventRun()+0x1a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    4c7c:	80 e0       	ldi	r24, 0x00	; 0
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	89 2b       	or	r24, r25
    4c82:	29 f0       	breq	.+10     	; 0x4c8e <serialEventRun()+0x1a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    4c84:	0e 94 81 27 	call	0x4f02	; 0x4f02 <Serial0_available()>
    4c88:	81 11       	cpse	r24, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    4c8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    4c8e:	08 95       	ret

00004c90 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    4c90:	fc 01       	movw	r30, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    4c92:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4c94:	a8 0f       	add	r26, r24
    4c96:	b9 2f       	mov	r27, r25
    4c98:	b1 1d       	adc	r27, r1
    4c9a:	a3 5a       	subi	r26, 0xA3	; 163
    4c9c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c9e:	2c 91       	ld	r18, X
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    4ca0:	84 8d       	ldd	r24, Z+28	; 0x1c
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	01 96       	adiw	r24, 0x01	; 1
    4ca6:	8f 73       	andi	r24, 0x3F	; 63
    4ca8:	99 27       	eor	r25, r25
    4caa:	84 8f       	std	Z+28, r24	; 0x1c
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    4cac:	a6 89       	ldd	r26, Z+22	; 0x16
    4cae:	b7 89       	ldd	r27, Z+23	; 0x17
    4cb0:	2c 93       	st	X, r18
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    4cb2:	a0 89       	ldd	r26, Z+16	; 0x10
    4cb4:	b1 89       	ldd	r27, Z+17	; 0x11
    4cb6:	8c 91       	ld	r24, X
    4cb8:	83 70       	andi	r24, 0x03	; 3
    4cba:	80 64       	ori	r24, 0x40	; 64
    4cbc:	8c 93       	st	X, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    4cbe:	93 8d       	ldd	r25, Z+27	; 0x1b
    4cc0:	84 8d       	ldd	r24, Z+28	; 0x1c
    4cc2:	98 13       	cpse	r25, r24
    4cc4:	06 c0       	rjmp	.+12     	; 0x4cd2 <HardwareSerial::_tx_udr_empty_irq()+0x42>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    4cc6:	02 88       	ldd	r0, Z+18	; 0x12
    4cc8:	f3 89       	ldd	r31, Z+19	; 0x13
    4cca:	e0 2d       	mov	r30, r0
    4ccc:	80 81       	ld	r24, Z
    4cce:	8f 7d       	andi	r24, 0xDF	; 223
    4cd0:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    4cd2:	08 95       	ret

00004cd4 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4cd4:	cf 93       	push	r28
    4cd6:	df 93       	push	r29
    4cd8:	ec 01       	movw	r28, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    4cda:	88 8d       	ldd	r24, Y+24	; 0x18
    4cdc:	88 23       	and	r24, r24
    4cde:	b9 f0       	breq	.+46     	; 0x4d0e <HardwareSerial::flush()+0x3a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    4ce0:	aa 89       	ldd	r26, Y+18	; 0x12
    4ce2:	bb 89       	ldd	r27, Y+19	; 0x13
    4ce4:	e8 89       	ldd	r30, Y+16	; 0x10
    4ce6:	f9 89       	ldd	r31, Y+17	; 0x11
    4ce8:	8c 91       	ld	r24, X
    4cea:	85 fd       	sbrc	r24, 5
    4cec:	03 c0       	rjmp	.+6      	; 0x4cf4 <HardwareSerial::flush()+0x20>
    4cee:	80 81       	ld	r24, Z
    4cf0:	86 fd       	sbrc	r24, 6
    4cf2:	0d c0       	rjmp	.+26     	; 0x4d0e <HardwareSerial::flush()+0x3a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    4cf4:	0f b6       	in	r0, 0x3f	; 63
    4cf6:	07 fc       	sbrc	r0, 7
    4cf8:	f7 cf       	rjmp	.-18     	; 0x4ce8 <HardwareSerial::flush()+0x14>
    4cfa:	8c 91       	ld	r24, X
    4cfc:	85 ff       	sbrs	r24, 5
    4cfe:	f2 cf       	rjmp	.-28     	; 0x4ce4 <HardwareSerial::flush()+0x10>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    4d00:	80 81       	ld	r24, Z
    4d02:	85 ff       	sbrs	r24, 5
    4d04:	ed cf       	rjmp	.-38     	; 0x4ce0 <HardwareSerial::flush()+0xc>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    4d06:	ce 01       	movw	r24, r28
    4d08:	0e 94 48 26 	call	0x4c90	; 0x4c90 <HardwareSerial::_tx_udr_empty_irq()>
    4d0c:	e9 cf       	rjmp	.-46     	; 0x4ce0 <HardwareSerial::flush()+0xc>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4d0e:	df 91       	pop	r29
    4d10:	cf 91       	pop	r28
    4d12:	08 95       	ret

00004d14 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    4d14:	ef 92       	push	r14
    4d16:	ff 92       	push	r15
    4d18:	0f 93       	push	r16
    4d1a:	1f 93       	push	r17
    4d1c:	cf 93       	push	r28
    4d1e:	df 93       	push	r29
    4d20:	ec 01       	movw	r28, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	88 8f       	std	Y+24, r24	; 0x18
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4d26:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4d28:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d2a:	98 13       	cpse	r25, r24
    4d2c:	1a c0       	rjmp	.+52     	; 0x4d62 <HardwareSerial::write(unsigned char)+0x4e>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    4d2e:	e8 89       	ldd	r30, Y+16	; 0x10
    4d30:	f9 89       	ldd	r31, Y+17	; 0x11
    4d32:	80 81       	ld	r24, Z
    4d34:	85 ff       	sbrs	r24, 5
    4d36:	15 c0       	rjmp	.+42     	; 0x4d62 <HardwareSerial::write(unsigned char)+0x4e>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    4d38:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/noah/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4d3a:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    4d3c:	ee 89       	ldd	r30, Y+22	; 0x16
    4d3e:	ff 89       	ldd	r31, Y+23	; 0x17
    4d40:	60 83       	st	Z, r22
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    4d42:	e8 89       	ldd	r30, Y+16	; 0x10
    4d44:	f9 89       	ldd	r31, Y+17	; 0x11
    4d46:	80 81       	ld	r24, Z
    4d48:	83 70       	andi	r24, 0x03	; 3
    4d4a:	80 64       	ori	r24, 0x40	; 64
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    4d4c:	80 83       	st	Z, r24
__iRestore():
/home/noah/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4d4e:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	df 91       	pop	r29
    4d56:	cf 91       	pop	r28
    4d58:	1f 91       	pop	r17
    4d5a:	0f 91       	pop	r16
    4d5c:	ff 90       	pop	r15
    4d5e:	ef 90       	pop	r14
    4d60:	08 95       	ret
    4d62:	f6 2e       	mov	r15, r22
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    4d64:	0b 8d       	ldd	r16, Y+27	; 0x1b
    4d66:	10 e0       	ldi	r17, 0x00	; 0
    4d68:	0f 5f       	subi	r16, 0xFF	; 255
    4d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d6c:	0f 73       	andi	r16, 0x3F	; 63
    4d6e:	11 27       	eor	r17, r17
    4d70:	e0 2e       	mov	r14, r16
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    4d72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d74:	8e 11       	cpse	r24, r14
    4d76:	0c c0       	rjmp	.+24     	; 0x4d90 <HardwareSerial::write(unsigned char)+0x7c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    4d78:	0f b6       	in	r0, 0x3f	; 63
    4d7a:	07 fc       	sbrc	r0, 7
    4d7c:	fa cf       	rjmp	.-12     	; 0x4d72 <HardwareSerial::write(unsigned char)+0x5e>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    4d7e:	e8 89       	ldd	r30, Y+16	; 0x10
    4d80:	f9 89       	ldd	r31, Y+17	; 0x11
    4d82:	80 81       	ld	r24, Z
    4d84:	85 ff       	sbrs	r24, 5
    4d86:	f5 cf       	rjmp	.-22     	; 0x4d72 <HardwareSerial::write(unsigned char)+0x5e>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    4d88:	ce 01       	movw	r24, r28
    4d8a:	0e 94 48 26 	call	0x4c90	; 0x4c90 <HardwareSerial::_tx_udr_empty_irq()>
    4d8e:	f1 cf       	rjmp	.-30     	; 0x4d72 <HardwareSerial::write(unsigned char)+0x5e>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    4d90:	eb 8d       	ldd	r30, Y+27	; 0x1b
    4d92:	ec 0f       	add	r30, r28
    4d94:	fd 2f       	mov	r31, r29
    4d96:	f1 1d       	adc	r31, r1
    4d98:	e3 5a       	subi	r30, 0xA3	; 163
    4d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9c:	f0 82       	st	Z, r15
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    4d9e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/noah/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4da0:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    4da2:	0b 8f       	std	Y+27, r16	; 0x1b
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    4da4:	ea 89       	ldd	r30, Y+18	; 0x12
    4da6:	fb 89       	ldd	r31, Y+19	; 0x13
    4da8:	80 81       	ld	r24, Z
    4daa:	80 62       	ori	r24, 0x20	; 32
    4dac:	cf cf       	rjmp	.-98     	; 0x4d4c <HardwareSerial::write(unsigned char)+0x38>

00004dae <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    4dae:	cf 92       	push	r12
    4db0:	df 92       	push	r13
    4db2:	ef 92       	push	r14
    4db4:	ff 92       	push	r15
    4db6:	1f 93       	push	r17
    4db8:	cf 93       	push	r28
    4dba:	df 93       	push	r29
    4dbc:	ec 01       	movw	r28, r24
    4dbe:	6a 01       	movw	r12, r20
    4dc0:	7b 01       	movw	r14, r22
    4dc2:	12 2f       	mov	r17, r18
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4dc4:	60 e8       	ldi	r22, 0x80	; 128
    4dc6:	74 e8       	ldi	r23, 0x84	; 132
    4dc8:	8e e1       	ldi	r24, 0x1E	; 30
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	a7 01       	movw	r20, r14
    4dce:	96 01       	movw	r18, r12
    4dd0:	0e 94 86 2c 	call	0x590c	; 0x590c <__udivmodsi4>
    4dd4:	21 50       	subi	r18, 0x01	; 1
    4dd6:	31 09       	sbc	r19, r1
    4dd8:	41 09       	sbc	r20, r1
    4dda:	51 09       	sbc	r21, r1
    4ddc:	56 95       	lsr	r21
    4dde:	47 95       	ror	r20
    4de0:	37 95       	ror	r19
    4de2:	27 95       	ror	r18
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
    4de4:	e8 89       	ldd	r30, Y+16	; 0x10
    4de6:	f9 89       	ldd	r31, Y+17	; 0x11
    4de8:	82 e0       	ldi	r24, 0x02	; 2
    4dea:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4dec:	21 15       	cp	r18, r1
    4dee:	80 e1       	ldi	r24, 0x10	; 16
    4df0:	38 07       	cpc	r19, r24
    4df2:	98 f0       	brcs	.+38     	; 0x4e1a <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    4df4:	e8 89       	ldd	r30, Y+16	; 0x10
    4df6:	f9 89       	ldd	r31, Y+17	; 0x11
    4df8:	10 82       	st	Z, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4dfa:	60 e4       	ldi	r22, 0x40	; 64
    4dfc:	72 e4       	ldi	r23, 0x42	; 66
    4dfe:	8f e0       	ldi	r24, 0x0F	; 15
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	a7 01       	movw	r20, r14
    4e04:	96 01       	movw	r18, r12
    4e06:	0e 94 86 2c 	call	0x590c	; 0x590c <__udivmodsi4>
    4e0a:	21 50       	subi	r18, 0x01	; 1
    4e0c:	31 09       	sbc	r19, r1
    4e0e:	41 09       	sbc	r20, r1
    4e10:	51 09       	sbc	r21, r1
    4e12:	56 95       	lsr	r21
    4e14:	47 95       	ror	r20
    4e16:	37 95       	ror	r19
    4e18:	27 95       	ror	r18
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4e1a:	ec 85       	ldd	r30, Y+12	; 0x0c
    4e1c:	fd 85       	ldd	r31, Y+13	; 0x0d
    4e1e:	30 83       	st	Z, r19
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    4e20:	ee 85       	ldd	r30, Y+14	; 0x0e
    4e22:	ff 85       	ldd	r31, Y+15	; 0x0f
    4e24:	20 83       	st	Z, r18
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    4e26:	18 8e       	std	Y+24, r1	; 0x18
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4e28:	ec 89       	ldd	r30, Y+20	; 0x14
    4e2a:	fd 89       	ldd	r31, Y+21	; 0x15
    4e2c:	10 83       	st	Z, r17
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    4e2e:	ea 89       	ldd	r30, Y+18	; 0x12
    4e30:	fb 89       	ldd	r31, Y+19	; 0x13
    4e32:	80 81       	ld	r24, Z
    4e34:	88 69       	ori	r24, 0x98	; 152
    4e36:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    4e38:	ea 89       	ldd	r30, Y+18	; 0x12
    4e3a:	fb 89       	ldd	r31, Y+19	; 0x13
    4e3c:	80 81       	ld	r24, Z
    4e3e:	8f 7d       	andi	r24, 0xDF	; 223
    4e40:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:150
}
    4e42:	df 91       	pop	r29
    4e44:	cf 91       	pop	r28
    4e46:	1f 91       	pop	r17
    4e48:	ff 90       	pop	r15
    4e4a:	ef 90       	pop	r14
    4e4c:	df 90       	pop	r13
    4e4e:	cf 90       	pop	r12
    4e50:	08 95       	ret

00004e52 <__vector_18>:
__vector_18():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    4e52:	1f 92       	push	r1
    4e54:	0f 92       	push	r0
    4e56:	0f b6       	in	r0, 0x3f	; 63
    4e58:	0f 92       	push	r0
    4e5a:	11 24       	eor	r1, r1
    4e5c:	2f 93       	push	r18
    4e5e:	8f 93       	push	r24
    4e60:	9f 93       	push	r25
    4e62:	ef 93       	push	r30
    4e64:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    4e66:	e0 91 a2 06 	lds	r30, 0x06A2	; 0x8006a2 <Serial+0x10>
    4e6a:	f0 91 a3 06 	lds	r31, 0x06A3	; 0x8006a3 <Serial+0x11>
    4e6e:	80 81       	ld	r24, Z
    4e70:	e0 91 a8 06 	lds	r30, 0x06A8	; 0x8006a8 <Serial+0x16>
    4e74:	f0 91 a9 06 	lds	r31, 0x06A9	; 0x8006a9 <Serial+0x17>
    4e78:	82 fd       	sbrc	r24, 2
    4e7a:	1b c0       	rjmp	.+54     	; 0x4eb2 <__vector_18+0x60>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    4e7c:	90 81       	ld	r25, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    4e7e:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <Serial+0x19>
    4e82:	8f 5f       	subi	r24, 0xFF	; 255
    4e84:	8f 73       	andi	r24, 0x3F	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    4e86:	20 91 ac 06 	lds	r18, 0x06AC	; 0x8006ac <Serial+0x1a>
    4e8a:	82 17       	cp	r24, r18
    4e8c:	41 f0       	breq	.+16     	; 0x4e9e <__vector_18+0x4c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    4e8e:	e0 91 ab 06 	lds	r30, 0x06AB	; 0x8006ab <Serial+0x19>
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	ee 56       	subi	r30, 0x6E	; 110
    4e96:	f9 4f       	sbci	r31, 0xF9	; 249
    4e98:	95 8f       	std	Z+29, r25	; 0x1d
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    4e9a:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <Serial+0x19>
__vector_18():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    4e9e:	ff 91       	pop	r31
    4ea0:	ef 91       	pop	r30
    4ea2:	9f 91       	pop	r25
    4ea4:	8f 91       	pop	r24
    4ea6:	2f 91       	pop	r18
    4ea8:	0f 90       	pop	r0
    4eaa:	0f be       	out	0x3f, r0	; 63
    4eac:	0f 90       	pop	r0
    4eae:	1f 90       	pop	r1
    4eb0:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    4eb2:	80 81       	ld	r24, Z
__vector_18():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    4eb4:	f4 cf       	rjmp	.-24     	; 0x4e9e <__vector_18+0x4c>

00004eb6 <__vector_19>:
__vector_19():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    4eb6:	1f 92       	push	r1
    4eb8:	0f 92       	push	r0
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	0f 92       	push	r0
    4ebe:	11 24       	eor	r1, r1
    4ec0:	2f 93       	push	r18
    4ec2:	3f 93       	push	r19
    4ec4:	4f 93       	push	r20
    4ec6:	5f 93       	push	r21
    4ec8:	6f 93       	push	r22
    4eca:	7f 93       	push	r23
    4ecc:	8f 93       	push	r24
    4ece:	9f 93       	push	r25
    4ed0:	af 93       	push	r26
    4ed2:	bf 93       	push	r27
    4ed4:	ef 93       	push	r30
    4ed6:	ff 93       	push	r31
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    4ed8:	82 e9       	ldi	r24, 0x92	; 146
    4eda:	96 e0       	ldi	r25, 0x06	; 6
    4edc:	0e 94 48 26 	call	0x4c90	; 0x4c90 <HardwareSerial::_tx_udr_empty_irq()>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    4ee0:	ff 91       	pop	r31
    4ee2:	ef 91       	pop	r30
    4ee4:	bf 91       	pop	r27
    4ee6:	af 91       	pop	r26
    4ee8:	9f 91       	pop	r25
    4eea:	8f 91       	pop	r24
    4eec:	7f 91       	pop	r23
    4eee:	6f 91       	pop	r22
    4ef0:	5f 91       	pop	r21
    4ef2:	4f 91       	pop	r20
    4ef4:	3f 91       	pop	r19
    4ef6:	2f 91       	pop	r18
    4ef8:	0f 90       	pop	r0
    4efa:	0f be       	out	0x3f, r0	; 63
    4efc:	0f 90       	pop	r0
    4efe:	1f 90       	pop	r1
    4f00:	18 95       	reti

00004f02 <Serial0_available()>:
_Z17Serial0_availablev():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4f02:	82 e9       	ldi	r24, 0x92	; 146
    4f04:	96 e0       	ldi	r25, 0x06	; 6
    4f06:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <HardwareSerial::available()>
    4f0a:	21 e0       	ldi	r18, 0x01	; 1
    4f0c:	89 2b       	or	r24, r25
    4f0e:	09 f4       	brne	.+2      	; 0x4f12 <Serial0_available()+0x10>
    4f10:	20 e0       	ldi	r18, 0x00	; 0
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    4f12:	82 2f       	mov	r24, r18
    4f14:	08 95       	ret

00004f16 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4f16:	e2 e9       	ldi	r30, 0x92	; 146
    4f18:	f6 e0       	ldi	r31, 0x06	; 6
    4f1a:	13 82       	std	Z+3, r1	; 0x03
    4f1c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    4f1e:	88 ee       	ldi	r24, 0xE8	; 232
    4f20:	93 e0       	ldi	r25, 0x03	; 3
    4f22:	a0 e0       	ldi	r26, 0x00	; 0
    4f24:	b0 e0       	ldi	r27, 0x00	; 0
    4f26:	84 83       	std	Z+4, r24	; 0x04
    4f28:	95 83       	std	Z+5, r25	; 0x05
    4f2a:	a6 83       	std	Z+6, r26	; 0x06
    4f2c:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    4f2e:	8b e2       	ldi	r24, 0x2B	; 43
    4f30:	92 e0       	ldi	r25, 0x02	; 2
    4f32:	91 83       	std	Z+1, r25	; 0x01
    4f34:	80 83       	st	Z, r24
    4f36:	85 ec       	ldi	r24, 0xC5	; 197
    4f38:	90 e0       	ldi	r25, 0x00	; 0
    4f3a:	95 87       	std	Z+13, r25	; 0x0d
    4f3c:	84 87       	std	Z+12, r24	; 0x0c
    4f3e:	84 ec       	ldi	r24, 0xC4	; 196
    4f40:	90 e0       	ldi	r25, 0x00	; 0
    4f42:	97 87       	std	Z+15, r25	; 0x0f
    4f44:	86 87       	std	Z+14, r24	; 0x0e
    4f46:	80 ec       	ldi	r24, 0xC0	; 192
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	91 8b       	std	Z+17, r25	; 0x11
    4f4c:	80 8b       	std	Z+16, r24	; 0x10
    4f4e:	81 ec       	ldi	r24, 0xC1	; 193
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	93 8b       	std	Z+19, r25	; 0x13
    4f54:	82 8b       	std	Z+18, r24	; 0x12
    4f56:	82 ec       	ldi	r24, 0xC2	; 194
    4f58:	90 e0       	ldi	r25, 0x00	; 0
    4f5a:	95 8b       	std	Z+21, r25	; 0x15
    4f5c:	84 8b       	std	Z+20, r24	; 0x14
    4f5e:	86 ec       	ldi	r24, 0xC6	; 198
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	97 8b       	std	Z+23, r25	; 0x17
    4f64:	86 8b       	std	Z+22, r24	; 0x16
    4f66:	11 8e       	std	Z+25, r1	; 0x19
    4f68:	12 8e       	std	Z+26, r1	; 0x1a
    4f6a:	13 8e       	std	Z+27, r1	; 0x1b
    4f6c:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
    4f6e:	08 95       	ret

00004f70 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:136
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    4f70:	af 92       	push	r10
    4f72:	bf 92       	push	r11
    4f74:	cf 92       	push	r12
    4f76:	df 92       	push	r13
    4f78:	ef 92       	push	r14
    4f7a:	ff 92       	push	r15
    4f7c:	0f 93       	push	r16
    4f7e:	1f 93       	push	r17
    4f80:	cf 93       	push	r28
    4f82:	df 93       	push	r29
    4f84:	6c 01       	movw	r12, r24
    4f86:	7b 01       	movw	r14, r22
    4f88:	8b 01       	movw	r16, r22
    4f8a:	04 0f       	add	r16, r20
    4f8c:	15 1f       	adc	r17, r21
    4f8e:	eb 01       	movw	r28, r22
    4f90:	5e 01       	movw	r10, r28
    4f92:	ae 18       	sub	r10, r14
    4f94:	bf 08       	sbc	r11, r15
    4f96:	c0 17       	cp	r28, r16
    4f98:	d1 07       	cpc	r29, r17
    4f9a:	59 f0       	breq	.+22     	; 0x4fb2 <Print::write(unsigned char const*, unsigned int)+0x42>
    4f9c:	69 91       	ld	r22, Y+
    4f9e:	d6 01       	movw	r26, r12
    4fa0:	ed 91       	ld	r30, X+
    4fa2:	fc 91       	ld	r31, X
    4fa4:	01 90       	ld	r0, Z+
    4fa6:	f0 81       	ld	r31, Z
    4fa8:	e0 2d       	mov	r30, r0
    4faa:	c6 01       	movw	r24, r12
    4fac:	09 95       	icall
    4fae:	89 2b       	or	r24, r25
    4fb0:	79 f7       	brne	.-34     	; 0x4f90 <Print::write(unsigned char const*, unsigned int)+0x20>
    4fb2:	c5 01       	movw	r24, r10
    4fb4:	df 91       	pop	r29
    4fb6:	cf 91       	pop	r28
    4fb8:	1f 91       	pop	r17
    4fba:	0f 91       	pop	r16
    4fbc:	ff 90       	pop	r15
    4fbe:	ef 90       	pop	r14
    4fc0:	df 90       	pop	r13
    4fc2:	cf 90       	pop	r12
    4fc4:	bf 90       	pop	r11
    4fc6:	af 90       	pop	r10
    4fc8:	08 95       	ret

00004fca <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    4fca:	fb 01       	movw	r30, r22
    4fcc:	01 90       	ld	r0, Z+
    4fce:	00 20       	and	r0, r0
    4fd0:	e9 f7       	brne	.-6      	; 0x4fcc <Print::write(char const*) [clone .part.2]+0x2>
    4fd2:	31 97       	sbiw	r30, 0x01	; 1
    4fd4:	af 01       	movw	r20, r30
    4fd6:	46 1b       	sub	r20, r22
    4fd8:	57 0b       	sbc	r21, r23
    4fda:	dc 01       	movw	r26, r24
    4fdc:	ed 91       	ld	r30, X+
    4fde:	fc 91       	ld	r31, X
    4fe0:	02 80       	ldd	r0, Z+2	; 0x02
    4fe2:	f3 81       	ldd	r31, Z+3	; 0x03
    4fe4:	e0 2d       	mov	r30, r0
    4fe6:	09 94       	ijmp

00004fe8 <Print::print(char)>:
_ZN5Print5printEc():
    4fe8:	dc 01       	movw	r26, r24
    4fea:	ed 91       	ld	r30, X+
    4fec:	fc 91       	ld	r31, X
    4fee:	01 90       	ld	r0, Z+
    4ff0:	f0 81       	ld	r31, Z
    4ff2:	e0 2d       	mov	r30, r0
    4ff4:	09 94       	ijmp

00004ff6 <Print::println()>:
_ZN5Print5writeEPKc():
    4ff6:	69 e3       	ldi	r22, 0x39	; 57
    4ff8:	72 e0       	ldi	r23, 0x02	; 2
    4ffa:	0c 94 e5 27 	jmp	0x4fca	; 0x4fca <Print::write(char const*) [clone .part.2]>

00004ffe <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:139

size_t Print::println(const char c[])
{
    4ffe:	0f 93       	push	r16
    5000:	1f 93       	push	r17
    5002:	cf 93       	push	r28
    5004:	df 93       	push	r29
    5006:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    5008:	d0 e0       	ldi	r29, 0x00	; 0
    500a:	c0 e0       	ldi	r28, 0x00	; 0
    500c:	61 15       	cp	r22, r1
    500e:	71 05       	cpc	r23, r1
    5010:	19 f0       	breq	.+6      	; 0x5018 <Print::println(char const*)+0x1a>
    5012:	0e 94 e5 27 	call	0x4fca	; 0x4fca <Print::write(char const*) [clone .part.2]>
    5016:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:141
  size_t n = print(c);
  n += println();
    5018:	c8 01       	movw	r24, r16
    501a:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <Print::println()>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:143
  return n;
}
    501e:	8c 0f       	add	r24, r28
    5020:	9d 1f       	adc	r25, r29
    5022:	df 91       	pop	r29
    5024:	cf 91       	pop	r28
    5026:	1f 91       	pop	r17
    5028:	0f 91       	pop	r16
    502a:	08 95       	ret

0000502c <Print::println(char)>:
_ZN5Print7printlnEc():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:146

size_t Print::println(char c)
{
    502c:	0f 93       	push	r16
    502e:	1f 93       	push	r17
    5030:	cf 93       	push	r28
    5032:	df 93       	push	r29
    5034:	ec 01       	movw	r28, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:147
  size_t n = print(c);
    5036:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <Print::print(char)>
    503a:	8c 01       	movw	r16, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:148
  n += println();
    503c:	ce 01       	movw	r24, r28
    503e:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <Print::println()>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:150
  return n;
}
    5042:	80 0f       	add	r24, r16
    5044:	91 1f       	adc	r25, r17
    5046:	df 91       	pop	r29
    5048:	cf 91       	pop	r28
    504a:	1f 91       	pop	r17
    504c:	0f 91       	pop	r16
    504e:	08 95       	ret

00005050 <String::~String()>:
_ZN6StringD2Ev():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:124
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
  if(buffer)
    5050:	fc 01       	movw	r30, r24
    5052:	80 81       	ld	r24, Z
    5054:	91 81       	ldd	r25, Z+1	; 0x01
    5056:	00 97       	sbiw	r24, 0x00	; 0
    5058:	11 f0       	breq	.+4      	; 0x505e <String::~String()+0xe>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:125
    free(buffer);
    505a:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <free>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:126
}
    505e:	08 95       	ret

00005060 <String::invalidate()>:
_ZN6String10invalidateEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:140
  capacity = 0;
  len = 0;
}

void String::invalidate(void)
{
    5060:	cf 93       	push	r28
    5062:	df 93       	push	r29
    5064:	ec 01       	movw	r28, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:141
  if (buffer) free(buffer);
    5066:	88 81       	ld	r24, Y
    5068:	99 81       	ldd	r25, Y+1	; 0x01
    506a:	00 97       	sbiw	r24, 0x00	; 0
    506c:	11 f0       	breq	.+4      	; 0x5072 <String::invalidate()+0x12>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:141 (discriminator 1)
    506e:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <free>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:142
  buffer = NULL;
    5072:	19 82       	std	Y+1, r1	; 0x01
    5074:	18 82       	st	Y, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:143
  capacity = len = 0;
    5076:	1d 82       	std	Y+5, r1	; 0x05
    5078:	1c 82       	std	Y+4, r1	; 0x04
    507a:	1b 82       	std	Y+3, r1	; 0x03
    507c:	1a 82       	std	Y+2, r1	; 0x02
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:144
}
    507e:	df 91       	pop	r29
    5080:	cf 91       	pop	r28
    5082:	08 95       	ret

00005084 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:157
  }
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    5084:	0f 93       	push	r16
    5086:	1f 93       	push	r17
    5088:	cf 93       	push	r28
    508a:	df 93       	push	r29
    508c:	ec 01       	movw	r28, r24
    508e:	8b 01       	movw	r16, r22
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:158
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5090:	6f 5f       	subi	r22, 0xFF	; 255
    5092:	7f 4f       	sbci	r23, 0xFF	; 255
    5094:	88 81       	ld	r24, Y
    5096:	99 81       	ldd	r25, Y+1	; 0x01
    5098:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <realloc>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:159
  if (newbuffer) {
    509c:	00 97       	sbiw	r24, 0x00	; 0
    509e:	51 f0       	breq	.+20     	; 0x50b4 <String::changeBuffer(unsigned int)+0x30>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:160
    buffer = newbuffer;
    50a0:	99 83       	std	Y+1, r25	; 0x01
    50a2:	88 83       	st	Y, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:161
    capacity = maxStrLen;
    50a4:	1b 83       	std	Y+3, r17	; 0x03
    50a6:	0a 83       	std	Y+2, r16	; 0x02
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:162
    return 1;
    50a8:	81 e0       	ldi	r24, 0x01	; 1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:165
  }
  return 0;
}
    50aa:	df 91       	pop	r29
    50ac:	cf 91       	pop	r28
    50ae:	1f 91       	pop	r17
    50b0:	0f 91       	pop	r16
    50b2:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:164
  if (newbuffer) {
    buffer = newbuffer;
    capacity = maxStrLen;
    return 1;
  }
  return 0;
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	f9 cf       	rjmp	.-14     	; 0x50aa <String::changeBuffer(unsigned int)+0x26>

000050b8 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:147
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    50b8:	cf 93       	push	r28
    50ba:	df 93       	push	r29
    50bc:	ec 01       	movw	r28, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:148
  if (buffer && capacity >= size) return 1;
    50be:	88 81       	ld	r24, Y
    50c0:	99 81       	ldd	r25, Y+1	; 0x01
    50c2:	89 2b       	or	r24, r25
    50c4:	49 f0       	breq	.+18     	; 0x50d8 <String::reserve(unsigned int)+0x20>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:148 (discriminator 1)
    50c6:	8a 81       	ldd	r24, Y+2	; 0x02
    50c8:	9b 81       	ldd	r25, Y+3	; 0x03
    50ca:	86 17       	cp	r24, r22
    50cc:	97 07       	cpc	r25, r23
    50ce:	20 f0       	brcs	.+8      	; 0x50d8 <String::reserve(unsigned int)+0x20>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:150
  if (changeBuffer(size)) {
    if (len == 0) buffer[0] = 0;
    50d0:	81 e0       	ldi	r24, 0x01	; 1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:154
    return 1;
  }
  return 0;
}
    50d2:	df 91       	pop	r29
    50d4:	cf 91       	pop	r28
    50d6:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:149
}

unsigned char String::reserve(unsigned int size)
{
  if (buffer && capacity >= size) return 1;
  if (changeBuffer(size)) {
    50d8:	ce 01       	movw	r24, r28
    50da:	0e 94 42 28 	call	0x5084	; 0x5084 <String::changeBuffer(unsigned int)>
    50de:	88 23       	and	r24, r24
    50e0:	c1 f3       	breq	.-16     	; 0x50d2 <String::reserve(unsigned int)+0x1a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:150
    if (len == 0) buffer[0] = 0;
    50e2:	8c 81       	ldd	r24, Y+4	; 0x04
    50e4:	9d 81       	ldd	r25, Y+5	; 0x05
    50e6:	89 2b       	or	r24, r25
    50e8:	99 f7       	brne	.-26     	; 0x50d0 <String::reserve(unsigned int)+0x18>
    50ea:	e8 81       	ld	r30, Y
    50ec:	f9 81       	ldd	r31, Y+1	; 0x01
    50ee:	10 82       	st	Z, r1
    50f0:	ef cf       	rjmp	.-34     	; 0x50d0 <String::reserve(unsigned int)+0x18>

000050f2 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:172
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    50f2:	ef 92       	push	r14
    50f4:	ff 92       	push	r15
    50f6:	0f 93       	push	r16
    50f8:	1f 93       	push	r17
    50fa:	cf 93       	push	r28
    50fc:	df 93       	push	r29
    50fe:	ec 01       	movw	r28, r24
    5100:	7b 01       	movw	r14, r22
    5102:	8a 01       	movw	r16, r20
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:173
  if (!reserve(length)) {
    5104:	ba 01       	movw	r22, r20
    5106:	0e 94 5c 28 	call	0x50b8	; 0x50b8 <String::reserve(unsigned int)>
    510a:	81 11       	cpse	r24, r1
    510c:	0b c0       	rjmp	.+22     	; 0x5124 <String::copy(char const*, unsigned int)+0x32>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:174
    invalidate();
    510e:	ce 01       	movw	r24, r28
    5110:	0e 94 30 28 	call	0x5060	; 0x5060 <String::invalidate()>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:180
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
    5114:	ce 01       	movw	r24, r28
    5116:	df 91       	pop	r29
    5118:	cf 91       	pop	r28
    511a:	1f 91       	pop	r17
    511c:	0f 91       	pop	r16
    511e:	ff 90       	pop	r15
    5120:	ef 90       	pop	r14
    5122:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:177
{
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    5124:	1d 83       	std	Y+5, r17	; 0x05
    5126:	0c 83       	std	Y+4, r16	; 0x04
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:178
  strcpy(buffer, cstr);
    5128:	b7 01       	movw	r22, r14
    512a:	88 81       	ld	r24, Y
    512c:	99 81       	ldd	r25, Y+1	; 0x01
    512e:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <strcpy>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:179
  return *this;
    5132:	f0 cf       	rjmp	.-32     	; 0x5114 <String::copy(char const*, unsigned int)+0x22>

00005134 <String::String(char const*)>:
_ZN6String4initEv():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:134
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
  buffer = NULL;
    5134:	fc 01       	movw	r30, r24
    5136:	11 82       	std	Z+1, r1	; 0x01
    5138:	10 82       	st	Z, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:135
  capacity = 0;
    513a:	13 82       	std	Z+3, r1	; 0x03
    513c:	12 82       	std	Z+2, r1	; 0x02
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:136
  len = 0;
    513e:	15 82       	std	Z+5, r1	; 0x05
    5140:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:31
/*********************************************/

String::String(const char *cstr)
{
  init();
  if (cstr) copy(cstr, strlen(cstr));
    5142:	61 15       	cp	r22, r1
    5144:	71 05       	cpc	r23, r1
    5146:	51 f0       	breq	.+20     	; 0x515c <String::String(char const*)+0x28>
    5148:	fb 01       	movw	r30, r22
    514a:	01 90       	ld	r0, Z+
    514c:	00 20       	and	r0, r0
    514e:	e9 f7       	brne	.-6      	; 0x514a <String::String(char const*)+0x16>
    5150:	31 97       	sbiw	r30, 0x01	; 1
    5152:	af 01       	movw	r20, r30
    5154:	46 1b       	sub	r20, r22
    5156:	57 0b       	sbc	r21, r23
    5158:	0c 94 79 28 	jmp	0x50f2	; 0x50f2 <String::copy(char const*, unsigned int)>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:32
}
    515c:	08 95       	ret

0000515e <std::terminate()>:
_ZSt9terminatev():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/abi.cpp:26
extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

namespace std {
  [[gnu::weak, noreturn]] void terminate() {
    abort();
    515e:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <abort>

00005162 <__cxa_pure_virtual>:
__cxa_pure_virtual():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/abi.cpp:31
  }
}

void __cxa_pure_virtual(void) {
  std::terminate();
    5162:	0e 94 af 28 	call	0x515e	; 0x515e <std::terminate()>

00005166 <initVariant>:
initVariant():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    5166:	08 95       	ret

00005168 <main>:
main():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    5168:	0e 94 71 29 	call	0x52e2	; 0x52e2 <init>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    516c:	0e 94 b3 28 	call	0x5166	; 0x5166 <initVariant>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    5170:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <setup>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    5174:	ca e3       	ldi	r28, 0x3A	; 58
    5176:	d6 e2       	ldi	r29, 0x26	; 38
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    5178:	0e 94 01 10 	call	0x2002	; 0x2002 <loop>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    517c:	20 97       	sbiw	r28, 0x00	; 0
    517e:	e1 f3       	breq	.-8      	; 0x5178 <main+0x10>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    5180:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <serialEventRun()>
    5184:	f9 cf       	rjmp	.-14     	; 0x5178 <main+0x10>

00005186 <operator new(unsigned int)>:
_Znwj():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/new.cpp:42
}

static void * new_helper(std::size_t size) {
  // Even zero-sized allocations should return a unique pointer, but
  // malloc does not guarantee this
  if (size == 0)
    5186:	00 97       	sbiw	r24, 0x00	; 0
    5188:	11 f4       	brne	.+4      	; 0x518e <operator new(unsigned int)+0x8>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/new.cpp:43
    size = 1;
    518a:	81 e0       	ldi	r24, 0x01	; 1
    518c:	90 e0       	ldi	r25, 0x00	; 0
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/new.cpp:44
  return malloc(size);
    518e:	0c 94 03 2d 	jmp	0x5a06	; 0x5a06 <malloc>

00005192 <__vector_16>:
__vector_16():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    5192:	1f 92       	push	r1
    5194:	0f 92       	push	r0
    5196:	0f b6       	in	r0, 0x3f	; 63
    5198:	0f 92       	push	r0
    519a:	11 24       	eor	r1, r1
    519c:	2f 93       	push	r18
    519e:	3f 93       	push	r19
    51a0:	8f 93       	push	r24
    51a2:	9f 93       	push	r25
    51a4:	af 93       	push	r26
    51a6:	bf 93       	push	r27
    51a8:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <timer0_millis>
    51ac:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <timer0_millis+0x1>
    51b0:	a0 91 36 07 	lds	r26, 0x0736	; 0x800736 <timer0_millis+0x2>
    51b4:	b0 91 37 07 	lds	r27, 0x0737	; 0x800737 <timer0_millis+0x3>
    51b8:	30 91 33 07 	lds	r19, 0x0733	; 0x800733 <timer0_fract>
    51bc:	26 e0       	ldi	r18, 0x06	; 6
    51be:	23 0f       	add	r18, r19
    51c0:	2d 37       	cpi	r18, 0x7D	; 125
    51c2:	68 f1       	brcs	.+90     	; 0x521e <__vector_16+0x8c>
    51c4:	29 e8       	ldi	r18, 0x89	; 137
    51c6:	23 0f       	add	r18, r19
    51c8:	03 96       	adiw	r24, 0x03	; 3
    51ca:	a1 1d       	adc	r26, r1
    51cc:	b1 1d       	adc	r27, r1
    51ce:	20 93 33 07 	sts	0x0733, r18	; 0x800733 <timer0_fract>
    51d2:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <timer0_millis>
    51d6:	90 93 35 07 	sts	0x0735, r25	; 0x800735 <timer0_millis+0x1>
    51da:	a0 93 36 07 	sts	0x0736, r26	; 0x800736 <timer0_millis+0x2>
    51de:	b0 93 37 07 	sts	0x0737, r27	; 0x800737 <timer0_millis+0x3>
    51e2:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <timer0_overflow_count>
    51e6:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <timer0_overflow_count+0x1>
    51ea:	a0 91 31 07 	lds	r26, 0x0731	; 0x800731 <timer0_overflow_count+0x2>
    51ee:	b0 91 32 07 	lds	r27, 0x0732	; 0x800732 <timer0_overflow_count+0x3>
    51f2:	01 96       	adiw	r24, 0x01	; 1
    51f4:	a1 1d       	adc	r26, r1
    51f6:	b1 1d       	adc	r27, r1
    51f8:	80 93 2f 07 	sts	0x072F, r24	; 0x80072f <timer0_overflow_count>
    51fc:	90 93 30 07 	sts	0x0730, r25	; 0x800730 <timer0_overflow_count+0x1>
    5200:	a0 93 31 07 	sts	0x0731, r26	; 0x800731 <timer0_overflow_count+0x2>
    5204:	b0 93 32 07 	sts	0x0732, r27	; 0x800732 <timer0_overflow_count+0x3>
    5208:	bf 91       	pop	r27
    520a:	af 91       	pop	r26
    520c:	9f 91       	pop	r25
    520e:	8f 91       	pop	r24
    5210:	3f 91       	pop	r19
    5212:	2f 91       	pop	r18
    5214:	0f 90       	pop	r0
    5216:	0f be       	out	0x3f, r0	; 63
    5218:	0f 90       	pop	r0
    521a:	1f 90       	pop	r1
    521c:	18 95       	reti
    521e:	02 96       	adiw	r24, 0x02	; 2
    5220:	a1 1d       	adc	r26, r1
    5222:	b1 1d       	adc	r27, r1
    5224:	d4 cf       	rjmp	.-88     	; 0x51ce <__vector_16+0x3c>

00005226 <micros>:
micros():
    5226:	3f b7       	in	r19, 0x3f	; 63
    5228:	f8 94       	cli
    522a:	80 91 2f 07 	lds	r24, 0x072F	; 0x80072f <timer0_overflow_count>
    522e:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <timer0_overflow_count+0x1>
    5232:	a0 91 31 07 	lds	r26, 0x0731	; 0x800731 <timer0_overflow_count+0x2>
    5236:	b0 91 32 07 	lds	r27, 0x0732	; 0x800732 <timer0_overflow_count+0x3>
    523a:	26 b5       	in	r18, 0x26	; 38
    523c:	a8 9b       	sbis	0x15, 0	; 21
    523e:	05 c0       	rjmp	.+10     	; 0x524a <micros+0x24>
    5240:	2f 3f       	cpi	r18, 0xFF	; 255
    5242:	19 f0       	breq	.+6      	; 0x524a <micros+0x24>
    5244:	01 96       	adiw	r24, 0x01	; 1
    5246:	a1 1d       	adc	r26, r1
    5248:	b1 1d       	adc	r27, r1
    524a:	3f bf       	out	0x3f, r19	; 63
    524c:	ba 2f       	mov	r27, r26
    524e:	a9 2f       	mov	r26, r25
    5250:	98 2f       	mov	r25, r24
    5252:	88 27       	eor	r24, r24
    5254:	bc 01       	movw	r22, r24
    5256:	cd 01       	movw	r24, r26
    5258:	62 0f       	add	r22, r18
    525a:	71 1d       	adc	r23, r1
    525c:	81 1d       	adc	r24, r1
    525e:	91 1d       	adc	r25, r1
    5260:	43 e0       	ldi	r20, 0x03	; 3
    5262:	66 0f       	add	r22, r22
    5264:	77 1f       	adc	r23, r23
    5266:	88 1f       	adc	r24, r24
    5268:	99 1f       	adc	r25, r25
    526a:	4a 95       	dec	r20
    526c:	d1 f7       	brne	.-12     	; 0x5262 <micros+0x3c>
    526e:	08 95       	ret

00005270 <delay>:
delay():
    5270:	8f 92       	push	r8
    5272:	9f 92       	push	r9
    5274:	af 92       	push	r10
    5276:	bf 92       	push	r11
    5278:	cf 92       	push	r12
    527a:	df 92       	push	r13
    527c:	ef 92       	push	r14
    527e:	ff 92       	push	r15
    5280:	6b 01       	movw	r12, r22
    5282:	7c 01       	movw	r14, r24
    5284:	0e 94 13 29 	call	0x5226	; 0x5226 <micros>
    5288:	4b 01       	movw	r8, r22
    528a:	5c 01       	movw	r10, r24
    528c:	c1 14       	cp	r12, r1
    528e:	d1 04       	cpc	r13, r1
    5290:	e1 04       	cpc	r14, r1
    5292:	f1 04       	cpc	r15, r1
    5294:	e9 f0       	breq	.+58     	; 0x52d0 <delay+0x60>
    5296:	0e 94 2c 2a 	call	0x5458	; 0x5458 <yield>
    529a:	0e 94 13 29 	call	0x5226	; 0x5226 <micros>
    529e:	68 19       	sub	r22, r8
    52a0:	79 09       	sbc	r23, r9
    52a2:	8a 09       	sbc	r24, r10
    52a4:	9b 09       	sbc	r25, r11
    52a6:	68 3e       	cpi	r22, 0xE8	; 232
    52a8:	73 40       	sbci	r23, 0x03	; 3
    52aa:	81 05       	cpc	r24, r1
    52ac:	91 05       	cpc	r25, r1
    52ae:	70 f3       	brcs	.-36     	; 0x528c <delay+0x1c>
    52b0:	21 e0       	ldi	r18, 0x01	; 1
    52b2:	c2 1a       	sub	r12, r18
    52b4:	d1 08       	sbc	r13, r1
    52b6:	e1 08       	sbc	r14, r1
    52b8:	f1 08       	sbc	r15, r1
    52ba:	88 ee       	ldi	r24, 0xE8	; 232
    52bc:	88 0e       	add	r8, r24
    52be:	83 e0       	ldi	r24, 0x03	; 3
    52c0:	98 1e       	adc	r9, r24
    52c2:	a1 1c       	adc	r10, r1
    52c4:	b1 1c       	adc	r11, r1
    52c6:	c1 14       	cp	r12, r1
    52c8:	d1 04       	cpc	r13, r1
    52ca:	e1 04       	cpc	r14, r1
    52cc:	f1 04       	cpc	r15, r1
    52ce:	29 f7       	brne	.-54     	; 0x529a <delay+0x2a>
    52d0:	ff 90       	pop	r15
    52d2:	ef 90       	pop	r14
    52d4:	df 90       	pop	r13
    52d6:	cf 90       	pop	r12
    52d8:	bf 90       	pop	r11
    52da:	af 90       	pop	r10
    52dc:	9f 90       	pop	r9
    52de:	8f 90       	pop	r8
    52e0:	08 95       	ret

000052e2 <init>:
init():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    52e2:	78 94       	sei
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    52e4:	84 b5       	in	r24, 0x24	; 36
    52e6:	83 60       	ori	r24, 0x03	; 3
    52e8:	84 bd       	out	0x24, r24	; 36
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    52ea:	85 b5       	in	r24, 0x25	; 37
    52ec:	83 60       	ori	r24, 0x03	; 3
    52ee:	85 bd       	out	0x25, r24	; 37
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    52f0:	ee e6       	ldi	r30, 0x6E	; 110
    52f2:	f0 e0       	ldi	r31, 0x00	; 0
    52f4:	80 81       	ld	r24, Z
    52f6:	81 60       	ori	r24, 0x01	; 1
    52f8:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    52fa:	e1 e8       	ldi	r30, 0x81	; 129
    52fc:	f0 e0       	ldi	r31, 0x00	; 0
    52fe:	82 e0       	ldi	r24, 0x02	; 2
    5300:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    5302:	80 81       	ld	r24, Z
    5304:	81 60       	ori	r24, 0x01	; 1
    5306:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    5308:	e0 e8       	ldi	r30, 0x80	; 128
    530a:	f0 e0       	ldi	r31, 0x00	; 0
    530c:	80 81       	ld	r24, Z
    530e:	81 60       	ori	r24, 0x01	; 1
    5310:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    5312:	e1 eb       	ldi	r30, 0xB1	; 177
    5314:	f0 e0       	ldi	r31, 0x00	; 0
    5316:	80 81       	ld	r24, Z
    5318:	84 60       	ori	r24, 0x04	; 4
    531a:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    531c:	e0 eb       	ldi	r30, 0xB0	; 176
    531e:	f0 e0       	ldi	r31, 0x00	; 0
    5320:	80 81       	ld	r24, Z
    5322:	81 60       	ori	r24, 0x01	; 1
    5324:	80 83       	st	Z, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    5326:	86 e8       	ldi	r24, 0x86	; 134
    5328:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    532c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
    5330:	08 95       	ret

00005332 <turnOffPWM>:
turnOffPWM():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    5332:	84 30       	cpi	r24, 0x04	; 4
    5334:	81 f0       	breq	.+32     	; 0x5356 <turnOffPWM+0x24>
    5336:	28 f4       	brcc	.+10     	; 0x5342 <turnOffPWM+0x10>
    5338:	82 30       	cpi	r24, 0x02	; 2
    533a:	e9 f0       	breq	.+58     	; 0x5376 <turnOffPWM+0x44>
    533c:	83 30       	cpi	r24, 0x03	; 3
    533e:	f9 f0       	breq	.+62     	; 0x537e <turnOffPWM+0x4c>
    5340:	08 95       	ret
    5342:	88 30       	cpi	r24, 0x08	; 8
    5344:	71 f0       	breq	.+28     	; 0x5362 <turnOffPWM+0x30>
    5346:	89 30       	cpi	r24, 0x09	; 9
    5348:	91 f0       	breq	.+36     	; 0x536e <turnOffPWM+0x3c>
    534a:	85 30       	cpi	r24, 0x05	; 5
    534c:	b9 f4       	brne	.+46     	; 0x537c <turnOffPWM+0x4a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    534e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    5352:	8f 7d       	andi	r24, 0xDF	; 223
    5354:	03 c0       	rjmp	.+6      	; 0x535c <turnOffPWM+0x2a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    5356:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    535a:	8f 77       	andi	r24, 0x7F	; 127
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    535c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    5360:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    5362:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    5366:	8f 77       	andi	r24, 0x7F	; 127
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    5368:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
    536c:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    536e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    5372:	8f 7d       	andi	r24, 0xDF	; 223
    5374:	f9 cf       	rjmp	.-14     	; 0x5368 <turnOffPWM+0x36>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    5376:	84 b5       	in	r24, 0x24	; 36
    5378:	8f 77       	andi	r24, 0x7F	; 127
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    537a:	84 bd       	out	0x24, r24	; 36
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    537c:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    537e:	84 b5       	in	r24, 0x24	; 36
    5380:	8f 7d       	andi	r24, 0xDF	; 223
    5382:	fb cf       	rjmp	.-10     	; 0x537a <turnOffPWM+0x48>

00005384 <pinMode>:
pinMode():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5384:	cf 93       	push	r28
    5386:	df 93       	push	r29
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    5388:	90 e0       	ldi	r25, 0x00	; 0
    538a:	fc 01       	movw	r30, r24
    538c:	e3 5d       	subi	r30, 0xD3	; 211
    538e:	f6 4f       	sbci	r31, 0xF6	; 246
    5390:	24 91       	lpm	r18, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    5392:	8c 5b       	subi	r24, 0xBC	; 188
    5394:	96 4f       	sbci	r25, 0xF6	; 246
    5396:	fc 01       	movw	r30, r24
    5398:	84 91       	lpm	r24, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    539a:	88 23       	and	r24, r24
    539c:	c9 f0       	breq	.+50     	; 0x53d0 <pinMode+0x4c>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	88 0f       	add	r24, r24
    53a2:	99 1f       	adc	r25, r25
    53a4:	fc 01       	movw	r30, r24
    53a6:	eb 59       	subi	r30, 0x9B	; 155
    53a8:	f6 4f       	sbci	r31, 0xF6	; 246
    53aa:	a5 91       	lpm	r26, Z+
    53ac:	b4 91       	lpm	r27, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    53ae:	fc 01       	movw	r30, r24
    53b0:	e5 5a       	subi	r30, 0xA5	; 165
    53b2:	f6 4f       	sbci	r31, 0xF6	; 246
    53b4:	c5 91       	lpm	r28, Z+
    53b6:	d4 91       	lpm	r29, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    53b8:	61 11       	cpse	r22, r1
    53ba:	0d c0       	rjmp	.+26     	; 0x53d6 <pinMode+0x52>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    53bc:	9f b7       	in	r25, 0x3f	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    53be:	f8 94       	cli
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    53c0:	8c 91       	ld	r24, X
    53c2:	20 95       	com	r18
    53c4:	82 23       	and	r24, r18
    53c6:	8c 93       	st	X, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    53c8:	88 81       	ld	r24, Y
    53ca:	28 23       	and	r18, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    53cc:	28 83       	st	Y, r18
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    53ce:	9f bf       	out	0x3f, r25	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    53d0:	df 91       	pop	r29
    53d2:	cf 91       	pop	r28
    53d4:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    53d6:	62 30       	cpi	r22, 0x02	; 2
    53d8:	51 f4       	brne	.+20     	; 0x53ee <pinMode+0x6a>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    53da:	9f b7       	in	r25, 0x3f	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    53dc:	f8 94       	cli
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    53de:	3c 91       	ld	r19, X
    53e0:	82 2f       	mov	r24, r18
    53e2:	80 95       	com	r24
    53e4:	83 23       	and	r24, r19
    53e6:	8c 93       	st	X, r24
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    53e8:	e8 81       	ld	r30, Y
    53ea:	2e 2b       	or	r18, r30
    53ec:	ef cf       	rjmp	.-34     	; 0x53cc <pinMode+0x48>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    53ee:	8f b7       	in	r24, 0x3f	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    53f0:	f8 94       	cli
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    53f2:	ec 91       	ld	r30, X
    53f4:	2e 2b       	or	r18, r30
    53f6:	2c 93       	st	X, r18
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    53f8:	8f bf       	out	0x3f, r24	; 63
    53fa:	ea cf       	rjmp	.-44     	; 0x53d0 <pinMode+0x4c>

000053fc <digitalWrite>:
digitalWrite():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    53fc:	1f 93       	push	r17
    53fe:	cf 93       	push	r28
    5400:	df 93       	push	r29
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    5402:	28 2f       	mov	r18, r24
    5404:	30 e0       	ldi	r19, 0x00	; 0
    5406:	f9 01       	movw	r30, r18
    5408:	ea 5e       	subi	r30, 0xEA	; 234
    540a:	f6 4f       	sbci	r31, 0xF6	; 246
    540c:	84 91       	lpm	r24, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    540e:	f9 01       	movw	r30, r18
    5410:	e3 5d       	subi	r30, 0xD3	; 211
    5412:	f6 4f       	sbci	r31, 0xF6	; 246
    5414:	d4 91       	lpm	r29, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    5416:	f9 01       	movw	r30, r18
    5418:	ec 5b       	subi	r30, 0xBC	; 188
    541a:	f6 4f       	sbci	r31, 0xF6	; 246
    541c:	c4 91       	lpm	r28, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    541e:	cc 23       	and	r28, r28
    5420:	a9 f0       	breq	.+42     	; 0x544c <digitalWrite+0x50>
    5422:	16 2f       	mov	r17, r22
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5424:	81 11       	cpse	r24, r1
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    5426:	0e 94 99 29 	call	0x5332	; 0x5332 <turnOffPWM>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    542a:	ec 2f       	mov	r30, r28
    542c:	f0 e0       	ldi	r31, 0x00	; 0
    542e:	ee 0f       	add	r30, r30
    5430:	ff 1f       	adc	r31, r31
    5432:	e5 5a       	subi	r30, 0xA5	; 165
    5434:	f6 4f       	sbci	r31, 0xF6	; 246
    5436:	a5 91       	lpm	r26, Z+
    5438:	b4 91       	lpm	r27, Z
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    543a:	8f b7       	in	r24, 0x3f	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    543c:	f8 94       	cli
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    543e:	ec 91       	ld	r30, X
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    5440:	11 11       	cpse	r17, r1
    5442:	08 c0       	rjmp	.+16     	; 0x5454 <digitalWrite+0x58>
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    5444:	d0 95       	com	r29
    5446:	de 23       	and	r29, r30
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    5448:	dc 93       	st	X, r29
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    544a:	8f bf       	out	0x3f, r24	; 63
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:212
}
    544c:	df 91       	pop	r29
    544e:	cf 91       	pop	r28
    5450:	1f 91       	pop	r17
    5452:	08 95       	ret
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    5454:	de 2b       	or	r29, r30
    5456:	f8 cf       	rjmp	.-16     	; 0x5448 <digitalWrite+0x4c>

00005458 <yield>:
__empty():
/home/noah/.arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    5458:	08 95       	ret

0000545a <__subsf3>:
__subsf3():
    545a:	50 58       	subi	r21, 0x80	; 128

0000545c <__addsf3>:
    545c:	bb 27       	eor	r27, r27
    545e:	aa 27       	eor	r26, r26
    5460:	0e 94 45 2a 	call	0x548a	; 0x548a <__addsf3x>
    5464:	0c 94 bf 2b 	jmp	0x577e	; 0x577e <__fp_round>
__addsf3():
    5468:	0e 94 b1 2b 	call	0x5762	; 0x5762 <__fp_pscA>
    546c:	38 f0       	brcs	.+14     	; 0x547c <__addsf3+0x20>
    546e:	0e 94 b8 2b 	call	0x5770	; 0x5770 <__fp_pscB>
    5472:	20 f0       	brcs	.+8      	; 0x547c <__addsf3+0x20>
    5474:	39 f4       	brne	.+14     	; 0x5484 <__addsf3+0x28>
    5476:	9f 3f       	cpi	r25, 0xFF	; 255
    5478:	19 f4       	brne	.+6      	; 0x5480 <__addsf3+0x24>
    547a:	26 f4       	brtc	.+8      	; 0x5484 <__addsf3+0x28>
    547c:	0c 94 ae 2b 	jmp	0x575c	; 0x575c <__fp_nan>
    5480:	0e f4       	brtc	.+2      	; 0x5484 <__addsf3+0x28>
    5482:	e0 95       	com	r30
    5484:	e7 fb       	bst	r30, 7
    5486:	0c 94 a8 2b 	jmp	0x5750	; 0x5750 <__fp_inf>

0000548a <__addsf3x>:
__addsf3x():
    548a:	e9 2f       	mov	r30, r25
    548c:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <__fp_split3>
    5490:	58 f3       	brcs	.-42     	; 0x5468 <__addsf3+0xc>
    5492:	ba 17       	cp	r27, r26
    5494:	62 07       	cpc	r22, r18
    5496:	73 07       	cpc	r23, r19
    5498:	84 07       	cpc	r24, r20
    549a:	95 07       	cpc	r25, r21
    549c:	20 f0       	brcs	.+8      	; 0x54a6 <__addsf3x+0x1c>
    549e:	79 f4       	brne	.+30     	; 0x54be <__addsf3x+0x34>
    54a0:	a6 f5       	brtc	.+104    	; 0x550a <__addsf3x+0x80>
    54a2:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <__fp_zero>
    54a6:	0e f4       	brtc	.+2      	; 0x54aa <__addsf3x+0x20>
    54a8:	e0 95       	com	r30
    54aa:	0b 2e       	mov	r0, r27
    54ac:	ba 2f       	mov	r27, r26
    54ae:	a0 2d       	mov	r26, r0
    54b0:	0b 01       	movw	r0, r22
    54b2:	b9 01       	movw	r22, r18
    54b4:	90 01       	movw	r18, r0
    54b6:	0c 01       	movw	r0, r24
    54b8:	ca 01       	movw	r24, r20
    54ba:	a0 01       	movw	r20, r0
    54bc:	11 24       	eor	r1, r1
    54be:	ff 27       	eor	r31, r31
    54c0:	59 1b       	sub	r21, r25
    54c2:	99 f0       	breq	.+38     	; 0x54ea <__addsf3x+0x60>
    54c4:	59 3f       	cpi	r21, 0xF9	; 249
    54c6:	50 f4       	brcc	.+20     	; 0x54dc <__addsf3x+0x52>
    54c8:	50 3e       	cpi	r21, 0xE0	; 224
    54ca:	68 f1       	brcs	.+90     	; 0x5526 <__addsf3x+0x9c>
    54cc:	1a 16       	cp	r1, r26
    54ce:	f0 40       	sbci	r31, 0x00	; 0
    54d0:	a2 2f       	mov	r26, r18
    54d2:	23 2f       	mov	r18, r19
    54d4:	34 2f       	mov	r19, r20
    54d6:	44 27       	eor	r20, r20
    54d8:	58 5f       	subi	r21, 0xF8	; 248
    54da:	f3 cf       	rjmp	.-26     	; 0x54c2 <__addsf3x+0x38>
    54dc:	46 95       	lsr	r20
    54de:	37 95       	ror	r19
    54e0:	27 95       	ror	r18
    54e2:	a7 95       	ror	r26
    54e4:	f0 40       	sbci	r31, 0x00	; 0
    54e6:	53 95       	inc	r21
    54e8:	c9 f7       	brne	.-14     	; 0x54dc <__addsf3x+0x52>
    54ea:	7e f4       	brtc	.+30     	; 0x550a <__addsf3x+0x80>
    54ec:	1f 16       	cp	r1, r31
    54ee:	ba 0b       	sbc	r27, r26
    54f0:	62 0b       	sbc	r22, r18
    54f2:	73 0b       	sbc	r23, r19
    54f4:	84 0b       	sbc	r24, r20
    54f6:	ba f0       	brmi	.+46     	; 0x5526 <__addsf3x+0x9c>
    54f8:	91 50       	subi	r25, 0x01	; 1
    54fa:	a1 f0       	breq	.+40     	; 0x5524 <__addsf3x+0x9a>
    54fc:	ff 0f       	add	r31, r31
    54fe:	bb 1f       	adc	r27, r27
    5500:	66 1f       	adc	r22, r22
    5502:	77 1f       	adc	r23, r23
    5504:	88 1f       	adc	r24, r24
    5506:	c2 f7       	brpl	.-16     	; 0x54f8 <__addsf3x+0x6e>
    5508:	0e c0       	rjmp	.+28     	; 0x5526 <__addsf3x+0x9c>
    550a:	ba 0f       	add	r27, r26
    550c:	62 1f       	adc	r22, r18
    550e:	73 1f       	adc	r23, r19
    5510:	84 1f       	adc	r24, r20
    5512:	48 f4       	brcc	.+18     	; 0x5526 <__addsf3x+0x9c>
    5514:	87 95       	ror	r24
    5516:	77 95       	ror	r23
    5518:	67 95       	ror	r22
    551a:	b7 95       	ror	r27
    551c:	f7 95       	ror	r31
    551e:	9e 3f       	cpi	r25, 0xFE	; 254
    5520:	08 f0       	brcs	.+2      	; 0x5524 <__addsf3x+0x9a>
    5522:	b0 cf       	rjmp	.-160    	; 0x5484 <__addsf3+0x28>
    5524:	93 95       	inc	r25
    5526:	88 0f       	add	r24, r24
    5528:	08 f0       	brcs	.+2      	; 0x552c <__addsf3x+0xa2>
    552a:	99 27       	eor	r25, r25
    552c:	ee 0f       	add	r30, r30
    552e:	97 95       	ror	r25
    5530:	87 95       	ror	r24
    5532:	08 95       	ret

00005534 <__cmpsf2>:
    5534:	0e 94 84 2b 	call	0x5708	; 0x5708 <__fp_cmp>
    5538:	08 f4       	brcc	.+2      	; 0x553c <__cmpsf2+0x8>
    553a:	81 e0       	ldi	r24, 0x01	; 1
    553c:	08 95       	ret

0000553e <__divsf3>:
    553e:	0e 94 b3 2a 	call	0x5566	; 0x5566 <__divsf3x>
    5542:	0c 94 bf 2b 	jmp	0x577e	; 0x577e <__fp_round>
    5546:	0e 94 b8 2b 	call	0x5770	; 0x5770 <__fp_pscB>
    554a:	58 f0       	brcs	.+22     	; 0x5562 <__divsf3+0x24>
    554c:	0e 94 b1 2b 	call	0x5762	; 0x5762 <__fp_pscA>
    5550:	40 f0       	brcs	.+16     	; 0x5562 <__divsf3+0x24>
    5552:	29 f4       	brne	.+10     	; 0x555e <__divsf3+0x20>
    5554:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    5556:	29 f0       	breq	.+10     	; 0x5562 <__divsf3+0x24>
    5558:	0c 94 a8 2b 	jmp	0x5750	; 0x5750 <__fp_inf>
    555c:	51 11       	cpse	r21, r1
    555e:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <__fp_szero>
    5562:	0c 94 ae 2b 	jmp	0x575c	; 0x575c <__fp_nan>

00005566 <__divsf3x>:
__divsf3x():
    5566:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <__fp_split3>
    556a:	68 f3       	brcs	.-38     	; 0x5546 <__divsf3+0x8>

0000556c <__divsf3_pse>:
    556c:	99 23       	and	r25, r25
    556e:	b1 f3       	breq	.-20     	; 0x555c <__divsf3+0x1e>
    5570:	55 23       	and	r21, r21
    5572:	91 f3       	breq	.-28     	; 0x5558 <__divsf3+0x1a>
    5574:	95 1b       	sub	r25, r21
    5576:	55 0b       	sbc	r21, r21
    5578:	bb 27       	eor	r27, r27
    557a:	aa 27       	eor	r26, r26
    557c:	62 17       	cp	r22, r18
    557e:	73 07       	cpc	r23, r19
    5580:	84 07       	cpc	r24, r20
    5582:	38 f0       	brcs	.+14     	; 0x5592 <__divsf3_pse+0x26>
    5584:	9f 5f       	subi	r25, 0xFF	; 255
    5586:	5f 4f       	sbci	r21, 0xFF	; 255
    5588:	22 0f       	add	r18, r18
    558a:	33 1f       	adc	r19, r19
    558c:	44 1f       	adc	r20, r20
    558e:	aa 1f       	adc	r26, r26
    5590:	a9 f3       	breq	.-22     	; 0x557c <__divsf3_pse+0x10>
    5592:	35 d0       	rcall	.+106    	; 0x55fe <__divsf3_pse+0x92>
    5594:	0e 2e       	mov	r0, r30
    5596:	3a f0       	brmi	.+14     	; 0x55a6 <__divsf3_pse+0x3a>
    5598:	e0 e8       	ldi	r30, 0x80	; 128
    559a:	32 d0       	rcall	.+100    	; 0x5600 <__divsf3_pse+0x94>
    559c:	91 50       	subi	r25, 0x01	; 1
    559e:	50 40       	sbci	r21, 0x00	; 0
    55a0:	e6 95       	lsr	r30
    55a2:	00 1c       	adc	r0, r0
    55a4:	ca f7       	brpl	.-14     	; 0x5598 <__divsf3_pse+0x2c>
    55a6:	2b d0       	rcall	.+86     	; 0x55fe <__divsf3_pse+0x92>
    55a8:	fe 2f       	mov	r31, r30
    55aa:	29 d0       	rcall	.+82     	; 0x55fe <__divsf3_pse+0x92>
    55ac:	66 0f       	add	r22, r22
    55ae:	77 1f       	adc	r23, r23
    55b0:	88 1f       	adc	r24, r24
    55b2:	bb 1f       	adc	r27, r27
    55b4:	26 17       	cp	r18, r22
    55b6:	37 07       	cpc	r19, r23
    55b8:	48 07       	cpc	r20, r24
    55ba:	ab 07       	cpc	r26, r27
    55bc:	b0 e8       	ldi	r27, 0x80	; 128
    55be:	09 f0       	breq	.+2      	; 0x55c2 <__divsf3_pse+0x56>
    55c0:	bb 0b       	sbc	r27, r27
    55c2:	80 2d       	mov	r24, r0
    55c4:	bf 01       	movw	r22, r30
    55c6:	ff 27       	eor	r31, r31
    55c8:	93 58       	subi	r25, 0x83	; 131
    55ca:	5f 4f       	sbci	r21, 0xFF	; 255
    55cc:	3a f0       	brmi	.+14     	; 0x55dc <__divsf3_pse+0x70>
    55ce:	9e 3f       	cpi	r25, 0xFE	; 254
    55d0:	51 05       	cpc	r21, r1
    55d2:	78 f0       	brcs	.+30     	; 0x55f2 <__divsf3_pse+0x86>
    55d4:	0c 94 a8 2b 	jmp	0x5750	; 0x5750 <__fp_inf>
    55d8:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <__fp_szero>
    55dc:	5f 3f       	cpi	r21, 0xFF	; 255
    55de:	e4 f3       	brlt	.-8      	; 0x55d8 <__divsf3_pse+0x6c>
    55e0:	98 3e       	cpi	r25, 0xE8	; 232
    55e2:	d4 f3       	brlt	.-12     	; 0x55d8 <__divsf3_pse+0x6c>
    55e4:	86 95       	lsr	r24
    55e6:	77 95       	ror	r23
    55e8:	67 95       	ror	r22
    55ea:	b7 95       	ror	r27
    55ec:	f7 95       	ror	r31
    55ee:	9f 5f       	subi	r25, 0xFF	; 255
    55f0:	c9 f7       	brne	.-14     	; 0x55e4 <__divsf3_pse+0x78>
    55f2:	88 0f       	add	r24, r24
    55f4:	91 1d       	adc	r25, r1
    55f6:	96 95       	lsr	r25
    55f8:	87 95       	ror	r24
    55fa:	97 f9       	bld	r25, 7
    55fc:	08 95       	ret
    55fe:	e1 e0       	ldi	r30, 0x01	; 1
    5600:	66 0f       	add	r22, r22
    5602:	77 1f       	adc	r23, r23
    5604:	88 1f       	adc	r24, r24
    5606:	bb 1f       	adc	r27, r27
    5608:	62 17       	cp	r22, r18
    560a:	73 07       	cpc	r23, r19
    560c:	84 07       	cpc	r24, r20
    560e:	ba 07       	cpc	r27, r26
    5610:	20 f0       	brcs	.+8      	; 0x561a <__divsf3_pse+0xae>
    5612:	62 1b       	sub	r22, r18
    5614:	73 0b       	sbc	r23, r19
    5616:	84 0b       	sbc	r24, r20
    5618:	ba 0b       	sbc	r27, r26
    561a:	ee 1f       	adc	r30, r30
    561c:	88 f7       	brcc	.-30     	; 0x5600 <__divsf3_pse+0x94>
    561e:	e0 95       	com	r30
    5620:	08 95       	ret

00005622 <__fixsfsi>:
    5622:	0e 94 18 2b 	call	0x5630	; 0x5630 <__fixunssfsi>
    5626:	68 94       	set
    5628:	b1 11       	cpse	r27, r1
    562a:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <__fp_szero>
    562e:	08 95       	ret

00005630 <__fixunssfsi>:
    5630:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <__fp_splitA>
    5634:	88 f0       	brcs	.+34     	; 0x5658 <__fixunssfsi+0x28>
    5636:	9f 57       	subi	r25, 0x7F	; 127
    5638:	98 f0       	brcs	.+38     	; 0x5660 <__fixunssfsi+0x30>
    563a:	b9 2f       	mov	r27, r25
    563c:	99 27       	eor	r25, r25
    563e:	b7 51       	subi	r27, 0x17	; 23
    5640:	b0 f0       	brcs	.+44     	; 0x566e <__fixunssfsi+0x3e>
__fixunssfsi():
    5642:	e1 f0       	breq	.+56     	; 0x567c <__fixunssfsi+0x4c>
    5644:	66 0f       	add	r22, r22
    5646:	77 1f       	adc	r23, r23
    5648:	88 1f       	adc	r24, r24
    564a:	99 1f       	adc	r25, r25
    564c:	1a f0       	brmi	.+6      	; 0x5654 <__fixunssfsi+0x24>
    564e:	ba 95       	dec	r27
    5650:	c9 f7       	brne	.-14     	; 0x5644 <__fixunssfsi+0x14>
    5652:	14 c0       	rjmp	.+40     	; 0x567c <__fixunssfsi+0x4c>
    5654:	b1 30       	cpi	r27, 0x01	; 1
    5656:	91 f0       	breq	.+36     	; 0x567c <__fixunssfsi+0x4c>
    5658:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__fp_zero>
    565c:	b1 e0       	ldi	r27, 0x01	; 1
    565e:	08 95       	ret
    5660:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <__fp_zero>
    5664:	67 2f       	mov	r22, r23
    5666:	78 2f       	mov	r23, r24
    5668:	88 27       	eor	r24, r24
    566a:	b8 5f       	subi	r27, 0xF8	; 248
    566c:	39 f0       	breq	.+14     	; 0x567c <__fixunssfsi+0x4c>
    566e:	b9 3f       	cpi	r27, 0xF9	; 249
    5670:	cc f3       	brlt	.-14     	; 0x5664 <__fixunssfsi+0x34>
    5672:	86 95       	lsr	r24
    5674:	77 95       	ror	r23
    5676:	67 95       	ror	r22
    5678:	b3 95       	inc	r27
    567a:	d9 f7       	brne	.-10     	; 0x5672 <__fixunssfsi+0x42>
    567c:	3e f4       	brtc	.+14     	; 0x568c <__fixunssfsi+0x5c>
    567e:	90 95       	com	r25
    5680:	80 95       	com	r24
    5682:	70 95       	com	r23
    5684:	61 95       	neg	r22
    5686:	7f 4f       	sbci	r23, 0xFF	; 255
    5688:	8f 4f       	sbci	r24, 0xFF	; 255
    568a:	9f 4f       	sbci	r25, 0xFF	; 255
    568c:	08 95       	ret

0000568e <__floatunsisf>:
__floatunsisf():
    568e:	e8 94       	clt
    5690:	09 c0       	rjmp	.+18     	; 0x56a4 <__floatsisf+0x12>

00005692 <__floatsisf>:
    5692:	97 fb       	bst	r25, 7
    5694:	3e f4       	brtc	.+14     	; 0x56a4 <__floatsisf+0x12>
    5696:	90 95       	com	r25
    5698:	80 95       	com	r24
    569a:	70 95       	com	r23
    569c:	61 95       	neg	r22
    569e:	7f 4f       	sbci	r23, 0xFF	; 255
    56a0:	8f 4f       	sbci	r24, 0xFF	; 255
    56a2:	9f 4f       	sbci	r25, 0xFF	; 255
    56a4:	99 23       	and	r25, r25
    56a6:	a9 f0       	breq	.+42     	; 0x56d2 <__floatsisf+0x40>
    56a8:	f9 2f       	mov	r31, r25
    56aa:	96 e9       	ldi	r25, 0x96	; 150
    56ac:	bb 27       	eor	r27, r27
    56ae:	93 95       	inc	r25
    56b0:	f6 95       	lsr	r31
    56b2:	87 95       	ror	r24
    56b4:	77 95       	ror	r23
    56b6:	67 95       	ror	r22
    56b8:	b7 95       	ror	r27
    56ba:	f1 11       	cpse	r31, r1
    56bc:	f8 cf       	rjmp	.-16     	; 0x56ae <__floatsisf+0x1c>
    56be:	fa f4       	brpl	.+62     	; 0x56fe <__floatsisf+0x6c>
    56c0:	bb 0f       	add	r27, r27
    56c2:	11 f4       	brne	.+4      	; 0x56c8 <__floatsisf+0x36>
    56c4:	60 ff       	sbrs	r22, 0
    56c6:	1b c0       	rjmp	.+54     	; 0x56fe <__floatsisf+0x6c>
    56c8:	6f 5f       	subi	r22, 0xFF	; 255
    56ca:	7f 4f       	sbci	r23, 0xFF	; 255
    56cc:	8f 4f       	sbci	r24, 0xFF	; 255
    56ce:	9f 4f       	sbci	r25, 0xFF	; 255
    56d0:	16 c0       	rjmp	.+44     	; 0x56fe <__floatsisf+0x6c>
    56d2:	88 23       	and	r24, r24
    56d4:	11 f0       	breq	.+4      	; 0x56da <__floatsisf+0x48>
    56d6:	96 e9       	ldi	r25, 0x96	; 150
    56d8:	11 c0       	rjmp	.+34     	; 0x56fc <__floatsisf+0x6a>
    56da:	77 23       	and	r23, r23
    56dc:	21 f0       	breq	.+8      	; 0x56e6 <__floatsisf+0x54>
    56de:	9e e8       	ldi	r25, 0x8E	; 142
    56e0:	87 2f       	mov	r24, r23
    56e2:	76 2f       	mov	r23, r22
    56e4:	05 c0       	rjmp	.+10     	; 0x56f0 <__floatsisf+0x5e>
    56e6:	66 23       	and	r22, r22
    56e8:	71 f0       	breq	.+28     	; 0x5706 <__floatsisf+0x74>
    56ea:	96 e8       	ldi	r25, 0x86	; 134
    56ec:	86 2f       	mov	r24, r22
    56ee:	70 e0       	ldi	r23, 0x00	; 0
    56f0:	60 e0       	ldi	r22, 0x00	; 0
    56f2:	2a f0       	brmi	.+10     	; 0x56fe <__floatsisf+0x6c>
    56f4:	9a 95       	dec	r25
    56f6:	66 0f       	add	r22, r22
    56f8:	77 1f       	adc	r23, r23
    56fa:	88 1f       	adc	r24, r24
    56fc:	da f7       	brpl	.-10     	; 0x56f4 <__floatsisf+0x62>
    56fe:	88 0f       	add	r24, r24
    5700:	96 95       	lsr	r25
    5702:	87 95       	ror	r24
    5704:	97 f9       	bld	r25, 7
    5706:	08 95       	ret

00005708 <__fp_cmp>:
__fp_cmp():
    5708:	99 0f       	add	r25, r25
    570a:	00 08       	sbc	r0, r0
    570c:	55 0f       	add	r21, r21
    570e:	aa 0b       	sbc	r26, r26
    5710:	e0 e8       	ldi	r30, 0x80	; 128
    5712:	fe ef       	ldi	r31, 0xFE	; 254
    5714:	16 16       	cp	r1, r22
    5716:	17 06       	cpc	r1, r23
    5718:	e8 07       	cpc	r30, r24
    571a:	f9 07       	cpc	r31, r25
    571c:	c0 f0       	brcs	.+48     	; 0x574e <__fp_cmp+0x46>
    571e:	12 16       	cp	r1, r18
    5720:	13 06       	cpc	r1, r19
    5722:	e4 07       	cpc	r30, r20
    5724:	f5 07       	cpc	r31, r21
    5726:	98 f0       	brcs	.+38     	; 0x574e <__fp_cmp+0x46>
    5728:	62 1b       	sub	r22, r18
    572a:	73 0b       	sbc	r23, r19
    572c:	84 0b       	sbc	r24, r20
    572e:	95 0b       	sbc	r25, r21
    5730:	39 f4       	brne	.+14     	; 0x5740 <__fp_cmp+0x38>
    5732:	0a 26       	eor	r0, r26
    5734:	61 f0       	breq	.+24     	; 0x574e <__fp_cmp+0x46>
    5736:	23 2b       	or	r18, r19
    5738:	24 2b       	or	r18, r20
    573a:	25 2b       	or	r18, r21
    573c:	21 f4       	brne	.+8      	; 0x5746 <__fp_cmp+0x3e>
    573e:	08 95       	ret
    5740:	0a 26       	eor	r0, r26
    5742:	09 f4       	brne	.+2      	; 0x5746 <__fp_cmp+0x3e>
    5744:	a1 40       	sbci	r26, 0x01	; 1
    5746:	a6 95       	lsr	r26
    5748:	8f ef       	ldi	r24, 0xFF	; 255
    574a:	81 1d       	adc	r24, r1
    574c:	81 1d       	adc	r24, r1
    574e:	08 95       	ret

00005750 <__fp_inf>:
__fp_inf():
    5750:	97 f9       	bld	r25, 7
    5752:	9f 67       	ori	r25, 0x7F	; 127
    5754:	80 e8       	ldi	r24, 0x80	; 128
    5756:	70 e0       	ldi	r23, 0x00	; 0
    5758:	60 e0       	ldi	r22, 0x00	; 0
    575a:	08 95       	ret

0000575c <__fp_nan>:
__fp_nan():
    575c:	9f ef       	ldi	r25, 0xFF	; 255
    575e:	80 ec       	ldi	r24, 0xC0	; 192
    5760:	08 95       	ret

00005762 <__fp_pscA>:
__fp_pscA():
    5762:	00 24       	eor	r0, r0
    5764:	0a 94       	dec	r0
    5766:	16 16       	cp	r1, r22
    5768:	17 06       	cpc	r1, r23
    576a:	18 06       	cpc	r1, r24
    576c:	09 06       	cpc	r0, r25
    576e:	08 95       	ret

00005770 <__fp_pscB>:
__fp_pscB():
    5770:	00 24       	eor	r0, r0
    5772:	0a 94       	dec	r0
    5774:	12 16       	cp	r1, r18
    5776:	13 06       	cpc	r1, r19
    5778:	14 06       	cpc	r1, r20
    577a:	05 06       	cpc	r0, r21
    577c:	08 95       	ret

0000577e <__fp_round>:
__fp_round():
    577e:	09 2e       	mov	r0, r25
    5780:	03 94       	inc	r0
    5782:	00 0c       	add	r0, r0
    5784:	11 f4       	brne	.+4      	; 0x578a <__fp_round+0xc>
    5786:	88 23       	and	r24, r24
    5788:	52 f0       	brmi	.+20     	; 0x579e <__fp_round+0x20>
    578a:	bb 0f       	add	r27, r27
    578c:	40 f4       	brcc	.+16     	; 0x579e <__fp_round+0x20>
    578e:	bf 2b       	or	r27, r31
    5790:	11 f4       	brne	.+4      	; 0x5796 <__fp_round+0x18>
    5792:	60 ff       	sbrs	r22, 0
    5794:	04 c0       	rjmp	.+8      	; 0x579e <__fp_round+0x20>
    5796:	6f 5f       	subi	r22, 0xFF	; 255
    5798:	7f 4f       	sbci	r23, 0xFF	; 255
    579a:	8f 4f       	sbci	r24, 0xFF	; 255
    579c:	9f 4f       	sbci	r25, 0xFF	; 255
    579e:	08 95       	ret

000057a0 <__fp_split3>:
__fp_split3():
    57a0:	57 fd       	sbrc	r21, 7
    57a2:	90 58       	subi	r25, 0x80	; 128
    57a4:	44 0f       	add	r20, r20
    57a6:	55 1f       	adc	r21, r21
    57a8:	59 f0       	breq	.+22     	; 0x57c0 <__fp_splitA+0x10>
    57aa:	5f 3f       	cpi	r21, 0xFF	; 255
    57ac:	71 f0       	breq	.+28     	; 0x57ca <__fp_splitA+0x1a>
    57ae:	47 95       	ror	r20

000057b0 <__fp_splitA>:
    57b0:	88 0f       	add	r24, r24
    57b2:	97 fb       	bst	r25, 7
    57b4:	99 1f       	adc	r25, r25
    57b6:	61 f0       	breq	.+24     	; 0x57d0 <__fp_splitA+0x20>
    57b8:	9f 3f       	cpi	r25, 0xFF	; 255
    57ba:	79 f0       	breq	.+30     	; 0x57da <__fp_splitA+0x2a>
    57bc:	87 95       	ror	r24
    57be:	08 95       	ret
    57c0:	12 16       	cp	r1, r18
    57c2:	13 06       	cpc	r1, r19
    57c4:	14 06       	cpc	r1, r20
    57c6:	55 1f       	adc	r21, r21
    57c8:	f2 cf       	rjmp	.-28     	; 0x57ae <__fp_split3+0xe>
    57ca:	46 95       	lsr	r20
    57cc:	f1 df       	rcall	.-30     	; 0x57b0 <__fp_splitA>
    57ce:	08 c0       	rjmp	.+16     	; 0x57e0 <__fp_splitA+0x30>
    57d0:	16 16       	cp	r1, r22
    57d2:	17 06       	cpc	r1, r23
    57d4:	18 06       	cpc	r1, r24
    57d6:	99 1f       	adc	r25, r25
    57d8:	f1 cf       	rjmp	.-30     	; 0x57bc <__fp_splitA+0xc>
    57da:	86 95       	lsr	r24
    57dc:	71 05       	cpc	r23, r1
    57de:	61 05       	cpc	r22, r1
    57e0:	08 94       	sec
    57e2:	08 95       	ret

000057e4 <__fp_zero>:
__fp_zero():
    57e4:	e8 94       	clt

000057e6 <__fp_szero>:
    57e6:	bb 27       	eor	r27, r27
    57e8:	66 27       	eor	r22, r22
    57ea:	77 27       	eor	r23, r23
    57ec:	cb 01       	movw	r24, r22
    57ee:	97 f9       	bld	r25, 7
    57f0:	08 95       	ret

000057f2 <__mulsf3>:
__mulsf3():
    57f2:	0e 94 0c 2c 	call	0x5818	; 0x5818 <__mulsf3x>
    57f6:	0c 94 bf 2b 	jmp	0x577e	; 0x577e <__fp_round>
    57fa:	0e 94 b1 2b 	call	0x5762	; 0x5762 <__fp_pscA>
    57fe:	38 f0       	brcs	.+14     	; 0x580e <__mulsf3+0x1c>
    5800:	0e 94 b8 2b 	call	0x5770	; 0x5770 <__fp_pscB>
    5804:	20 f0       	brcs	.+8      	; 0x580e <__mulsf3+0x1c>
    5806:	95 23       	and	r25, r21
    5808:	11 f0       	breq	.+4      	; 0x580e <__mulsf3+0x1c>
    580a:	0c 94 a8 2b 	jmp	0x5750	; 0x5750 <__fp_inf>
    580e:	0c 94 ae 2b 	jmp	0x575c	; 0x575c <__fp_nan>
    5812:	11 24       	eor	r1, r1
    5814:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <__fp_szero>

00005818 <__mulsf3x>:
__mulsf3x():
    5818:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <__fp_split3>
    581c:	70 f3       	brcs	.-36     	; 0x57fa <__mulsf3+0x8>

0000581e <__mulsf3_pse>:
    581e:	95 9f       	mul	r25, r21
    5820:	c1 f3       	breq	.-16     	; 0x5812 <__mulsf3+0x20>
    5822:	95 0f       	add	r25, r21
    5824:	50 e0       	ldi	r21, 0x00	; 0
    5826:	55 1f       	adc	r21, r21
    5828:	62 9f       	mul	r22, r18
    582a:	f0 01       	movw	r30, r0
    582c:	72 9f       	mul	r23, r18
    582e:	bb 27       	eor	r27, r27
    5830:	f0 0d       	add	r31, r0
    5832:	b1 1d       	adc	r27, r1
    5834:	63 9f       	mul	r22, r19
    5836:	aa 27       	eor	r26, r26
    5838:	f0 0d       	add	r31, r0
    583a:	b1 1d       	adc	r27, r1
    583c:	aa 1f       	adc	r26, r26
    583e:	64 9f       	mul	r22, r20
    5840:	66 27       	eor	r22, r22
    5842:	b0 0d       	add	r27, r0
    5844:	a1 1d       	adc	r26, r1
    5846:	66 1f       	adc	r22, r22
    5848:	82 9f       	mul	r24, r18
    584a:	22 27       	eor	r18, r18
    584c:	b0 0d       	add	r27, r0
    584e:	a1 1d       	adc	r26, r1
    5850:	62 1f       	adc	r22, r18
    5852:	73 9f       	mul	r23, r19
    5854:	b0 0d       	add	r27, r0
    5856:	a1 1d       	adc	r26, r1
    5858:	62 1f       	adc	r22, r18
    585a:	83 9f       	mul	r24, r19
    585c:	a0 0d       	add	r26, r0
    585e:	61 1d       	adc	r22, r1
    5860:	22 1f       	adc	r18, r18
    5862:	74 9f       	mul	r23, r20
    5864:	33 27       	eor	r19, r19
    5866:	a0 0d       	add	r26, r0
    5868:	61 1d       	adc	r22, r1
    586a:	23 1f       	adc	r18, r19
    586c:	84 9f       	mul	r24, r20
    586e:	60 0d       	add	r22, r0
    5870:	21 1d       	adc	r18, r1
    5872:	82 2f       	mov	r24, r18
    5874:	76 2f       	mov	r23, r22
    5876:	6a 2f       	mov	r22, r26
    5878:	11 24       	eor	r1, r1
    587a:	9f 57       	subi	r25, 0x7F	; 127
    587c:	50 40       	sbci	r21, 0x00	; 0
    587e:	9a f0       	brmi	.+38     	; 0x58a6 <__mulsf3_pse+0x88>
    5880:	f1 f0       	breq	.+60     	; 0x58be <__mulsf3_pse+0xa0>
    5882:	88 23       	and	r24, r24
    5884:	4a f0       	brmi	.+18     	; 0x5898 <__mulsf3_pse+0x7a>
    5886:	ee 0f       	add	r30, r30
    5888:	ff 1f       	adc	r31, r31
    588a:	bb 1f       	adc	r27, r27
    588c:	66 1f       	adc	r22, r22
    588e:	77 1f       	adc	r23, r23
    5890:	88 1f       	adc	r24, r24
    5892:	91 50       	subi	r25, 0x01	; 1
    5894:	50 40       	sbci	r21, 0x00	; 0
    5896:	a9 f7       	brne	.-22     	; 0x5882 <__mulsf3_pse+0x64>
    5898:	9e 3f       	cpi	r25, 0xFE	; 254
    589a:	51 05       	cpc	r21, r1
    589c:	80 f0       	brcs	.+32     	; 0x58be <__mulsf3_pse+0xa0>
    589e:	0c 94 a8 2b 	jmp	0x5750	; 0x5750 <__fp_inf>
    58a2:	0c 94 f3 2b 	jmp	0x57e6	; 0x57e6 <__fp_szero>
    58a6:	5f 3f       	cpi	r21, 0xFF	; 255
    58a8:	e4 f3       	brlt	.-8      	; 0x58a2 <__mulsf3_pse+0x84>
    58aa:	98 3e       	cpi	r25, 0xE8	; 232
    58ac:	d4 f3       	brlt	.-12     	; 0x58a2 <__mulsf3_pse+0x84>
    58ae:	86 95       	lsr	r24
    58b0:	77 95       	ror	r23
    58b2:	67 95       	ror	r22
    58b4:	b7 95       	ror	r27
    58b6:	f7 95       	ror	r31
    58b8:	e7 95       	ror	r30
    58ba:	9f 5f       	subi	r25, 0xFF	; 255
    58bc:	c1 f7       	brne	.-16     	; 0x58ae <__mulsf3_pse+0x90>
    58be:	fe 2b       	or	r31, r30
    58c0:	88 0f       	add	r24, r24
    58c2:	91 1d       	adc	r25, r1
    58c4:	96 95       	lsr	r25
    58c6:	87 95       	ror	r24
    58c8:	97 f9       	bld	r25, 7
    58ca:	08 95       	ret

000058cc <__udivmodqi4>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    58cc:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    58ce:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    58d0:	04 c0       	rjmp	.+8      	; 0x58da <__udivmodqi4_ep>

000058d2 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    58d2:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    58d4:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    58d6:	08 f0       	brcs	.+2      	; 0x58da <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    58d8:	96 1b       	sub	r25, r22

000058da <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    58da:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    58dc:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    58de:	c9 f7       	brne	.-14     	; 0x58d2 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    58e0:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    58e2:	08 95       	ret

000058e4 <__divmodhi4>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    58e4:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    58e6:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    58e8:	16 f4       	brtc	.+4      	; 0x58ee <__divmodhi4+0xa>
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    58ea:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    58ec:	07 d0       	rcall	.+14     	; 0x58fc <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    58ee:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    58f0:	09 d0       	rcall	.+18     	; 0x5904 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    58f2:	0e 94 de 2c 	call	0x59bc	; 0x59bc <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    58f6:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    58f8:	05 d0       	rcall	.+10     	; 0x5904 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    58fa:	3e f4       	brtc	.+14     	; 0x590a <__divmodhi4_exit>

000058fc <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    58fc:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    58fe:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    5900:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    5902:	08 95       	ret

00005904 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    5904:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    5906:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    5908:	7f 4f       	sbci	r23, 0xFF	; 255

0000590a <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    590a:	08 95       	ret

0000590c <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    590c:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    590e:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    5910:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    5912:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    5914:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    5916:	0d c0       	rjmp	.+26     	; 0x5932 <__udivmodsi4_ep>

00005918 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    5918:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    591a:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    591c:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    591e:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    5920:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    5922:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    5924:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    5926:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    5928:	20 f0       	brcs	.+8      	; 0x5932 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    592a:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    592c:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    592e:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    5930:	f5 0b       	sbc	r31, r21

00005932 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    5932:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    5934:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    5936:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    5938:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    593a:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    593c:	69 f7       	brne	.-38     	; 0x5918 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    593e:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    5940:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    5942:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    5944:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    5946:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    5948:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    594a:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    594c:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    594e:	08 95       	ret

00005950 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    5950:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    5952:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    5954:	1e f4       	brtc	.+6      	; 0x595c <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    5956:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    5958:	0e 94 bf 2c 	call	0x597e	; 0x597e <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    595c:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    595e:	07 d0       	rcall	.+14     	; 0x596e <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    5960:	0e 94 86 2c 	call	0x590c	; 0x590c <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    5964:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    5966:	03 d0       	rcall	.+6      	; 0x596e <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    5968:	4e f4       	brtc	.+18     	; 0x597c <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    596a:	0c 94 bf 2c 	jmp	0x597e	; 0x597e <__negsi2>

0000596e <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    596e:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    5970:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    5972:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    5974:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    5976:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    5978:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    597a:	5f 4f       	sbci	r21, 0xFF	; 255

0000597c <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    597c:	08 95       	ret

0000597e <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    597e:	90 95       	com	r25
    5980:	80 95       	com	r24
    5982:	70 95       	com	r23
    5984:	61 95       	neg	r22
    5986:	7f 4f       	sbci	r23, 0xFF	; 255
    5988:	8f 4f       	sbci	r24, 0xFF	; 255
    598a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    598c:	08 95       	ret

0000598e <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    598e:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    5990:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    5992:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    5994:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    5996:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    5998:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    599a:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    599c:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    599e:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    59a0:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    59a2:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    59a4:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    59a6:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    59a8:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    59aa:	08 95       	ret

000059ac <__mulshisi3>:
__mulshisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    59ac:	b7 ff       	sbrs	r27, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    59ae:	0c 94 f8 2c 	jmp	0x59f0	; 0x59f0 <__muluhisi3>

000059b2 <__mulohisi3>:
__mulohisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    59b2:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    59b6:	82 1b       	sub	r24, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    59b8:	93 0b       	sbc	r25, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    59ba:	08 95       	ret

000059bc <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    59bc:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    59be:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    59c0:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    59c2:	07 c0       	rjmp	.+14     	; 0x59d2 <__udivmodhi4_ep>

000059c4 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    59c4:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    59c6:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    59c8:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    59ca:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    59cc:	10 f0       	brcs	.+4      	; 0x59d2 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    59ce:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    59d0:	b7 0b       	sbc	r27, r23

000059d2 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    59d2:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    59d4:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    59d6:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    59d8:	a9 f7       	brne	.-22     	; 0x59c4 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    59da:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    59dc:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    59de:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    59e0:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    59e2:	08 95       	ret

000059e4 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    59e4:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    59e6:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    59e8:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    59ea:	f4 91       	lpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    59ec:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    59ee:	09 94       	ijmp

000059f0 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    59f0:	0e 94 c7 2c 	call	0x598e	; 0x598e <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    59f4:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    59f6:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    59f8:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    59fa:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    59fc:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    59fe:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    5a00:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    5a02:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    5a04:	08 95       	ret

00005a06 <malloc>:
malloc():
    5a06:	0f 93       	push	r16
    5a08:	1f 93       	push	r17
    5a0a:	cf 93       	push	r28
    5a0c:	df 93       	push	r29
    5a0e:	82 30       	cpi	r24, 0x02	; 2
    5a10:	91 05       	cpc	r25, r1
    5a12:	10 f4       	brcc	.+4      	; 0x5a18 <malloc+0x12>
    5a14:	82 e0       	ldi	r24, 0x02	; 2
    5a16:	90 e0       	ldi	r25, 0x00	; 0
    5a18:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <__flp>
    5a1c:	f0 91 3b 07 	lds	r31, 0x073B	; 0x80073b <__flp+0x1>
    5a20:	30 e0       	ldi	r19, 0x00	; 0
    5a22:	20 e0       	ldi	r18, 0x00	; 0
    5a24:	b0 e0       	ldi	r27, 0x00	; 0
    5a26:	a0 e0       	ldi	r26, 0x00	; 0
    5a28:	30 97       	sbiw	r30, 0x00	; 0
    5a2a:	99 f4       	brne	.+38     	; 0x5a52 <malloc+0x4c>
    5a2c:	21 15       	cp	r18, r1
    5a2e:	31 05       	cpc	r19, r1
    5a30:	09 f4       	brne	.+2      	; 0x5a34 <malloc+0x2e>
    5a32:	4a c0       	rjmp	.+148    	; 0x5ac8 <malloc+0xc2>
    5a34:	28 1b       	sub	r18, r24
    5a36:	39 0b       	sbc	r19, r25
    5a38:	24 30       	cpi	r18, 0x04	; 4
    5a3a:	31 05       	cpc	r19, r1
    5a3c:	d8 f5       	brcc	.+118    	; 0x5ab4 <malloc+0xae>
    5a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a40:	9b 81       	ldd	r25, Y+3	; 0x03
    5a42:	61 15       	cp	r22, r1
    5a44:	71 05       	cpc	r23, r1
    5a46:	89 f1       	breq	.+98     	; 0x5aaa <malloc+0xa4>
    5a48:	fb 01       	movw	r30, r22
    5a4a:	93 83       	std	Z+3, r25	; 0x03
    5a4c:	82 83       	std	Z+2, r24	; 0x02
    5a4e:	fe 01       	movw	r30, r28
    5a50:	11 c0       	rjmp	.+34     	; 0x5a74 <malloc+0x6e>
    5a52:	40 81       	ld	r20, Z
    5a54:	51 81       	ldd	r21, Z+1	; 0x01
    5a56:	02 81       	ldd	r16, Z+2	; 0x02
    5a58:	13 81       	ldd	r17, Z+3	; 0x03
    5a5a:	48 17       	cp	r20, r24
    5a5c:	59 07       	cpc	r21, r25
    5a5e:	e0 f0       	brcs	.+56     	; 0x5a98 <malloc+0x92>
    5a60:	48 17       	cp	r20, r24
    5a62:	59 07       	cpc	r21, r25
    5a64:	99 f4       	brne	.+38     	; 0x5a8c <malloc+0x86>
    5a66:	10 97       	sbiw	r26, 0x00	; 0
    5a68:	61 f0       	breq	.+24     	; 0x5a82 <malloc+0x7c>
    5a6a:	12 96       	adiw	r26, 0x02	; 2
    5a6c:	0c 93       	st	X, r16
    5a6e:	12 97       	sbiw	r26, 0x02	; 2
    5a70:	13 96       	adiw	r26, 0x03	; 3
    5a72:	1c 93       	st	X, r17
    5a74:	32 96       	adiw	r30, 0x02	; 2
    5a76:	cf 01       	movw	r24, r30
    5a78:	df 91       	pop	r29
    5a7a:	cf 91       	pop	r28
    5a7c:	1f 91       	pop	r17
    5a7e:	0f 91       	pop	r16
    5a80:	08 95       	ret
    5a82:	00 93 3a 07 	sts	0x073A, r16	; 0x80073a <__flp>
    5a86:	10 93 3b 07 	sts	0x073B, r17	; 0x80073b <__flp+0x1>
    5a8a:	f4 cf       	rjmp	.-24     	; 0x5a74 <malloc+0x6e>
    5a8c:	21 15       	cp	r18, r1
    5a8e:	31 05       	cpc	r19, r1
    5a90:	51 f0       	breq	.+20     	; 0x5aa6 <malloc+0xa0>
    5a92:	42 17       	cp	r20, r18
    5a94:	53 07       	cpc	r21, r19
    5a96:	38 f0       	brcs	.+14     	; 0x5aa6 <malloc+0xa0>
    5a98:	a9 01       	movw	r20, r18
    5a9a:	db 01       	movw	r26, r22
    5a9c:	9a 01       	movw	r18, r20
    5a9e:	bd 01       	movw	r22, r26
    5aa0:	df 01       	movw	r26, r30
    5aa2:	f8 01       	movw	r30, r16
    5aa4:	c1 cf       	rjmp	.-126    	; 0x5a28 <malloc+0x22>
    5aa6:	ef 01       	movw	r28, r30
    5aa8:	f9 cf       	rjmp	.-14     	; 0x5a9c <malloc+0x96>
    5aaa:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <__flp+0x1>
    5aae:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <__flp>
    5ab2:	cd cf       	rjmp	.-102    	; 0x5a4e <malloc+0x48>
    5ab4:	fe 01       	movw	r30, r28
    5ab6:	e2 0f       	add	r30, r18
    5ab8:	f3 1f       	adc	r31, r19
    5aba:	81 93       	st	Z+, r24
    5abc:	91 93       	st	Z+, r25
    5abe:	22 50       	subi	r18, 0x02	; 2
    5ac0:	31 09       	sbc	r19, r1
    5ac2:	39 83       	std	Y+1, r19	; 0x01
    5ac4:	28 83       	st	Y, r18
    5ac6:	d7 cf       	rjmp	.-82     	; 0x5a76 <malloc+0x70>
    5ac8:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <__brkval>
    5acc:	30 91 39 07 	lds	r19, 0x0739	; 0x800739 <__brkval+0x1>
    5ad0:	23 2b       	or	r18, r19
    5ad2:	41 f4       	brne	.+16     	; 0x5ae4 <malloc+0xde>
    5ad4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5ad8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5adc:	30 93 39 07 	sts	0x0739, r19	; 0x800739 <__brkval+0x1>
    5ae0:	20 93 38 07 	sts	0x0738, r18	; 0x800738 <__brkval>
    5ae4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    5ae8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    5aec:	21 15       	cp	r18, r1
    5aee:	31 05       	cpc	r19, r1
    5af0:	41 f4       	brne	.+16     	; 0x5b02 <malloc+0xfc>
    5af2:	2d b7       	in	r18, 0x3d	; 61
    5af4:	3e b7       	in	r19, 0x3e	; 62
    5af6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5afa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5afe:	24 1b       	sub	r18, r20
    5b00:	35 0b       	sbc	r19, r21
    5b02:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <__brkval>
    5b06:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <__brkval+0x1>
    5b0a:	e2 17       	cp	r30, r18
    5b0c:	f3 07       	cpc	r31, r19
    5b0e:	a0 f4       	brcc	.+40     	; 0x5b38 <malloc+0x132>
    5b10:	2e 1b       	sub	r18, r30
    5b12:	3f 0b       	sbc	r19, r31
    5b14:	28 17       	cp	r18, r24
    5b16:	39 07       	cpc	r19, r25
    5b18:	78 f0       	brcs	.+30     	; 0x5b38 <malloc+0x132>
    5b1a:	ac 01       	movw	r20, r24
    5b1c:	4e 5f       	subi	r20, 0xFE	; 254
    5b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    5b20:	24 17       	cp	r18, r20
    5b22:	35 07       	cpc	r19, r21
    5b24:	48 f0       	brcs	.+18     	; 0x5b38 <malloc+0x132>
    5b26:	4e 0f       	add	r20, r30
    5b28:	5f 1f       	adc	r21, r31
    5b2a:	50 93 39 07 	sts	0x0739, r21	; 0x800739 <__brkval+0x1>
    5b2e:	40 93 38 07 	sts	0x0738, r20	; 0x800738 <__brkval>
    5b32:	81 93       	st	Z+, r24
    5b34:	91 93       	st	Z+, r25
    5b36:	9f cf       	rjmp	.-194    	; 0x5a76 <malloc+0x70>
    5b38:	f0 e0       	ldi	r31, 0x00	; 0
    5b3a:	e0 e0       	ldi	r30, 0x00	; 0
    5b3c:	9c cf       	rjmp	.-200    	; 0x5a76 <malloc+0x70>

00005b3e <free>:
free():
    5b3e:	cf 93       	push	r28
    5b40:	df 93       	push	r29
    5b42:	00 97       	sbiw	r24, 0x00	; 0
    5b44:	e9 f0       	breq	.+58     	; 0x5b80 <free+0x42>
    5b46:	fc 01       	movw	r30, r24
    5b48:	32 97       	sbiw	r30, 0x02	; 2
    5b4a:	13 82       	std	Z+3, r1	; 0x03
    5b4c:	12 82       	std	Z+2, r1	; 0x02
    5b4e:	a0 91 3a 07 	lds	r26, 0x073A	; 0x80073a <__flp>
    5b52:	b0 91 3b 07 	lds	r27, 0x073B	; 0x80073b <__flp+0x1>
    5b56:	ed 01       	movw	r28, r26
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	20 e0       	ldi	r18, 0x00	; 0
    5b5c:	10 97       	sbiw	r26, 0x00	; 0
    5b5e:	a1 f4       	brne	.+40     	; 0x5b88 <free+0x4a>
    5b60:	20 81       	ld	r18, Z
    5b62:	31 81       	ldd	r19, Z+1	; 0x01
    5b64:	82 0f       	add	r24, r18
    5b66:	93 1f       	adc	r25, r19
    5b68:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <__brkval>
    5b6c:	30 91 39 07 	lds	r19, 0x0739	; 0x800739 <__brkval+0x1>
    5b70:	28 17       	cp	r18, r24
    5b72:	39 07       	cpc	r19, r25
    5b74:	09 f0       	breq	.+2      	; 0x5b78 <free+0x3a>
    5b76:	61 c0       	rjmp	.+194    	; 0x5c3a <free+0xfc>
    5b78:	f0 93 39 07 	sts	0x0739, r31	; 0x800739 <__brkval+0x1>
    5b7c:	e0 93 38 07 	sts	0x0738, r30	; 0x800738 <__brkval>
    5b80:	df 91       	pop	r29
    5b82:	cf 91       	pop	r28
    5b84:	08 95       	ret
    5b86:	ea 01       	movw	r28, r20
    5b88:	ce 17       	cp	r28, r30
    5b8a:	df 07       	cpc	r29, r31
    5b8c:	e8 f5       	brcc	.+122    	; 0x5c08 <free+0xca>
    5b8e:	4a 81       	ldd	r20, Y+2	; 0x02
    5b90:	5b 81       	ldd	r21, Y+3	; 0x03
    5b92:	9e 01       	movw	r18, r28
    5b94:	41 15       	cp	r20, r1
    5b96:	51 05       	cpc	r21, r1
    5b98:	b1 f7       	brne	.-20     	; 0x5b86 <free+0x48>
    5b9a:	e9 01       	movw	r28, r18
    5b9c:	fb 83       	std	Y+3, r31	; 0x03
    5b9e:	ea 83       	std	Y+2, r30	; 0x02
    5ba0:	49 91       	ld	r20, Y+
    5ba2:	59 91       	ld	r21, Y+
    5ba4:	c4 0f       	add	r28, r20
    5ba6:	d5 1f       	adc	r29, r21
    5ba8:	ec 17       	cp	r30, r28
    5baa:	fd 07       	cpc	r31, r29
    5bac:	61 f4       	brne	.+24     	; 0x5bc6 <free+0x88>
    5bae:	80 81       	ld	r24, Z
    5bb0:	91 81       	ldd	r25, Z+1	; 0x01
    5bb2:	02 96       	adiw	r24, 0x02	; 2
    5bb4:	84 0f       	add	r24, r20
    5bb6:	95 1f       	adc	r25, r21
    5bb8:	e9 01       	movw	r28, r18
    5bba:	99 83       	std	Y+1, r25	; 0x01
    5bbc:	88 83       	st	Y, r24
    5bbe:	82 81       	ldd	r24, Z+2	; 0x02
    5bc0:	93 81       	ldd	r25, Z+3	; 0x03
    5bc2:	9b 83       	std	Y+3, r25	; 0x03
    5bc4:	8a 83       	std	Y+2, r24	; 0x02
    5bc6:	f0 e0       	ldi	r31, 0x00	; 0
    5bc8:	e0 e0       	ldi	r30, 0x00	; 0
    5bca:	12 96       	adiw	r26, 0x02	; 2
    5bcc:	8d 91       	ld	r24, X+
    5bce:	9c 91       	ld	r25, X
    5bd0:	13 97       	sbiw	r26, 0x03	; 3
    5bd2:	00 97       	sbiw	r24, 0x00	; 0
    5bd4:	b9 f5       	brne	.+110    	; 0x5c44 <free+0x106>
    5bd6:	2d 91       	ld	r18, X+
    5bd8:	3c 91       	ld	r19, X
    5bda:	11 97       	sbiw	r26, 0x01	; 1
    5bdc:	cd 01       	movw	r24, r26
    5bde:	02 96       	adiw	r24, 0x02	; 2
    5be0:	82 0f       	add	r24, r18
    5be2:	93 1f       	adc	r25, r19
    5be4:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <__brkval>
    5be8:	30 91 39 07 	lds	r19, 0x0739	; 0x800739 <__brkval+0x1>
    5bec:	28 17       	cp	r18, r24
    5bee:	39 07       	cpc	r19, r25
    5bf0:	39 f6       	brne	.-114    	; 0x5b80 <free+0x42>
    5bf2:	30 97       	sbiw	r30, 0x00	; 0
    5bf4:	51 f5       	brne	.+84     	; 0x5c4a <free+0x10c>
    5bf6:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <__flp+0x1>
    5bfa:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <__flp>
    5bfe:	b0 93 39 07 	sts	0x0739, r27	; 0x800739 <__brkval+0x1>
    5c02:	a0 93 38 07 	sts	0x0738, r26	; 0x800738 <__brkval>
    5c06:	bc cf       	rjmp	.-136    	; 0x5b80 <free+0x42>
    5c08:	d3 83       	std	Z+3, r29	; 0x03
    5c0a:	c2 83       	std	Z+2, r28	; 0x02
    5c0c:	40 81       	ld	r20, Z
    5c0e:	51 81       	ldd	r21, Z+1	; 0x01
    5c10:	84 0f       	add	r24, r20
    5c12:	95 1f       	adc	r25, r21
    5c14:	c8 17       	cp	r28, r24
    5c16:	d9 07       	cpc	r29, r25
    5c18:	61 f4       	brne	.+24     	; 0x5c32 <free+0xf4>
    5c1a:	4e 5f       	subi	r20, 0xFE	; 254
    5c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c1e:	88 81       	ld	r24, Y
    5c20:	99 81       	ldd	r25, Y+1	; 0x01
    5c22:	48 0f       	add	r20, r24
    5c24:	59 1f       	adc	r21, r25
    5c26:	51 83       	std	Z+1, r21	; 0x01
    5c28:	40 83       	st	Z, r20
    5c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    5c2e:	93 83       	std	Z+3, r25	; 0x03
    5c30:	82 83       	std	Z+2, r24	; 0x02
    5c32:	21 15       	cp	r18, r1
    5c34:	31 05       	cpc	r19, r1
    5c36:	09 f0       	breq	.+2      	; 0x5c3a <free+0xfc>
    5c38:	b0 cf       	rjmp	.-160    	; 0x5b9a <free+0x5c>
    5c3a:	f0 93 3b 07 	sts	0x073B, r31	; 0x80073b <__flp+0x1>
    5c3e:	e0 93 3a 07 	sts	0x073A, r30	; 0x80073a <__flp>
    5c42:	9e cf       	rjmp	.-196    	; 0x5b80 <free+0x42>
    5c44:	fd 01       	movw	r30, r26
    5c46:	dc 01       	movw	r26, r24
    5c48:	c0 cf       	rjmp	.-128    	; 0x5bca <free+0x8c>
    5c4a:	13 82       	std	Z+3, r1	; 0x03
    5c4c:	12 82       	std	Z+2, r1	; 0x02
    5c4e:	d7 cf       	rjmp	.-82     	; 0x5bfe <free+0xc0>

00005c50 <realloc>:
realloc():
    5c50:	b0 e0       	ldi	r27, 0x00	; 0
    5c52:	a0 e0       	ldi	r26, 0x00	; 0
    5c54:	ee e2       	ldi	r30, 0x2E	; 46
    5c56:	fe e2       	ldi	r31, 0x2E	; 46
    5c58:	0c 94 9d 31 	jmp	0x633a	; 0x633a <__prologue_saves__+0x4>
    5c5c:	8c 01       	movw	r16, r24
    5c5e:	00 97       	sbiw	r24, 0x00	; 0
    5c60:	51 f4       	brne	.+20     	; 0x5c76 <realloc+0x26>
    5c62:	cb 01       	movw	r24, r22
    5c64:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <malloc>
    5c68:	8c 01       	movw	r16, r24
    5c6a:	c8 01       	movw	r24, r16
    5c6c:	cd b7       	in	r28, 0x3d	; 61
    5c6e:	de b7       	in	r29, 0x3e	; 62
    5c70:	e0 e1       	ldi	r30, 0x10	; 16
    5c72:	0c 94 b9 31 	jmp	0x6372	; 0x6372 <__epilogue_restores__+0x4>
    5c76:	fc 01       	movw	r30, r24
    5c78:	e6 0f       	add	r30, r22
    5c7a:	f7 1f       	adc	r31, r23
    5c7c:	9c 01       	movw	r18, r24
    5c7e:	22 50       	subi	r18, 0x02	; 2
    5c80:	31 09       	sbc	r19, r1
    5c82:	e2 17       	cp	r30, r18
    5c84:	f3 07       	cpc	r31, r19
    5c86:	08 f4       	brcc	.+2      	; 0x5c8a <realloc+0x3a>
    5c88:	9d c0       	rjmp	.+314    	; 0x5dc4 <realloc+0x174>
    5c8a:	d9 01       	movw	r26, r18
    5c8c:	cd 91       	ld	r28, X+
    5c8e:	dc 91       	ld	r29, X
    5c90:	11 97       	sbiw	r26, 0x01	; 1
    5c92:	c6 17       	cp	r28, r22
    5c94:	d7 07       	cpc	r29, r23
    5c96:	98 f0       	brcs	.+38     	; 0x5cbe <realloc+0x6e>
    5c98:	c5 30       	cpi	r28, 0x05	; 5
    5c9a:	d1 05       	cpc	r29, r1
    5c9c:	30 f3       	brcs	.-52     	; 0x5c6a <realloc+0x1a>
    5c9e:	ce 01       	movw	r24, r28
    5ca0:	04 97       	sbiw	r24, 0x04	; 4
    5ca2:	86 17       	cp	r24, r22
    5ca4:	97 07       	cpc	r25, r23
    5ca6:	08 f3       	brcs	.-62     	; 0x5c6a <realloc+0x1a>
    5ca8:	c6 1b       	sub	r28, r22
    5caa:	d7 0b       	sbc	r29, r23
    5cac:	22 97       	sbiw	r28, 0x02	; 2
    5cae:	c1 93       	st	Z+, r28
    5cb0:	d1 93       	st	Z+, r29
    5cb2:	6d 93       	st	X+, r22
    5cb4:	7c 93       	st	X, r23
    5cb6:	cf 01       	movw	r24, r30
    5cb8:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <free>
    5cbc:	d6 cf       	rjmp	.-84     	; 0x5c6a <realloc+0x1a>
    5cbe:	5b 01       	movw	r10, r22
    5cc0:	ac 1a       	sub	r10, r28
    5cc2:	bd 0a       	sbc	r11, r29
    5cc4:	4c 01       	movw	r8, r24
    5cc6:	8c 0e       	add	r8, r28
    5cc8:	9d 1e       	adc	r9, r29
    5cca:	a0 91 3a 07 	lds	r26, 0x073A	; 0x80073a <__flp>
    5cce:	b0 91 3b 07 	lds	r27, 0x073B	; 0x80073b <__flp+0x1>
    5cd2:	51 2c       	mov	r5, r1
    5cd4:	41 2c       	mov	r4, r1
    5cd6:	f1 2c       	mov	r15, r1
    5cd8:	e1 2c       	mov	r14, r1
    5cda:	10 97       	sbiw	r26, 0x00	; 0
    5cdc:	31 f5       	brne	.+76     	; 0x5d2a <realloc+0xda>
    5cde:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <__brkval>
    5ce2:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <__brkval+0x1>
    5ce6:	88 15       	cp	r24, r8
    5ce8:	99 05       	cpc	r25, r9
    5cea:	09 f0       	breq	.+2      	; 0x5cee <realloc+0x9e>
    5cec:	5c c0       	rjmp	.+184    	; 0x5da6 <realloc+0x156>
    5cee:	46 16       	cp	r4, r22
    5cf0:	57 06       	cpc	r5, r23
    5cf2:	08 f0       	brcs	.+2      	; 0x5cf6 <realloc+0xa6>
    5cf4:	58 c0       	rjmp	.+176    	; 0x5da6 <realloc+0x156>
    5cf6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5cfa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5cfe:	00 97       	sbiw	r24, 0x00	; 0
    5d00:	41 f4       	brne	.+16     	; 0x5d12 <realloc+0xc2>
    5d02:	8d b7       	in	r24, 0x3d	; 61
    5d04:	9e b7       	in	r25, 0x3e	; 62
    5d06:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5d0a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5d0e:	84 1b       	sub	r24, r20
    5d10:	95 0b       	sbc	r25, r21
    5d12:	e8 17       	cp	r30, r24
    5d14:	f9 07       	cpc	r31, r25
    5d16:	08 f0       	brcs	.+2      	; 0x5d1a <realloc+0xca>
    5d18:	55 c0       	rjmp	.+170    	; 0x5dc4 <realloc+0x174>
    5d1a:	f0 93 39 07 	sts	0x0739, r31	; 0x800739 <__brkval+0x1>
    5d1e:	e0 93 38 07 	sts	0x0738, r30	; 0x800738 <__brkval>
    5d22:	f9 01       	movw	r30, r18
    5d24:	71 83       	std	Z+1, r23	; 0x01
    5d26:	60 83       	st	Z, r22
    5d28:	a0 cf       	rjmp	.-192    	; 0x5c6a <realloc+0x1a>
    5d2a:	8d 91       	ld	r24, X+
    5d2c:	9c 91       	ld	r25, X
    5d2e:	11 97       	sbiw	r26, 0x01	; 1
    5d30:	12 96       	adiw	r26, 0x02	; 2
    5d32:	6c 90       	ld	r6, X
    5d34:	12 97       	sbiw	r26, 0x02	; 2
    5d36:	13 96       	adiw	r26, 0x03	; 3
    5d38:	7c 90       	ld	r7, X
    5d3a:	13 97       	sbiw	r26, 0x03	; 3
    5d3c:	a8 15       	cp	r26, r8
    5d3e:	b9 05       	cpc	r27, r9
    5d40:	59 f5       	brne	.+86     	; 0x5d98 <realloc+0x148>
    5d42:	6c 01       	movw	r12, r24
    5d44:	42 e0       	ldi	r20, 0x02	; 2
    5d46:	c4 0e       	add	r12, r20
    5d48:	d1 1c       	adc	r13, r1
    5d4a:	ca 14       	cp	r12, r10
    5d4c:	db 04       	cpc	r13, r11
    5d4e:	20 f1       	brcs	.+72     	; 0x5d98 <realloc+0x148>
    5d50:	ac 01       	movw	r20, r24
    5d52:	4a 19       	sub	r20, r10
    5d54:	5b 09       	sbc	r21, r11
    5d56:	da 01       	movw	r26, r20
    5d58:	12 96       	adiw	r26, 0x02	; 2
    5d5a:	15 97       	sbiw	r26, 0x05	; 5
    5d5c:	80 f0       	brcs	.+32     	; 0x5d7e <realloc+0x12e>
    5d5e:	62 82       	std	Z+2, r6	; 0x02
    5d60:	73 82       	std	Z+3, r7	; 0x03
    5d62:	51 83       	std	Z+1, r21	; 0x01
    5d64:	40 83       	st	Z, r20
    5d66:	d9 01       	movw	r26, r18
    5d68:	6d 93       	st	X+, r22
    5d6a:	7c 93       	st	X, r23
    5d6c:	e1 14       	cp	r14, r1
    5d6e:	f1 04       	cpc	r15, r1
    5d70:	71 f0       	breq	.+28     	; 0x5d8e <realloc+0x13e>
    5d72:	d7 01       	movw	r26, r14
    5d74:	13 96       	adiw	r26, 0x03	; 3
    5d76:	fc 93       	st	X, r31
    5d78:	ee 93       	st	-X, r30
    5d7a:	12 97       	sbiw	r26, 0x02	; 2
    5d7c:	76 cf       	rjmp	.-276    	; 0x5c6a <realloc+0x1a>
    5d7e:	22 96       	adiw	r28, 0x02	; 2
    5d80:	8c 0f       	add	r24, r28
    5d82:	9d 1f       	adc	r25, r29
    5d84:	f9 01       	movw	r30, r18
    5d86:	91 83       	std	Z+1, r25	; 0x01
    5d88:	80 83       	st	Z, r24
    5d8a:	f3 01       	movw	r30, r6
    5d8c:	ef cf       	rjmp	.-34     	; 0x5d6c <realloc+0x11c>
    5d8e:	f0 93 3b 07 	sts	0x073B, r31	; 0x80073b <__flp+0x1>
    5d92:	e0 93 3a 07 	sts	0x073A, r30	; 0x80073a <__flp>
    5d96:	69 cf       	rjmp	.-302    	; 0x5c6a <realloc+0x1a>
    5d98:	48 16       	cp	r4, r24
    5d9a:	59 06       	cpc	r5, r25
    5d9c:	08 f4       	brcc	.+2      	; 0x5da0 <realloc+0x150>
    5d9e:	2c 01       	movw	r4, r24
    5da0:	7d 01       	movw	r14, r26
    5da2:	d3 01       	movw	r26, r6
    5da4:	9a cf       	rjmp	.-204    	; 0x5cda <realloc+0x8a>
    5da6:	cb 01       	movw	r24, r22
    5da8:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <malloc>
    5dac:	7c 01       	movw	r14, r24
    5dae:	00 97       	sbiw	r24, 0x00	; 0
    5db0:	49 f0       	breq	.+18     	; 0x5dc4 <realloc+0x174>
    5db2:	ae 01       	movw	r20, r28
    5db4:	b8 01       	movw	r22, r16
    5db6:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <memcpy>
    5dba:	c8 01       	movw	r24, r16
    5dbc:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <free>
    5dc0:	87 01       	movw	r16, r14
    5dc2:	53 cf       	rjmp	.-346    	; 0x5c6a <realloc+0x1a>
    5dc4:	10 e0       	ldi	r17, 0x00	; 0
    5dc6:	00 e0       	ldi	r16, 0x00	; 0
    5dc8:	50 cf       	rjmp	.-352    	; 0x5c6a <realloc+0x1a>

00005dca <abort>:
abort():
    5dca:	81 e0       	ldi	r24, 0x01	; 1
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	f8 94       	cli
    5dd0:	0c 94 d2 31 	jmp	0x63a4	; 0x63a4 <_exit>

00005dd4 <memcpy>:
memcpy():
    5dd4:	fb 01       	movw	r30, r22
    5dd6:	dc 01       	movw	r26, r24
    5dd8:	02 c0       	rjmp	.+4      	; 0x5dde <memcpy+0xa>
    5dda:	01 90       	ld	r0, Z+
    5ddc:	0d 92       	st	X+, r0
    5dde:	41 50       	subi	r20, 0x01	; 1
    5de0:	50 40       	sbci	r21, 0x00	; 0
    5de2:	d8 f7       	brcc	.-10     	; 0x5dda <memcpy+0x6>
    5de4:	08 95       	ret

00005de6 <strcpy>:
strcpy():
    5de6:	fb 01       	movw	r30, r22
    5de8:	dc 01       	movw	r26, r24
    5dea:	01 90       	ld	r0, Z+
    5dec:	0d 92       	st	X+, r0
    5dee:	00 20       	and	r0, r0
    5df0:	e1 f7       	brne	.-8      	; 0x5dea <strcpy+0x4>
    5df2:	08 95       	ret

00005df4 <sprintf>:
sprintf():
    5df4:	ae e0       	ldi	r26, 0x0E	; 14
    5df6:	b0 e0       	ldi	r27, 0x00	; 0
    5df8:	e0 e0       	ldi	r30, 0x00	; 0
    5dfa:	ff e2       	ldi	r31, 0x2F	; 47
    5dfc:	0c 94 a9 31 	jmp	0x6352	; 0x6352 <__prologue_saves__+0x1c>
    5e00:	0d 89       	ldd	r16, Y+21	; 0x15
    5e02:	1e 89       	ldd	r17, Y+22	; 0x16
    5e04:	86 e0       	ldi	r24, 0x06	; 6
    5e06:	8c 83       	std	Y+4, r24	; 0x04
    5e08:	1a 83       	std	Y+2, r17	; 0x02
    5e0a:	09 83       	std	Y+1, r16	; 0x01
    5e0c:	8f ef       	ldi	r24, 0xFF	; 255
    5e0e:	9f e7       	ldi	r25, 0x7F	; 127
    5e10:	9e 83       	std	Y+6, r25	; 0x06
    5e12:	8d 83       	std	Y+5, r24	; 0x05
    5e14:	ae 01       	movw	r20, r28
    5e16:	47 5e       	subi	r20, 0xE7	; 231
    5e18:	5f 4f       	sbci	r21, 0xFF	; 255
    5e1a:	6f 89       	ldd	r22, Y+23	; 0x17
    5e1c:	78 8d       	ldd	r23, Y+24	; 0x18
    5e1e:	ce 01       	movw	r24, r28
    5e20:	01 96       	adiw	r24, 0x01	; 1
    5e22:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <vfprintf>
    5e26:	2f 81       	ldd	r18, Y+7	; 0x07
    5e28:	38 85       	ldd	r19, Y+8	; 0x08
    5e2a:	02 0f       	add	r16, r18
    5e2c:	13 1f       	adc	r17, r19
    5e2e:	f8 01       	movw	r30, r16
    5e30:	10 82       	st	Z, r1
    5e32:	2e 96       	adiw	r28, 0x0e	; 14
    5e34:	e4 e0       	ldi	r30, 0x04	; 4
    5e36:	0c 94 c5 31 	jmp	0x638a	; 0x638a <__epilogue_restores__+0x1c>

00005e3a <vfprintf>:
vfprintf():
    5e3a:	ab e0       	ldi	r26, 0x0B	; 11
    5e3c:	b0 e0       	ldi	r27, 0x00	; 0
    5e3e:	e3 e2       	ldi	r30, 0x23	; 35
    5e40:	ff e2       	ldi	r31, 0x2F	; 47
    5e42:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__prologue_saves__>
    5e46:	7c 01       	movw	r14, r24
    5e48:	3b 01       	movw	r6, r22
    5e4a:	8a 01       	movw	r16, r20
    5e4c:	fc 01       	movw	r30, r24
    5e4e:	17 82       	std	Z+7, r1	; 0x07
    5e50:	16 82       	std	Z+6, r1	; 0x06
    5e52:	83 81       	ldd	r24, Z+3	; 0x03
    5e54:	81 ff       	sbrs	r24, 1
    5e56:	c8 c1       	rjmp	.+912    	; 0x61e8 <vfprintf+0x3ae>
    5e58:	ce 01       	movw	r24, r28
    5e5a:	01 96       	adiw	r24, 0x01	; 1
    5e5c:	5c 01       	movw	r10, r24
    5e5e:	f7 01       	movw	r30, r14
    5e60:	93 81       	ldd	r25, Z+3	; 0x03
    5e62:	f3 01       	movw	r30, r6
    5e64:	93 fd       	sbrc	r25, 3
    5e66:	85 91       	lpm	r24, Z+
    5e68:	93 ff       	sbrs	r25, 3
    5e6a:	81 91       	ld	r24, Z+
    5e6c:	3f 01       	movw	r6, r30
    5e6e:	88 23       	and	r24, r24
    5e70:	09 f4       	brne	.+2      	; 0x5e74 <vfprintf+0x3a>
    5e72:	53 c1       	rjmp	.+678    	; 0x611a <vfprintf+0x2e0>
    5e74:	85 32       	cpi	r24, 0x25	; 37
    5e76:	39 f4       	brne	.+14     	; 0x5e86 <vfprintf+0x4c>
    5e78:	93 fd       	sbrc	r25, 3
    5e7a:	85 91       	lpm	r24, Z+
    5e7c:	93 ff       	sbrs	r25, 3
    5e7e:	81 91       	ld	r24, Z+
    5e80:	3f 01       	movw	r6, r30
    5e82:	85 32       	cpi	r24, 0x25	; 37
    5e84:	29 f4       	brne	.+10     	; 0x5e90 <vfprintf+0x56>
    5e86:	b7 01       	movw	r22, r14
    5e88:	90 e0       	ldi	r25, 0x00	; 0
    5e8a:	0e 94 0d 31 	call	0x621a	; 0x621a <fputc>
    5e8e:	e7 cf       	rjmp	.-50     	; 0x5e5e <vfprintf+0x24>
    5e90:	91 2c       	mov	r9, r1
    5e92:	21 2c       	mov	r2, r1
    5e94:	31 2c       	mov	r3, r1
    5e96:	ff e1       	ldi	r31, 0x1F	; 31
    5e98:	f3 15       	cp	r31, r3
    5e9a:	38 f0       	brcs	.+14     	; 0x5eaa <vfprintf+0x70>
    5e9c:	8b 32       	cpi	r24, 0x2B	; 43
    5e9e:	11 f1       	breq	.+68     	; 0x5ee4 <vfprintf+0xaa>
    5ea0:	90 f4       	brcc	.+36     	; 0x5ec6 <vfprintf+0x8c>
    5ea2:	80 32       	cpi	r24, 0x20	; 32
    5ea4:	09 f1       	breq	.+66     	; 0x5ee8 <vfprintf+0xae>
    5ea6:	83 32       	cpi	r24, 0x23	; 35
    5ea8:	29 f1       	breq	.+74     	; 0x5ef4 <vfprintf+0xba>
    5eaa:	37 fc       	sbrc	r3, 7
    5eac:	3c c0       	rjmp	.+120    	; 0x5f26 <vfprintf+0xec>
    5eae:	20 ed       	ldi	r18, 0xD0	; 208
    5eb0:	28 0f       	add	r18, r24
    5eb2:	2a 30       	cpi	r18, 0x0A	; 10
    5eb4:	50 f5       	brcc	.+84     	; 0x5f0a <vfprintf+0xd0>
    5eb6:	36 fe       	sbrs	r3, 6
    5eb8:	20 c0       	rjmp	.+64     	; 0x5efa <vfprintf+0xc0>
    5eba:	8a e0       	ldi	r24, 0x0A	; 10
    5ebc:	98 9e       	mul	r9, r24
    5ebe:	20 0d       	add	r18, r0
    5ec0:	11 24       	eor	r1, r1
    5ec2:	92 2e       	mov	r9, r18
    5ec4:	06 c0       	rjmp	.+12     	; 0x5ed2 <vfprintf+0x98>
    5ec6:	8d 32       	cpi	r24, 0x2D	; 45
    5ec8:	91 f0       	breq	.+36     	; 0x5eee <vfprintf+0xb4>
    5eca:	80 33       	cpi	r24, 0x30	; 48
    5ecc:	71 f7       	brne	.-36     	; 0x5eaa <vfprintf+0x70>
    5ece:	68 94       	set
    5ed0:	30 f8       	bld	r3, 0
    5ed2:	f3 01       	movw	r30, r6
    5ed4:	93 fd       	sbrc	r25, 3
    5ed6:	85 91       	lpm	r24, Z+
    5ed8:	93 ff       	sbrs	r25, 3
    5eda:	81 91       	ld	r24, Z+
    5edc:	3f 01       	movw	r6, r30
    5ede:	81 11       	cpse	r24, r1
    5ee0:	da cf       	rjmp	.-76     	; 0x5e96 <vfprintf+0x5c>
    5ee2:	21 c0       	rjmp	.+66     	; 0x5f26 <vfprintf+0xec>
    5ee4:	68 94       	set
    5ee6:	31 f8       	bld	r3, 1
    5ee8:	68 94       	set
    5eea:	32 f8       	bld	r3, 2
    5eec:	f2 cf       	rjmp	.-28     	; 0x5ed2 <vfprintf+0x98>
    5eee:	68 94       	set
    5ef0:	33 f8       	bld	r3, 3
    5ef2:	ef cf       	rjmp	.-34     	; 0x5ed2 <vfprintf+0x98>
    5ef4:	68 94       	set
    5ef6:	34 f8       	bld	r3, 4
    5ef8:	ec cf       	rjmp	.-40     	; 0x5ed2 <vfprintf+0x98>
    5efa:	ea e0       	ldi	r30, 0x0A	; 10
    5efc:	2e 9e       	mul	r2, r30
    5efe:	20 0d       	add	r18, r0
    5f00:	11 24       	eor	r1, r1
    5f02:	22 2e       	mov	r2, r18
    5f04:	68 94       	set
    5f06:	35 f8       	bld	r3, 5
    5f08:	e4 cf       	rjmp	.-56     	; 0x5ed2 <vfprintf+0x98>
    5f0a:	8e 32       	cpi	r24, 0x2E	; 46
    5f0c:	29 f4       	brne	.+10     	; 0x5f18 <vfprintf+0xde>
    5f0e:	36 fc       	sbrc	r3, 6
    5f10:	04 c1       	rjmp	.+520    	; 0x611a <vfprintf+0x2e0>
    5f12:	68 94       	set
    5f14:	36 f8       	bld	r3, 6
    5f16:	dd cf       	rjmp	.-70     	; 0x5ed2 <vfprintf+0x98>
    5f18:	8c 36       	cpi	r24, 0x6C	; 108
    5f1a:	19 f4       	brne	.+6      	; 0x5f22 <vfprintf+0xe8>
    5f1c:	68 94       	set
    5f1e:	37 f8       	bld	r3, 7
    5f20:	d8 cf       	rjmp	.-80     	; 0x5ed2 <vfprintf+0x98>
    5f22:	88 36       	cpi	r24, 0x68	; 104
    5f24:	b1 f2       	breq	.-84     	; 0x5ed2 <vfprintf+0x98>
    5f26:	98 2f       	mov	r25, r24
    5f28:	9f 7d       	andi	r25, 0xDF	; 223
    5f2a:	95 54       	subi	r25, 0x45	; 69
    5f2c:	93 30       	cpi	r25, 0x03	; 3
    5f2e:	e0 f0       	brcs	.+56     	; 0x5f68 <vfprintf+0x12e>
    5f30:	83 36       	cpi	r24, 0x63	; 99
    5f32:	a1 f1       	breq	.+104    	; 0x5f9c <vfprintf+0x162>
    5f34:	83 37       	cpi	r24, 0x73	; 115
    5f36:	c1 f1       	breq	.+112    	; 0x5fa8 <vfprintf+0x16e>
    5f38:	83 35       	cpi	r24, 0x53	; 83
    5f3a:	09 f0       	breq	.+2      	; 0x5f3e <vfprintf+0x104>
    5f3c:	63 c0       	rjmp	.+198    	; 0x6004 <vfprintf+0x1ca>
    5f3e:	28 01       	movw	r4, r16
    5f40:	f2 e0       	ldi	r31, 0x02	; 2
    5f42:	4f 0e       	add	r4, r31
    5f44:	51 1c       	adc	r5, r1
    5f46:	f8 01       	movw	r30, r16
    5f48:	c0 80       	ld	r12, Z
    5f4a:	d1 80       	ldd	r13, Z+1	; 0x01
    5f4c:	69 2d       	mov	r22, r9
    5f4e:	70 e0       	ldi	r23, 0x00	; 0
    5f50:	36 fc       	sbrc	r3, 6
    5f52:	02 c0       	rjmp	.+4      	; 0x5f58 <vfprintf+0x11e>
    5f54:	6f ef       	ldi	r22, 0xFF	; 255
    5f56:	7f ef       	ldi	r23, 0xFF	; 255
    5f58:	c6 01       	movw	r24, r12
    5f5a:	0e 94 f7 30 	call	0x61ee	; 0x61ee <strnlen_P>
    5f5e:	4c 01       	movw	r8, r24
    5f60:	68 94       	set
    5f62:	37 f8       	bld	r3, 7
    5f64:	82 01       	movw	r16, r4
    5f66:	0a c0       	rjmp	.+20     	; 0x5f7c <vfprintf+0x142>
    5f68:	0c 5f       	subi	r16, 0xFC	; 252
    5f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    5f6c:	ff e3       	ldi	r31, 0x3F	; 63
    5f6e:	f9 83       	std	Y+1, r31	; 0x01
    5f70:	88 24       	eor	r8, r8
    5f72:	83 94       	inc	r8
    5f74:	91 2c       	mov	r9, r1
    5f76:	65 01       	movw	r12, r10
    5f78:	e8 94       	clt
    5f7a:	37 f8       	bld	r3, 7
    5f7c:	33 fe       	sbrs	r3, 3
    5f7e:	2d c0       	rjmp	.+90     	; 0x5fda <vfprintf+0x1a0>
    5f80:	52 2c       	mov	r5, r2
    5f82:	81 14       	cp	r8, r1
    5f84:	91 04       	cpc	r9, r1
    5f86:	71 f5       	brne	.+92     	; 0x5fe4 <vfprintf+0x1aa>
    5f88:	55 20       	and	r5, r5
    5f8a:	09 f4       	brne	.+2      	; 0x5f8e <vfprintf+0x154>
    5f8c:	68 cf       	rjmp	.-304    	; 0x5e5e <vfprintf+0x24>
    5f8e:	b7 01       	movw	r22, r14
    5f90:	80 e2       	ldi	r24, 0x20	; 32
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	0e 94 0d 31 	call	0x621a	; 0x621a <fputc>
    5f98:	5a 94       	dec	r5
    5f9a:	f6 cf       	rjmp	.-20     	; 0x5f88 <vfprintf+0x14e>
    5f9c:	f8 01       	movw	r30, r16
    5f9e:	80 81       	ld	r24, Z
    5fa0:	89 83       	std	Y+1, r24	; 0x01
    5fa2:	0e 5f       	subi	r16, 0xFE	; 254
    5fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    5fa6:	e4 cf       	rjmp	.-56     	; 0x5f70 <vfprintf+0x136>
    5fa8:	28 01       	movw	r4, r16
    5faa:	f2 e0       	ldi	r31, 0x02	; 2
    5fac:	4f 0e       	add	r4, r31
    5fae:	51 1c       	adc	r5, r1
    5fb0:	f8 01       	movw	r30, r16
    5fb2:	c0 80       	ld	r12, Z
    5fb4:	d1 80       	ldd	r13, Z+1	; 0x01
    5fb6:	69 2d       	mov	r22, r9
    5fb8:	70 e0       	ldi	r23, 0x00	; 0
    5fba:	36 fc       	sbrc	r3, 6
    5fbc:	02 c0       	rjmp	.+4      	; 0x5fc2 <vfprintf+0x188>
    5fbe:	6f ef       	ldi	r22, 0xFF	; 255
    5fc0:	7f ef       	ldi	r23, 0xFF	; 255
    5fc2:	c6 01       	movw	r24, r12
    5fc4:	0e 94 02 31 	call	0x6204	; 0x6204 <strnlen>
    5fc8:	4c 01       	movw	r8, r24
    5fca:	82 01       	movw	r16, r4
    5fcc:	d5 cf       	rjmp	.-86     	; 0x5f78 <vfprintf+0x13e>
    5fce:	b7 01       	movw	r22, r14
    5fd0:	80 e2       	ldi	r24, 0x20	; 32
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	0e 94 0d 31 	call	0x621a	; 0x621a <fputc>
    5fd8:	2a 94       	dec	r2
    5fda:	28 14       	cp	r2, r8
    5fdc:	19 04       	cpc	r1, r9
    5fde:	09 f0       	breq	.+2      	; 0x5fe2 <vfprintf+0x1a8>
    5fe0:	b0 f7       	brcc	.-20     	; 0x5fce <vfprintf+0x194>
    5fe2:	ce cf       	rjmp	.-100    	; 0x5f80 <vfprintf+0x146>
    5fe4:	f6 01       	movw	r30, r12
    5fe6:	37 fc       	sbrc	r3, 7
    5fe8:	85 91       	lpm	r24, Z+
    5fea:	37 fe       	sbrs	r3, 7
    5fec:	81 91       	ld	r24, Z+
    5fee:	6f 01       	movw	r12, r30
    5ff0:	b7 01       	movw	r22, r14
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	0e 94 0d 31 	call	0x621a	; 0x621a <fputc>
    5ff8:	51 10       	cpse	r5, r1
    5ffa:	5a 94       	dec	r5
    5ffc:	f1 e0       	ldi	r31, 0x01	; 1
    5ffe:	8f 1a       	sub	r8, r31
    6000:	91 08       	sbc	r9, r1
    6002:	bf cf       	rjmp	.-130    	; 0x5f82 <vfprintf+0x148>
    6004:	84 36       	cpi	r24, 0x64	; 100
    6006:	19 f0       	breq	.+6      	; 0x600e <vfprintf+0x1d4>
    6008:	89 36       	cpi	r24, 0x69	; 105
    600a:	09 f0       	breq	.+2      	; 0x600e <vfprintf+0x1d4>
    600c:	77 c0       	rjmp	.+238    	; 0x60fc <vfprintf+0x2c2>
    600e:	f8 01       	movw	r30, r16
    6010:	37 fe       	sbrs	r3, 7
    6012:	6b c0       	rjmp	.+214    	; 0x60ea <vfprintf+0x2b0>
    6014:	60 81       	ld	r22, Z
    6016:	71 81       	ldd	r23, Z+1	; 0x01
    6018:	82 81       	ldd	r24, Z+2	; 0x02
    601a:	93 81       	ldd	r25, Z+3	; 0x03
    601c:	0c 5f       	subi	r16, 0xFC	; 252
    601e:	1f 4f       	sbci	r17, 0xFF	; 255
    6020:	f3 2d       	mov	r31, r3
    6022:	ff 76       	andi	r31, 0x6F	; 111
    6024:	3f 2e       	mov	r3, r31
    6026:	97 ff       	sbrs	r25, 7
    6028:	09 c0       	rjmp	.+18     	; 0x603c <vfprintf+0x202>
    602a:	90 95       	com	r25
    602c:	80 95       	com	r24
    602e:	70 95       	com	r23
    6030:	61 95       	neg	r22
    6032:	7f 4f       	sbci	r23, 0xFF	; 255
    6034:	8f 4f       	sbci	r24, 0xFF	; 255
    6036:	9f 4f       	sbci	r25, 0xFF	; 255
    6038:	68 94       	set
    603a:	37 f8       	bld	r3, 7
    603c:	2a e0       	ldi	r18, 0x0A	; 10
    603e:	30 e0       	ldi	r19, 0x00	; 0
    6040:	a5 01       	movw	r20, r10
    6042:	0e 94 3d 31 	call	0x627a	; 0x627a <__ultoa_invert>
    6046:	c8 2e       	mov	r12, r24
    6048:	ca 18       	sub	r12, r10
    604a:	8c 2c       	mov	r8, r12
    604c:	43 2c       	mov	r4, r3
    604e:	36 fe       	sbrs	r3, 6
    6050:	0c c0       	rjmp	.+24     	; 0x606a <vfprintf+0x230>
    6052:	e8 94       	clt
    6054:	40 f8       	bld	r4, 0
    6056:	c9 14       	cp	r12, r9
    6058:	40 f4       	brcc	.+16     	; 0x606a <vfprintf+0x230>
    605a:	34 fe       	sbrs	r3, 4
    605c:	05 c0       	rjmp	.+10     	; 0x6068 <vfprintf+0x22e>
    605e:	32 fc       	sbrc	r3, 2
    6060:	03 c0       	rjmp	.+6      	; 0x6068 <vfprintf+0x22e>
    6062:	f3 2d       	mov	r31, r3
    6064:	fe 7e       	andi	r31, 0xEE	; 238
    6066:	4f 2e       	mov	r4, r31
    6068:	89 2c       	mov	r8, r9
    606a:	44 fe       	sbrs	r4, 4
    606c:	95 c0       	rjmp	.+298    	; 0x6198 <vfprintf+0x35e>
    606e:	fe 01       	movw	r30, r28
    6070:	ec 0d       	add	r30, r12
    6072:	f1 1d       	adc	r31, r1
    6074:	80 81       	ld	r24, Z
    6076:	80 33       	cpi	r24, 0x30	; 48
    6078:	09 f0       	breq	.+2      	; 0x607c <vfprintf+0x242>
    607a:	87 c0       	rjmp	.+270    	; 0x618a <vfprintf+0x350>
    607c:	24 2d       	mov	r18, r4
    607e:	29 7e       	andi	r18, 0xE9	; 233
    6080:	42 2e       	mov	r4, r18
    6082:	84 2d       	mov	r24, r4
    6084:	88 70       	andi	r24, 0x08	; 8
    6086:	58 2e       	mov	r5, r24
    6088:	43 fc       	sbrc	r4, 3
    608a:	95 c0       	rjmp	.+298    	; 0x61b6 <vfprintf+0x37c>
    608c:	40 fe       	sbrs	r4, 0
    608e:	8f c0       	rjmp	.+286    	; 0x61ae <vfprintf+0x374>
    6090:	9c 2c       	mov	r9, r12
    6092:	82 14       	cp	r8, r2
    6094:	18 f4       	brcc	.+6      	; 0x609c <vfprintf+0x262>
    6096:	2c 0c       	add	r2, r12
    6098:	92 2c       	mov	r9, r2
    609a:	98 18       	sub	r9, r8
    609c:	44 fe       	sbrs	r4, 4
    609e:	91 c0       	rjmp	.+290    	; 0x61c2 <vfprintf+0x388>
    60a0:	b7 01       	movw	r22, r14
    60a2:	80 e3       	ldi	r24, 0x30	; 48
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	0e 94 0d 31 	call	0x621a	; 0x621a <fputc>
    60aa:	42 fe       	sbrs	r4, 2
    60ac:	09 c0       	rjmp	.+18     	; 0x60c0 <vfprintf+0x286>
    60ae:	88 e7       	ldi	r24, 0x78	; 120
    60b0:	90 e0       	ldi	r25, 0x00	; 0
    60b2:	41 fe       	sbrs	r4, 1
    60b4:	02 c0       	rjmp	.+4      	; 0x60ba <vfprintf+0x280>
    60b6:	88 e5       	ldi	r24, 0x58	; 88
    60b8:	90 e0       	ldi	r25, 0x00	; 0
    60ba:	b7 01       	movw	r22, r14
    60bc:	0e 94 0d 31 	call	0x621a	; 0x621a <fputc>
    60c0:	c9 14       	cp	r12, r9
    60c2:	08 f4       	brcc	.+2      	; 0x60c6 <vfprintf+0x28c>
    60c4:	8a c0       	rjmp	.+276    	; 0x61da <vfprintf+0x3a0>
    60c6:	ca 94       	dec	r12
    60c8:	d1 2c       	mov	r13, r1
    60ca:	9f ef       	ldi	r25, 0xFF	; 255
    60cc:	c9 1a       	sub	r12, r25
    60ce:	d9 0a       	sbc	r13, r25
    60d0:	ca 0c       	add	r12, r10
    60d2:	db 1c       	adc	r13, r11
    60d4:	f6 01       	movw	r30, r12
    60d6:	82 91       	ld	r24, -Z
    60d8:	6f 01       	movw	r12, r30
    60da:	b7 01       	movw	r22, r14
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	0e 94 0d 31 	call	0x621a	; 0x621a <fputc>
    60e2:	ac 14       	cp	r10, r12
    60e4:	bd 04       	cpc	r11, r13
    60e6:	b1 f7       	brne	.-20     	; 0x60d4 <vfprintf+0x29a>
    60e8:	4f cf       	rjmp	.-354    	; 0x5f88 <vfprintf+0x14e>
    60ea:	60 81       	ld	r22, Z
    60ec:	71 81       	ldd	r23, Z+1	; 0x01
    60ee:	07 2e       	mov	r0, r23
    60f0:	00 0c       	add	r0, r0
    60f2:	88 0b       	sbc	r24, r24
    60f4:	99 0b       	sbc	r25, r25
    60f6:	0e 5f       	subi	r16, 0xFE	; 254
    60f8:	1f 4f       	sbci	r17, 0xFF	; 255
    60fa:	92 cf       	rjmp	.-220    	; 0x6020 <vfprintf+0x1e6>
    60fc:	d3 2c       	mov	r13, r3
    60fe:	e8 94       	clt
    6100:	d4 f8       	bld	r13, 4
    6102:	2a e0       	ldi	r18, 0x0A	; 10
    6104:	30 e0       	ldi	r19, 0x00	; 0
    6106:	85 37       	cpi	r24, 0x75	; 117
    6108:	39 f1       	breq	.+78     	; 0x6158 <vfprintf+0x31e>
    610a:	23 2d       	mov	r18, r3
    610c:	29 7f       	andi	r18, 0xF9	; 249
    610e:	d2 2e       	mov	r13, r18
    6110:	8f 36       	cpi	r24, 0x6F	; 111
    6112:	01 f1       	breq	.+64     	; 0x6154 <vfprintf+0x31a>
    6114:	48 f4       	brcc	.+18     	; 0x6128 <vfprintf+0x2ee>
    6116:	88 35       	cpi	r24, 0x58	; 88
    6118:	a9 f0       	breq	.+42     	; 0x6144 <vfprintf+0x30a>
    611a:	f7 01       	movw	r30, r14
    611c:	86 81       	ldd	r24, Z+6	; 0x06
    611e:	97 81       	ldd	r25, Z+7	; 0x07
    6120:	2b 96       	adiw	r28, 0x0b	; 11
    6122:	e2 e1       	ldi	r30, 0x12	; 18
    6124:	0c 94 b7 31 	jmp	0x636e	; 0x636e <__epilogue_restores__>
    6128:	80 37       	cpi	r24, 0x70	; 112
    612a:	49 f0       	breq	.+18     	; 0x613e <vfprintf+0x304>
    612c:	88 37       	cpi	r24, 0x78	; 120
    612e:	a9 f7       	brne	.-22     	; 0x611a <vfprintf+0x2e0>
    6130:	d4 fe       	sbrs	r13, 4
    6132:	02 c0       	rjmp	.+4      	; 0x6138 <vfprintf+0x2fe>
    6134:	68 94       	set
    6136:	d2 f8       	bld	r13, 2
    6138:	20 e1       	ldi	r18, 0x10	; 16
    613a:	30 e0       	ldi	r19, 0x00	; 0
    613c:	0d c0       	rjmp	.+26     	; 0x6158 <vfprintf+0x31e>
    613e:	68 94       	set
    6140:	d4 f8       	bld	r13, 4
    6142:	f6 cf       	rjmp	.-20     	; 0x6130 <vfprintf+0x2f6>
    6144:	34 fe       	sbrs	r3, 4
    6146:	03 c0       	rjmp	.+6      	; 0x614e <vfprintf+0x314>
    6148:	82 2f       	mov	r24, r18
    614a:	86 60       	ori	r24, 0x06	; 6
    614c:	d8 2e       	mov	r13, r24
    614e:	20 e1       	ldi	r18, 0x10	; 16
    6150:	32 e0       	ldi	r19, 0x02	; 2
    6152:	02 c0       	rjmp	.+4      	; 0x6158 <vfprintf+0x31e>
    6154:	28 e0       	ldi	r18, 0x08	; 8
    6156:	30 e0       	ldi	r19, 0x00	; 0
    6158:	f8 01       	movw	r30, r16
    615a:	d7 fe       	sbrs	r13, 7
    615c:	0f c0       	rjmp	.+30     	; 0x617c <vfprintf+0x342>
    615e:	60 81       	ld	r22, Z
    6160:	71 81       	ldd	r23, Z+1	; 0x01
    6162:	82 81       	ldd	r24, Z+2	; 0x02
    6164:	93 81       	ldd	r25, Z+3	; 0x03
    6166:	0c 5f       	subi	r16, 0xFC	; 252
    6168:	1f 4f       	sbci	r17, 0xFF	; 255
    616a:	a5 01       	movw	r20, r10
    616c:	0e 94 3d 31 	call	0x627a	; 0x627a <__ultoa_invert>
    6170:	c8 2e       	mov	r12, r24
    6172:	ca 18       	sub	r12, r10
    6174:	3d 2c       	mov	r3, r13
    6176:	e8 94       	clt
    6178:	37 f8       	bld	r3, 7
    617a:	67 cf       	rjmp	.-306    	; 0x604a <vfprintf+0x210>
    617c:	60 81       	ld	r22, Z
    617e:	71 81       	ldd	r23, Z+1	; 0x01
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	80 e0       	ldi	r24, 0x00	; 0
    6184:	0e 5f       	subi	r16, 0xFE	; 254
    6186:	1f 4f       	sbci	r17, 0xFF	; 255
    6188:	f0 cf       	rjmp	.-32     	; 0x616a <vfprintf+0x330>
    618a:	42 fc       	sbrc	r4, 2
    618c:	02 c0       	rjmp	.+4      	; 0x6192 <vfprintf+0x358>
    618e:	83 94       	inc	r8
    6190:	78 cf       	rjmp	.-272    	; 0x6082 <vfprintf+0x248>
    6192:	83 94       	inc	r8
    6194:	83 94       	inc	r8
    6196:	75 cf       	rjmp	.-278    	; 0x6082 <vfprintf+0x248>
    6198:	84 2d       	mov	r24, r4
    619a:	86 78       	andi	r24, 0x86	; 134
    619c:	09 f4       	brne	.+2      	; 0x61a0 <vfprintf+0x366>
    619e:	71 cf       	rjmp	.-286    	; 0x6082 <vfprintf+0x248>
    61a0:	f6 cf       	rjmp	.-20     	; 0x618e <vfprintf+0x354>
    61a2:	b7 01       	movw	r22, r14
    61a4:	80 e2       	ldi	r24, 0x20	; 32
    61a6:	90 e0       	ldi	r25, 0x00	; 0
    61a8:	0e 94 0d 31 	call	0x621a	; 0x621a <fputc>
    61ac:	83 94       	inc	r8
    61ae:	82 14       	cp	r8, r2
    61b0:	c0 f3       	brcs	.-16     	; 0x61a2 <vfprintf+0x368>
    61b2:	51 2c       	mov	r5, r1
    61b4:	73 cf       	rjmp	.-282    	; 0x609c <vfprintf+0x262>
    61b6:	52 2c       	mov	r5, r2
    61b8:	58 18       	sub	r5, r8
    61ba:	82 14       	cp	r8, r2
    61bc:	08 f4       	brcc	.+2      	; 0x61c0 <vfprintf+0x386>
    61be:	6e cf       	rjmp	.-292    	; 0x609c <vfprintf+0x262>
    61c0:	f8 cf       	rjmp	.-16     	; 0x61b2 <vfprintf+0x378>
    61c2:	84 2d       	mov	r24, r4
    61c4:	86 78       	andi	r24, 0x86	; 134
    61c6:	09 f4       	brne	.+2      	; 0x61ca <vfprintf+0x390>
    61c8:	7b cf       	rjmp	.-266    	; 0x60c0 <vfprintf+0x286>
    61ca:	8b e2       	ldi	r24, 0x2B	; 43
    61cc:	41 fe       	sbrs	r4, 1
    61ce:	80 e2       	ldi	r24, 0x20	; 32
    61d0:	47 fc       	sbrc	r4, 7
    61d2:	8d e2       	ldi	r24, 0x2D	; 45
    61d4:	b7 01       	movw	r22, r14
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	71 cf       	rjmp	.-286    	; 0x60bc <vfprintf+0x282>
    61da:	b7 01       	movw	r22, r14
    61dc:	80 e3       	ldi	r24, 0x30	; 48
    61de:	90 e0       	ldi	r25, 0x00	; 0
    61e0:	0e 94 0d 31 	call	0x621a	; 0x621a <fputc>
    61e4:	9a 94       	dec	r9
    61e6:	6c cf       	rjmp	.-296    	; 0x60c0 <vfprintf+0x286>
    61e8:	8f ef       	ldi	r24, 0xFF	; 255
    61ea:	9f ef       	ldi	r25, 0xFF	; 255
    61ec:	99 cf       	rjmp	.-206    	; 0x6120 <vfprintf+0x2e6>

000061ee <strnlen_P>:
strnlen_P():
    61ee:	fc 01       	movw	r30, r24
    61f0:	05 90       	lpm	r0, Z+
    61f2:	61 50       	subi	r22, 0x01	; 1
    61f4:	70 40       	sbci	r23, 0x00	; 0
    61f6:	01 10       	cpse	r0, r1
    61f8:	d8 f7       	brcc	.-10     	; 0x61f0 <strnlen_P+0x2>
    61fa:	80 95       	com	r24
    61fc:	90 95       	com	r25
    61fe:	8e 0f       	add	r24, r30
    6200:	9f 1f       	adc	r25, r31
    6202:	08 95       	ret

00006204 <strnlen>:
strnlen():
    6204:	fc 01       	movw	r30, r24
    6206:	61 50       	subi	r22, 0x01	; 1
    6208:	70 40       	sbci	r23, 0x00	; 0
    620a:	01 90       	ld	r0, Z+
    620c:	01 10       	cpse	r0, r1
    620e:	d8 f7       	brcc	.-10     	; 0x6206 <strnlen+0x2>
    6210:	80 95       	com	r24
    6212:	90 95       	com	r25
    6214:	8e 0f       	add	r24, r30
    6216:	9f 1f       	adc	r25, r31
    6218:	08 95       	ret

0000621a <fputc>:
fputc():
    621a:	0f 93       	push	r16
    621c:	1f 93       	push	r17
    621e:	cf 93       	push	r28
    6220:	df 93       	push	r29
    6222:	18 2f       	mov	r17, r24
    6224:	09 2f       	mov	r16, r25
    6226:	eb 01       	movw	r28, r22
    6228:	8b 81       	ldd	r24, Y+3	; 0x03
    622a:	81 fd       	sbrc	r24, 1
    622c:	09 c0       	rjmp	.+18     	; 0x6240 <fputc+0x26>
    622e:	1f ef       	ldi	r17, 0xFF	; 255
    6230:	0f ef       	ldi	r16, 0xFF	; 255
    6232:	81 2f       	mov	r24, r17
    6234:	90 2f       	mov	r25, r16
    6236:	df 91       	pop	r29
    6238:	cf 91       	pop	r28
    623a:	1f 91       	pop	r17
    623c:	0f 91       	pop	r16
    623e:	08 95       	ret
    6240:	82 ff       	sbrs	r24, 2
    6242:	14 c0       	rjmp	.+40     	; 0x626c <fputc+0x52>
    6244:	2e 81       	ldd	r18, Y+6	; 0x06
    6246:	3f 81       	ldd	r19, Y+7	; 0x07
    6248:	8c 81       	ldd	r24, Y+4	; 0x04
    624a:	9d 81       	ldd	r25, Y+5	; 0x05
    624c:	28 17       	cp	r18, r24
    624e:	39 07       	cpc	r19, r25
    6250:	3c f4       	brge	.+14     	; 0x6260 <fputc+0x46>
    6252:	e8 81       	ld	r30, Y
    6254:	f9 81       	ldd	r31, Y+1	; 0x01
    6256:	cf 01       	movw	r24, r30
    6258:	01 96       	adiw	r24, 0x01	; 1
    625a:	99 83       	std	Y+1, r25	; 0x01
    625c:	88 83       	st	Y, r24
    625e:	10 83       	st	Z, r17
    6260:	8e 81       	ldd	r24, Y+6	; 0x06
    6262:	9f 81       	ldd	r25, Y+7	; 0x07
    6264:	01 96       	adiw	r24, 0x01	; 1
    6266:	9f 83       	std	Y+7, r25	; 0x07
    6268:	8e 83       	std	Y+6, r24	; 0x06
    626a:	e3 cf       	rjmp	.-58     	; 0x6232 <fputc+0x18>
    626c:	e8 85       	ldd	r30, Y+8	; 0x08
    626e:	f9 85       	ldd	r31, Y+9	; 0x09
    6270:	81 2f       	mov	r24, r17
    6272:	09 95       	icall
    6274:	89 2b       	or	r24, r25
    6276:	a1 f3       	breq	.-24     	; 0x6260 <fputc+0x46>
    6278:	da cf       	rjmp	.-76     	; 0x622e <fputc+0x14>

0000627a <__ultoa_invert>:
__ultoa_invert():
    627a:	fa 01       	movw	r30, r20
    627c:	aa 27       	eor	r26, r26
    627e:	28 30       	cpi	r18, 0x08	; 8
    6280:	51 f1       	breq	.+84     	; 0x62d6 <__ultoa_invert+0x5c>
    6282:	20 31       	cpi	r18, 0x10	; 16
    6284:	81 f1       	breq	.+96     	; 0x62e6 <__ultoa_invert+0x6c>
    6286:	e8 94       	clt
    6288:	6f 93       	push	r22
    628a:	6e 7f       	andi	r22, 0xFE	; 254
    628c:	6e 5f       	subi	r22, 0xFE	; 254
    628e:	7f 4f       	sbci	r23, 0xFF	; 255
    6290:	8f 4f       	sbci	r24, 0xFF	; 255
    6292:	9f 4f       	sbci	r25, 0xFF	; 255
    6294:	af 4f       	sbci	r26, 0xFF	; 255
    6296:	b1 e0       	ldi	r27, 0x01	; 1
    6298:	3e d0       	rcall	.+124    	; 0x6316 <__ultoa_invert+0x9c>
    629a:	b4 e0       	ldi	r27, 0x04	; 4
    629c:	3c d0       	rcall	.+120    	; 0x6316 <__ultoa_invert+0x9c>
    629e:	67 0f       	add	r22, r23
    62a0:	78 1f       	adc	r23, r24
    62a2:	89 1f       	adc	r24, r25
    62a4:	9a 1f       	adc	r25, r26
    62a6:	a1 1d       	adc	r26, r1
    62a8:	68 0f       	add	r22, r24
    62aa:	79 1f       	adc	r23, r25
    62ac:	8a 1f       	adc	r24, r26
    62ae:	91 1d       	adc	r25, r1
    62b0:	a1 1d       	adc	r26, r1
    62b2:	6a 0f       	add	r22, r26
    62b4:	71 1d       	adc	r23, r1
    62b6:	81 1d       	adc	r24, r1
    62b8:	91 1d       	adc	r25, r1
    62ba:	a1 1d       	adc	r26, r1
    62bc:	20 d0       	rcall	.+64     	; 0x62fe <__ultoa_invert+0x84>
    62be:	09 f4       	brne	.+2      	; 0x62c2 <__ultoa_invert+0x48>
    62c0:	68 94       	set
    62c2:	3f 91       	pop	r19
    62c4:	2a e0       	ldi	r18, 0x0A	; 10
    62c6:	26 9f       	mul	r18, r22
    62c8:	11 24       	eor	r1, r1
    62ca:	30 19       	sub	r19, r0
    62cc:	30 5d       	subi	r19, 0xD0	; 208
    62ce:	31 93       	st	Z+, r19
    62d0:	de f6       	brtc	.-74     	; 0x6288 <__ultoa_invert+0xe>
    62d2:	cf 01       	movw	r24, r30
    62d4:	08 95       	ret
    62d6:	46 2f       	mov	r20, r22
    62d8:	47 70       	andi	r20, 0x07	; 7
    62da:	40 5d       	subi	r20, 0xD0	; 208
    62dc:	41 93       	st	Z+, r20
    62de:	b3 e0       	ldi	r27, 0x03	; 3
    62e0:	0f d0       	rcall	.+30     	; 0x6300 <__ultoa_invert+0x86>
    62e2:	c9 f7       	brne	.-14     	; 0x62d6 <__ultoa_invert+0x5c>
    62e4:	f6 cf       	rjmp	.-20     	; 0x62d2 <__ultoa_invert+0x58>
    62e6:	46 2f       	mov	r20, r22
    62e8:	4f 70       	andi	r20, 0x0F	; 15
    62ea:	40 5d       	subi	r20, 0xD0	; 208
    62ec:	4a 33       	cpi	r20, 0x3A	; 58
    62ee:	18 f0       	brcs	.+6      	; 0x62f6 <__ultoa_invert+0x7c>
    62f0:	49 5d       	subi	r20, 0xD9	; 217
    62f2:	31 fd       	sbrc	r19, 1
    62f4:	40 52       	subi	r20, 0x20	; 32
    62f6:	41 93       	st	Z+, r20
    62f8:	02 d0       	rcall	.+4      	; 0x62fe <__ultoa_invert+0x84>
    62fa:	a9 f7       	brne	.-22     	; 0x62e6 <__ultoa_invert+0x6c>
    62fc:	ea cf       	rjmp	.-44     	; 0x62d2 <__ultoa_invert+0x58>
    62fe:	b4 e0       	ldi	r27, 0x04	; 4
    6300:	a6 95       	lsr	r26
    6302:	97 95       	ror	r25
    6304:	87 95       	ror	r24
    6306:	77 95       	ror	r23
    6308:	67 95       	ror	r22
    630a:	ba 95       	dec	r27
    630c:	c9 f7       	brne	.-14     	; 0x6300 <__ultoa_invert+0x86>
    630e:	00 97       	sbiw	r24, 0x00	; 0
    6310:	61 05       	cpc	r22, r1
    6312:	71 05       	cpc	r23, r1
    6314:	08 95       	ret
    6316:	9b 01       	movw	r18, r22
    6318:	ac 01       	movw	r20, r24
    631a:	0a 2e       	mov	r0, r26
    631c:	06 94       	lsr	r0
    631e:	57 95       	ror	r21
    6320:	47 95       	ror	r20
    6322:	37 95       	ror	r19
    6324:	27 95       	ror	r18
    6326:	ba 95       	dec	r27
    6328:	c9 f7       	brne	.-14     	; 0x631c <__ultoa_invert+0xa2>
    632a:	62 0f       	add	r22, r18
    632c:	73 1f       	adc	r23, r19
    632e:	84 1f       	adc	r24, r20
    6330:	95 1f       	adc	r25, r21
    6332:	a0 1d       	adc	r26, r0
    6334:	08 95       	ret

00006336 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    6336:	2f 92       	push	r2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    6338:	3f 92       	push	r3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    633a:	4f 92       	push	r4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    633c:	5f 92       	push	r5
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    633e:	6f 92       	push	r6
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    6340:	7f 92       	push	r7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    6342:	8f 92       	push	r8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    6344:	9f 92       	push	r9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    6346:	af 92       	push	r10
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    6348:	bf 92       	push	r11
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    634a:	cf 92       	push	r12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    634c:	df 92       	push	r13
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    634e:	ef 92       	push	r14
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    6350:	ff 92       	push	r15
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    6352:	0f 93       	push	r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    6354:	1f 93       	push	r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    6356:	cf 93       	push	r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    6358:	df 93       	push	r29
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    635a:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    635c:	de b7       	in	r29, 0x3e	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    635e:	ca 1b       	sub	r28, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    6360:	db 0b       	sbc	r29, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    6362:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    6364:	f8 94       	cli
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    6366:	de bf       	out	0x3e, r29	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    6368:	0f be       	out	0x3f, r0	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    636a:	cd bf       	out	0x3d, r28	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    636c:	09 94       	ijmp

0000636e <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    636e:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    6370:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    6372:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    6374:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    6376:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    6378:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    637a:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    637c:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    637e:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    6380:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    6382:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    6384:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    6386:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    6388:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    638a:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    638c:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    638e:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    6390:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    6392:	ce 0f       	add	r28, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    6394:	d1 1d       	adc	r29, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    6396:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    6398:	f8 94       	cli
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    639a:	de bf       	out	0x3e, r29	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    639c:	0f be       	out	0x3f, r0	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    639e:	cd bf       	out	0x3d, r28	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    63a0:	ed 01       	movw	r28, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    63a2:	08 95       	ret

000063a4 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    63a4:	f8 94       	cli

000063a6 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    63a6:	ff cf       	rjmp	.-2      	; 0x63a6 <__stop_program>
